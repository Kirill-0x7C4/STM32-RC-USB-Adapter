{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"GPIO",
				"GPIO_PIN_6"
			],
			[
				"deta",
				"detailView"
			],
			[
				"list",
				"listObjects"
			],
			[
				"err",
				"Error"
			],
			[
				"vali",
				"validationExpressionObjects"
			],
			[
				"esca",
				"escapeRegexp"
			],
			[
				"va",
				"validationExpression"
			],
			[
				"export",
				"ExportHelper"
			],
			[
				"Expor",
				"ExportHelper"
			],
			[
				"release",
				"releaseRef"
			],
			[
				"exp",
				"export_data"
			],
			[
				"scre",
				"screenTags"
			],
			[
				"findCon",
				"_findConnected"
			],
			[
				"find",
				"findRulesConnectedToItem"
			],
			[
				"Rule",
				"RulesFindHelper"
			],
			[
				"listOf",
				"listOfValidationExpressions"
			],
			[
				"_stringifyva",
				"_stringifyValidationExpression"
			],
			[
				"_strin",
				"_stringifyValue"
			],
			[
				"V",
				"VALIDATION_EXPRESSION"
			],
			[
				"colu",
				"columnsRow"
			],
			[
				"ali",
				"ALIGNMENT_TOP_LEFT_WRAPPED"
			],
			[
				"C",
				"COLOR_PALETTE"
			],
			[
				"expa",
				"expandableKeys"
			],
			[
				"expan",
				"expandableItemObj"
			],
			[
				"IT",
				"ITEMS_TO_EXPAND"
			],
			[
				"Ite",
				"ITEMS_TO_HIDE"
			],
			[
				"fu",
				"formatFunc"
			],
			[
				"COL",
				"COLUMNS_PROPS_NAMED"
			],
			[
				"lists",
				"listsData"
			],
			[
				"strinfi",
				"stringifyOtherProps"
			],
			[
				"Rul",
				"RULES"
			],
			[
				"action",
				"action_connected"
			],
			[
				"act",
				"action_connected"
			],
			[
				"strin",
				"stringifyRules"
			],
			[
				"stringify",
				"stringifyValuesList"
			],
			[
				"val",
				"VALUES_LIST"
			],
			[
				"de",
				"DEFAULT_WIDTH"
			],
			[
				"versio",
				"versionCtrl"
			],
			[
				"bold",
				"boldFontStyle"
			],
			[
				"MSG",
				"MSG_EVENTS_TAB_UNAVAILABLE"
			],
			[
				"Pro",
				"PropertyCardStore"
			],
			[
				"prop",
				"propCardField"
			],
			[
				"_hand",
				"_handleChange"
			],
			[
				"word",
				"word-break"
			],
			[
				"brea",
				"break-all"
			],
			[
				"calle",
				"calleeName"
			],
			[
				"ruleObj",
				"ruleObjName"
			],
			[
				"name",
				"nameIndexes"
			],
			[
				"isinsi",
				"isInsideComplexNames"
			],
			[
				"isIni",
				"isInsideTags"
			],
			[
				"initia",
				"initialScreens"
			],
			[
				"deleteTe",
				"deleteTemplateX"
			],
			[
				"_remo",
				"_removeTemplateIdFromGroupSync"
			],
			[
				"key",
				"keysToRemove"
			],
			[
				"gro",
				"groupWrapper"
			],
			[
				"detail",
				"detailViewsWrappers"
			],
			[
				"grou",
				"groupWrapper"
			],
			[
				"connecte",
				"connected_entities"
			],
			[
				"TARG",
				"TARGET_SCREEN_ID"
			],
			[
				"conec",
				"connected_entities"
			],
			[
				"attach",
				"attached_entities"
			],
			[
				"group",
				"groupItemsWrapper"
			],
			[
				"get",
				"getById"
			],
			[
				"scree",
				"screenWrapper"
			],
			[
				"template",
				"templateObj"
			],
			[
				"muta",
				"mutationID"
			],
			[
				"_showDe",
				"_showDetachMessageBox"
			],
			[
				"disab",
				"disabledItems"
			],
			[
				"ser",
				"SERVER_LOGGER_NAME"
			],
			[
				"Cl",
				"CLIENT_LOGGER_NAME"
			],
			[
				"server",
				"server-logger"
			],
			[
				"serve",
				"serverLoggerParams"
			],
			[
				"supplier",
				"supplierList"
			],
			[
				"L",
				"LOGS_PATH"
			],
			[
				"NEW",
				"NEW_NAME_GRID"
			],
			[
				"change",
				"changedDataWrapper"
			],
			[
				"data",
				"dataWrapper"
			],
			[
				"Rena",
				"RenamingHelper"
			],
			[
				"initial",
				"initialTemplate"
			],
			[
				"remove",
				"removeRefsFromTemplate"
			],
			[
				"ini",
				"initialTemplate"
			],
			[
				"newDVite",
				"newDVItemId"
			],
			[
				"getAll",
				"getAllByType"
			],
			[
				"groupDV",
				"groupDVWrapper"
			],
			[
				"prefix",
				"GROUP_PREFIX"
			],
			[
				"eventsshouldapp",
				"events_should_appear_in_template"
			],
			[
				"TAR",
				"TARGET_SCREEN_ID"
			],
			[
				"new",
				"newDVIDs"
			],
			[
				"DV",
				"DV_should_NOT_appear_in_template"
			],
			[
				"old",
				"oldRulesIDs"
			],
			[
				"rules",
				"rules_should_NOT_appear_in_template"
			],
			[
				"rules_sh",
				"rules_should_appear_in_template"
			],
			[
				"rule",
				"rulesShouldNotAppear"
			],
			[
				"all",
				"allRuleIDs"
			],
			[
				"conne",
				"connected_entities"
			],
			[
				"Target",
				"TARGET_SCREEN_ID"
			],
			[
				"template_id",
				"template_ID"
			],
			[
				"detai",
				"detailViewsWrappers"
			],
			[
				"templa",
				"template_events"
			],
			[
				"eve",
				"eventsShouldNotAppear"
			],
			[
				"item",
				"itemToInsert"
			],
			[
				"update",
				"_updateAttachedEntities"
			],
			[
				"dv",
				"dvIdMappings"
			],
			[
				"_creat",
				"_createAllDetailViewsInDB"
			],
			[
				"d",
				"detailViewsWrappers"
			],
			[
				"Gri",
				"GridScreenModel"
			],
			[
				"changeNameIn",
				"changeNamesInRuleJS"
			],
			[
				"n",
				"nameChanges"
			],
			[
				"screen",
				"screenWrapper"
			],
			[
				"isIns",
				"isInsideTarget"
			],
			[
				"wrapp",
				"wrappedColumns"
			],
			[
				"temp",
				"templateItemsWrapper"
			],
			[
				"templatei",
				"templateItemsWrapper"
			],
			[
				"Scree",
				"RuleScreenMask"
			],
			[
				"replace",
				"replacements"
			],
			[
				"esprima",
				"esprimaTreeWalker"
			],
			[
				"parser",
				"parsedRulesConnected"
			],
			[
				"Rename",
				"RenameRulesHelper"
			],
			[
				"signature",
				"signature_control"
			],
			[
				"_run",
				"_runtimeFieldNames"
			],
			[
				"core",
				"correspondingFormValuesData"
			],
			[
				"prepare",
				"prepareLoadedFieldsData"
			],
			[
				"is",
				"isFormatted"
			],
			[
				"rege",
				"regExpObj"
			],
			[
				"filter",
				"filterSuspectedGridData"
			],
			[
				"getall",
				"getAllGridNames"
			],
			[
				"test",
				"testresult"
			],
			[
				"GridData",
				"GRID_DATA_INDEX_DIFF"
			]
		]
	},
	"buffers":
	[
		{
			"file": "Src/main.c",
			"settings":
			{
				"buffer_size": 8418,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "Searching 125 files for \"HAL_TIM_IC_CaptureCallback\"\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal_tim.h:\n 1724  void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim);\n 1725  void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim);\n 1726: void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim);\n 1727  void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim);\n 1728  void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim);\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_tim.c:\n 2740          if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)\n 2741          {\n 2742:           HAL_TIM_IC_CaptureCallback(htim);\n 2743          }\n 2744          /* Output compare event */\n ....\n 2762        if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)\n 2763        {\n 2764:         HAL_TIM_IC_CaptureCallback(htim);\n 2765        }\n 2766        /* Output compare event */\n ....\n 2783        if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)\n 2784        {\n 2785:         HAL_TIM_IC_CaptureCallback(htim);\n 2786        }\n 2787        /* Output compare event */\n ....\n 2804        if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)\n 2805        {\n 2806:         HAL_TIM_IC_CaptureCallback(htim);\n 2807        }\n 2808        /* Output compare event */\n ....\n 4255    * @retval None\n 4256    */\n 4257: __weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)\n 4258  {\n 4259    /* NOTE : This function Should not be modified, when the callback is needed,\n 4260:             the __HAL_TIM_IC_CaptureCallback could be implemented in the user file\n 4261     */\n 4262  }\n ....\n 4463    }\n 4464  \n 4465:   HAL_TIM_IC_CaptureCallback(htim);\n 4466  \n 4467    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\Backup\\main.c.bak:\n   61  \n   62  /* USER CODE BEGIN 0 */\n   63: void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)\n   64  {\n   65  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\main.c:\n   61  \n   62  /* USER CODE BEGIN 0 */\n   63: void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {\n   64  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);\n   65  	asm(\"NOP\");\n\nD:\\WorkSTM32\\stm32_PPM_F103\\stm32_PPM_F103\\Debug\\bin\\stm32_PPM_F103.elf:\n    <binary>\n\nD:\\WorkSTM32\\stm32_PPM_F103\\stm32_PPM_F103\\Debug\\bin\\stm32_PPM_F103.map:\n  566   .text.HAL_TIM_SlaveConfigSynchronization_IT\n  567                  0x00000000       0x6c ..\\obj\\stm32f1xx_hal_tim.o\n  568:  .text.HAL_TIM_IC_CaptureCallback\n  569                  0x00000000       0x14 ..\\obj\\stm32f1xx_hal_tim.o\n  570   .text.HAL_TIM_ErrorCallback\n  ...\n 1018                  0x08003370       0x34 ..\\obj\\usbd_core.o\n 1019                  0x08003370                USBD_LL_SOF\n 1020:  .text.HAL_TIM_IC_CaptureCallback\n 1021                  0x080033a4      0x164 ..\\obj\\main.o\n 1022:                 0x080033a4                HAL_TIM_IC_CaptureCallback\n 1023   .text.main     0x08003508       0x4c ..\\obj\\main.o\n 1024                  0x08003508                main\n\n15 matches across 6 files\n\n\nSearching 126 files for \"TIE\"\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f100xb.h:\n   31    *\n   32    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   33:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   34:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   35    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   36    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n   ..\n 2217  #define  DMA_CCR_EN                          ((uint32_t)0x00000001)        /*!< Channel enable */\n 2218  #define  DMA_CCR_TCIE                        ((uint32_t)0x00000002)        /*!< Transfer complete interrupt enable */\n 2219: #define  DMA_CCR_HTIE                        ((uint32_t)0x00000004)        /*!< Half Transfer interrupt enable */\n 2220  #define  DMA_CCR_TEIE                        ((uint32_t)0x00000008)        /*!< Transfer error interrupt enable */\n 2221  #define  DMA_CCR_DIR                         ((uint32_t)0x00000010)        /*!< Data transfer direction */\n ....\n 2806  #define  TIM_DIER_CC4IE                      ((uint32_t)0x00000010)            /*!<Capture/Compare 4 interrupt enable */\n 2807  #define  TIM_DIER_COMIE                      ((uint32_t)0x00000020)            /*!<COM interrupt enable */\n 2808: #define  TIM_DIER_TIE                        ((uint32_t)0x00000040)            /*!<Trigger interrupt enable */\n 2809  #define  TIM_DIER_BIE                        ((uint32_t)0x00000080)            /*!<Break interrupt enable */\n 2810  #define  TIM_DIER_UDE                        ((uint32_t)0x00000100)            /*!<Update DMA request enable */\n ....\n 3258  #define  SDIO_MASK_CCRCFAILIE                ((uint32_t)0x00000001)        /*!< Command CRC Fail Interrupt Enable */\n 3259  #define  SDIO_MASK_DCRCFAILIE                ((uint32_t)0x00000002)        /*!< Data CRC Fail Interrupt Enable */\n 3260: #define  SDIO_MASK_CTIMEOUTIE                ((uint32_t)0x00000004)        /*!< Command TimeOut Interrupt Enable */\n 3261: #define  SDIO_MASK_DTIMEOUTIE                ((uint32_t)0x00000008)        /*!< Data TimeOut Interrupt Enable */\n 3262  #define  SDIO_MASK_TXUNDERRIE                ((uint32_t)0x00000010)        /*!< Tx FIFO UnderRun Error Interrupt Enable */\n 3263  #define  SDIO_MASK_RXOVERRIE                 ((uint32_t)0x00000020)        /*!< Rx FIFO OverRun Error Interrupt Enable */\n 3264  #define  SDIO_MASK_CMDRENDIE                 ((uint32_t)0x00000040)        /*!< Command Response Received Interrupt Enable */\n 3265: #define  SDIO_MASK_CMDSENTIE                 ((uint32_t)0x00000080)        /*!< Command Sent Interrupt Enable */\n 3266  #define  SDIO_MASK_DATAENDIE                 ((uint32_t)0x00000100)        /*!< Data End Interrupt Enable */\n 3267  #define  SDIO_MASK_STBITERRIE                ((uint32_t)0x00000200)        /*!< Start Bit Error Interrupt Enable */\n 3268  #define  SDIO_MASK_DBCKENDIE                 ((uint32_t)0x00000400)        /*!< Data Block End Interrupt Enable */\n 3269: #define  SDIO_MASK_CMDACTIE                  ((uint32_t)0x00000800)        /*!< Command Acting Interrupt Enable */\n 3270: #define  SDIO_MASK_TXACTIE                   ((uint32_t)0x00001000)        /*!< Data Transmit Acting Interrupt Enable */\n 3271: #define  SDIO_MASK_RXACTIE                   ((uint32_t)0x00002000)        /*!< Data receive acting interrupt enabled */\n 3272  #define  SDIO_MASK_TXFIFOHEIE                ((uint32_t)0x00004000)        /*!< Tx FIFO Half Empty interrupt Enable */\n 3273  #define  SDIO_MASK_RXFIFOHFIE                ((uint32_t)0x00008000)        /*!< Rx FIFO Half Full interrupt Enable */\n ....\n 3278  #define  SDIO_MASK_TXDAVLIE                  ((uint32_t)0x00100000)        /*!< Data available in Tx FIFO interrupt Enable */\n 3279  #define  SDIO_MASK_RXDAVLIE                  ((uint32_t)0x00200000)        /*!< Data available in Rx FIFO interrupt Enable */\n 3280: #define  SDIO_MASK_SDIOITIE                  ((uint32_t)0x00400000)        /*!< SDIO Mode Interrupt Received interrupt Enable */\n 3281  #define  SDIO_MASK_CEATAENDIE                ((uint32_t)0x00800000)        /*!< CE-ATA command completion signal received Interrupt Enable */\n 3282  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f100xe.h:\n   31    *\n   32    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   33:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   34:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   35    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   36    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n   ..\n 2448  #define  DMA_CCR_EN                          ((uint32_t)0x00000001)        /*!< Channel enable */\n 2449  #define  DMA_CCR_TCIE                        ((uint32_t)0x00000002)        /*!< Transfer complete interrupt enable */\n 2450: #define  DMA_CCR_HTIE                        ((uint32_t)0x00000004)        /*!< Half Transfer interrupt enable */\n 2451  #define  DMA_CCR_TEIE                        ((uint32_t)0x00000008)        /*!< Transfer error interrupt enable */\n 2452  #define  DMA_CCR_DIR                         ((uint32_t)0x00000010)        /*!< Data transfer direction */\n ....\n 3037  #define  TIM_DIER_CC4IE                      ((uint32_t)0x00000010)            /*!<Capture/Compare 4 interrupt enable */\n 3038  #define  TIM_DIER_COMIE                      ((uint32_t)0x00000020)            /*!<COM interrupt enable */\n 3039: #define  TIM_DIER_TIE                        ((uint32_t)0x00000040)            /*!<Trigger interrupt enable */\n 3040  #define  TIM_DIER_BIE                        ((uint32_t)0x00000080)            /*!<Break interrupt enable */\n 3041  #define  TIM_DIER_UDE                        ((uint32_t)0x00000100)            /*!<Update DMA request enable */\n ....\n 3602  #define  SDIO_MASK_CCRCFAILIE                ((uint32_t)0x00000001)        /*!< Command CRC Fail Interrupt Enable */\n 3603  #define  SDIO_MASK_DCRCFAILIE                ((uint32_t)0x00000002)        /*!< Data CRC Fail Interrupt Enable */\n 3604: #define  SDIO_MASK_CTIMEOUTIE                ((uint32_t)0x00000004)        /*!< Command TimeOut Interrupt Enable */\n 3605: #define  SDIO_MASK_DTIMEOUTIE                ((uint32_t)0x00000008)        /*!< Data TimeOut Interrupt Enable */\n 3606  #define  SDIO_MASK_TXUNDERRIE                ((uint32_t)0x00000010)        /*!< Tx FIFO UnderRun Error Interrupt Enable */\n 3607  #define  SDIO_MASK_RXOVERRIE                 ((uint32_t)0x00000020)        /*!< Rx FIFO OverRun Error Interrupt Enable */\n 3608  #define  SDIO_MASK_CMDRENDIE                 ((uint32_t)0x00000040)        /*!< Command Response Received Interrupt Enable */\n 3609: #define  SDIO_MASK_CMDSENTIE                 ((uint32_t)0x00000080)        /*!< Command Sent Interrupt Enable */\n 3610  #define  SDIO_MASK_DATAENDIE                 ((uint32_t)0x00000100)        /*!< Data End Interrupt Enable */\n 3611  #define  SDIO_MASK_STBITERRIE                ((uint32_t)0x00000200)        /*!< Start Bit Error Interrupt Enable */\n 3612  #define  SDIO_MASK_DBCKENDIE                 ((uint32_t)0x00000400)        /*!< Data Block End Interrupt Enable */\n 3613: #define  SDIO_MASK_CMDACTIE                  ((uint32_t)0x00000800)        /*!< Command Acting Interrupt Enable */\n 3614: #define  SDIO_MASK_TXACTIE                   ((uint32_t)0x00001000)        /*!< Data Transmit Acting Interrupt Enable */\n 3615: #define  SDIO_MASK_RXACTIE                   ((uint32_t)0x00002000)        /*!< Data receive acting interrupt enabled */\n 3616  #define  SDIO_MASK_TXFIFOHEIE                ((uint32_t)0x00004000)        /*!< Tx FIFO Half Empty interrupt Enable */\n 3617  #define  SDIO_MASK_RXFIFOHFIE                ((uint32_t)0x00008000)        /*!< Rx FIFO Half Full interrupt Enable */\n ....\n 3622  #define  SDIO_MASK_TXDAVLIE                  ((uint32_t)0x00100000)        /*!< Data available in Tx FIFO interrupt Enable */\n 3623  #define  SDIO_MASK_RXDAVLIE                  ((uint32_t)0x00200000)        /*!< Data available in Rx FIFO interrupt Enable */\n 3624: #define  SDIO_MASK_SDIOITIE                  ((uint32_t)0x00400000)        /*!< SDIO Mode Interrupt Received interrupt Enable */\n 3625  #define  SDIO_MASK_CEATAENDIE                ((uint32_t)0x00800000)        /*!< CE-ATA command completion signal received Interrupt Enable */\n 3626  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f101x6.h:\n   31    *\n   32    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   33:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   34:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   35    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   36    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n   ..\n 2080  #define  DMA_CCR_EN                          ((uint32_t)0x00000001)        /*!< Channel enable */\n 2081  #define  DMA_CCR_TCIE                        ((uint32_t)0x00000002)        /*!< Transfer complete interrupt enable */\n 2082: #define  DMA_CCR_HTIE                        ((uint32_t)0x00000004)        /*!< Half Transfer interrupt enable */\n 2083  #define  DMA_CCR_TEIE                        ((uint32_t)0x00000008)        /*!< Transfer error interrupt enable */\n 2084  #define  DMA_CCR_DIR                         ((uint32_t)0x00000010)        /*!< Data transfer direction */\n ....\n 2530  #define  TIM_DIER_CC4IE                      ((uint32_t)0x00000010)            /*!<Capture/Compare 4 interrupt enable */\n 2531  #define  TIM_DIER_COMIE                      ((uint32_t)0x00000020)            /*!<COM interrupt enable */\n 2532: #define  TIM_DIER_TIE                        ((uint32_t)0x00000040)            /*!<Trigger interrupt enable */\n 2533  #define  TIM_DIER_BIE                        ((uint32_t)0x00000080)            /*!<Break interrupt enable */\n 2534  #define  TIM_DIER_UDE                        ((uint32_t)0x00000100)            /*!<Update DMA request enable */\n ....\n 2982  #define  SDIO_MASK_CCRCFAILIE                ((uint32_t)0x00000001)        /*!< Command CRC Fail Interrupt Enable */\n 2983  #define  SDIO_MASK_DCRCFAILIE                ((uint32_t)0x00000002)        /*!< Data CRC Fail Interrupt Enable */\n 2984: #define  SDIO_MASK_CTIMEOUTIE                ((uint32_t)0x00000004)        /*!< Command TimeOut Interrupt Enable */\n 2985: #define  SDIO_MASK_DTIMEOUTIE                ((uint32_t)0x00000008)        /*!< Data TimeOut Interrupt Enable */\n 2986  #define  SDIO_MASK_TXUNDERRIE                ((uint32_t)0x00000010)        /*!< Tx FIFO UnderRun Error Interrupt Enable */\n 2987  #define  SDIO_MASK_RXOVERRIE                 ((uint32_t)0x00000020)        /*!< Rx FIFO OverRun Error Interrupt Enable */\n 2988  #define  SDIO_MASK_CMDRENDIE                 ((uint32_t)0x00000040)        /*!< Command Response Received Interrupt Enable */\n 2989: #define  SDIO_MASK_CMDSENTIE                 ((uint32_t)0x00000080)        /*!< Command Sent Interrupt Enable */\n 2990  #define  SDIO_MASK_DATAENDIE                 ((uint32_t)0x00000100)        /*!< Data End Interrupt Enable */\n 2991  #define  SDIO_MASK_STBITERRIE                ((uint32_t)0x00000200)        /*!< Start Bit Error Interrupt Enable */\n 2992  #define  SDIO_MASK_DBCKENDIE                 ((uint32_t)0x00000400)        /*!< Data Block End Interrupt Enable */\n 2993: #define  SDIO_MASK_CMDACTIE                  ((uint32_t)0x00000800)        /*!< Command Acting Interrupt Enable */\n 2994: #define  SDIO_MASK_TXACTIE                   ((uint32_t)0x00001000)        /*!< Data Transmit Acting Interrupt Enable */\n 2995: #define  SDIO_MASK_RXACTIE                   ((uint32_t)0x00002000)        /*!< Data receive acting interrupt enabled */\n 2996  #define  SDIO_MASK_TXFIFOHEIE                ((uint32_t)0x00004000)        /*!< Tx FIFO Half Empty interrupt Enable */\n 2997  #define  SDIO_MASK_RXFIFOHFIE                ((uint32_t)0x00008000)        /*!< Rx FIFO Half Full interrupt Enable */\n ....\n 3002  #define  SDIO_MASK_TXDAVLIE                  ((uint32_t)0x00100000)        /*!< Data available in Tx FIFO interrupt Enable */\n 3003  #define  SDIO_MASK_RXDAVLIE                  ((uint32_t)0x00200000)        /*!< Data available in Rx FIFO interrupt Enable */\n 3004: #define  SDIO_MASK_SDIOITIE                  ((uint32_t)0x00400000)        /*!< SDIO Mode Interrupt Received interrupt Enable */\n 3005  #define  SDIO_MASK_CEATAENDIE                ((uint32_t)0x00800000)        /*!< CE-ATA command completion signal received Interrupt Enable */\n 3006  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f101xb.h:\n   31    *\n   32    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   33:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   34:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   35    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   36    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n   ..\n 2114  #define  DMA_CCR_EN                          ((uint32_t)0x00000001)        /*!< Channel enable */\n 2115  #define  DMA_CCR_TCIE                        ((uint32_t)0x00000002)        /*!< Transfer complete interrupt enable */\n 2116: #define  DMA_CCR_HTIE                        ((uint32_t)0x00000004)        /*!< Half Transfer interrupt enable */\n 2117  #define  DMA_CCR_TEIE                        ((uint32_t)0x00000008)        /*!< Transfer error interrupt enable */\n 2118  #define  DMA_CCR_DIR                         ((uint32_t)0x00000010)        /*!< Data transfer direction */\n ....\n 2564  #define  TIM_DIER_CC4IE                      ((uint32_t)0x00000010)            /*!<Capture/Compare 4 interrupt enable */\n 2565  #define  TIM_DIER_COMIE                      ((uint32_t)0x00000020)            /*!<COM interrupt enable */\n 2566: #define  TIM_DIER_TIE                        ((uint32_t)0x00000040)            /*!<Trigger interrupt enable */\n 2567  #define  TIM_DIER_BIE                        ((uint32_t)0x00000080)            /*!<Break interrupt enable */\n 2568  #define  TIM_DIER_UDE                        ((uint32_t)0x00000100)            /*!<Update DMA request enable */\n ....\n 3016  #define  SDIO_MASK_CCRCFAILIE                ((uint32_t)0x00000001)        /*!< Command CRC Fail Interrupt Enable */\n 3017  #define  SDIO_MASK_DCRCFAILIE                ((uint32_t)0x00000002)        /*!< Data CRC Fail Interrupt Enable */\n 3018: #define  SDIO_MASK_CTIMEOUTIE                ((uint32_t)0x00000004)        /*!< Command TimeOut Interrupt Enable */\n 3019: #define  SDIO_MASK_DTIMEOUTIE                ((uint32_t)0x00000008)        /*!< Data TimeOut Interrupt Enable */\n 3020  #define  SDIO_MASK_TXUNDERRIE                ((uint32_t)0x00000010)        /*!< Tx FIFO UnderRun Error Interrupt Enable */\n 3021  #define  SDIO_MASK_RXOVERRIE                 ((uint32_t)0x00000020)        /*!< Rx FIFO OverRun Error Interrupt Enable */\n 3022  #define  SDIO_MASK_CMDRENDIE                 ((uint32_t)0x00000040)        /*!< Command Response Received Interrupt Enable */\n 3023: #define  SDIO_MASK_CMDSENTIE                 ((uint32_t)0x00000080)        /*!< Command Sent Interrupt Enable */\n 3024  #define  SDIO_MASK_DATAENDIE                 ((uint32_t)0x00000100)        /*!< Data End Interrupt Enable */\n 3025  #define  SDIO_MASK_STBITERRIE                ((uint32_t)0x00000200)        /*!< Start Bit Error Interrupt Enable */\n 3026  #define  SDIO_MASK_DBCKENDIE                 ((uint32_t)0x00000400)        /*!< Data Block End Interrupt Enable */\n 3027: #define  SDIO_MASK_CMDACTIE                  ((uint32_t)0x00000800)        /*!< Command Acting Interrupt Enable */\n 3028: #define  SDIO_MASK_TXACTIE                   ((uint32_t)0x00001000)        /*!< Data Transmit Acting Interrupt Enable */\n 3029: #define  SDIO_MASK_RXACTIE                   ((uint32_t)0x00002000)        /*!< Data receive acting interrupt enabled */\n 3030  #define  SDIO_MASK_TXFIFOHEIE                ((uint32_t)0x00004000)        /*!< Tx FIFO Half Empty interrupt Enable */\n 3031  #define  SDIO_MASK_RXFIFOHFIE                ((uint32_t)0x00008000)        /*!< Rx FIFO Half Full interrupt Enable */\n ....\n 3036  #define  SDIO_MASK_TXDAVLIE                  ((uint32_t)0x00100000)        /*!< Data available in Tx FIFO interrupt Enable */\n 3037  #define  SDIO_MASK_RXDAVLIE                  ((uint32_t)0x00200000)        /*!< Data available in Rx FIFO interrupt Enable */\n 3038: #define  SDIO_MASK_SDIOITIE                  ((uint32_t)0x00400000)        /*!< SDIO Mode Interrupt Received interrupt Enable */\n 3039  #define  SDIO_MASK_CEATAENDIE                ((uint32_t)0x00800000)        /*!< CE-ATA command completion signal received Interrupt Enable */\n 3040  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f101xe.h:\n   31    *\n   32    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   33:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   34:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   35    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   36    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n   ..\n 2399  #define  DMA_CCR_EN                          ((uint32_t)0x00000001)        /*!< Channel enable */\n 2400  #define  DMA_CCR_TCIE                        ((uint32_t)0x00000002)        /*!< Transfer complete interrupt enable */\n 2401: #define  DMA_CCR_HTIE                        ((uint32_t)0x00000004)        /*!< Half Transfer interrupt enable */\n 2402  #define  DMA_CCR_TEIE                        ((uint32_t)0x00000008)        /*!< Transfer error interrupt enable */\n 2403  #define  DMA_CCR_DIR                         ((uint32_t)0x00000010)        /*!< Data transfer direction */\n ....\n 2938  #define  TIM_DIER_CC4IE                      ((uint32_t)0x00000010)            /*!<Capture/Compare 4 interrupt enable */\n 2939  #define  TIM_DIER_COMIE                      ((uint32_t)0x00000020)            /*!<COM interrupt enable */\n 2940: #define  TIM_DIER_TIE                        ((uint32_t)0x00000040)            /*!<Trigger interrupt enable */\n 2941  #define  TIM_DIER_BIE                        ((uint32_t)0x00000080)            /*!<Break interrupt enable */\n 2942  #define  TIM_DIER_UDE                        ((uint32_t)0x00000100)            /*!<Update DMA request enable */\n ....\n 3662  #define  SDIO_MASK_CCRCFAILIE                ((uint32_t)0x00000001)        /*!< Command CRC Fail Interrupt Enable */\n 3663  #define  SDIO_MASK_DCRCFAILIE                ((uint32_t)0x00000002)        /*!< Data CRC Fail Interrupt Enable */\n 3664: #define  SDIO_MASK_CTIMEOUTIE                ((uint32_t)0x00000004)        /*!< Command TimeOut Interrupt Enable */\n 3665: #define  SDIO_MASK_DTIMEOUTIE                ((uint32_t)0x00000008)        /*!< Data TimeOut Interrupt Enable */\n 3666  #define  SDIO_MASK_TXUNDERRIE                ((uint32_t)0x00000010)        /*!< Tx FIFO UnderRun Error Interrupt Enable */\n 3667  #define  SDIO_MASK_RXOVERRIE                 ((uint32_t)0x00000020)        /*!< Rx FIFO OverRun Error Interrupt Enable */\n 3668  #define  SDIO_MASK_CMDRENDIE                 ((uint32_t)0x00000040)        /*!< Command Response Received Interrupt Enable */\n 3669: #define  SDIO_MASK_CMDSENTIE                 ((uint32_t)0x00000080)        /*!< Command Sent Interrupt Enable */\n 3670  #define  SDIO_MASK_DATAENDIE                 ((uint32_t)0x00000100)        /*!< Data End Interrupt Enable */\n 3671  #define  SDIO_MASK_STBITERRIE                ((uint32_t)0x00000200)        /*!< Start Bit Error Interrupt Enable */\n 3672  #define  SDIO_MASK_DBCKENDIE                 ((uint32_t)0x00000400)        /*!< Data Block End Interrupt Enable */\n 3673: #define  SDIO_MASK_CMDACTIE                  ((uint32_t)0x00000800)        /*!< Command Acting Interrupt Enable */\n 3674: #define  SDIO_MASK_TXACTIE                   ((uint32_t)0x00001000)        /*!< Data Transmit Acting Interrupt Enable */\n 3675: #define  SDIO_MASK_RXACTIE                   ((uint32_t)0x00002000)        /*!< Data receive acting interrupt enabled */\n 3676  #define  SDIO_MASK_TXFIFOHEIE                ((uint32_t)0x00004000)        /*!< Tx FIFO Half Empty interrupt Enable */\n 3677  #define  SDIO_MASK_RXFIFOHFIE                ((uint32_t)0x00008000)        /*!< Rx FIFO Half Full interrupt Enable */\n ....\n 3682  #define  SDIO_MASK_TXDAVLIE                  ((uint32_t)0x00100000)        /*!< Data available in Tx FIFO interrupt Enable */\n 3683  #define  SDIO_MASK_RXDAVLIE                  ((uint32_t)0x00200000)        /*!< Data available in Rx FIFO interrupt Enable */\n 3684: #define  SDIO_MASK_SDIOITIE                  ((uint32_t)0x00400000)        /*!< SDIO Mode Interrupt Received interrupt Enable */\n 3685  #define  SDIO_MASK_CEATAENDIE                ((uint32_t)0x00800000)        /*!< CE-ATA command completion signal received Interrupt Enable */\n 3686  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f101xg.h:\n   31    *\n   32    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   33:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   34:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   35    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   36    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n   ..\n 2445  #define  DMA_CCR_EN                          ((uint32_t)0x00000001)        /*!< Channel enable */\n 2446  #define  DMA_CCR_TCIE                        ((uint32_t)0x00000002)        /*!< Transfer complete interrupt enable */\n 2447: #define  DMA_CCR_HTIE                        ((uint32_t)0x00000004)        /*!< Half Transfer interrupt enable */\n 2448  #define  DMA_CCR_TEIE                        ((uint32_t)0x00000008)        /*!< Transfer error interrupt enable */\n 2449  #define  DMA_CCR_DIR                         ((uint32_t)0x00000010)        /*!< Data transfer direction */\n ....\n 2991  #define  TIM_DIER_CC4IE                      ((uint32_t)0x00000010)            /*!<Capture/Compare 4 interrupt enable */\n 2992  #define  TIM_DIER_COMIE                      ((uint32_t)0x00000020)            /*!<COM interrupt enable */\n 2993: #define  TIM_DIER_TIE                        ((uint32_t)0x00000040)            /*!<Trigger interrupt enable */\n 2994  #define  TIM_DIER_BIE                        ((uint32_t)0x00000080)            /*!<Break interrupt enable */\n 2995  #define  TIM_DIER_UDE                        ((uint32_t)0x00000100)            /*!<Update DMA request enable */\n ....\n 3715  #define  SDIO_MASK_CCRCFAILIE                ((uint32_t)0x00000001)        /*!< Command CRC Fail Interrupt Enable */\n 3716  #define  SDIO_MASK_DCRCFAILIE                ((uint32_t)0x00000002)        /*!< Data CRC Fail Interrupt Enable */\n 3717: #define  SDIO_MASK_CTIMEOUTIE                ((uint32_t)0x00000004)        /*!< Command TimeOut Interrupt Enable */\n 3718: #define  SDIO_MASK_DTIMEOUTIE                ((uint32_t)0x00000008)        /*!< Data TimeOut Interrupt Enable */\n 3719  #define  SDIO_MASK_TXUNDERRIE                ((uint32_t)0x00000010)        /*!< Tx FIFO UnderRun Error Interrupt Enable */\n 3720  #define  SDIO_MASK_RXOVERRIE                 ((uint32_t)0x00000020)        /*!< Rx FIFO OverRun Error Interrupt Enable */\n 3721  #define  SDIO_MASK_CMDRENDIE                 ((uint32_t)0x00000040)        /*!< Command Response Received Interrupt Enable */\n 3722: #define  SDIO_MASK_CMDSENTIE                 ((uint32_t)0x00000080)        /*!< Command Sent Interrupt Enable */\n 3723  #define  SDIO_MASK_DATAENDIE                 ((uint32_t)0x00000100)        /*!< Data End Interrupt Enable */\n 3724  #define  SDIO_MASK_STBITERRIE                ((uint32_t)0x00000200)        /*!< Start Bit Error Interrupt Enable */\n 3725  #define  SDIO_MASK_DBCKENDIE                 ((uint32_t)0x00000400)        /*!< Data Block End Interrupt Enable */\n 3726: #define  SDIO_MASK_CMDACTIE                  ((uint32_t)0x00000800)        /*!< Command Acting Interrupt Enable */\n 3727: #define  SDIO_MASK_TXACTIE                   ((uint32_t)0x00001000)        /*!< Data Transmit Acting Interrupt Enable */\n 3728: #define  SDIO_MASK_RXACTIE                   ((uint32_t)0x00002000)        /*!< Data receive acting interrupt enabled */\n 3729  #define  SDIO_MASK_TXFIFOHEIE                ((uint32_t)0x00004000)        /*!< Tx FIFO Half Empty interrupt Enable */\n 3730  #define  SDIO_MASK_RXFIFOHFIE                ((uint32_t)0x00008000)        /*!< Rx FIFO Half Full interrupt Enable */\n ....\n 3735  #define  SDIO_MASK_TXDAVLIE                  ((uint32_t)0x00100000)        /*!< Data available in Tx FIFO interrupt Enable */\n 3736  #define  SDIO_MASK_RXDAVLIE                  ((uint32_t)0x00200000)        /*!< Data available in Rx FIFO interrupt Enable */\n 3737: #define  SDIO_MASK_SDIOITIE                  ((uint32_t)0x00400000)        /*!< SDIO Mode Interrupt Received interrupt Enable */\n 3738  #define  SDIO_MASK_CEATAENDIE                ((uint32_t)0x00800000)        /*!< CE-ATA command completion signal received Interrupt Enable */\n 3739  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f102x6.h:\n   31    *\n   32    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   33:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   34:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   35    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   36    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n   ..\n 2123  #define  DMA_CCR_EN                          ((uint32_t)0x00000001)        /*!< Channel enable */\n 2124  #define  DMA_CCR_TCIE                        ((uint32_t)0x00000002)        /*!< Transfer complete interrupt enable */\n 2125: #define  DMA_CCR_HTIE                        ((uint32_t)0x00000004)        /*!< Half Transfer interrupt enable */\n 2126  #define  DMA_CCR_TEIE                        ((uint32_t)0x00000008)        /*!< Transfer error interrupt enable */\n 2127  #define  DMA_CCR_DIR                         ((uint32_t)0x00000010)        /*!< Data transfer direction */\n ....\n 2573  #define  TIM_DIER_CC4IE                      ((uint32_t)0x00000010)            /*!<Capture/Compare 4 interrupt enable */\n 2574  #define  TIM_DIER_COMIE                      ((uint32_t)0x00000020)            /*!<COM interrupt enable */\n 2575: #define  TIM_DIER_TIE                        ((uint32_t)0x00000040)            /*!<Trigger interrupt enable */\n 2576  #define  TIM_DIER_BIE                        ((uint32_t)0x00000080)            /*!<Break interrupt enable */\n 2577  #define  TIM_DIER_UDE                        ((uint32_t)0x00000100)            /*!<Update DMA request enable */\n ....\n 3025  #define  SDIO_MASK_CCRCFAILIE                ((uint32_t)0x00000001)        /*!< Command CRC Fail Interrupt Enable */\n 3026  #define  SDIO_MASK_DCRCFAILIE                ((uint32_t)0x00000002)        /*!< Data CRC Fail Interrupt Enable */\n 3027: #define  SDIO_MASK_CTIMEOUTIE                ((uint32_t)0x00000004)        /*!< Command TimeOut Interrupt Enable */\n 3028: #define  SDIO_MASK_DTIMEOUTIE                ((uint32_t)0x00000008)        /*!< Data TimeOut Interrupt Enable */\n 3029  #define  SDIO_MASK_TXUNDERRIE                ((uint32_t)0x00000010)        /*!< Tx FIFO UnderRun Error Interrupt Enable */\n 3030  #define  SDIO_MASK_RXOVERRIE                 ((uint32_t)0x00000020)        /*!< Rx FIFO OverRun Error Interrupt Enable */\n 3031  #define  SDIO_MASK_CMDRENDIE                 ((uint32_t)0x00000040)        /*!< Command Response Received Interrupt Enable */\n 3032: #define  SDIO_MASK_CMDSENTIE                 ((uint32_t)0x00000080)        /*!< Command Sent Interrupt Enable */\n 3033  #define  SDIO_MASK_DATAENDIE                 ((uint32_t)0x00000100)        /*!< Data End Interrupt Enable */\n 3034  #define  SDIO_MASK_STBITERRIE                ((uint32_t)0x00000200)        /*!< Start Bit Error Interrupt Enable */\n 3035  #define  SDIO_MASK_DBCKENDIE                 ((uint32_t)0x00000400)        /*!< Data Block End Interrupt Enable */\n 3036: #define  SDIO_MASK_CMDACTIE                  ((uint32_t)0x00000800)        /*!< Command Acting Interrupt Enable */\n 3037: #define  SDIO_MASK_TXACTIE                   ((uint32_t)0x00001000)        /*!< Data Transmit Acting Interrupt Enable */\n 3038: #define  SDIO_MASK_RXACTIE                   ((uint32_t)0x00002000)        /*!< Data receive acting interrupt enabled */\n 3039  #define  SDIO_MASK_TXFIFOHEIE                ((uint32_t)0x00004000)        /*!< Tx FIFO Half Empty interrupt Enable */\n 3040  #define  SDIO_MASK_RXFIFOHFIE                ((uint32_t)0x00008000)        /*!< Rx FIFO Half Full interrupt Enable */\n ....\n 3045  #define  SDIO_MASK_TXDAVLIE                  ((uint32_t)0x00100000)        /*!< Data available in Tx FIFO interrupt Enable */\n 3046  #define  SDIO_MASK_RXDAVLIE                  ((uint32_t)0x00200000)        /*!< Data available in Rx FIFO interrupt Enable */\n 3047: #define  SDIO_MASK_SDIOITIE                  ((uint32_t)0x00400000)        /*!< SDIO Mode Interrupt Received interrupt Enable */\n 3048  #define  SDIO_MASK_CEATAENDIE                ((uint32_t)0x00800000)        /*!< CE-ATA command completion signal received Interrupt Enable */\n 3049  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f102xb.h:\n   31    *\n   32    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   33:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   34:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   35    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   36    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n   ..\n 2153  #define  DMA_CCR_EN                          ((uint32_t)0x00000001)        /*!< Channel enable */\n 2154  #define  DMA_CCR_TCIE                        ((uint32_t)0x00000002)        /*!< Transfer complete interrupt enable */\n 2155: #define  DMA_CCR_HTIE                        ((uint32_t)0x00000004)        /*!< Half Transfer interrupt enable */\n 2156  #define  DMA_CCR_TEIE                        ((uint32_t)0x00000008)        /*!< Transfer error interrupt enable */\n 2157  #define  DMA_CCR_DIR                         ((uint32_t)0x00000010)        /*!< Data transfer direction */\n ....\n 2603  #define  TIM_DIER_CC4IE                      ((uint32_t)0x00000010)            /*!<Capture/Compare 4 interrupt enable */\n 2604  #define  TIM_DIER_COMIE                      ((uint32_t)0x00000020)            /*!<COM interrupt enable */\n 2605: #define  TIM_DIER_TIE                        ((uint32_t)0x00000040)            /*!<Trigger interrupt enable */\n 2606  #define  TIM_DIER_BIE                        ((uint32_t)0x00000080)            /*!<Break interrupt enable */\n 2607  #define  TIM_DIER_UDE                        ((uint32_t)0x00000100)            /*!<Update DMA request enable */\n ....\n 3055  #define  SDIO_MASK_CCRCFAILIE                ((uint32_t)0x00000001)        /*!< Command CRC Fail Interrupt Enable */\n 3056  #define  SDIO_MASK_DCRCFAILIE                ((uint32_t)0x00000002)        /*!< Data CRC Fail Interrupt Enable */\n 3057: #define  SDIO_MASK_CTIMEOUTIE                ((uint32_t)0x00000004)        /*!< Command TimeOut Interrupt Enable */\n 3058: #define  SDIO_MASK_DTIMEOUTIE                ((uint32_t)0x00000008)        /*!< Data TimeOut Interrupt Enable */\n 3059  #define  SDIO_MASK_TXUNDERRIE                ((uint32_t)0x00000010)        /*!< Tx FIFO UnderRun Error Interrupt Enable */\n 3060  #define  SDIO_MASK_RXOVERRIE                 ((uint32_t)0x00000020)        /*!< Rx FIFO OverRun Error Interrupt Enable */\n 3061  #define  SDIO_MASK_CMDRENDIE                 ((uint32_t)0x00000040)        /*!< Command Response Received Interrupt Enable */\n 3062: #define  SDIO_MASK_CMDSENTIE                 ((uint32_t)0x00000080)        /*!< Command Sent Interrupt Enable */\n 3063  #define  SDIO_MASK_DATAENDIE                 ((uint32_t)0x00000100)        /*!< Data End Interrupt Enable */\n 3064  #define  SDIO_MASK_STBITERRIE                ((uint32_t)0x00000200)        /*!< Start Bit Error Interrupt Enable */\n 3065  #define  SDIO_MASK_DBCKENDIE                 ((uint32_t)0x00000400)        /*!< Data Block End Interrupt Enable */\n 3066: #define  SDIO_MASK_CMDACTIE                  ((uint32_t)0x00000800)        /*!< Command Acting Interrupt Enable */\n 3067: #define  SDIO_MASK_TXACTIE                   ((uint32_t)0x00001000)        /*!< Data Transmit Acting Interrupt Enable */\n 3068: #define  SDIO_MASK_RXACTIE                   ((uint32_t)0x00002000)        /*!< Data receive acting interrupt enabled */\n 3069  #define  SDIO_MASK_TXFIFOHEIE                ((uint32_t)0x00004000)        /*!< Tx FIFO Half Empty interrupt Enable */\n 3070  #define  SDIO_MASK_RXFIFOHFIE                ((uint32_t)0x00008000)        /*!< Rx FIFO Half Full interrupt Enable */\n ....\n 3075  #define  SDIO_MASK_TXDAVLIE                  ((uint32_t)0x00100000)        /*!< Data available in Tx FIFO interrupt Enable */\n 3076  #define  SDIO_MASK_RXDAVLIE                  ((uint32_t)0x00200000)        /*!< Data available in Rx FIFO interrupt Enable */\n 3077: #define  SDIO_MASK_SDIOITIE                  ((uint32_t)0x00400000)        /*!< SDIO Mode Interrupt Received interrupt Enable */\n 3078  #define  SDIO_MASK_CEATAENDIE                ((uint32_t)0x00800000)        /*!< CE-ATA command completion signal received Interrupt Enable */\n 3079  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f103x6.h:\n   31    *\n   32    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   33:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   34:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   35    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   36    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n   ..\n 2210  #define  DMA_CCR_EN                          ((uint32_t)0x00000001)        /*!< Channel enable */\n 2211  #define  DMA_CCR_TCIE                        ((uint32_t)0x00000002)        /*!< Transfer complete interrupt enable */\n 2212: #define  DMA_CCR_HTIE                        ((uint32_t)0x00000004)        /*!< Half Transfer interrupt enable */\n 2213  #define  DMA_CCR_TEIE                        ((uint32_t)0x00000008)        /*!< Transfer error interrupt enable */\n 2214  #define  DMA_CCR_DIR                         ((uint32_t)0x00000010)        /*!< Data transfer direction */\n ....\n 2667  #define  TIM_DIER_CC4IE                      ((uint32_t)0x00000010)            /*!<Capture/Compare 4 interrupt enable */\n 2668  #define  TIM_DIER_COMIE                      ((uint32_t)0x00000020)            /*!<COM interrupt enable */\n 2669: #define  TIM_DIER_TIE                        ((uint32_t)0x00000040)            /*!<Trigger interrupt enable */\n 2670  #define  TIM_DIER_BIE                        ((uint32_t)0x00000080)            /*!<Break interrupt enable */\n 2671  #define  TIM_DIER_UDE                        ((uint32_t)0x00000100)            /*!<Update DMA request enable */\n ....\n 3119  #define  SDIO_MASK_CCRCFAILIE                ((uint32_t)0x00000001)        /*!< Command CRC Fail Interrupt Enable */\n 3120  #define  SDIO_MASK_DCRCFAILIE                ((uint32_t)0x00000002)        /*!< Data CRC Fail Interrupt Enable */\n 3121: #define  SDIO_MASK_CTIMEOUTIE                ((uint32_t)0x00000004)        /*!< Command TimeOut Interrupt Enable */\n 3122: #define  SDIO_MASK_DTIMEOUTIE                ((uint32_t)0x00000008)        /*!< Data TimeOut Interrupt Enable */\n 3123  #define  SDIO_MASK_TXUNDERRIE                ((uint32_t)0x00000010)        /*!< Tx FIFO UnderRun Error Interrupt Enable */\n 3124  #define  SDIO_MASK_RXOVERRIE                 ((uint32_t)0x00000020)        /*!< Rx FIFO OverRun Error Interrupt Enable */\n 3125  #define  SDIO_MASK_CMDRENDIE                 ((uint32_t)0x00000040)        /*!< Command Response Received Interrupt Enable */\n 3126: #define  SDIO_MASK_CMDSENTIE                 ((uint32_t)0x00000080)        /*!< Command Sent Interrupt Enable */\n 3127  #define  SDIO_MASK_DATAENDIE                 ((uint32_t)0x00000100)        /*!< Data End Interrupt Enable */\n 3128  #define  SDIO_MASK_STBITERRIE                ((uint32_t)0x00000200)        /*!< Start Bit Error Interrupt Enable */\n 3129  #define  SDIO_MASK_DBCKENDIE                 ((uint32_t)0x00000400)        /*!< Data Block End Interrupt Enable */\n 3130: #define  SDIO_MASK_CMDACTIE                  ((uint32_t)0x00000800)        /*!< Command Acting Interrupt Enable */\n 3131: #define  SDIO_MASK_TXACTIE                   ((uint32_t)0x00001000)        /*!< Data Transmit Acting Interrupt Enable */\n 3132: #define  SDIO_MASK_RXACTIE                   ((uint32_t)0x00002000)        /*!< Data receive acting interrupt enabled */\n 3133  #define  SDIO_MASK_TXFIFOHEIE                ((uint32_t)0x00004000)        /*!< Tx FIFO Half Empty interrupt Enable */\n 3134  #define  SDIO_MASK_RXFIFOHFIE                ((uint32_t)0x00008000)        /*!< Rx FIFO Half Full interrupt Enable */\n ....\n 3139  #define  SDIO_MASK_TXDAVLIE                  ((uint32_t)0x00100000)        /*!< Data available in Tx FIFO interrupt Enable */\n 3140  #define  SDIO_MASK_RXDAVLIE                  ((uint32_t)0x00200000)        /*!< Data available in Rx FIFO interrupt Enable */\n 3141: #define  SDIO_MASK_SDIOITIE                  ((uint32_t)0x00400000)        /*!< SDIO Mode Interrupt Received interrupt Enable */\n 3142  #define  SDIO_MASK_CEATAENDIE                ((uint32_t)0x00800000)        /*!< CE-ATA command completion signal received Interrupt Enable */\n 3143  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f103xb.h:\n   31    *\n   32    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   33:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   34:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   35    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   36    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n   ..\n 2244  #define  DMA_CCR_EN                          ((uint32_t)0x00000001)        /*!< Channel enable */\n 2245  #define  DMA_CCR_TCIE                        ((uint32_t)0x00000002)        /*!< Transfer complete interrupt enable */\n 2246: #define  DMA_CCR_HTIE                        ((uint32_t)0x00000004)        /*!< Half Transfer interrupt enable */\n 2247  #define  DMA_CCR_TEIE                        ((uint32_t)0x00000008)        /*!< Transfer error interrupt enable */\n 2248  #define  DMA_CCR_DIR                         ((uint32_t)0x00000010)        /*!< Data transfer direction */\n ....\n 2701  #define  TIM_DIER_CC4IE                      ((uint32_t)0x00000010)            /*!<Capture/Compare 4 interrupt enable */\n 2702  #define  TIM_DIER_COMIE                      ((uint32_t)0x00000020)            /*!<COM interrupt enable */\n 2703: #define  TIM_DIER_TIE                        ((uint32_t)0x00000040)            /*!<Trigger interrupt enable */\n 2704  #define  TIM_DIER_BIE                        ((uint32_t)0x00000080)            /*!<Break interrupt enable */\n 2705  #define  TIM_DIER_UDE                        ((uint32_t)0x00000100)            /*!<Update DMA request enable */\n ....\n 3153  #define  SDIO_MASK_CCRCFAILIE                ((uint32_t)0x00000001)        /*!< Command CRC Fail Interrupt Enable */\n 3154  #define  SDIO_MASK_DCRCFAILIE                ((uint32_t)0x00000002)        /*!< Data CRC Fail Interrupt Enable */\n 3155: #define  SDIO_MASK_CTIMEOUTIE                ((uint32_t)0x00000004)        /*!< Command TimeOut Interrupt Enable */\n 3156: #define  SDIO_MASK_DTIMEOUTIE                ((uint32_t)0x00000008)        /*!< Data TimeOut Interrupt Enable */\n 3157  #define  SDIO_MASK_TXUNDERRIE                ((uint32_t)0x00000010)        /*!< Tx FIFO UnderRun Error Interrupt Enable */\n 3158  #define  SDIO_MASK_RXOVERRIE                 ((uint32_t)0x00000020)        /*!< Rx FIFO OverRun Error Interrupt Enable */\n 3159  #define  SDIO_MASK_CMDRENDIE                 ((uint32_t)0x00000040)        /*!< Command Response Received Interrupt Enable */\n 3160: #define  SDIO_MASK_CMDSENTIE                 ((uint32_t)0x00000080)        /*!< Command Sent Interrupt Enable */\n 3161  #define  SDIO_MASK_DATAENDIE                 ((uint32_t)0x00000100)        /*!< Data End Interrupt Enable */\n 3162  #define  SDIO_MASK_STBITERRIE                ((uint32_t)0x00000200)        /*!< Start Bit Error Interrupt Enable */\n 3163  #define  SDIO_MASK_DBCKENDIE                 ((uint32_t)0x00000400)        /*!< Data Block End Interrupt Enable */\n 3164: #define  SDIO_MASK_CMDACTIE                  ((uint32_t)0x00000800)        /*!< Command Acting Interrupt Enable */\n 3165: #define  SDIO_MASK_TXACTIE                   ((uint32_t)0x00001000)        /*!< Data Transmit Acting Interrupt Enable */\n 3166: #define  SDIO_MASK_RXACTIE                   ((uint32_t)0x00002000)        /*!< Data receive acting interrupt enabled */\n 3167  #define  SDIO_MASK_TXFIFOHEIE                ((uint32_t)0x00004000)        /*!< Tx FIFO Half Empty interrupt Enable */\n 3168  #define  SDIO_MASK_RXFIFOHFIE                ((uint32_t)0x00008000)        /*!< Rx FIFO Half Full interrupt Enable */\n ....\n 3173  #define  SDIO_MASK_TXDAVLIE                  ((uint32_t)0x00100000)        /*!< Data available in Tx FIFO interrupt Enable */\n 3174  #define  SDIO_MASK_RXDAVLIE                  ((uint32_t)0x00200000)        /*!< Data available in Rx FIFO interrupt Enable */\n 3175: #define  SDIO_MASK_SDIOITIE                  ((uint32_t)0x00400000)        /*!< SDIO Mode Interrupt Received interrupt Enable */\n 3176  #define  SDIO_MASK_CEATAENDIE                ((uint32_t)0x00800000)        /*!< CE-ATA command completion signal received Interrupt Enable */\n 3177  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f103xe.h:\n   31    *\n   32    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   33:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   34:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   35    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   36    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n   ..\n 2549  #define  DMA_CCR_EN                          ((uint32_t)0x00000001)        /*!< Channel enable */\n 2550  #define  DMA_CCR_TCIE                        ((uint32_t)0x00000002)        /*!< Transfer complete interrupt enable */\n 2551: #define  DMA_CCR_HTIE                        ((uint32_t)0x00000004)        /*!< Half Transfer interrupt enable */\n 2552  #define  DMA_CCR_TEIE                        ((uint32_t)0x00000008)        /*!< Transfer error interrupt enable */\n 2553  #define  DMA_CCR_DIR                         ((uint32_t)0x00000010)        /*!< Data transfer direction */\n ....\n 3095  #define  TIM_DIER_CC4IE                      ((uint32_t)0x00000010)            /*!<Capture/Compare 4 interrupt enable */\n 3096  #define  TIM_DIER_COMIE                      ((uint32_t)0x00000020)            /*!<COM interrupt enable */\n 3097: #define  TIM_DIER_TIE                        ((uint32_t)0x00000040)            /*!<Trigger interrupt enable */\n 3098  #define  TIM_DIER_BIE                        ((uint32_t)0x00000080)            /*!<Break interrupt enable */\n 3099  #define  TIM_DIER_UDE                        ((uint32_t)0x00000100)            /*!<Update DMA request enable */\n ....\n 3819  #define  SDIO_MASK_CCRCFAILIE                ((uint32_t)0x00000001)        /*!< Command CRC Fail Interrupt Enable */\n 3820  #define  SDIO_MASK_DCRCFAILIE                ((uint32_t)0x00000002)        /*!< Data CRC Fail Interrupt Enable */\n 3821: #define  SDIO_MASK_CTIMEOUTIE                ((uint32_t)0x00000004)        /*!< Command TimeOut Interrupt Enable */\n 3822: #define  SDIO_MASK_DTIMEOUTIE                ((uint32_t)0x00000008)        /*!< Data TimeOut Interrupt Enable */\n 3823  #define  SDIO_MASK_TXUNDERRIE                ((uint32_t)0x00000010)        /*!< Tx FIFO UnderRun Error Interrupt Enable */\n 3824  #define  SDIO_MASK_RXOVERRIE                 ((uint32_t)0x00000020)        /*!< Rx FIFO OverRun Error Interrupt Enable */\n 3825  #define  SDIO_MASK_CMDRENDIE                 ((uint32_t)0x00000040)        /*!< Command Response Received Interrupt Enable */\n 3826: #define  SDIO_MASK_CMDSENTIE                 ((uint32_t)0x00000080)        /*!< Command Sent Interrupt Enable */\n 3827  #define  SDIO_MASK_DATAENDIE                 ((uint32_t)0x00000100)        /*!< Data End Interrupt Enable */\n 3828  #define  SDIO_MASK_STBITERRIE                ((uint32_t)0x00000200)        /*!< Start Bit Error Interrupt Enable */\n 3829  #define  SDIO_MASK_DBCKENDIE                 ((uint32_t)0x00000400)        /*!< Data Block End Interrupt Enable */\n 3830: #define  SDIO_MASK_CMDACTIE                  ((uint32_t)0x00000800)        /*!< Command Acting Interrupt Enable */\n 3831: #define  SDIO_MASK_TXACTIE                   ((uint32_t)0x00001000)        /*!< Data Transmit Acting Interrupt Enable */\n 3832: #define  SDIO_MASK_RXACTIE                   ((uint32_t)0x00002000)        /*!< Data receive acting interrupt enabled */\n 3833  #define  SDIO_MASK_TXFIFOHEIE                ((uint32_t)0x00004000)        /*!< Tx FIFO Half Empty interrupt Enable */\n 3834  #define  SDIO_MASK_RXFIFOHFIE                ((uint32_t)0x00008000)        /*!< Rx FIFO Half Full interrupt Enable */\n ....\n 3839  #define  SDIO_MASK_TXDAVLIE                  ((uint32_t)0x00100000)        /*!< Data available in Tx FIFO interrupt Enable */\n 3840  #define  SDIO_MASK_RXDAVLIE                  ((uint32_t)0x00200000)        /*!< Data available in Rx FIFO interrupt Enable */\n 3841: #define  SDIO_MASK_SDIOITIE                  ((uint32_t)0x00400000)        /*!< SDIO Mode Interrupt Received interrupt Enable */\n 3842  #define  SDIO_MASK_CEATAENDIE                ((uint32_t)0x00800000)        /*!< CE-ATA command completion signal received Interrupt Enable */\n 3843  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f103xg.h:\n   31    *\n   32    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   33:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   34:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   35    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   36    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n   ..\n 2585  #define  DMA_CCR_EN                          ((uint32_t)0x00000001)        /*!< Channel enable */\n 2586  #define  DMA_CCR_TCIE                        ((uint32_t)0x00000002)        /*!< Transfer complete interrupt enable */\n 2587: #define  DMA_CCR_HTIE                        ((uint32_t)0x00000004)        /*!< Half Transfer interrupt enable */\n 2588  #define  DMA_CCR_TEIE                        ((uint32_t)0x00000008)        /*!< Transfer error interrupt enable */\n 2589  #define  DMA_CCR_DIR                         ((uint32_t)0x00000010)        /*!< Data transfer direction */\n ....\n 3131  #define  TIM_DIER_CC4IE                      ((uint32_t)0x00000010)            /*!<Capture/Compare 4 interrupt enable */\n 3132  #define  TIM_DIER_COMIE                      ((uint32_t)0x00000020)            /*!<COM interrupt enable */\n 3133: #define  TIM_DIER_TIE                        ((uint32_t)0x00000040)            /*!<Trigger interrupt enable */\n 3134  #define  TIM_DIER_BIE                        ((uint32_t)0x00000080)            /*!<Break interrupt enable */\n 3135  #define  TIM_DIER_UDE                        ((uint32_t)0x00000100)            /*!<Update DMA request enable */\n ....\n 3855  #define  SDIO_MASK_CCRCFAILIE                ((uint32_t)0x00000001)        /*!< Command CRC Fail Interrupt Enable */\n 3856  #define  SDIO_MASK_DCRCFAILIE                ((uint32_t)0x00000002)        /*!< Data CRC Fail Interrupt Enable */\n 3857: #define  SDIO_MASK_CTIMEOUTIE                ((uint32_t)0x00000004)        /*!< Command TimeOut Interrupt Enable */\n 3858: #define  SDIO_MASK_DTIMEOUTIE                ((uint32_t)0x00000008)        /*!< Data TimeOut Interrupt Enable */\n 3859  #define  SDIO_MASK_TXUNDERRIE                ((uint32_t)0x00000010)        /*!< Tx FIFO UnderRun Error Interrupt Enable */\n 3860  #define  SDIO_MASK_RXOVERRIE                 ((uint32_t)0x00000020)        /*!< Rx FIFO OverRun Error Interrupt Enable */\n 3861  #define  SDIO_MASK_CMDRENDIE                 ((uint32_t)0x00000040)        /*!< Command Response Received Interrupt Enable */\n 3862: #define  SDIO_MASK_CMDSENTIE                 ((uint32_t)0x00000080)        /*!< Command Sent Interrupt Enable */\n 3863  #define  SDIO_MASK_DATAENDIE                 ((uint32_t)0x00000100)        /*!< Data End Interrupt Enable */\n 3864  #define  SDIO_MASK_STBITERRIE                ((uint32_t)0x00000200)        /*!< Start Bit Error Interrupt Enable */\n 3865  #define  SDIO_MASK_DBCKENDIE                 ((uint32_t)0x00000400)        /*!< Data Block End Interrupt Enable */\n 3866: #define  SDIO_MASK_CMDACTIE                  ((uint32_t)0x00000800)        /*!< Command Acting Interrupt Enable */\n 3867: #define  SDIO_MASK_TXACTIE                   ((uint32_t)0x00001000)        /*!< Data Transmit Acting Interrupt Enable */\n 3868: #define  SDIO_MASK_RXACTIE                   ((uint32_t)0x00002000)        /*!< Data receive acting interrupt enabled */\n 3869  #define  SDIO_MASK_TXFIFOHEIE                ((uint32_t)0x00004000)        /*!< Tx FIFO Half Empty interrupt Enable */\n 3870  #define  SDIO_MASK_RXFIFOHFIE                ((uint32_t)0x00008000)        /*!< Rx FIFO Half Full interrupt Enable */\n ....\n 3875  #define  SDIO_MASK_TXDAVLIE                  ((uint32_t)0x00100000)        /*!< Data available in Tx FIFO interrupt Enable */\n 3876  #define  SDIO_MASK_RXDAVLIE                  ((uint32_t)0x00200000)        /*!< Data available in Rx FIFO interrupt Enable */\n 3877: #define  SDIO_MASK_SDIOITIE                  ((uint32_t)0x00400000)        /*!< SDIO Mode Interrupt Received interrupt Enable */\n 3878  #define  SDIO_MASK_CEATAENDIE                ((uint32_t)0x00800000)        /*!< CE-ATA command completion signal received Interrupt Enable */\n 3879  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f105xc.h:\n   31    *\n   32    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   33:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   34:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   35    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   36    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n   ..\n 2666  #define  DMA_CCR_EN                          ((uint32_t)0x00000001)        /*!< Channel enable */\n 2667  #define  DMA_CCR_TCIE                        ((uint32_t)0x00000002)        /*!< Transfer complete interrupt enable */\n 2668: #define  DMA_CCR_HTIE                        ((uint32_t)0x00000004)        /*!< Half Transfer interrupt enable */\n 2669  #define  DMA_CCR_TEIE                        ((uint32_t)0x00000008)        /*!< Transfer error interrupt enable */\n 2670  #define  DMA_CCR_DIR                         ((uint32_t)0x00000010)        /*!< Data transfer direction */\n ....\n 3212  #define  TIM_DIER_CC4IE                      ((uint32_t)0x00000010)            /*!<Capture/Compare 4 interrupt enable */\n 3213  #define  TIM_DIER_COMIE                      ((uint32_t)0x00000020)            /*!<COM interrupt enable */\n 3214: #define  TIM_DIER_TIE                        ((uint32_t)0x00000040)            /*!<Trigger interrupt enable */\n 3215  #define  TIM_DIER_BIE                        ((uint32_t)0x00000080)            /*!<Break interrupt enable */\n 3216  #define  TIM_DIER_UDE                        ((uint32_t)0x00000100)            /*!<Update DMA request enable */\n ....\n 3664  #define  SDIO_MASK_CCRCFAILIE                ((uint32_t)0x00000001)        /*!< Command CRC Fail Interrupt Enable */\n 3665  #define  SDIO_MASK_DCRCFAILIE                ((uint32_t)0x00000002)        /*!< Data CRC Fail Interrupt Enable */\n 3666: #define  SDIO_MASK_CTIMEOUTIE                ((uint32_t)0x00000004)        /*!< Command TimeOut Interrupt Enable */\n 3667: #define  SDIO_MASK_DTIMEOUTIE                ((uint32_t)0x00000008)        /*!< Data TimeOut Interrupt Enable */\n 3668  #define  SDIO_MASK_TXUNDERRIE                ((uint32_t)0x00000010)        /*!< Tx FIFO UnderRun Error Interrupt Enable */\n 3669  #define  SDIO_MASK_RXOVERRIE                 ((uint32_t)0x00000020)        /*!< Rx FIFO OverRun Error Interrupt Enable */\n 3670  #define  SDIO_MASK_CMDRENDIE                 ((uint32_t)0x00000040)        /*!< Command Response Received Interrupt Enable */\n 3671: #define  SDIO_MASK_CMDSENTIE                 ((uint32_t)0x00000080)        /*!< Command Sent Interrupt Enable */\n 3672  #define  SDIO_MASK_DATAENDIE                 ((uint32_t)0x00000100)        /*!< Data End Interrupt Enable */\n 3673  #define  SDIO_MASK_STBITERRIE                ((uint32_t)0x00000200)        /*!< Start Bit Error Interrupt Enable */\n 3674  #define  SDIO_MASK_DBCKENDIE                 ((uint32_t)0x00000400)        /*!< Data Block End Interrupt Enable */\n 3675: #define  SDIO_MASK_CMDACTIE                  ((uint32_t)0x00000800)        /*!< Command Acting Interrupt Enable */\n 3676: #define  SDIO_MASK_TXACTIE                   ((uint32_t)0x00001000)        /*!< Data Transmit Acting Interrupt Enable */\n 3677: #define  SDIO_MASK_RXACTIE                   ((uint32_t)0x00002000)        /*!< Data receive acting interrupt enabled */\n 3678  #define  SDIO_MASK_TXFIFOHEIE                ((uint32_t)0x00004000)        /*!< Tx FIFO Half Empty interrupt Enable */\n 3679  #define  SDIO_MASK_RXFIFOHFIE                ((uint32_t)0x00008000)        /*!< Rx FIFO Half Full interrupt Enable */\n ....\n 3684  #define  SDIO_MASK_TXDAVLIE                  ((uint32_t)0x00100000)        /*!< Data available in Tx FIFO interrupt Enable */\n 3685  #define  SDIO_MASK_RXDAVLIE                  ((uint32_t)0x00200000)        /*!< Data available in Rx FIFO interrupt Enable */\n 3686: #define  SDIO_MASK_SDIOITIE                  ((uint32_t)0x00400000)        /*!< SDIO Mode Interrupt Received interrupt Enable */\n 3687  #define  SDIO_MASK_CEATAENDIE                ((uint32_t)0x00800000)        /*!< CE-ATA command completion signal received Interrupt Enable */\n 3688  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f107xc.h:\n   31    *\n   32    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   33:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   34:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   35    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   36    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n   ..\n 2750  #define  DMA_CCR_EN                          ((uint32_t)0x00000001)        /*!< Channel enable */\n 2751  #define  DMA_CCR_TCIE                        ((uint32_t)0x00000002)        /*!< Transfer complete interrupt enable */\n 2752: #define  DMA_CCR_HTIE                        ((uint32_t)0x00000004)        /*!< Half Transfer interrupt enable */\n 2753  #define  DMA_CCR_TEIE                        ((uint32_t)0x00000008)        /*!< Transfer error interrupt enable */\n 2754  #define  DMA_CCR_DIR                         ((uint32_t)0x00000010)        /*!< Data transfer direction */\n ....\n 3296  #define  TIM_DIER_CC4IE                      ((uint32_t)0x00000010)            /*!<Capture/Compare 4 interrupt enable */\n 3297  #define  TIM_DIER_COMIE                      ((uint32_t)0x00000020)            /*!<COM interrupt enable */\n 3298: #define  TIM_DIER_TIE                        ((uint32_t)0x00000040)            /*!<Trigger interrupt enable */\n 3299  #define  TIM_DIER_BIE                        ((uint32_t)0x00000080)            /*!<Break interrupt enable */\n 3300  #define  TIM_DIER_UDE                        ((uint32_t)0x00000100)            /*!<Update DMA request enable */\n ....\n 3748  #define  SDIO_MASK_CCRCFAILIE                ((uint32_t)0x00000001)        /*!< Command CRC Fail Interrupt Enable */\n 3749  #define  SDIO_MASK_DCRCFAILIE                ((uint32_t)0x00000002)        /*!< Data CRC Fail Interrupt Enable */\n 3750: #define  SDIO_MASK_CTIMEOUTIE                ((uint32_t)0x00000004)        /*!< Command TimeOut Interrupt Enable */\n 3751: #define  SDIO_MASK_DTIMEOUTIE                ((uint32_t)0x00000008)        /*!< Data TimeOut Interrupt Enable */\n 3752  #define  SDIO_MASK_TXUNDERRIE                ((uint32_t)0x00000010)        /*!< Tx FIFO UnderRun Error Interrupt Enable */\n 3753  #define  SDIO_MASK_RXOVERRIE                 ((uint32_t)0x00000020)        /*!< Rx FIFO OverRun Error Interrupt Enable */\n 3754  #define  SDIO_MASK_CMDRENDIE                 ((uint32_t)0x00000040)        /*!< Command Response Received Interrupt Enable */\n 3755: #define  SDIO_MASK_CMDSENTIE                 ((uint32_t)0x00000080)        /*!< Command Sent Interrupt Enable */\n 3756  #define  SDIO_MASK_DATAENDIE                 ((uint32_t)0x00000100)        /*!< Data End Interrupt Enable */\n 3757  #define  SDIO_MASK_STBITERRIE                ((uint32_t)0x00000200)        /*!< Start Bit Error Interrupt Enable */\n 3758  #define  SDIO_MASK_DBCKENDIE                 ((uint32_t)0x00000400)        /*!< Data Block End Interrupt Enable */\n 3759: #define  SDIO_MASK_CMDACTIE                  ((uint32_t)0x00000800)        /*!< Command Acting Interrupt Enable */\n 3760: #define  SDIO_MASK_TXACTIE                   ((uint32_t)0x00001000)        /*!< Data Transmit Acting Interrupt Enable */\n 3761: #define  SDIO_MASK_RXACTIE                   ((uint32_t)0x00002000)        /*!< Data receive acting interrupt enabled */\n 3762  #define  SDIO_MASK_TXFIFOHEIE                ((uint32_t)0x00004000)        /*!< Tx FIFO Half Empty interrupt Enable */\n 3763  #define  SDIO_MASK_RXFIFOHFIE                ((uint32_t)0x00008000)        /*!< Rx FIFO Half Full interrupt Enable */\n ....\n 3768  #define  SDIO_MASK_TXDAVLIE                  ((uint32_t)0x00100000)        /*!< Data available in Tx FIFO interrupt Enable */\n 3769  #define  SDIO_MASK_RXDAVLIE                  ((uint32_t)0x00200000)        /*!< Data available in Rx FIFO interrupt Enable */\n 3770: #define  SDIO_MASK_SDIOITIE                  ((uint32_t)0x00400000)        /*!< SDIO Mode Interrupt Received interrupt Enable */\n 3771  #define  SDIO_MASK_CEATAENDIE                ((uint32_t)0x00800000)        /*!< CE-ATA command completion signal received Interrupt Enable */\n 3772  \n ....\n 6835  #define ETH_DMAIER_ERIE      ((uint32_t)0x00004000)  /* Early receive interrupt enable */\n 6836  #define ETH_DMAIER_FBEIE     ((uint32_t)0x00002000)  /* Fatal bus error interrupt enable */\n 6837: #define ETH_DMAIER_ETIE      ((uint32_t)0x00000400)  /* Early transmit interrupt enable */\n 6838: #define ETH_DMAIER_RWTIE     ((uint32_t)0x00000200)  /* Receive watchdog timeout interrupt enable */\n 6839  #define ETH_DMAIER_RPSIE     ((uint32_t)0x00000100)  /* Receive process stopped interrupt enable */\n 6840  #define ETH_DMAIER_RBUIE     ((uint32_t)0x00000080)  /* Receive buffer unavailable interrupt enable */\n ....\n 6842  #define ETH_DMAIER_TUIE      ((uint32_t)0x00000020)  /* Transmit Underflow interrupt enable */\n 6843  #define ETH_DMAIER_ROIE      ((uint32_t)0x00000010)  /* Receive Overflow interrupt enable */\n 6844: #define ETH_DMAIER_TJTIE     ((uint32_t)0x00000008)  /* Transmit jabber timeout interrupt enable */\n 6845  #define ETH_DMAIER_TBUIE     ((uint32_t)0x00000004)  /* Transmit buffer unavailable interrupt enable */\n 6846  #define ETH_DMAIER_TPSIE     ((uint32_t)0x00000002)  /* Transmit process stopped interrupt enable */\n 6847: #define ETH_DMAIER_TIE       ((uint32_t)0x00000001)  /* Transmit interrupt enable */\n 6848  \n 6849  /* Bit definition for Ethernet DMA Missed Frame and Buffer Overflow Counter Register */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f1xx.h:\n   33    *\n   34    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   35:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   36:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   37    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   38    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\system_stm32f1xx.h:\n   23    *\n   24    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   25:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   26:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   27    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   28    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Source\\Templates\\gcc\\startup_stm32f103xb.s:\n   31    *\n   32    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   33:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   34:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   35    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   36    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Source\\Templates\\system_stm32f1xx.c:\n   50    *\n   51    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   52:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   53:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   54    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   55    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Include\\arm_common_tables.h:\n   26  *\n   27  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n   28: * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n   29: * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\n   30  * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n   31  * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Include\\arm_const_structs.h:\n   28  *\n   29  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n   30: * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n   31: * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\n   32  * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n   33  * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Include\\arm_math.h:\n   26  *\n   27  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n   28: * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n   29: * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\n   30  * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n   31  * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Include\\core_cm0.h:\n   23     *\n   24     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   25:    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   26:    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n   27     ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE\n   28     LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n   ..\n  554   */\n  555  \n  556: /* Interrupt Priorities are WORD accessible only under ARMv6M                   */\n  557  /* The following MACROS handle generation of the register offset and byte masks */\n  558  #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Include\\core_cm0plus.h:\n   23     *\n   24     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   25:    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   26:    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n   27     ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE\n   28     LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n   ..\n  668   */\n  669  \n  670: /* Interrupt Priorities are WORD accessible only under ARMv6M                   */\n  671  /* The following MACROS handle generation of the register offset and byte masks */\n  672  #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Include\\core_cm3.h:\n   23     *\n   24     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   25:    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   26:    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n   27     ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE\n   28     LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Include\\core_cm4.h:\n   23     *\n   24     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   25:    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   26:    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n   27     ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE\n   28     LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Include\\core_cm7.h:\n   23     *\n   24     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   25:    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   26:    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n   27     ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE\n   28     LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Include\\core_cmFunc.h:\n   23     *\n   24     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   25:    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   26:    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n   27     ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE\n   28     LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Include\\core_cmInstr.h:\n   23     *\n   24     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   25:    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   26:    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n   27     ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE\n   28     LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Include\\core_cmSimd.h:\n   23     *\n   24     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   25:    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   26:    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n   27     ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE\n   28     LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Include\\core_sc000.h:\n   23     *\n   24     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   25:    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   26:    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n   27     ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE\n   28     LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n   ..\n  678   */\n  679  \n  680: /* Interrupt Priorities are WORD accessible only under ARMv6M                   */\n  681  /* The following MACROS handle generation of the register offset and byte masks */\n  682  #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Include\\core_sc300.h:\n   23     *\n   24     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   25:    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   26:    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n   27     ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE\n   28     LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\Legacy\\stm32_hal_legacy.h:\n   24    *\n   25    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   26:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   27:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   28    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   29    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n   ..\n 2469  #define  SDIO_CMD0TIMEOUT	          SDMMC_CMD0TIMEOUT\n 2470  #define  SD_SDIO_SEND_IF_COND	      SD_SDMMC_SEND_IF_COND\n 2471: /* alias CMSIS for compatibilities */\n 2472  #define  SDIO_IRQn                  SDMMC1_IRQn\n 2473  #define  SDIO_IRQHandler            SDMMC1_IRQHandler\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal.h:\n   24    *\n   25    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   26:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   27:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   28    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   29    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal_cortex.h:\n   23    *\n   24    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   25:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   26:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   27    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   28    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal_def.h:\n   24    *\n   25    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   26:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   27:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   28    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   29    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal_dma.h:\n   23    *\n   24    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   25:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   26:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   27    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   28    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n   ..\n  241    */\n  242  #define DMA_IT_TC                         ((uint32_t)DMA_CCR_TCIE)\n  243: #define DMA_IT_HT                         ((uint32_t)DMA_CCR_HTIE)\n  244  #define DMA_IT_TE                         ((uint32_t)DMA_CCR_TEIE)\n  245  /**\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal_dma_ex.h:\n   23    *\n   24    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   25:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   26:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   27    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   28    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal_flash.h:\n   23    *\n   24    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   25:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   26:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   27    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   28    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal_flash_ex.h:\n   23    *\n   24    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   25:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   26:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   27    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   28    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal_gpio.h:\n   23    *\n   24    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   25:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   26:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   27    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   28    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal_gpio_ex.h:\n   23    *\n   24    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   25:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   26:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   27    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   28    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal_pcd.h:\n   23    *\n   24    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   25:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   26:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   27    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   28    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal_pcd_ex.h:\n   23    *\n   24    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   25:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   26:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   27    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   28    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal_pwr.h:\n   23    *\n   24    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   25:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   26:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   27    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   28    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal_rcc.h:\n   23    *\n   24    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   25:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   26:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   27    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   28    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal_rcc_ex.h:\n   23    *\n   24    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   25:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   26:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   27    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   28    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal_tim.h:\n   23    *\n   24    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   25:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   26:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   27    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   28    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n   ..\n  507  #define TIM_IT_CC4              (TIM_DIER_CC4IE)\n  508  #define TIM_IT_COM              (TIM_DIER_COMIE)\n  509: #define TIM_IT_TRIGGER          (TIM_DIER_TIE)\n  510  #define TIM_IT_BREAK            (TIM_DIER_BIE)\n  511  /**\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal_tim_ex.h:\n   23    *\n   24    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   25:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   26:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   27    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   28    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_ll_usb.h:\n   23    *\n   24    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   25:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   26:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   27    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   28    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal.c:\n   38    *\n   39    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   40:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   41:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   42    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   43    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_cortex.c:\n    8    *\n    9    *          This file provides firmware functions to manage the following\n   10:   *          functionalities of the CORTEX:\n   11    *           + Initialization and de-initialization functions\n   12    *           + Peripheral Control functions\n   ..\n  108    *\n  109    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  110:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  111:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n  112    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n  113    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n  ...\n  156      [..]\n  157        This section provide the Cortex HAL driver functions allowing to configure Interrupts\n  158:       Systick functionalities \n  159  \n  160  @endverbatim\n  ...\n  286      [..]\n  287        This subsection provides a set of functions allowing to control the CORTEX\n  288:       (NVIC, SYSTICK, MPU) functionalities. \n  289   \n  290        \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_dma.c:\n    8    *    \n    9    *          This file provides firmware functions to manage the following \n   10:   *          functionalities of the Direct Memory Access (DMA) peripheral:\n   11    *           + Initialization and de-initialization functions\n   12    *           + IO operation functions\n   ..\n   88    *\n   89    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   90:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   91:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   92    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   93    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_flash.c:\n    7    * @brief   FLASH HAL module driver.\n    8    *          This file provides firmware functions to manage the following \n    9:   *          functionalities of the internal FLASH memory:\n   10    *           + Program operations functions\n   11    *           + Memory Control functions \n   ..\n   88    *\n   89    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   90:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   91:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   92    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   93    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_flash_ex.c:\n    8    *    \n    9    *          This file provides firmware functions to manage the following \n   10:   *          functionalities of the FLASH peripheral:\n   11    *           + Extended Initialization/de-initialization functions\n   12    *           + Extended I/O operation functions\n   ..\n   45    *\n   46    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   47:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   48:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   49    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   50    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_gpio.c:\n    7    * @brief   GPIO HAL module driver.\n    8    *         This file provides firmware functions to manage the following \n    9:   *          functionalities of the General Purpose Input/Output (GPIO) peripheral:\n   10    *           + Initialization and de-initialization functions\n   11    *           + IO operation functions\n   ..\n  107    *\n  108    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  109:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  110:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n  111    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n  112    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_gpio_ex.c:\n    7    * @brief   GPIO Extension HAL module driver.\n    8    *         This file provides firmware functions to manage the following \n    9:   *          functionalities of the General Purpose Input/Output (GPIO) extension peripheral.\n   10    *           + Extended features functions\n   11    *         \n   ..\n   42    *\n   43    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   44:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   45:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   46    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   47    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_pcd.c:\n    7    * @brief   PCD HAL module driver.\n    8    *          This file provides firmware functions to manage the following \n    9:   *          functionalities of the USB Peripheral Controller:\n   10    *           + Initialization and de-initialization functions\n   11    *           + IO operation functions\n   ..\n   62    *\n   63    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   64:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   65:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   66    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   67    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_pcd_ex.c:\n    7    * @brief   Extended PCD HAL module driver.\n    8    *          This file provides firmware functions to manage the following \n    9:   *          functionalities of the USB Peripheral Controller:\n   10    *           + Extended features functions: Update FIFO configuration, \n   11    *           PMA configuration for EPs  \n   ..\n   28    *\n   29    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   30:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   31:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   32    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   33    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_pwr.c:\n    8    *\n    9    *          This file provides firmware functions to manage the following\n   10:   *          functionalities of the Power Controller (PWR) peripheral:\n   11    *           + Initialization/de-initialization functions\n   12    *           + Peripheral Control functions \n   ..\n   29    *\n   30    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   31:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   32:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   33    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   34    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_rcc.c:\n    7    * @brief   RCC HAL module driver.\n    8    *          This file provides firmware functions to manage the following \n    9:   *          functionalities of the Reset and Clock Control (RCC) peripheral:\n   10    *           + Initialization and de-initialization functions\n   11    *           + Peripheral Control functions\n   ..\n   65    *\n   66    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   67:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   68:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   69    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   70    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_rcc_ex.c:\n    7    * @brief   Extended RCC HAL module driver.\n    8    *          This file provides firmware functions to manage the following \n    9:   *          functionalities RCC extension peripheral:\n   10    *           + Extended Peripheral Control functions\n   11    *  \n   ..\n   27    *\n   28    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   29:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   30:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   31    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   32    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_tim.c:\n    7    * @brief   TIM HAL module driver\n    8    *          This file provides firmware functions to manage the following \n    9:   *          functionalities of the Timer (TIM) peripheral:\n   10    *           + Time Base Initialization\n   11    *           + Time Base Start\n   ..\n  113    *\n  114    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  115:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  116:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n  117    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n  118    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n  ...\n 2277    tmpccmr1 |= (sConfig->IC1Filter << 4) | (sConfig->IC2Filter << 12);\n 2278  \n 2279:   /* Set the TI1 and the TI2 Polarities */\n 2280    tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);\n 2281    tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_tim_ex.c:\n    7    * @brief   TIM HAL module driver.\n    8    *          This file provides firmware functions to manage the following\n    9:   *          functionalities of the Timer Extended peripheral:\n   10    *           + Time Hall Sensor Interface Initialization\n   11    *           + Time Hall Sensor Interface Start\n   12    *           + Time Complementary signal bread and dead time configuration\n   13    *           + Time Master and Slave synchronization configuration\n   14:   *           + Timer remapping capabilities configuration\n   15    @verbatim\n   16    ==============================================================================\n   ..\n   84    *\n   85    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   86:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   87:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   88    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   89    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_ll_usb.c:\n    8    *\n    9    *          This file provides firmware functions to manage the following \n   10:   *          functionalities of the USB Peripheral Controller:\n   11    *           + Initialization/de-initialization functions\n   12    *           + I/O operation functions\n   ..\n   43    *\n   44    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   45:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   46:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   47    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   48    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Inc\\Backup\\mxconstants.h.bak:\n   19    *\n   20    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   21:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   22:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   23    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   24    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Inc\\Backup\\stm32f1xx_hal_conf.h.bak:\n   20    *\n   21    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   22:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   23:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   24    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   25    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Inc\\Backup\\stm32f1xx_it.h.bak:\n   19    *\n   20    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   21:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   22:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   23    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   24    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Inc\\Backup\\usb_device.h.bak:\n   19    *\n   20    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   21:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   22:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   23    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   24    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Inc\\Backup\\usbd_conf.h.bak:\n   19    *\n   20    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   21:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   22:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   23    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   24    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Inc\\Backup\\usbd_desc.h.bak:\n   19    *\n   20    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   21:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   22:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   23    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   24    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Inc\\mxconstants.h:\n   19    *\n   20    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   21:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   22:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   23    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   24    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Inc\\stm32f1xx_hal_conf.h:\n   20    *\n   21    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   22:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   23:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   24    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   25    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Inc\\stm32f1xx_it.h:\n   19    *\n   20    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   21:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   22:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   23    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   24    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Inc\\usb_device.h:\n   19    *\n   20    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   21:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   22:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   23    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   24    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Inc\\usbd_conf.h:\n   19    *\n   20    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   21:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   22:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   23    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   24    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Inc\\usbd_desc.h:\n   19    *\n   20    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   21:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   22:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   23    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   24    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Middlewares\\ST\\STM32_USB_Device_Library\\Class\\HID\\Inc\\usbd_hid.h:\n   19    * Unless required by applicable law or agreed to in writing, software \n   20    * distributed under the License is distributed on an \"AS IS\" BASIS, \n   21:   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   22    * See the License for the specific language governing permissions and\n   23    * limitations under the License.\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Middlewares\\ST\\STM32_USB_Device_Library\\Class\\HID\\Inc\\usbd_hid.h.bak:\n   19    * Unless required by applicable law or agreed to in writing, software \n   20    * distributed under the License is distributed on an \"AS IS\" BASIS, \n   21:   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   22    * See the License for the specific language governing permissions and\n   23    * limitations under the License.\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Middlewares\\ST\\STM32_USB_Device_Library\\Class\\HID\\Src\\usbd_hid.c:\n   40    * Unless required by applicable law or agreed to in writing, software \n   41    * distributed under the License is distributed on an \"AS IS\" BASIS, \n   42:   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   43    * See the License for the specific language governing permissions and\n   44    * limitations under the License.\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Middlewares\\ST\\STM32_USB_Device_Library\\Class\\HID\\Src\\usbd_hid.c.bak:\n   40    * Unless required by applicable law or agreed to in writing, software \n   41    * distributed under the License is distributed on an \"AS IS\" BASIS, \n   42:   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   43    * See the License for the specific language governing permissions and\n   44    * limitations under the License.\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Middlewares\\ST\\STM32_USB_Device_Library\\Core\\Inc\\usbd_core.h:\n   19    * Unless required by applicable law or agreed to in writing, software \n   20    * distributed under the License is distributed on an \"AS IS\" BASIS, \n   21:   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   22    * See the License for the specific language governing permissions and\n   23    * limitations under the License.\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Middlewares\\ST\\STM32_USB_Device_Library\\Core\\Inc\\usbd_ctlreq.h:\n   19    * Unless required by applicable law or agreed to in writing, software \n   20    * distributed under the License is distributed on an \"AS IS\" BASIS, \n   21:   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   22    * See the License for the specific language governing permissions and\n   23    * limitations under the License.\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Middlewares\\ST\\STM32_USB_Device_Library\\Core\\Inc\\usbd_def.h:\n   19    * Unless required by applicable law or agreed to in writing, software \n   20    * distributed under the License is distributed on an \"AS IS\" BASIS, \n   21:   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   22    * See the License for the specific language governing permissions and\n   23    * limitations under the License.\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Middlewares\\ST\\STM32_USB_Device_Library\\Core\\Inc\\usbd_def.h.bak:\n   19    * Unless required by applicable law or agreed to in writing, software \n   20    * distributed under the License is distributed on an \"AS IS\" BASIS, \n   21:   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   22    * See the License for the specific language governing permissions and\n   23    * limitations under the License.\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Middlewares\\ST\\STM32_USB_Device_Library\\Core\\Inc\\usbd_ioreq.h:\n   19    * Unless required by applicable law or agreed to in writing, software \n   20    * distributed under the License is distributed on an \"AS IS\" BASIS, \n   21:   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   22    * See the License for the specific language governing permissions and\n   23    * limitations under the License.\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Middlewares\\ST\\STM32_USB_Device_Library\\Core\\Src\\usbd_core.c:\n   19    * Unless required by applicable law or agreed to in writing, software \n   20    * distributed under the License is distributed on an \"AS IS\" BASIS, \n   21:   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   22    * See the License for the specific language governing permissions and\n   23    * limitations under the License.\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Middlewares\\ST\\STM32_USB_Device_Library\\Core\\Src\\usbd_ctlreq.c:\n   19    * Unless required by applicable law or agreed to in writing, software \n   20    * distributed under the License is distributed on an \"AS IS\" BASIS, \n   21:   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   22    * See the License for the specific language governing permissions and\n   23    * limitations under the License.\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Middlewares\\ST\\STM32_USB_Device_Library\\Core\\Src\\usbd_ioreq.c:\n   19    * Unless required by applicable law or agreed to in writing, software \n   20    * distributed under the License is distributed on an \"AS IS\" BASIS, \n   21:   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   22    * See the License for the specific language governing permissions and\n   23    * limitations under the License.\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\Backup\\main.c.bak:\n   19    *\n   20    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   21:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   22:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   23    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   24    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\Backup\\stm32f1xx_hal_msp.c.bak:\n   20    *\n   21    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   22:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   23:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   24    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   25    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\Backup\\stm32f1xx_it.c.bak:\n   19    *\n   20    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   21:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   22:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   23    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   24    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\Backup\\usb_device.c.bak:\n   20    *\n   21    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   22:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   23:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   24    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   25    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\Backup\\usbd_conf.c.bak:\n   20    *\n   21    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   22:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   23:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   24    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   25    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\Backup\\usbd_desc.c.bak:\n   20    *\n   21    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   22:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   23:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   24    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   25    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\main.c:\n   19   *\n   20   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   21:  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   22:  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   23   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   24   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\main.c.bak:\n   19    *\n   20    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   21:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   22:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   23    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   24    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\stm32f1xx_hal_msp.c:\n   20    *\n   21    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   22:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   23:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   24    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   25    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\stm32f1xx_it.c:\n   19    *\n   20    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   21:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   22:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   23    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   24    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\usb_device.c:\n   20    *\n   21    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   22:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   23:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   24    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   25    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\usbd_conf.c:\n   20    *\n   21    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   22:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   23:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   24    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   25    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\usbd_conf.c.bak:\n   20    *\n   21    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   22:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   23:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   24    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   25    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\usbd_desc.c:\n   20    *\n   21    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   22:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   23:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   24    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   25    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\usbd_desc.c.bak:\n   20    *\n   21    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   22:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   23:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   24    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   25    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\TrueSTUDIO\\stm32_PPM_F103 Configuration\\.cproject:\n   13  			</storageModule>\n   14  			<storageModule moduleId=\"cdtBuildSystem\" version=\"4.0.0\">\n   15: 				<configuration artifactExtension=\"elf\" artifactName=\"stm32_PPM_F103 Configuration\" buildArtefactType=\"org.eclipse.cdt.build.core.buildArtefactType.exe\" buildProperties=\"org.eclipse.cdt.build.core.buildArtefactType=org.eclipse.cdt.build.core.buildArtefactType.exe\" cleanCommand=\"rm -rf\" description=\"\" id=\"com.atollic.truestudio.exe.debug.1518366166\" name=\"Debug\" parent=\"com.atollic.truestudio.exe.debug\" postbuildStep=\"\" prebuildStep=\"\">\n   16  					<folderInfo id=\"com.atollic.truestudio.exe.debug.1518366166.2031504340\" name=\"/\" resourcePath=\"\">\n   17  						<toolChain id=\"com.atollic.truestudio.exe.debug.toolchain.683225115\" name=\"Atollic ARM Tools\" superClass=\"com.atollic.truestudio.exe.debug.toolchain\">\n\n349 matches across 104 files\n\n\n		Searching 126 files for \"TIM_HandleTypeDef\"\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal_tim.h:\n  293    HAL_LockTypeDef          Lock;          /*!< Locking object                    */\n  294    __IO HAL_TIM_StateTypeDef   State;         /*!< TIM operation state               */\n  295: }TIM_HandleTypeDef;\n  296  \n  297  /**\n  ...\n 1562   */\n 1563  /* Time Base functions ********************************************************/\n 1564: HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim);\n 1565: HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim);\n 1566: void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim);\n 1567: void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef *htim);\n 1568  /* Blocking mode: Polling */\n 1569: HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim);\n 1570: HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim);\n 1571  /* Non-Blocking mode: Interrupt */\n 1572: HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim);\n 1573: HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim);\n 1574  /* Non-Blocking mode: DMA */\n 1575: HAL_StatusTypeDef HAL_TIM_Base_Start_DMA(TIM_HandleTypeDef *htim, uint32_t *pData, uint16_t Length);\n 1576: HAL_StatusTypeDef HAL_TIM_Base_Stop_DMA(TIM_HandleTypeDef *htim);\n 1577  /**\n 1578    * @}\n ....\n 1583   */\n 1584  /* Timer Output Compare functions **********************************************/\n 1585: HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim);\n 1586: HAL_StatusTypeDef HAL_TIM_OC_DeInit(TIM_HandleTypeDef *htim);\n 1587: void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim);\n 1588: void HAL_TIM_OC_MspDeInit(TIM_HandleTypeDef *htim);\n 1589  /* Blocking mode: Polling */\n 1590: HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel);\n 1591: HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel);\n 1592  /* Non-Blocking mode: Interrupt */\n 1593: HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel);\n 1594: HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel);\n 1595  /* Non-Blocking mode: DMA */\n 1596: HAL_StatusTypeDef HAL_TIM_OC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length);\n 1597: HAL_StatusTypeDef HAL_TIM_OC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel);\n 1598  \n 1599  /**\n ....\n 1605   */\n 1606  /* Timer PWM functions *********************************************************/\n 1607: HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim);\n 1608: HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim);\n 1609: void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim);\n 1610: void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim);\n 1611  /* Blocking mode: Polling */\n 1612: HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel);\n 1613: HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel);\n 1614  /* Non-Blocking mode: Interrupt */\n 1615: HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel);\n 1616: HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel);\n 1617  /* Non-Blocking mode: DMA */\n 1618: HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length);\n 1619: HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel);\n 1620  /**\n 1621    * @}\n ....\n 1626   */\n 1627  /* Timer Input Capture functions ***********************************************/\n 1628: HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim);\n 1629: HAL_StatusTypeDef HAL_TIM_IC_DeInit(TIM_HandleTypeDef *htim);\n 1630: void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim);\n 1631: void HAL_TIM_IC_MspDeInit(TIM_HandleTypeDef *htim);\n 1632  /* Blocking mode: Polling */\n 1633: HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel);\n 1634: HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel);\n 1635  /* Non-Blocking mode: Interrupt */\n 1636: HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel);\n 1637: HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel);\n 1638  /* Non-Blocking mode: DMA */\n 1639: HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length);\n 1640: HAL_StatusTypeDef HAL_TIM_IC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel);\n 1641  /**\n 1642    * @}\n ....\n 1647   */\n 1648  /* Timer One Pulse functions ***************************************************/\n 1649: HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode);\n 1650: HAL_StatusTypeDef HAL_TIM_OnePulse_DeInit(TIM_HandleTypeDef *htim);\n 1651: void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim);\n 1652: void HAL_TIM_OnePulse_MspDeInit(TIM_HandleTypeDef *htim);\n 1653  /* Blocking mode: Polling */\n 1654: HAL_StatusTypeDef HAL_TIM_OnePulse_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel);\n 1655: HAL_StatusTypeDef HAL_TIM_OnePulse_Stop(TIM_HandleTypeDef *htim, uint32_t OutputChannel);\n 1656  /* Non-Blocking mode: Interrupt */\n 1657: HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel);\n 1658: HAL_StatusTypeDef HAL_TIM_OnePulse_Stop_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel);\n 1659  /**\n 1660    * @}\n ....\n 1665   */\n 1666  /* Timer Encoder functions *****************************************************/\n 1667: HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef* sConfig);\n 1668: HAL_StatusTypeDef HAL_TIM_Encoder_DeInit(TIM_HandleTypeDef *htim);\n 1669: void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim);\n 1670: void HAL_TIM_Encoder_MspDeInit(TIM_HandleTypeDef *htim);\n 1671   /* Blocking mode: Polling */\n 1672: HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel);\n 1673: HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel);\n 1674  /* Non-Blocking mode: Interrupt */\n 1675: HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel);\n 1676: HAL_StatusTypeDef HAL_TIM_Encoder_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel);\n 1677  /* Non-Blocking mode: DMA */\n 1678: HAL_StatusTypeDef HAL_TIM_Encoder_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData1, uint32_t *pData2, uint16_t Length);\n 1679: HAL_StatusTypeDef HAL_TIM_Encoder_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel);\n 1680  \n 1681  /**\n ....\n 1687   */\n 1688  /* Interrupt Handler functions  **********************************************/\n 1689: void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim);\n 1690  /**\n 1691    * @}\n ....\n 1696   */\n 1697  /* Control functions  *********************************************************/\n 1698: HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel);\n 1699: HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel);\n 1700: HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef* sConfig, uint32_t Channel);\n 1701: HAL_StatusTypeDef HAL_TIM_OnePulse_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OnePulse_InitTypeDef* sConfig, uint32_t OutputChannel,  uint32_t InputChannel);\n 1702: HAL_StatusTypeDef HAL_TIM_ConfigOCrefClear(TIM_HandleTypeDef *htim, TIM_ClearInputConfigTypeDef * sClearInputConfig, uint32_t Channel);\n 1703: HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig);\n 1704: HAL_StatusTypeDef HAL_TIM_ConfigTI1Input(TIM_HandleTypeDef *htim, uint32_t TI1_Selection);\n 1705: HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchronization(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef * sSlaveConfig);\n 1706: HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchronization_IT(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef * sSlaveConfig);\n 1707: HAL_StatusTypeDef HAL_TIM_DMABurst_WriteStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress, uint32_t BurstRequestSrc, \\\n 1708                                                uint32_t  *BurstBuffer, uint32_t  BurstLength);\n 1709: HAL_StatusTypeDef HAL_TIM_DMABurst_WriteStop(TIM_HandleTypeDef *htim, uint32_t BurstRequestSrc);\n 1710: HAL_StatusTypeDef HAL_TIM_DMABurst_ReadStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress, uint32_t BurstRequestSrc, \\\n 1711                                                uint32_t  *BurstBuffer, uint32_t  BurstLength);\n 1712: HAL_StatusTypeDef HAL_TIM_DMABurst_ReadStop(TIM_HandleTypeDef *htim, uint32_t BurstRequestSrc);\n 1713: HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource);\n 1714: uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel);\n 1715  \n 1716  /**\n ....\n 1722   */\n 1723  /* Callback in non blocking modes (Interrupt and DMA) *************************/\n 1724: void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim);\n 1725: void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim);\n 1726: void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim);\n 1727: void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim);\n 1728: void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim);\n 1729: void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim);\n 1730  /**\n 1731    * @}\n ....\n 1736   */\n 1737  /* Peripheral State functions  **************************************************/\n 1738: HAL_TIM_StateTypeDef HAL_TIM_Base_GetState(TIM_HandleTypeDef *htim);\n 1739: HAL_TIM_StateTypeDef HAL_TIM_OC_GetState(TIM_HandleTypeDef *htim);\n 1740: HAL_TIM_StateTypeDef HAL_TIM_PWM_GetState(TIM_HandleTypeDef *htim);\n 1741: HAL_TIM_StateTypeDef HAL_TIM_IC_GetState(TIM_HandleTypeDef *htim);\n 1742: HAL_TIM_StateTypeDef HAL_TIM_OnePulse_GetState(TIM_HandleTypeDef *htim);\n 1743: HAL_TIM_StateTypeDef HAL_TIM_Encoder_GetState(TIM_HandleTypeDef *htim);\n 1744  \n 1745  /**\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal_tim_ex.h:\n  158   */\n  159  /* Timer Hall Sensor functions  **********************************************/\n  160: HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef* sConfig);\n  161: HAL_StatusTypeDef HAL_TIMEx_HallSensor_DeInit(TIM_HandleTypeDef *htim);\n  162  \n  163: void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim);\n  164: void HAL_TIMEx_HallSensor_MspDeInit(TIM_HandleTypeDef *htim);\n  165  \n  166   /* Blocking mode: Polling */\n  167: HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start(TIM_HandleTypeDef *htim);\n  168: HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop(TIM_HandleTypeDef *htim);\n  169  /* Non-Blocking mode: Interrupt */\n  170: HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_IT(TIM_HandleTypeDef *htim);\n  171: HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop_IT(TIM_HandleTypeDef *htim);\n  172  /* Non-Blocking mode: DMA */\n  173: HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_DMA(TIM_HandleTypeDef *htim, uint32_t *pData, uint16_t Length);\n  174: HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop_DMA(TIM_HandleTypeDef *htim);\n  175  /**\n  176    * @}\n  ...\n  186  /* Timer Complementary Output Compare functions  *****************************/\n  187  /* Blocking mode: Polling */\n  188: HAL_StatusTypeDef HAL_TIMEx_OCN_Start(TIM_HandleTypeDef *htim, uint32_t Channel);\n  189: HAL_StatusTypeDef HAL_TIMEx_OCN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel);\n  190  \n  191  /* Non-Blocking mode: Interrupt */\n  192: HAL_StatusTypeDef HAL_TIMEx_OCN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel);\n  193: HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel);\n  194  \n  195  /* Non-Blocking mode: DMA */\n  196: HAL_StatusTypeDef HAL_TIMEx_OCN_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length);\n  197: HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel);\n  198  /**\n  199    * @}\n  ...\n  205  /* Timer Complementary PWM functions  ****************************************/\n  206  /* Blocking mode: Polling */\n  207: HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel);\n  208: HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel);\n  209  \n  210  /* Non-Blocking mode: Interrupt */\n  211: HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel);\n  212: HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel);\n  213  /* Non-Blocking mode: DMA */\n  214: HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length);\n  215: HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel);\n  216  /**\n  217    * @}\n  ...\n  223  /* Timer Complementary One Pulse functions  **********************************/\n  224  /* Blocking mode: Polling */\n  225: HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel);\n  226: HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Stop(TIM_HandleTypeDef *htim, uint32_t OutputChannel);\n  227  \n  228  /* Non-Blocking mode: Interrupt */\n  229: HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel);\n  230: HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel);\n  231  /**\n  232    * @}\n  ...\n  243      defined (STM32F103x6) || defined (STM32F103xB) || defined (STM32F103xE) || defined (STM32F103xG) || \\\n  244      defined (STM32F105xC) || defined (STM32F107xC)\n  245: HAL_StatusTypeDef HAL_TIMEx_ConfigCommutationEvent(TIM_HandleTypeDef *htim, uint32_t  InputTrigger, uint32_t  CommutationSource);\n  246: HAL_StatusTypeDef HAL_TIMEx_ConfigCommutationEvent_IT(TIM_HandleTypeDef *htim, uint32_t  InputTrigger, uint32_t  CommutationSource);\n  247: HAL_StatusTypeDef HAL_TIMEx_ConfigCommutationEvent_DMA(TIM_HandleTypeDef *htim, uint32_t  InputTrigger, uint32_t  CommutationSource);\n  248: HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim, TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig);\n  249  #endif /* defined(STM32F100xB) || defined(STM32F100xE) ||                                                 */\n  250         /* defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || */\n  251         /* defined(STM32F105xC) || defined(STM32F107xC)                                                    */\n  252: HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig);\n  253  /**\n  254    * @}\n  ...\n  259    */\n  260  /* Extension Callback *********************************************************/\n  261: void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim);\n  262: void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim);\n  263  /**\n  264    * @}\n  ...\n  272    */\n  273  /* Extension Peripheral State functions  **************************************/\n  274: HAL_TIM_StateTypeDef HAL_TIMEx_HallSensor_GetState(TIM_HandleTypeDef *htim);\n  275  /**\n  276    * @}\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_tim.c:\n  164  static void TIM_DMAPeriodElapsedCplt(DMA_HandleTypeDef *hdma);\n  165  static void TIM_DMATriggerCplt(DMA_HandleTypeDef *hdma);\n  166: static void TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,\n  167                                       TIM_SlaveConfigTypeDef * sSlaveConfig);\n  168  \n  ...\n  200  /**\n  201    * @brief  Initializes the TIM Time base Unit according to the specified\n  202:   *         parameters in the TIM_HandleTypeDef and create the associated handle.\n  203    * @param  htim : TIM Base handle\n  204    * @retval HAL status\n  205    */\n  206: HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)\n  207  {\n  208    /* Check the TIM handle allocation */\n  ...\n  243    * @retval HAL status\n  244    */\n  245: HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)\n  246  {\n  247    /* Check the parameters */\n  ...\n  270    * @retval None\n  271    */\n  272: __weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)\n  273  {\n  274    /* NOTE : This function Should not be modified, when the callback is needed,\n  ...\n  282    * @retval None\n  283    */\n  284: __weak void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef *htim)\n  285  {\n  286    /* NOTE : This function Should not be modified, when the callback is needed,\n  ...\n  295    * @retval HAL status\n  296  */\n  297: HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)\n  298  {\n  299    /* Check the parameters */\n  ...\n  318    * @retval HAL status\n  319  */\n  320: HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)\n  321  {\n  322    /* Check the parameters */\n  ...\n  341    * @retval HAL status\n  342  */\n  343: HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)\n  344  {\n  345    /* Check the parameters */\n  ...\n  361    * @retval HAL status\n  362  */\n  363: HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)\n  364  {\n  365    /* Check the parameters */\n  ...\n  382    * @retval HAL status\n  383  */\n  384: HAL_StatusTypeDef HAL_TIM_Base_Start_DMA(TIM_HandleTypeDef *htim, uint32_t *pData, uint16_t Length)\n  385  {\n  386    /* Check the parameters */\n  ...\n  426    * @retval HAL status\n  427  */\n  428: HAL_StatusTypeDef HAL_TIM_Base_Stop_DMA(TIM_HandleTypeDef *htim)\n  429  {\n  430    /* Check the parameters */\n  ...\n  471  /**\n  472    * @brief  Initializes the TIM Output Compare according to the specified\n  473:   *         parameters in the TIM_HandleTypeDef and create the associated handle.\n  474    * @param  htim : TIM Output Compare handle\n  475    * @retval HAL status\n  476    */\n  477: HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef* htim)\n  478  {\n  479    /* Check the TIM handle allocation */\n  ...\n  514    * @retval HAL status\n  515    */\n  516: HAL_StatusTypeDef HAL_TIM_OC_DeInit(TIM_HandleTypeDef *htim)\n  517  {\n  518    /* Check the parameters */\n  ...\n  541    * @retval None\n  542    */\n  543: __weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)\n  544  {\n  545    /* NOTE : This function Should not be modified, when the callback is needed,\n  ...\n  553    * @retval None\n  554    */\n  555: __weak void HAL_TIM_OC_MspDeInit(TIM_HandleTypeDef *htim)\n  556  {\n  557    /* NOTE : This function Should not be modified, when the callback is needed,\n  ...\n  571    * @retval HAL status\n  572  */\n  573: HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)\n  574  {\n  575    /* Check the parameters */\n  ...\n  603    * @retval HAL status\n  604  */\n  605: HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)\n  606  {\n  607    /* Check the parameters */\n  ...\n  635    * @retval HAL status\n  636  */\n  637: HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)\n  638  {\n  639    /* Check the parameters */\n  ...\n  701    * @retval HAL status\n  702  */\n  703: HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)\n  704  {\n  705    /* Check the parameters */\n  ...\n  769    * @retval HAL status\n  770  */\n  771: HAL_StatusTypeDef HAL_TIM_OC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)\n  772  {\n  773    /* Check the parameters */\n  ...\n  886    * @retval HAL status\n  887  */\n  888: HAL_StatusTypeDef HAL_TIM_OC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)\n  889  {\n  890    /* Check the parameters */\n  ...\n  971  /**\n  972    * @brief  Initializes the TIM PWM Time Base according to the specified\n  973:   *         parameters in the TIM_HandleTypeDef and create the associated handle.\n  974    * @param  htim : TIM handle\n  975    * @retval HAL status\n  976    */\n  977: HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)\n  978  {\n  979    /* Check the TIM handle allocation */\n  ...\n 1014    * @retval HAL status\n 1015    */\n 1016: HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)\n 1017  {\n 1018    /* Check the parameters */\n ....\n 1041    * @retval None\n 1042    */\n 1043: __weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)\n 1044  {\n 1045    /* NOTE : This function Should not be modified, when the callback is needed,\n ....\n 1053    * @retval None\n 1054    */\n 1055: __weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)\n 1056  {\n 1057    /* NOTE : This function Should not be modified, when the callback is needed,\n ....\n 1071    * @retval HAL status\n 1072  */\n 1073: HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)\n 1074  {\n 1075    /* Check the parameters */\n ....\n 1103    * @retval HAL status\n 1104  */\n 1105: HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)\n 1106  {\n 1107    /* Check the parameters */\n ....\n 1138    * @retval HAL status\n 1139  */\n 1140: HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)\n 1141  {\n 1142    /* Check the parameters */\n ....\n 1204    * @retval HAL status\n 1205  */\n 1206: HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT (TIM_HandleTypeDef *htim, uint32_t Channel)\n 1207  {\n 1208    /* Check the parameters */\n ....\n 1272    * @retval HAL status\n 1273  */\n 1274: HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)\n 1275  {\n 1276    /* Check the parameters */\n ....\n 1389    * @retval HAL status\n 1390  */\n 1391: HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)\n 1392  {\n 1393    /* Check the parameters */\n ....\n 1474  /**\n 1475    * @brief  Initializes the TIM Input Capture Time base according to the specified\n 1476:   *         parameters in the TIM_HandleTypeDef and create the associated handle.\n 1477    * @param  htim : TIM Input Capture handle\n 1478    * @retval HAL status\n 1479    */\n 1480: HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)\n 1481  {\n 1482    /* Check the TIM handle allocation */\n ....\n 1517    * @retval HAL status\n 1518    */\n 1519: HAL_StatusTypeDef HAL_TIM_IC_DeInit(TIM_HandleTypeDef *htim)\n 1520  {\n 1521    /* Check the parameters */\n ....\n 1544    * @retval None\n 1545    */\n 1546: __weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)\n 1547  {\n 1548    /* NOTE : This function Should not be modified, when the callback is needed,\n ....\n 1556    * @retval None\n 1557    */\n 1558: __weak void HAL_TIM_IC_MspDeInit(TIM_HandleTypeDef *htim)\n 1559  {\n 1560    /* NOTE : This function Should not be modified, when the callback is needed,\n ....\n 1574    * @retval HAL status\n 1575  */\n 1576: HAL_StatusTypeDef HAL_TIM_IC_Start (TIM_HandleTypeDef *htim, uint32_t Channel)\n 1577  {\n 1578    /* Check the parameters */\n ....\n 1600    * @retval HAL status\n 1601  */\n 1602: HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)\n 1603  {\n 1604    /* Check the parameters */\n ....\n 1626    * @retval HAL status\n 1627  */\n 1628: HAL_StatusTypeDef HAL_TIM_IC_Start_IT (TIM_HandleTypeDef *htim, uint32_t Channel)\n 1629  {\n 1630    /* Check the parameters */\n ....\n 1685    * @retval HAL status\n 1686  */\n 1687: HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)\n 1688  {\n 1689    /* Check the parameters */\n ....\n 1747    * @retval HAL status\n 1748  */\n 1749: HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)\n 1750  {\n 1751    /* Check the parameters */\n ....\n 1860    * @retval HAL status\n 1861  */\n 1862: HAL_StatusTypeDef HAL_TIM_IC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)\n 1863  {\n 1864    /* Check the parameters */\n ....\n 1939  /**\n 1940    * @brief  Initializes the TIM One Pulse Time Base according to the specified\n 1941:   *         parameters in the TIM_HandleTypeDef and create the associated handle.\n 1942    * @param  htim : TIM OnePulse handle\n 1943    * @param  OnePulseMode : Select the One pulse mode.\n ....\n 1947    * @retval HAL status\n 1948    */\n 1949: HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)\n 1950  {\n 1951    /* Check the TIM handle allocation */\n ....\n 1993    * @retval HAL status\n 1994    */\n 1995: HAL_StatusTypeDef HAL_TIM_OnePulse_DeInit(TIM_HandleTypeDef *htim)\n 1996  {\n 1997    /* Check the parameters */\n ....\n 2020    * @retval None\n 2021    */\n 2022: __weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)\n 2023  {\n 2024    /* NOTE : This function Should not be modified, when the callback is needed,\n ....\n 2032    * @retval None\n 2033    */\n 2034: __weak void HAL_TIM_OnePulse_MspDeInit(TIM_HandleTypeDef *htim)\n 2035  {\n 2036    /* NOTE : This function Should not be modified, when the callback is needed,\n ....\n 2048    * @retval HAL status\n 2049  */\n 2050: HAL_StatusTypeDef HAL_TIM_OnePulse_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)\n 2051  {\n 2052    /* Enable the Capture compare and the Input Capture channels \n ....\n 2081    * @retval HAL status\n 2082  */\n 2083: HAL_StatusTypeDef HAL_TIM_OnePulse_Stop(TIM_HandleTypeDef *htim, uint32_t OutputChannel)\n 2084  {\n 2085    /* Disable the Capture compare and the Input Capture channels\n ....\n 2114    * @retval HAL status\n 2115  */\n 2116: HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)\n 2117  {\n 2118    /* Enable the Capture compare and the Input Capture channels \n ....\n 2153    * @retval HAL status\n 2154  */\n 2155: HAL_StatusTypeDef HAL_TIM_OnePulse_Stop_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)\n 2156  {\n 2157    /* Disable the TIM Capture/Compare 1 interrupt */\n ....\n 2213    * @retval HAL status\n 2214    */\n 2215: HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef* sConfig)\n 2216  {\n 2217    uint32_t tmpsmcr = 0;\n ....\n 2303    * @retval HAL status\n 2304    */\n 2305: HAL_StatusTypeDef HAL_TIM_Encoder_DeInit(TIM_HandleTypeDef *htim)\n 2306  {\n 2307    /* Check the parameters */\n ....\n 2330    * @retval None\n 2331    */\n 2332: __weak void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim)\n 2333  {\n 2334    /* NOTE : This function Should not be modified, when the callback is needed,\n ....\n 2342    * @retval None\n 2343    */\n 2344: __weak void HAL_TIM_Encoder_MspDeInit(TIM_HandleTypeDef *htim)\n 2345  {\n 2346    /* NOTE : This function Should not be modified, when the callback is needed,\n ....\n 2359    * @retval HAL status\n 2360  */\n 2361: HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)\n 2362  {\n 2363    /* Check the parameters */\n ....\n 2401    * @retval HAL status\n 2402  */\n 2403: HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)\n 2404  {\n 2405    /* Check the parameters */\n ....\n 2445    * @retval HAL status\n 2446  */\n 2447: HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)\n 2448  {\n 2449    /* Check the parameters */\n ....\n 2493    * @retval HAL status\n 2494  */\n 2495: HAL_StatusTypeDef HAL_TIM_Encoder_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)\n 2496  {\n 2497    /* Check the parameters */\n ....\n 2547    * @retval HAL status\n 2548  */\n 2549: HAL_StatusTypeDef HAL_TIM_Encoder_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData1, uint32_t *pData2, uint16_t Length)\n 2550  {\n 2551    /* Check the parameters */\n ....\n 2664    * @retval HAL status\n 2665  */\n 2666: HAL_StatusTypeDef HAL_TIM_Encoder_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)\n 2667  {\n 2668    /* Check the parameters */\n ....\n 2726    * @retval None\n 2727    */\n 2728: void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)\n 2729  {\n 2730    /* Capture compare 1 event */\n ....\n 2889    * @retval HAL status\n 2890    */\n 2891: HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)\n 2892  {\n 2893    /* Check the parameters */\n ....\n 2961    * @retval HAL status\n 2962    */\n 2963: HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef* sConfig, uint32_t Channel)\n 2964  {\n 2965    /* Check the parameters */\n ....\n 3057    * @retval HAL status\n 3058    */\n 3059: HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)\n 3060  {\n 3061    __HAL_LOCK(htim);\n ....\n 3160    * @retval HAL status\n 3161    */\n 3162: HAL_StatusTypeDef HAL_TIM_OnePulse_ConfigChannel(TIM_HandleTypeDef *htim,  TIM_OnePulse_InitTypeDef* sConfig, uint32_t OutputChannel,  uint32_t InputChannel)\n 3163  {\n 3164    TIM_OC_InitTypeDef temp1;\n ....\n 3296    * @retval HAL status\n 3297    */\n 3298: HAL_StatusTypeDef HAL_TIM_DMABurst_WriteStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress, uint32_t BurstRequestSrc,\n 3299                                                uint32_t* BurstBuffer, uint32_t  BurstLength)\n 3300  {\n ....\n 3427    * @retval HAL status\n 3428    */\n 3429: HAL_StatusTypeDef HAL_TIM_DMABurst_WriteStop(TIM_HandleTypeDef *htim, uint32_t BurstRequestSrc)\n 3430  {\n 3431    /* Check the parameters */\n ....\n 3519    * @retval HAL status\n 3520    */\n 3521: HAL_StatusTypeDef HAL_TIM_DMABurst_ReadStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress, uint32_t BurstRequestSrc,\n 3522                                               uint32_t  *BurstBuffer, uint32_t  BurstLength)\n 3523  {\n ....\n 3651    * @retval HAL status\n 3652    */\n 3653: HAL_StatusTypeDef HAL_TIM_DMABurst_ReadStop(TIM_HandleTypeDef *htim, uint32_t BurstRequestSrc)\n 3654  {\n 3655    /* Check the parameters */\n ....\n 3723    */\n 3724  \n 3725: HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)\n 3726  {\n 3727    /* Check the parameters */\n ....\n 3760    * @retval HAL status\n 3761    */ \n 3762: HAL_StatusTypeDef HAL_TIM_ConfigOCrefClear(TIM_HandleTypeDef *htim, TIM_ClearInputConfigTypeDef * sClearInputConfig, uint32_t Channel)\n 3763  {\n 3764    uint32_t tmpsmcr = 0;\n ....\n 3885    * @retval HAL status\n 3886    */ \n 3887: HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)\n 3888  {\n 3889    uint32_t tmpsmcr = 0;\n ....\n 4040    * @retval HAL status\n 4041    */\n 4042: HAL_StatusTypeDef HAL_TIM_ConfigTI1Input(TIM_HandleTypeDef *htim, uint32_t TI1_Selection)\n 4043  {\n 4044    uint32_t tmpcr2 = 0;\n ....\n 4072    * @retval HAL status\n 4073    */\n 4074: HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchronization(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef * sSlaveConfig)\n 4075  {\n 4076    /* Check the parameters */\n ....\n 4107    * @retval HAL status\n 4108    */\n 4109: HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchronization_IT(TIM_HandleTypeDef *htim,\n 4110                                                          TIM_SlaveConfigTypeDef * sSlaveConfig)\n 4111      {\n ....\n 4145    * @retval Captured value\n 4146    */\n 4147: uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)\n 4148  {\n 4149    uint32_t tmpreg = 0;\n ....\n 4232    * @retval None\n 4233    */\n 4234: __weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)\n 4235  {\n 4236    /* NOTE : This function Should not be modified, when the callback is needed,\n ....\n 4244    * @retval None\n 4245    */\n 4246: __weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)\n 4247  {\n 4248    /* NOTE : This function Should not be modified, when the callback is needed,\n ....\n 4255    * @retval None\n 4256    */\n 4257: __weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)\n 4258  {\n 4259    /* NOTE : This function Should not be modified, when the callback is needed,\n ....\n 4267    * @retval None\n 4268    */\n 4269: __weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)\n 4270  {\n 4271    /* NOTE : This function Should not be modified, when the callback is needed,\n ....\n 4279    * @retval None\n 4280    */\n 4281: __weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)\n 4282  {\n 4283    /* NOTE : This function Should not be modified, when the callback is needed,\n ....\n 4291    * @retval None\n 4292    */\n 4293: __weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)\n 4294  {\n 4295    /* NOTE : This function Should not be modified, when the callback is needed,\n ....\n 4322    * @retval HAL state\n 4323    */\n 4324: HAL_TIM_StateTypeDef HAL_TIM_Base_GetState(TIM_HandleTypeDef *htim)\n 4325  {\n 4326    return htim->State;\n ....\n 4332    * @retval HAL state\n 4333    */\n 4334: HAL_TIM_StateTypeDef HAL_TIM_OC_GetState(TIM_HandleTypeDef *htim)\n 4335  {\n 4336    return htim->State;\n ....\n 4342    * @retval HAL state\n 4343    */\n 4344: HAL_TIM_StateTypeDef HAL_TIM_PWM_GetState(TIM_HandleTypeDef *htim)\n 4345  {\n 4346    return htim->State;\n ....\n 4352    * @retval HAL state\n 4353    */\n 4354: HAL_TIM_StateTypeDef HAL_TIM_IC_GetState(TIM_HandleTypeDef *htim)\n 4355  {\n 4356    return htim->State;\n ....\n 4362    * @retval HAL state\n 4363    */\n 4364: HAL_TIM_StateTypeDef HAL_TIM_OnePulse_GetState(TIM_HandleTypeDef *htim)\n 4365  {\n 4366    return htim->State;\n ....\n 4372    * @retval HAL state\n 4373    */\n 4374: HAL_TIM_StateTypeDef HAL_TIM_Encoder_GetState(TIM_HandleTypeDef *htim)\n 4375  {\n 4376    return htim->State;\n ....\n 4396  void TIM_DMAError(DMA_HandleTypeDef *hdma)\n 4397  {\n 4398:   TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;\n 4399  \n 4400    htim->State= HAL_TIM_STATE_READY;\n ....\n 4410  void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)\n 4411  {\n 4412:   TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;\n 4413  \n 4414    htim->State= HAL_TIM_STATE_READY;\n ....\n 4442  void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)\n 4443  {\n 4444:   TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;\n 4445  \n 4446    htim->State= HAL_TIM_STATE_READY;\n ....\n 4475  static void TIM_DMAPeriodElapsedCplt(DMA_HandleTypeDef *hdma)\n 4476  {\n 4477:   TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;\n 4478  \n 4479    htim->State= HAL_TIM_STATE_READY;\n ....\n 4489  static void TIM_DMATriggerCplt(DMA_HandleTypeDef *hdma)\n 4490  {\n 4491:   TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;\n 4492  \n 4493    htim->State= HAL_TIM_STATE_READY;\n ....\n 4830  /**\n 4831    * @brief  Time Slave configuration\n 4832:   * @param  htim: pointer to a TIM_HandleTypeDef structure that contains\n 4833    *                the configuration information for TIM module.\n 4834    * @param  sSlaveConfig: The slave configuration structure\n 4835    * @retval None\n 4836    */\n 4837: static void TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,\n 4838                                TIM_SlaveConfigTypeDef * sSlaveConfig)\n 4839  {\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_tim_ex.c:\n  165    * @retval HAL status\n  166    */\n  167: HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef* sConfig)\n  168  {\n  169    TIM_OC_InitTypeDef OC_Config;\n  ...\n  243    * @retval HAL status\n  244    */\n  245: HAL_StatusTypeDef HAL_TIMEx_HallSensor_DeInit(TIM_HandleTypeDef *htim)\n  246  {\n  247    /* Check the parameters */\n  ...\n  270    * @retval None\n  271    */\n  272: __weak void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim)\n  273  {\n  274    /* NOTE : This function Should not be modified, when the callback is needed,\n  ...\n  282    * @retval None\n  283    */\n  284: __weak void HAL_TIMEx_HallSensor_MspDeInit(TIM_HandleTypeDef *htim)\n  285  {\n  286    /* NOTE : This function Should not be modified, when the callback is needed,\n  ...\n  294    * @retval HAL status\n  295    */\n  296: HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start(TIM_HandleTypeDef *htim)\n  297  {\n  298    /* Check the parameters */\n  ...\n  315    * @retval HAL status\n  316    */\n  317: HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop(TIM_HandleTypeDef *htim)\n  318  {\n  319    /* Check the parameters */\n  ...\n  336    * @retval HAL status\n  337    */\n  338: HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_IT(TIM_HandleTypeDef *htim)\n  339  {\n  340    /* Check the parameters */\n  ...\n  360    * @retval HAL status\n  361    */\n  362: HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop_IT(TIM_HandleTypeDef *htim)\n  363  {\n  364    /* Check the parameters */\n  ...\n  386    * @retval HAL status\n  387    */\n  388: HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_DMA(TIM_HandleTypeDef *htim, uint32_t *pData, uint16_t Length)\n  389  {\n  390    /* Check the parameters */\n  ...\n  433    * @retval HAL status\n  434    */\n  435: HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop_DMA(TIM_HandleTypeDef *htim)\n  436  {\n  437    /* Check the parameters */\n  ...\n  493    * @retval HAL status\n  494    */\n  495: HAL_StatusTypeDef HAL_TIMEx_OCN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)\n  496  {\n  497    /* Check the parameters */\n  ...\n  523    * @retval HAL status\n  524    */\n  525: HAL_StatusTypeDef HAL_TIMEx_OCN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)\n  526  {\n  527    /* Check the parameters */\n  ...\n  553    * @retval HAL status\n  554    */\n  555: HAL_StatusTypeDef HAL_TIMEx_OCN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)\n  556  {\n  557    /* Check the parameters */\n  ...\n  620    * @retval HAL status\n  621    */\n  622: HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)\n  623  {\n  624    uint32_t tmpccer = 0;\n  ...\n  695    * @retval HAL status\n  696    */\n  697: HAL_StatusTypeDef HAL_TIMEx_OCN_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)\n  698  {\n  699    /* Check the parameters */\n  ...\n  810    * @retval HAL status\n  811    */\n  812: HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)\n  813  {\n  814    /* Check the parameters */\n  ...\n  910    * @retval HAL status\n  911    */\n  912: HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)\n  913  {\n  914    /* Check the parameters */\n  ...\n  939    * @retval HAL status\n  940    */\n  941: HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)\n  942  {\n  943    /* Check the parameters */\n  ...\n  969    * @retval HAL status\n  970    */\n  971: HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)\n  972  {\n  973    /* Check the parameters */\n  ...\n 1036    * @retval HAL status\n 1037    */\n 1038: HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_IT (TIM_HandleTypeDef *htim, uint32_t Channel)\n 1039  {\n 1040    uint32_t tmpccer = 0;\n ....\n 1111    * @retval HAL status\n 1112    */\n 1113: HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)\n 1114  {\n 1115    /* Check the parameters */\n ....\n 1226    * @retval HAL status\n 1227    */\n 1228: HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)\n 1229  {\n 1230    /* Check the parameters */\n ....\n 1313    * @retval HAL status\n 1314    */\n 1315: HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)\n 1316    {\n 1317    /* Check the parameters */\n ....\n 1338    * @retval HAL status\n 1339    */\n 1340: HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Stop(TIM_HandleTypeDef *htim, uint32_t OutputChannel)\n 1341  {\n 1342  \n ....\n 1367    * @retval HAL status\n 1368    */\n 1369: HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)\n 1370  {\n 1371    /* Check the parameters */\n ....\n 1398    * @retval HAL status\n 1399    */\n 1400: HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)\n 1401  {\n 1402    /* Check the parameters */\n ....\n 1473    * @retval HAL status\n 1474    */\n 1475: HAL_StatusTypeDef HAL_TIMEx_ConfigCommutationEvent(TIM_HandleTypeDef *htim, uint32_t  InputTrigger, uint32_t  CommutationSource)\n 1476  {\n 1477    /* Check the parameters */\n ....\n 1522    * @retval HAL status\n 1523    */\n 1524: HAL_StatusTypeDef HAL_TIMEx_ConfigCommutationEvent_IT(TIM_HandleTypeDef *htim, uint32_t  InputTrigger, uint32_t  CommutationSource)\n 1525  {\n 1526    /* Check the parameters */\n ....\n 1575    * @retval HAL status\n 1576    */\n 1577: HAL_StatusTypeDef HAL_TIMEx_ConfigCommutationEvent_DMA(TIM_HandleTypeDef *htim, uint32_t  InputTrigger, uint32_t  CommutationSource)\n 1578  {\n 1579    /* Check the parameters */\n ....\n 1619    * @retval HAL status\n 1620    */\n 1621: HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,\n 1622                                                  TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)\n 1623  {\n ....\n 1667    * @retval HAL status\n 1668    */\n 1669: HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)\n 1670  {\n 1671    /* Check the parameters */\n ....\n 1720    * @retval None\n 1721    */\n 1722: __weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)\n 1723  {\n 1724    /* NOTE : This function Should not be modified, when the callback is needed,\n ....\n 1732    * @retval None\n 1733    */\n 1734: __weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)\n 1735  {\n 1736    /* NOTE : This function Should not be modified, when the callback is needed,\n ....\n 1746  void TIMEx_DMACommutationCplt(DMA_HandleTypeDef *hdma)\n 1747  {\n 1748:   TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;\n 1749  \n 1750    htim->State= HAL_TIM_STATE_READY;\n ....\n 1781    * @retval HAL state\n 1782    */\n 1783: HAL_TIM_StateTypeDef HAL_TIMEx_HallSensor_GetState(TIM_HandleTypeDef *htim)\n 1784  {\n 1785    return htim->State;\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\Backup\\main.c.bak:\n   40  \n   41  /* Private variables ---------------------------------------------------------*/\n   42: TIM_HandleTypeDef htim1;\n   43  \n   44  /* USER CODE BEGIN PV */\n   ..\n   61  \n   62  /* USER CODE BEGIN 0 */\n   63: void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)\n   64  {\n   65  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\Backup\\stm32f1xx_hal_msp.c.bak:\n   61  }\n   62  \n   63: void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)\n   64  {\n   65  \n   ..\n   91  }\n   92  \n   93: void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)\n   94  {\n   95  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\Backup\\stm32f1xx_it.c.bak:\n   42  /* External variables --------------------------------------------------------*/\n   43  extern PCD_HandleTypeDef hpcd_USB_FS;\n   44: extern TIM_HandleTypeDef htim1;\n   45  \n   46  /******************************************************************************/\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\main.c:\n   40  \n   41  /* Private variables ---------------------------------------------------------*/\n   42: TIM_HandleTypeDef htim1;\n   43  \n   44  /* USER CODE BEGIN PV */\n   ..\n   61  \n   62  /* USER CODE BEGIN 0 */\n   63: void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim) {\n   64  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);\n   65  	asm(\"NOP\");\n   ..\n   72  }\n   73  \n   74: void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {\n   75  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);\n   76  	asm(\"NOP\");\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\main.c.bak:\n   40  \n   41  /* Private variables ---------------------------------------------------------*/\n   42: TIM_HandleTypeDef htim1;\n   43  \n   44  /* USER CODE BEGIN PV */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\stm32f1xx_hal_msp.c:\n   61  }\n   62  \n   63: void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)\n   64  {\n   65  \n   ..\n   91  }\n   92  \n   93: void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)\n   94  {\n   95  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\stm32f1xx_it.c:\n   42  /* External variables --------------------------------------------------------*/\n   43  extern PCD_HandleTypeDef hpcd_USB_FS;\n   44: extern TIM_HandleTypeDef htim1;\n   45  \n   46  /******************************************************************************/\n\nD:\\WorkSTM32\\stm32_PPM_F103\\stm32_PPM_F103\\Debug\\bin\\stm32_PPM_F103.elf:\n    <binary>\n\n274 matches across 12 files\n\n\nSearching 126 files for \"TIM_Base_InitTypeDef\"\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal_tim.h:\n   85                                       This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFF.\n   86                                       @note This parameter is valid only for TIM1 and TIM8. */\n   87: } TIM_Base_InitTypeDef;\n   88  \n   89  /**\n   ..\n  287  {\n  288    TIM_TypeDef              *Instance;     /*!< Register base address             */\n  289:   TIM_Base_InitTypeDef     Init;          /*!< TIM Time Base required parameters */\n  290    HAL_TIM_ActiveChannel    Channel;       /*!< Active channel                    */\n  291    DMA_HandleTypeDef        *hdma[7];      /*!< DMA Handlers array\n  ...\n 1154   * @{\n 1155   */\n 1156: void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure);\n 1157  void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection, uint32_t TIM_ICFilter);\n 1158  void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config);\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_tim.c:\n 4502    * @retval None\n 4503    */\n 4504: void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)\n 4505  {\n 4506    uint32_t tmpcr1 = 0;\n\nD:\\WorkSTM32\\stm32_PPM_F103\\stm32_PPM_F103\\Debug\\bin\\stm32_PPM_F103.elf:\n    <binary>\n\n5 matches across 3 files\n\n\nSearching 126 files for \"TIE\"\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f100xb.h:\n   31    *\n   32    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   33:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   34:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   35    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   36    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n   ..\n 2217  #define  DMA_CCR_EN                          ((uint32_t)0x00000001)        /*!< Channel enable */\n 2218  #define  DMA_CCR_TCIE                        ((uint32_t)0x00000002)        /*!< Transfer complete interrupt enable */\n 2219: #define  DMA_CCR_HTIE                        ((uint32_t)0x00000004)        /*!< Half Transfer interrupt enable */\n 2220  #define  DMA_CCR_TEIE                        ((uint32_t)0x00000008)        /*!< Transfer error interrupt enable */\n 2221  #define  DMA_CCR_DIR                         ((uint32_t)0x00000010)        /*!< Data transfer direction */\n ....\n 2806  #define  TIM_DIER_CC4IE                      ((uint32_t)0x00000010)            /*!<Capture/Compare 4 interrupt enable */\n 2807  #define  TIM_DIER_COMIE                      ((uint32_t)0x00000020)            /*!<COM interrupt enable */\n 2808: #define  TIM_DIER_TIE                        ((uint32_t)0x00000040)            /*!<Trigger interrupt enable */\n 2809  #define  TIM_DIER_BIE                        ((uint32_t)0x00000080)            /*!<Break interrupt enable */\n 2810  #define  TIM_DIER_UDE                        ((uint32_t)0x00000100)            /*!<Update DMA request enable */\n ....\n 3258  #define  SDIO_MASK_CCRCFAILIE                ((uint32_t)0x00000001)        /*!< Command CRC Fail Interrupt Enable */\n 3259  #define  SDIO_MASK_DCRCFAILIE                ((uint32_t)0x00000002)        /*!< Data CRC Fail Interrupt Enable */\n 3260: #define  SDIO_MASK_CTIMEOUTIE                ((uint32_t)0x00000004)        /*!< Command TimeOut Interrupt Enable */\n 3261: #define  SDIO_MASK_DTIMEOUTIE                ((uint32_t)0x00000008)        /*!< Data TimeOut Interrupt Enable */\n 3262  #define  SDIO_MASK_TXUNDERRIE                ((uint32_t)0x00000010)        /*!< Tx FIFO UnderRun Error Interrupt Enable */\n 3263  #define  SDIO_MASK_RXOVERRIE                 ((uint32_t)0x00000020)        /*!< Rx FIFO OverRun Error Interrupt Enable */\n 3264  #define  SDIO_MASK_CMDRENDIE                 ((uint32_t)0x00000040)        /*!< Command Response Received Interrupt Enable */\n 3265: #define  SDIO_MASK_CMDSENTIE                 ((uint32_t)0x00000080)        /*!< Command Sent Interrupt Enable */\n 3266  #define  SDIO_MASK_DATAENDIE                 ((uint32_t)0x00000100)        /*!< Data End Interrupt Enable */\n 3267  #define  SDIO_MASK_STBITERRIE                ((uint32_t)0x00000200)        /*!< Start Bit Error Interrupt Enable */\n 3268  #define  SDIO_MASK_DBCKENDIE                 ((uint32_t)0x00000400)        /*!< Data Block End Interrupt Enable */\n 3269: #define  SDIO_MASK_CMDACTIE                  ((uint32_t)0x00000800)        /*!< Command Acting Interrupt Enable */\n 3270: #define  SDIO_MASK_TXACTIE                   ((uint32_t)0x00001000)        /*!< Data Transmit Acting Interrupt Enable */\n 3271: #define  SDIO_MASK_RXACTIE                   ((uint32_t)0x00002000)        /*!< Data receive acting interrupt enabled */\n 3272  #define  SDIO_MASK_TXFIFOHEIE                ((uint32_t)0x00004000)        /*!< Tx FIFO Half Empty interrupt Enable */\n 3273  #define  SDIO_MASK_RXFIFOHFIE                ((uint32_t)0x00008000)        /*!< Rx FIFO Half Full interrupt Enable */\n ....\n 3278  #define  SDIO_MASK_TXDAVLIE                  ((uint32_t)0x00100000)        /*!< Data available in Tx FIFO interrupt Enable */\n 3279  #define  SDIO_MASK_RXDAVLIE                  ((uint32_t)0x00200000)        /*!< Data available in Rx FIFO interrupt Enable */\n 3280: #define  SDIO_MASK_SDIOITIE                  ((uint32_t)0x00400000)        /*!< SDIO Mode Interrupt Received interrupt Enable */\n 3281  #define  SDIO_MASK_CEATAENDIE                ((uint32_t)0x00800000)        /*!< CE-ATA command completion signal received Interrupt Enable */\n 3282  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f100xe.h:\n   31    *\n   32    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   33:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   34:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   35    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   36    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n   ..\n 2448  #define  DMA_CCR_EN                          ((uint32_t)0x00000001)        /*!< Channel enable */\n 2449  #define  DMA_CCR_TCIE                        ((uint32_t)0x00000002)        /*!< Transfer complete interrupt enable */\n 2450: #define  DMA_CCR_HTIE                        ((uint32_t)0x00000004)        /*!< Half Transfer interrupt enable */\n 2451  #define  DMA_CCR_TEIE                        ((uint32_t)0x00000008)        /*!< Transfer error interrupt enable */\n 2452  #define  DMA_CCR_DIR                         ((uint32_t)0x00000010)        /*!< Data transfer direction */\n ....\n 3037  #define  TIM_DIER_CC4IE                      ((uint32_t)0x00000010)            /*!<Capture/Compare 4 interrupt enable */\n 3038  #define  TIM_DIER_COMIE                      ((uint32_t)0x00000020)            /*!<COM interrupt enable */\n 3039: #define  TIM_DIER_TIE                        ((uint32_t)0x00000040)            /*!<Trigger interrupt enable */\n 3040  #define  TIM_DIER_BIE                        ((uint32_t)0x00000080)            /*!<Break interrupt enable */\n 3041  #define  TIM_DIER_UDE                        ((uint32_t)0x00000100)            /*!<Update DMA request enable */\n ....\n 3602  #define  SDIO_MASK_CCRCFAILIE                ((uint32_t)0x00000001)        /*!< Command CRC Fail Interrupt Enable */\n 3603  #define  SDIO_MASK_DCRCFAILIE                ((uint32_t)0x00000002)        /*!< Data CRC Fail Interrupt Enable */\n 3604: #define  SDIO_MASK_CTIMEOUTIE                ((uint32_t)0x00000004)        /*!< Command TimeOut Interrupt Enable */\n 3605: #define  SDIO_MASK_DTIMEOUTIE                ((uint32_t)0x00000008)        /*!< Data TimeOut Interrupt Enable */\n 3606  #define  SDIO_MASK_TXUNDERRIE                ((uint32_t)0x00000010)        /*!< Tx FIFO UnderRun Error Interrupt Enable */\n 3607  #define  SDIO_MASK_RXOVERRIE                 ((uint32_t)0x00000020)        /*!< Rx FIFO OverRun Error Interrupt Enable */\n 3608  #define  SDIO_MASK_CMDRENDIE                 ((uint32_t)0x00000040)        /*!< Command Response Received Interrupt Enable */\n 3609: #define  SDIO_MASK_CMDSENTIE                 ((uint32_t)0x00000080)        /*!< Command Sent Interrupt Enable */\n 3610  #define  SDIO_MASK_DATAENDIE                 ((uint32_t)0x00000100)        /*!< Data End Interrupt Enable */\n 3611  #define  SDIO_MASK_STBITERRIE                ((uint32_t)0x00000200)        /*!< Start Bit Error Interrupt Enable */\n 3612  #define  SDIO_MASK_DBCKENDIE                 ((uint32_t)0x00000400)        /*!< Data Block End Interrupt Enable */\n 3613: #define  SDIO_MASK_CMDACTIE                  ((uint32_t)0x00000800)        /*!< Command Acting Interrupt Enable */\n 3614: #define  SDIO_MASK_TXACTIE                   ((uint32_t)0x00001000)        /*!< Data Transmit Acting Interrupt Enable */\n 3615: #define  SDIO_MASK_RXACTIE                   ((uint32_t)0x00002000)        /*!< Data receive acting interrupt enabled */\n 3616  #define  SDIO_MASK_TXFIFOHEIE                ((uint32_t)0x00004000)        /*!< Tx FIFO Half Empty interrupt Enable */\n 3617  #define  SDIO_MASK_RXFIFOHFIE                ((uint32_t)0x00008000)        /*!< Rx FIFO Half Full interrupt Enable */\n ....\n 3622  #define  SDIO_MASK_TXDAVLIE                  ((uint32_t)0x00100000)        /*!< Data available in Tx FIFO interrupt Enable */\n 3623  #define  SDIO_MASK_RXDAVLIE                  ((uint32_t)0x00200000)        /*!< Data available in Rx FIFO interrupt Enable */\n 3624: #define  SDIO_MASK_SDIOITIE                  ((uint32_t)0x00400000)        /*!< SDIO Mode Interrupt Received interrupt Enable */\n 3625  #define  SDIO_MASK_CEATAENDIE                ((uint32_t)0x00800000)        /*!< CE-ATA command completion signal received Interrupt Enable */\n 3626  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f101x6.h:\n   31    *\n   32    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   33:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   34:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   35    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   36    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n   ..\n 2080  #define  DMA_CCR_EN                          ((uint32_t)0x00000001)        /*!< Channel enable */\n 2081  #define  DMA_CCR_TCIE                        ((uint32_t)0x00000002)        /*!< Transfer complete interrupt enable */\n 2082: #define  DMA_CCR_HTIE                        ((uint32_t)0x00000004)        /*!< Half Transfer interrupt enable */\n 2083  #define  DMA_CCR_TEIE                        ((uint32_t)0x00000008)        /*!< Transfer error interrupt enable */\n 2084  #define  DMA_CCR_DIR                         ((uint32_t)0x00000010)        /*!< Data transfer direction */\n ....\n 2530  #define  TIM_DIER_CC4IE                      ((uint32_t)0x00000010)            /*!<Capture/Compare 4 interrupt enable */\n 2531  #define  TIM_DIER_COMIE                      ((uint32_t)0x00000020)            /*!<COM interrupt enable */\n 2532: #define  TIM_DIER_TIE                        ((uint32_t)0x00000040)            /*!<Trigger interrupt enable */\n 2533  #define  TIM_DIER_BIE                        ((uint32_t)0x00000080)            /*!<Break interrupt enable */\n 2534  #define  TIM_DIER_UDE                        ((uint32_t)0x00000100)            /*!<Update DMA request enable */\n ....\n 2982  #define  SDIO_MASK_CCRCFAILIE                ((uint32_t)0x00000001)        /*!< Command CRC Fail Interrupt Enable */\n 2983  #define  SDIO_MASK_DCRCFAILIE                ((uint32_t)0x00000002)        /*!< Data CRC Fail Interrupt Enable */\n 2984: #define  SDIO_MASK_CTIMEOUTIE                ((uint32_t)0x00000004)        /*!< Command TimeOut Interrupt Enable */\n 2985: #define  SDIO_MASK_DTIMEOUTIE                ((uint32_t)0x00000008)        /*!< Data TimeOut Interrupt Enable */\n 2986  #define  SDIO_MASK_TXUNDERRIE                ((uint32_t)0x00000010)        /*!< Tx FIFO UnderRun Error Interrupt Enable */\n 2987  #define  SDIO_MASK_RXOVERRIE                 ((uint32_t)0x00000020)        /*!< Rx FIFO OverRun Error Interrupt Enable */\n 2988  #define  SDIO_MASK_CMDRENDIE                 ((uint32_t)0x00000040)        /*!< Command Response Received Interrupt Enable */\n 2989: #define  SDIO_MASK_CMDSENTIE                 ((uint32_t)0x00000080)        /*!< Command Sent Interrupt Enable */\n 2990  #define  SDIO_MASK_DATAENDIE                 ((uint32_t)0x00000100)        /*!< Data End Interrupt Enable */\n 2991  #define  SDIO_MASK_STBITERRIE                ((uint32_t)0x00000200)        /*!< Start Bit Error Interrupt Enable */\n 2992  #define  SDIO_MASK_DBCKENDIE                 ((uint32_t)0x00000400)        /*!< Data Block End Interrupt Enable */\n 2993: #define  SDIO_MASK_CMDACTIE                  ((uint32_t)0x00000800)        /*!< Command Acting Interrupt Enable */\n 2994: #define  SDIO_MASK_TXACTIE                   ((uint32_t)0x00001000)        /*!< Data Transmit Acting Interrupt Enable */\n 2995: #define  SDIO_MASK_RXACTIE                   ((uint32_t)0x00002000)        /*!< Data receive acting interrupt enabled */\n 2996  #define  SDIO_MASK_TXFIFOHEIE                ((uint32_t)0x00004000)        /*!< Tx FIFO Half Empty interrupt Enable */\n 2997  #define  SDIO_MASK_RXFIFOHFIE                ((uint32_t)0x00008000)        /*!< Rx FIFO Half Full interrupt Enable */\n ....\n 3002  #define  SDIO_MASK_TXDAVLIE                  ((uint32_t)0x00100000)        /*!< Data available in Tx FIFO interrupt Enable */\n 3003  #define  SDIO_MASK_RXDAVLIE                  ((uint32_t)0x00200000)        /*!< Data available in Rx FIFO interrupt Enable */\n 3004: #define  SDIO_MASK_SDIOITIE                  ((uint32_t)0x00400000)        /*!< SDIO Mode Interrupt Received interrupt Enable */\n 3005  #define  SDIO_MASK_CEATAENDIE                ((uint32_t)0x00800000)        /*!< CE-ATA command completion signal received Interrupt Enable */\n 3006  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f101xb.h:\n   31    *\n   32    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   33:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   34:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   35    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   36    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n   ..\n 2114  #define  DMA_CCR_EN                          ((uint32_t)0x00000001)        /*!< Channel enable */\n 2115  #define  DMA_CCR_TCIE                        ((uint32_t)0x00000002)        /*!< Transfer complete interrupt enable */\n 2116: #define  DMA_CCR_HTIE                        ((uint32_t)0x00000004)        /*!< Half Transfer interrupt enable */\n 2117  #define  DMA_CCR_TEIE                        ((uint32_t)0x00000008)        /*!< Transfer error interrupt enable */\n 2118  #define  DMA_CCR_DIR                         ((uint32_t)0x00000010)        /*!< Data transfer direction */\n ....\n 2564  #define  TIM_DIER_CC4IE                      ((uint32_t)0x00000010)            /*!<Capture/Compare 4 interrupt enable */\n 2565  #define  TIM_DIER_COMIE                      ((uint32_t)0x00000020)            /*!<COM interrupt enable */\n 2566: #define  TIM_DIER_TIE                        ((uint32_t)0x00000040)            /*!<Trigger interrupt enable */\n 2567  #define  TIM_DIER_BIE                        ((uint32_t)0x00000080)            /*!<Break interrupt enable */\n 2568  #define  TIM_DIER_UDE                        ((uint32_t)0x00000100)            /*!<Update DMA request enable */\n ....\n 3016  #define  SDIO_MASK_CCRCFAILIE                ((uint32_t)0x00000001)        /*!< Command CRC Fail Interrupt Enable */\n 3017  #define  SDIO_MASK_DCRCFAILIE                ((uint32_t)0x00000002)        /*!< Data CRC Fail Interrupt Enable */\n 3018: #define  SDIO_MASK_CTIMEOUTIE                ((uint32_t)0x00000004)        /*!< Command TimeOut Interrupt Enable */\n 3019: #define  SDIO_MASK_DTIMEOUTIE                ((uint32_t)0x00000008)        /*!< Data TimeOut Interrupt Enable */\n 3020  #define  SDIO_MASK_TXUNDERRIE                ((uint32_t)0x00000010)        /*!< Tx FIFO UnderRun Error Interrupt Enable */\n 3021  #define  SDIO_MASK_RXOVERRIE                 ((uint32_t)0x00000020)        /*!< Rx FIFO OverRun Error Interrupt Enable */\n 3022  #define  SDIO_MASK_CMDRENDIE                 ((uint32_t)0x00000040)        /*!< Command Response Received Interrupt Enable */\n 3023: #define  SDIO_MASK_CMDSENTIE                 ((uint32_t)0x00000080)        /*!< Command Sent Interrupt Enable */\n 3024  #define  SDIO_MASK_DATAENDIE                 ((uint32_t)0x00000100)        /*!< Data End Interrupt Enable */\n 3025  #define  SDIO_MASK_STBITERRIE                ((uint32_t)0x00000200)        /*!< Start Bit Error Interrupt Enable */\n 3026  #define  SDIO_MASK_DBCKENDIE                 ((uint32_t)0x00000400)        /*!< Data Block End Interrupt Enable */\n 3027: #define  SDIO_MASK_CMDACTIE                  ((uint32_t)0x00000800)        /*!< Command Acting Interrupt Enable */\n 3028: #define  SDIO_MASK_TXACTIE                   ((uint32_t)0x00001000)        /*!< Data Transmit Acting Interrupt Enable */\n 3029: #define  SDIO_MASK_RXACTIE                   ((uint32_t)0x00002000)        /*!< Data receive acting interrupt enabled */\n 3030  #define  SDIO_MASK_TXFIFOHEIE                ((uint32_t)0x00004000)        /*!< Tx FIFO Half Empty interrupt Enable */\n 3031  #define  SDIO_MASK_RXFIFOHFIE                ((uint32_t)0x00008000)        /*!< Rx FIFO Half Full interrupt Enable */\n ....\n 3036  #define  SDIO_MASK_TXDAVLIE                  ((uint32_t)0x00100000)        /*!< Data available in Tx FIFO interrupt Enable */\n 3037  #define  SDIO_MASK_RXDAVLIE                  ((uint32_t)0x00200000)        /*!< Data available in Rx FIFO interrupt Enable */\n 3038: #define  SDIO_MASK_SDIOITIE                  ((uint32_t)0x00400000)        /*!< SDIO Mode Interrupt Received interrupt Enable */\n 3039  #define  SDIO_MASK_CEATAENDIE                ((uint32_t)0x00800000)        /*!< CE-ATA command completion signal received Interrupt Enable */\n 3040  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f101xe.h:\n   31    *\n   32    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   33:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   34:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   35    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   36    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n   ..\n 2399  #define  DMA_CCR_EN                          ((uint32_t)0x00000001)        /*!< Channel enable */\n 2400  #define  DMA_CCR_TCIE                        ((uint32_t)0x00000002)        /*!< Transfer complete interrupt enable */\n 2401: #define  DMA_CCR_HTIE                        ((uint32_t)0x00000004)        /*!< Half Transfer interrupt enable */\n 2402  #define  DMA_CCR_TEIE                        ((uint32_t)0x00000008)        /*!< Transfer error interrupt enable */\n 2403  #define  DMA_CCR_DIR                         ((uint32_t)0x00000010)        /*!< Data transfer direction */\n ....\n 2938  #define  TIM_DIER_CC4IE                      ((uint32_t)0x00000010)            /*!<Capture/Compare 4 interrupt enable */\n 2939  #define  TIM_DIER_COMIE                      ((uint32_t)0x00000020)            /*!<COM interrupt enable */\n 2940: #define  TIM_DIER_TIE                        ((uint32_t)0x00000040)            /*!<Trigger interrupt enable */\n 2941  #define  TIM_DIER_BIE                        ((uint32_t)0x00000080)            /*!<Break interrupt enable */\n 2942  #define  TIM_DIER_UDE                        ((uint32_t)0x00000100)            /*!<Update DMA request enable */\n ....\n 3662  #define  SDIO_MASK_CCRCFAILIE                ((uint32_t)0x00000001)        /*!< Command CRC Fail Interrupt Enable */\n 3663  #define  SDIO_MASK_DCRCFAILIE                ((uint32_t)0x00000002)        /*!< Data CRC Fail Interrupt Enable */\n 3664: #define  SDIO_MASK_CTIMEOUTIE                ((uint32_t)0x00000004)        /*!< Command TimeOut Interrupt Enable */\n 3665: #define  SDIO_MASK_DTIMEOUTIE                ((uint32_t)0x00000008)        /*!< Data TimeOut Interrupt Enable */\n 3666  #define  SDIO_MASK_TXUNDERRIE                ((uint32_t)0x00000010)        /*!< Tx FIFO UnderRun Error Interrupt Enable */\n 3667  #define  SDIO_MASK_RXOVERRIE                 ((uint32_t)0x00000020)        /*!< Rx FIFO OverRun Error Interrupt Enable */\n 3668  #define  SDIO_MASK_CMDRENDIE                 ((uint32_t)0x00000040)        /*!< Command Response Received Interrupt Enable */\n 3669: #define  SDIO_MASK_CMDSENTIE                 ((uint32_t)0x00000080)        /*!< Command Sent Interrupt Enable */\n 3670  #define  SDIO_MASK_DATAENDIE                 ((uint32_t)0x00000100)        /*!< Data End Interrupt Enable */\n 3671  #define  SDIO_MASK_STBITERRIE                ((uint32_t)0x00000200)        /*!< Start Bit Error Interrupt Enable */\n 3672  #define  SDIO_MASK_DBCKENDIE                 ((uint32_t)0x00000400)        /*!< Data Block End Interrupt Enable */\n 3673: #define  SDIO_MASK_CMDACTIE                  ((uint32_t)0x00000800)        /*!< Command Acting Interrupt Enable */\n 3674: #define  SDIO_MASK_TXACTIE                   ((uint32_t)0x00001000)        /*!< Data Transmit Acting Interrupt Enable */\n 3675: #define  SDIO_MASK_RXACTIE                   ((uint32_t)0x00002000)        /*!< Data receive acting interrupt enabled */\n 3676  #define  SDIO_MASK_TXFIFOHEIE                ((uint32_t)0x00004000)        /*!< Tx FIFO Half Empty interrupt Enable */\n 3677  #define  SDIO_MASK_RXFIFOHFIE                ((uint32_t)0x00008000)        /*!< Rx FIFO Half Full interrupt Enable */\n ....\n 3682  #define  SDIO_MASK_TXDAVLIE                  ((uint32_t)0x00100000)        /*!< Data available in Tx FIFO interrupt Enable */\n 3683  #define  SDIO_MASK_RXDAVLIE                  ((uint32_t)0x00200000)        /*!< Data available in Rx FIFO interrupt Enable */\n 3684: #define  SDIO_MASK_SDIOITIE                  ((uint32_t)0x00400000)        /*!< SDIO Mode Interrupt Received interrupt Enable */\n 3685  #define  SDIO_MASK_CEATAENDIE                ((uint32_t)0x00800000)        /*!< CE-ATA command completion signal received Interrupt Enable */\n 3686  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f101xg.h:\n   31    *\n   32    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   33:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   34:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   35    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   36    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n   ..\n 2445  #define  DMA_CCR_EN                          ((uint32_t)0x00000001)        /*!< Channel enable */\n 2446  #define  DMA_CCR_TCIE                        ((uint32_t)0x00000002)        /*!< Transfer complete interrupt enable */\n 2447: #define  DMA_CCR_HTIE                        ((uint32_t)0x00000004)        /*!< Half Transfer interrupt enable */\n 2448  #define  DMA_CCR_TEIE                        ((uint32_t)0x00000008)        /*!< Transfer error interrupt enable */\n 2449  #define  DMA_CCR_DIR                         ((uint32_t)0x00000010)        /*!< Data transfer direction */\n ....\n 2991  #define  TIM_DIER_CC4IE                      ((uint32_t)0x00000010)            /*!<Capture/Compare 4 interrupt enable */\n 2992  #define  TIM_DIER_COMIE                      ((uint32_t)0x00000020)            /*!<COM interrupt enable */\n 2993: #define  TIM_DIER_TIE                        ((uint32_t)0x00000040)            /*!<Trigger interrupt enable */\n 2994  #define  TIM_DIER_BIE                        ((uint32_t)0x00000080)            /*!<Break interrupt enable */\n 2995  #define  TIM_DIER_UDE                        ((uint32_t)0x00000100)            /*!<Update DMA request enable */\n ....\n 3715  #define  SDIO_MASK_CCRCFAILIE                ((uint32_t)0x00000001)        /*!< Command CRC Fail Interrupt Enable */\n 3716  #define  SDIO_MASK_DCRCFAILIE                ((uint32_t)0x00000002)        /*!< Data CRC Fail Interrupt Enable */\n 3717: #define  SDIO_MASK_CTIMEOUTIE                ((uint32_t)0x00000004)        /*!< Command TimeOut Interrupt Enable */\n 3718: #define  SDIO_MASK_DTIMEOUTIE                ((uint32_t)0x00000008)        /*!< Data TimeOut Interrupt Enable */\n 3719  #define  SDIO_MASK_TXUNDERRIE                ((uint32_t)0x00000010)        /*!< Tx FIFO UnderRun Error Interrupt Enable */\n 3720  #define  SDIO_MASK_RXOVERRIE                 ((uint32_t)0x00000020)        /*!< Rx FIFO OverRun Error Interrupt Enable */\n 3721  #define  SDIO_MASK_CMDRENDIE                 ((uint32_t)0x00000040)        /*!< Command Response Received Interrupt Enable */\n 3722: #define  SDIO_MASK_CMDSENTIE                 ((uint32_t)0x00000080)        /*!< Command Sent Interrupt Enable */\n 3723  #define  SDIO_MASK_DATAENDIE                 ((uint32_t)0x00000100)        /*!< Data End Interrupt Enable */\n 3724  #define  SDIO_MASK_STBITERRIE                ((uint32_t)0x00000200)        /*!< Start Bit Error Interrupt Enable */\n 3725  #define  SDIO_MASK_DBCKENDIE                 ((uint32_t)0x00000400)        /*!< Data Block End Interrupt Enable */\n 3726: #define  SDIO_MASK_CMDACTIE                  ((uint32_t)0x00000800)        /*!< Command Acting Interrupt Enable */\n 3727: #define  SDIO_MASK_TXACTIE                   ((uint32_t)0x00001000)        /*!< Data Transmit Acting Interrupt Enable */\n 3728: #define  SDIO_MASK_RXACTIE                   ((uint32_t)0x00002000)        /*!< Data receive acting interrupt enabled */\n 3729  #define  SDIO_MASK_TXFIFOHEIE                ((uint32_t)0x00004000)        /*!< Tx FIFO Half Empty interrupt Enable */\n 3730  #define  SDIO_MASK_RXFIFOHFIE                ((uint32_t)0x00008000)        /*!< Rx FIFO Half Full interrupt Enable */\n ....\n 3735  #define  SDIO_MASK_TXDAVLIE                  ((uint32_t)0x00100000)        /*!< Data available in Tx FIFO interrupt Enable */\n 3736  #define  SDIO_MASK_RXDAVLIE                  ((uint32_t)0x00200000)        /*!< Data available in Rx FIFO interrupt Enable */\n 3737: #define  SDIO_MASK_SDIOITIE                  ((uint32_t)0x00400000)        /*!< SDIO Mode Interrupt Received interrupt Enable */\n 3738  #define  SDIO_MASK_CEATAENDIE                ((uint32_t)0x00800000)        /*!< CE-ATA command completion signal received Interrupt Enable */\n 3739  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f102x6.h:\n   31    *\n   32    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   33:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   34:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   35    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   36    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n   ..\n 2123  #define  DMA_CCR_EN                          ((uint32_t)0x00000001)        /*!< Channel enable */\n 2124  #define  DMA_CCR_TCIE                        ((uint32_t)0x00000002)        /*!< Transfer complete interrupt enable */\n 2125: #define  DMA_CCR_HTIE                        ((uint32_t)0x00000004)        /*!< Half Transfer interrupt enable */\n 2126  #define  DMA_CCR_TEIE                        ((uint32_t)0x00000008)        /*!< Transfer error interrupt enable */\n 2127  #define  DMA_CCR_DIR                         ((uint32_t)0x00000010)        /*!< Data transfer direction */\n ....\n 2573  #define  TIM_DIER_CC4IE                      ((uint32_t)0x00000010)            /*!<Capture/Compare 4 interrupt enable */\n 2574  #define  TIM_DIER_COMIE                      ((uint32_t)0x00000020)            /*!<COM interrupt enable */\n 2575: #define  TIM_DIER_TIE                        ((uint32_t)0x00000040)            /*!<Trigger interrupt enable */\n 2576  #define  TIM_DIER_BIE                        ((uint32_t)0x00000080)            /*!<Break interrupt enable */\n 2577  #define  TIM_DIER_UDE                        ((uint32_t)0x00000100)            /*!<Update DMA request enable */\n ....\n 3025  #define  SDIO_MASK_CCRCFAILIE                ((uint32_t)0x00000001)        /*!< Command CRC Fail Interrupt Enable */\n 3026  #define  SDIO_MASK_DCRCFAILIE                ((uint32_t)0x00000002)        /*!< Data CRC Fail Interrupt Enable */\n 3027: #define  SDIO_MASK_CTIMEOUTIE                ((uint32_t)0x00000004)        /*!< Command TimeOut Interrupt Enable */\n 3028: #define  SDIO_MASK_DTIMEOUTIE                ((uint32_t)0x00000008)        /*!< Data TimeOut Interrupt Enable */\n 3029  #define  SDIO_MASK_TXUNDERRIE                ((uint32_t)0x00000010)        /*!< Tx FIFO UnderRun Error Interrupt Enable */\n 3030  #define  SDIO_MASK_RXOVERRIE                 ((uint32_t)0x00000020)        /*!< Rx FIFO OverRun Error Interrupt Enable */\n 3031  #define  SDIO_MASK_CMDRENDIE                 ((uint32_t)0x00000040)        /*!< Command Response Received Interrupt Enable */\n 3032: #define  SDIO_MASK_CMDSENTIE                 ((uint32_t)0x00000080)        /*!< Command Sent Interrupt Enable */\n 3033  #define  SDIO_MASK_DATAENDIE                 ((uint32_t)0x00000100)        /*!< Data End Interrupt Enable */\n 3034  #define  SDIO_MASK_STBITERRIE                ((uint32_t)0x00000200)        /*!< Start Bit Error Interrupt Enable */\n 3035  #define  SDIO_MASK_DBCKENDIE                 ((uint32_t)0x00000400)        /*!< Data Block End Interrupt Enable */\n 3036: #define  SDIO_MASK_CMDACTIE                  ((uint32_t)0x00000800)        /*!< Command Acting Interrupt Enable */\n 3037: #define  SDIO_MASK_TXACTIE                   ((uint32_t)0x00001000)        /*!< Data Transmit Acting Interrupt Enable */\n 3038: #define  SDIO_MASK_RXACTIE                   ((uint32_t)0x00002000)        /*!< Data receive acting interrupt enabled */\n 3039  #define  SDIO_MASK_TXFIFOHEIE                ((uint32_t)0x00004000)        /*!< Tx FIFO Half Empty interrupt Enable */\n 3040  #define  SDIO_MASK_RXFIFOHFIE                ((uint32_t)0x00008000)        /*!< Rx FIFO Half Full interrupt Enable */\n ....\n 3045  #define  SDIO_MASK_TXDAVLIE                  ((uint32_t)0x00100000)        /*!< Data available in Tx FIFO interrupt Enable */\n 3046  #define  SDIO_MASK_RXDAVLIE                  ((uint32_t)0x00200000)        /*!< Data available in Rx FIFO interrupt Enable */\n 3047: #define  SDIO_MASK_SDIOITIE                  ((uint32_t)0x00400000)        /*!< SDIO Mode Interrupt Received interrupt Enable */\n 3048  #define  SDIO_MASK_CEATAENDIE                ((uint32_t)0x00800000)        /*!< CE-ATA command completion signal received Interrupt Enable */\n 3049  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f102xb.h:\n   31    *\n   32    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   33:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   34:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   35    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   36    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n   ..\n 2153  #define  DMA_CCR_EN                          ((uint32_t)0x00000001)        /*!< Channel enable */\n 2154  #define  DMA_CCR_TCIE                        ((uint32_t)0x00000002)        /*!< Transfer complete interrupt enable */\n 2155: #define  DMA_CCR_HTIE                        ((uint32_t)0x00000004)        /*!< Half Transfer interrupt enable */\n 2156  #define  DMA_CCR_TEIE                        ((uint32_t)0x00000008)        /*!< Transfer error interrupt enable */\n 2157  #define  DMA_CCR_DIR                         ((uint32_t)0x00000010)        /*!< Data transfer direction */\n ....\n 2603  #define  TIM_DIER_CC4IE                      ((uint32_t)0x00000010)            /*!<Capture/Compare 4 interrupt enable */\n 2604  #define  TIM_DIER_COMIE                      ((uint32_t)0x00000020)            /*!<COM interrupt enable */\n 2605: #define  TIM_DIER_TIE                        ((uint32_t)0x00000040)            /*!<Trigger interrupt enable */\n 2606  #define  TIM_DIER_BIE                        ((uint32_t)0x00000080)            /*!<Break interrupt enable */\n 2607  #define  TIM_DIER_UDE                        ((uint32_t)0x00000100)            /*!<Update DMA request enable */\n ....\n 3055  #define  SDIO_MASK_CCRCFAILIE                ((uint32_t)0x00000001)        /*!< Command CRC Fail Interrupt Enable */\n 3056  #define  SDIO_MASK_DCRCFAILIE                ((uint32_t)0x00000002)        /*!< Data CRC Fail Interrupt Enable */\n 3057: #define  SDIO_MASK_CTIMEOUTIE                ((uint32_t)0x00000004)        /*!< Command TimeOut Interrupt Enable */\n 3058: #define  SDIO_MASK_DTIMEOUTIE                ((uint32_t)0x00000008)        /*!< Data TimeOut Interrupt Enable */\n 3059  #define  SDIO_MASK_TXUNDERRIE                ((uint32_t)0x00000010)        /*!< Tx FIFO UnderRun Error Interrupt Enable */\n 3060  #define  SDIO_MASK_RXOVERRIE                 ((uint32_t)0x00000020)        /*!< Rx FIFO OverRun Error Interrupt Enable */\n 3061  #define  SDIO_MASK_CMDRENDIE                 ((uint32_t)0x00000040)        /*!< Command Response Received Interrupt Enable */\n 3062: #define  SDIO_MASK_CMDSENTIE                 ((uint32_t)0x00000080)        /*!< Command Sent Interrupt Enable */\n 3063  #define  SDIO_MASK_DATAENDIE                 ((uint32_t)0x00000100)        /*!< Data End Interrupt Enable */\n 3064  #define  SDIO_MASK_STBITERRIE                ((uint32_t)0x00000200)        /*!< Start Bit Error Interrupt Enable */\n 3065  #define  SDIO_MASK_DBCKENDIE                 ((uint32_t)0x00000400)        /*!< Data Block End Interrupt Enable */\n 3066: #define  SDIO_MASK_CMDACTIE                  ((uint32_t)0x00000800)        /*!< Command Acting Interrupt Enable */\n 3067: #define  SDIO_MASK_TXACTIE                   ((uint32_t)0x00001000)        /*!< Data Transmit Acting Interrupt Enable */\n 3068: #define  SDIO_MASK_RXACTIE                   ((uint32_t)0x00002000)        /*!< Data receive acting interrupt enabled */\n 3069  #define  SDIO_MASK_TXFIFOHEIE                ((uint32_t)0x00004000)        /*!< Tx FIFO Half Empty interrupt Enable */\n 3070  #define  SDIO_MASK_RXFIFOHFIE                ((uint32_t)0x00008000)        /*!< Rx FIFO Half Full interrupt Enable */\n ....\n 3075  #define  SDIO_MASK_TXDAVLIE                  ((uint32_t)0x00100000)        /*!< Data available in Tx FIFO interrupt Enable */\n 3076  #define  SDIO_MASK_RXDAVLIE                  ((uint32_t)0x00200000)        /*!< Data available in Rx FIFO interrupt Enable */\n 3077: #define  SDIO_MASK_SDIOITIE                  ((uint32_t)0x00400000)        /*!< SDIO Mode Interrupt Received interrupt Enable */\n 3078  #define  SDIO_MASK_CEATAENDIE                ((uint32_t)0x00800000)        /*!< CE-ATA command completion signal received Interrupt Enable */\n 3079  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f103x6.h:\n   31    *\n   32    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   33:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   34:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   35    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   36    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n   ..\n 2210  #define  DMA_CCR_EN                          ((uint32_t)0x00000001)        /*!< Channel enable */\n 2211  #define  DMA_CCR_TCIE                        ((uint32_t)0x00000002)        /*!< Transfer complete interrupt enable */\n 2212: #define  DMA_CCR_HTIE                        ((uint32_t)0x00000004)        /*!< Half Transfer interrupt enable */\n 2213  #define  DMA_CCR_TEIE                        ((uint32_t)0x00000008)        /*!< Transfer error interrupt enable */\n 2214  #define  DMA_CCR_DIR                         ((uint32_t)0x00000010)        /*!< Data transfer direction */\n ....\n 2667  #define  TIM_DIER_CC4IE                      ((uint32_t)0x00000010)            /*!<Capture/Compare 4 interrupt enable */\n 2668  #define  TIM_DIER_COMIE                      ((uint32_t)0x00000020)            /*!<COM interrupt enable */\n 2669: #define  TIM_DIER_TIE                        ((uint32_t)0x00000040)            /*!<Trigger interrupt enable */\n 2670  #define  TIM_DIER_BIE                        ((uint32_t)0x00000080)            /*!<Break interrupt enable */\n 2671  #define  TIM_DIER_UDE                        ((uint32_t)0x00000100)            /*!<Update DMA request enable */\n ....\n 3119  #define  SDIO_MASK_CCRCFAILIE                ((uint32_t)0x00000001)        /*!< Command CRC Fail Interrupt Enable */\n 3120  #define  SDIO_MASK_DCRCFAILIE                ((uint32_t)0x00000002)        /*!< Data CRC Fail Interrupt Enable */\n 3121: #define  SDIO_MASK_CTIMEOUTIE                ((uint32_t)0x00000004)        /*!< Command TimeOut Interrupt Enable */\n 3122: #define  SDIO_MASK_DTIMEOUTIE                ((uint32_t)0x00000008)        /*!< Data TimeOut Interrupt Enable */\n 3123  #define  SDIO_MASK_TXUNDERRIE                ((uint32_t)0x00000010)        /*!< Tx FIFO UnderRun Error Interrupt Enable */\n 3124  #define  SDIO_MASK_RXOVERRIE                 ((uint32_t)0x00000020)        /*!< Rx FIFO OverRun Error Interrupt Enable */\n 3125  #define  SDIO_MASK_CMDRENDIE                 ((uint32_t)0x00000040)        /*!< Command Response Received Interrupt Enable */\n 3126: #define  SDIO_MASK_CMDSENTIE                 ((uint32_t)0x00000080)        /*!< Command Sent Interrupt Enable */\n 3127  #define  SDIO_MASK_DATAENDIE                 ((uint32_t)0x00000100)        /*!< Data End Interrupt Enable */\n 3128  #define  SDIO_MASK_STBITERRIE                ((uint32_t)0x00000200)        /*!< Start Bit Error Interrupt Enable */\n 3129  #define  SDIO_MASK_DBCKENDIE                 ((uint32_t)0x00000400)        /*!< Data Block End Interrupt Enable */\n 3130: #define  SDIO_MASK_CMDACTIE                  ((uint32_t)0x00000800)        /*!< Command Acting Interrupt Enable */\n 3131: #define  SDIO_MASK_TXACTIE                   ((uint32_t)0x00001000)        /*!< Data Transmit Acting Interrupt Enable */\n 3132: #define  SDIO_MASK_RXACTIE                   ((uint32_t)0x00002000)        /*!< Data receive acting interrupt enabled */\n 3133  #define  SDIO_MASK_TXFIFOHEIE                ((uint32_t)0x00004000)        /*!< Tx FIFO Half Empty interrupt Enable */\n 3134  #define  SDIO_MASK_RXFIFOHFIE                ((uint32_t)0x00008000)        /*!< Rx FIFO Half Full interrupt Enable */\n ....\n 3139  #define  SDIO_MASK_TXDAVLIE                  ((uint32_t)0x00100000)        /*!< Data available in Tx FIFO interrupt Enable */\n 3140  #define  SDIO_MASK_RXDAVLIE                  ((uint32_t)0x00200000)        /*!< Data available in Rx FIFO interrupt Enable */\n 3141: #define  SDIO_MASK_SDIOITIE                  ((uint32_t)0x00400000)        /*!< SDIO Mode Interrupt Received interrupt Enable */\n 3142  #define  SDIO_MASK_CEATAENDIE                ((uint32_t)0x00800000)        /*!< CE-ATA command completion signal received Interrupt Enable */\n 3143  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f103xb.h:\n   31    *\n   32    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   33:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   34:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   35    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   36    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n   ..\n 2244  #define  DMA_CCR_EN                          ((uint32_t)0x00000001)        /*!< Channel enable */\n 2245  #define  DMA_CCR_TCIE                        ((uint32_t)0x00000002)        /*!< Transfer complete interrupt enable */\n 2246: #define  DMA_CCR_HTIE                        ((uint32_t)0x00000004)        /*!< Half Transfer interrupt enable */\n 2247  #define  DMA_CCR_TEIE                        ((uint32_t)0x00000008)        /*!< Transfer error interrupt enable */\n 2248  #define  DMA_CCR_DIR                         ((uint32_t)0x00000010)        /*!< Data transfer direction */\n ....\n 2701  #define  TIM_DIER_CC4IE                      ((uint32_t)0x00000010)            /*!<Capture/Compare 4 interrupt enable */\n 2702  #define  TIM_DIER_COMIE                      ((uint32_t)0x00000020)            /*!<COM interrupt enable */\n 2703: #define  TIM_DIER_TIE                        ((uint32_t)0x00000040)            /*!<Trigger interrupt enable */\n 2704  #define  TIM_DIER_BIE                        ((uint32_t)0x00000080)            /*!<Break interrupt enable */\n 2705  #define  TIM_DIER_UDE                        ((uint32_t)0x00000100)            /*!<Update DMA request enable */\n ....\n 3153  #define  SDIO_MASK_CCRCFAILIE                ((uint32_t)0x00000001)        /*!< Command CRC Fail Interrupt Enable */\n 3154  #define  SDIO_MASK_DCRCFAILIE                ((uint32_t)0x00000002)        /*!< Data CRC Fail Interrupt Enable */\n 3155: #define  SDIO_MASK_CTIMEOUTIE                ((uint32_t)0x00000004)        /*!< Command TimeOut Interrupt Enable */\n 3156: #define  SDIO_MASK_DTIMEOUTIE                ((uint32_t)0x00000008)        /*!< Data TimeOut Interrupt Enable */\n 3157  #define  SDIO_MASK_TXUNDERRIE                ((uint32_t)0x00000010)        /*!< Tx FIFO UnderRun Error Interrupt Enable */\n 3158  #define  SDIO_MASK_RXOVERRIE                 ((uint32_t)0x00000020)        /*!< Rx FIFO OverRun Error Interrupt Enable */\n 3159  #define  SDIO_MASK_CMDRENDIE                 ((uint32_t)0x00000040)        /*!< Command Response Received Interrupt Enable */\n 3160: #define  SDIO_MASK_CMDSENTIE                 ((uint32_t)0x00000080)        /*!< Command Sent Interrupt Enable */\n 3161  #define  SDIO_MASK_DATAENDIE                 ((uint32_t)0x00000100)        /*!< Data End Interrupt Enable */\n 3162  #define  SDIO_MASK_STBITERRIE                ((uint32_t)0x00000200)        /*!< Start Bit Error Interrupt Enable */\n 3163  #define  SDIO_MASK_DBCKENDIE                 ((uint32_t)0x00000400)        /*!< Data Block End Interrupt Enable */\n 3164: #define  SDIO_MASK_CMDACTIE                  ((uint32_t)0x00000800)        /*!< Command Acting Interrupt Enable */\n 3165: #define  SDIO_MASK_TXACTIE                   ((uint32_t)0x00001000)        /*!< Data Transmit Acting Interrupt Enable */\n 3166: #define  SDIO_MASK_RXACTIE                   ((uint32_t)0x00002000)        /*!< Data receive acting interrupt enabled */\n 3167  #define  SDIO_MASK_TXFIFOHEIE                ((uint32_t)0x00004000)        /*!< Tx FIFO Half Empty interrupt Enable */\n 3168  #define  SDIO_MASK_RXFIFOHFIE                ((uint32_t)0x00008000)        /*!< Rx FIFO Half Full interrupt Enable */\n ....\n 3173  #define  SDIO_MASK_TXDAVLIE                  ((uint32_t)0x00100000)        /*!< Data available in Tx FIFO interrupt Enable */\n 3174  #define  SDIO_MASK_RXDAVLIE                  ((uint32_t)0x00200000)        /*!< Data available in Rx FIFO interrupt Enable */\n 3175: #define  SDIO_MASK_SDIOITIE                  ((uint32_t)0x00400000)        /*!< SDIO Mode Interrupt Received interrupt Enable */\n 3176  #define  SDIO_MASK_CEATAENDIE                ((uint32_t)0x00800000)        /*!< CE-ATA command completion signal received Interrupt Enable */\n 3177  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f103xe.h:\n   31    *\n   32    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   33:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   34:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   35    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   36    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n   ..\n 2549  #define  DMA_CCR_EN                          ((uint32_t)0x00000001)        /*!< Channel enable */\n 2550  #define  DMA_CCR_TCIE                        ((uint32_t)0x00000002)        /*!< Transfer complete interrupt enable */\n 2551: #define  DMA_CCR_HTIE                        ((uint32_t)0x00000004)        /*!< Half Transfer interrupt enable */\n 2552  #define  DMA_CCR_TEIE                        ((uint32_t)0x00000008)        /*!< Transfer error interrupt enable */\n 2553  #define  DMA_CCR_DIR                         ((uint32_t)0x00000010)        /*!< Data transfer direction */\n ....\n 3095  #define  TIM_DIER_CC4IE                      ((uint32_t)0x00000010)            /*!<Capture/Compare 4 interrupt enable */\n 3096  #define  TIM_DIER_COMIE                      ((uint32_t)0x00000020)            /*!<COM interrupt enable */\n 3097: #define  TIM_DIER_TIE                        ((uint32_t)0x00000040)            /*!<Trigger interrupt enable */\n 3098  #define  TIM_DIER_BIE                        ((uint32_t)0x00000080)            /*!<Break interrupt enable */\n 3099  #define  TIM_DIER_UDE                        ((uint32_t)0x00000100)            /*!<Update DMA request enable */\n ....\n 3819  #define  SDIO_MASK_CCRCFAILIE                ((uint32_t)0x00000001)        /*!< Command CRC Fail Interrupt Enable */\n 3820  #define  SDIO_MASK_DCRCFAILIE                ((uint32_t)0x00000002)        /*!< Data CRC Fail Interrupt Enable */\n 3821: #define  SDIO_MASK_CTIMEOUTIE                ((uint32_t)0x00000004)        /*!< Command TimeOut Interrupt Enable */\n 3822: #define  SDIO_MASK_DTIMEOUTIE                ((uint32_t)0x00000008)        /*!< Data TimeOut Interrupt Enable */\n 3823  #define  SDIO_MASK_TXUNDERRIE                ((uint32_t)0x00000010)        /*!< Tx FIFO UnderRun Error Interrupt Enable */\n 3824  #define  SDIO_MASK_RXOVERRIE                 ((uint32_t)0x00000020)        /*!< Rx FIFO OverRun Error Interrupt Enable */\n 3825  #define  SDIO_MASK_CMDRENDIE                 ((uint32_t)0x00000040)        /*!< Command Response Received Interrupt Enable */\n 3826: #define  SDIO_MASK_CMDSENTIE                 ((uint32_t)0x00000080)        /*!< Command Sent Interrupt Enable */\n 3827  #define  SDIO_MASK_DATAENDIE                 ((uint32_t)0x00000100)        /*!< Data End Interrupt Enable */\n 3828  #define  SDIO_MASK_STBITERRIE                ((uint32_t)0x00000200)        /*!< Start Bit Error Interrupt Enable */\n 3829  #define  SDIO_MASK_DBCKENDIE                 ((uint32_t)0x00000400)        /*!< Data Block End Interrupt Enable */\n 3830: #define  SDIO_MASK_CMDACTIE                  ((uint32_t)0x00000800)        /*!< Command Acting Interrupt Enable */\n 3831: #define  SDIO_MASK_TXACTIE                   ((uint32_t)0x00001000)        /*!< Data Transmit Acting Interrupt Enable */\n 3832: #define  SDIO_MASK_RXACTIE                   ((uint32_t)0x00002000)        /*!< Data receive acting interrupt enabled */\n 3833  #define  SDIO_MASK_TXFIFOHEIE                ((uint32_t)0x00004000)        /*!< Tx FIFO Half Empty interrupt Enable */\n 3834  #define  SDIO_MASK_RXFIFOHFIE                ((uint32_t)0x00008000)        /*!< Rx FIFO Half Full interrupt Enable */\n ....\n 3839  #define  SDIO_MASK_TXDAVLIE                  ((uint32_t)0x00100000)        /*!< Data available in Tx FIFO interrupt Enable */\n 3840  #define  SDIO_MASK_RXDAVLIE                  ((uint32_t)0x00200000)        /*!< Data available in Rx FIFO interrupt Enable */\n 3841: #define  SDIO_MASK_SDIOITIE                  ((uint32_t)0x00400000)        /*!< SDIO Mode Interrupt Received interrupt Enable */\n 3842  #define  SDIO_MASK_CEATAENDIE                ((uint32_t)0x00800000)        /*!< CE-ATA command completion signal received Interrupt Enable */\n 3843  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f103xg.h:\n   31    *\n   32    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   33:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   34:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   35    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   36    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n   ..\n 2585  #define  DMA_CCR_EN                          ((uint32_t)0x00000001)        /*!< Channel enable */\n 2586  #define  DMA_CCR_TCIE                        ((uint32_t)0x00000002)        /*!< Transfer complete interrupt enable */\n 2587: #define  DMA_CCR_HTIE                        ((uint32_t)0x00000004)        /*!< Half Transfer interrupt enable */\n 2588  #define  DMA_CCR_TEIE                        ((uint32_t)0x00000008)        /*!< Transfer error interrupt enable */\n 2589  #define  DMA_CCR_DIR                         ((uint32_t)0x00000010)        /*!< Data transfer direction */\n ....\n 3131  #define  TIM_DIER_CC4IE                      ((uint32_t)0x00000010)            /*!<Capture/Compare 4 interrupt enable */\n 3132  #define  TIM_DIER_COMIE                      ((uint32_t)0x00000020)            /*!<COM interrupt enable */\n 3133: #define  TIM_DIER_TIE                        ((uint32_t)0x00000040)            /*!<Trigger interrupt enable */\n 3134  #define  TIM_DIER_BIE                        ((uint32_t)0x00000080)            /*!<Break interrupt enable */\n 3135  #define  TIM_DIER_UDE                        ((uint32_t)0x00000100)            /*!<Update DMA request enable */\n ....\n 3855  #define  SDIO_MASK_CCRCFAILIE                ((uint32_t)0x00000001)        /*!< Command CRC Fail Interrupt Enable */\n 3856  #define  SDIO_MASK_DCRCFAILIE                ((uint32_t)0x00000002)        /*!< Data CRC Fail Interrupt Enable */\n 3857: #define  SDIO_MASK_CTIMEOUTIE                ((uint32_t)0x00000004)        /*!< Command TimeOut Interrupt Enable */\n 3858: #define  SDIO_MASK_DTIMEOUTIE                ((uint32_t)0x00000008)        /*!< Data TimeOut Interrupt Enable */\n 3859  #define  SDIO_MASK_TXUNDERRIE                ((uint32_t)0x00000010)        /*!< Tx FIFO UnderRun Error Interrupt Enable */\n 3860  #define  SDIO_MASK_RXOVERRIE                 ((uint32_t)0x00000020)        /*!< Rx FIFO OverRun Error Interrupt Enable */\n 3861  #define  SDIO_MASK_CMDRENDIE                 ((uint32_t)0x00000040)        /*!< Command Response Received Interrupt Enable */\n 3862: #define  SDIO_MASK_CMDSENTIE                 ((uint32_t)0x00000080)        /*!< Command Sent Interrupt Enable */\n 3863  #define  SDIO_MASK_DATAENDIE                 ((uint32_t)0x00000100)        /*!< Data End Interrupt Enable */\n 3864  #define  SDIO_MASK_STBITERRIE                ((uint32_t)0x00000200)        /*!< Start Bit Error Interrupt Enable */\n 3865  #define  SDIO_MASK_DBCKENDIE                 ((uint32_t)0x00000400)        /*!< Data Block End Interrupt Enable */\n 3866: #define  SDIO_MASK_CMDACTIE                  ((uint32_t)0x00000800)        /*!< Command Acting Interrupt Enable */\n 3867: #define  SDIO_MASK_TXACTIE                   ((uint32_t)0x00001000)        /*!< Data Transmit Acting Interrupt Enable */\n 3868: #define  SDIO_MASK_RXACTIE                   ((uint32_t)0x00002000)        /*!< Data receive acting interrupt enabled */\n 3869  #define  SDIO_MASK_TXFIFOHEIE                ((uint32_t)0x00004000)        /*!< Tx FIFO Half Empty interrupt Enable */\n 3870  #define  SDIO_MASK_RXFIFOHFIE                ((uint32_t)0x00008000)        /*!< Rx FIFO Half Full interrupt Enable */\n ....\n 3875  #define  SDIO_MASK_TXDAVLIE                  ((uint32_t)0x00100000)        /*!< Data available in Tx FIFO interrupt Enable */\n 3876  #define  SDIO_MASK_RXDAVLIE                  ((uint32_t)0x00200000)        /*!< Data available in Rx FIFO interrupt Enable */\n 3877: #define  SDIO_MASK_SDIOITIE                  ((uint32_t)0x00400000)        /*!< SDIO Mode Interrupt Received interrupt Enable */\n 3878  #define  SDIO_MASK_CEATAENDIE                ((uint32_t)0x00800000)        /*!< CE-ATA command completion signal received Interrupt Enable */\n 3879  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f105xc.h:\n   31    *\n   32    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   33:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   34:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   35    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   36    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n   ..\n 2666  #define  DMA_CCR_EN                          ((uint32_t)0x00000001)        /*!< Channel enable */\n 2667  #define  DMA_CCR_TCIE                        ((uint32_t)0x00000002)        /*!< Transfer complete interrupt enable */\n 2668: #define  DMA_CCR_HTIE                        ((uint32_t)0x00000004)        /*!< Half Transfer interrupt enable */\n 2669  #define  DMA_CCR_TEIE                        ((uint32_t)0x00000008)        /*!< Transfer error interrupt enable */\n 2670  #define  DMA_CCR_DIR                         ((uint32_t)0x00000010)        /*!< Data transfer direction */\n ....\n 3212  #define  TIM_DIER_CC4IE                      ((uint32_t)0x00000010)            /*!<Capture/Compare 4 interrupt enable */\n 3213  #define  TIM_DIER_COMIE                      ((uint32_t)0x00000020)            /*!<COM interrupt enable */\n 3214: #define  TIM_DIER_TIE                        ((uint32_t)0x00000040)            /*!<Trigger interrupt enable */\n 3215  #define  TIM_DIER_BIE                        ((uint32_t)0x00000080)            /*!<Break interrupt enable */\n 3216  #define  TIM_DIER_UDE                        ((uint32_t)0x00000100)            /*!<Update DMA request enable */\n ....\n 3664  #define  SDIO_MASK_CCRCFAILIE                ((uint32_t)0x00000001)        /*!< Command CRC Fail Interrupt Enable */\n 3665  #define  SDIO_MASK_DCRCFAILIE                ((uint32_t)0x00000002)        /*!< Data CRC Fail Interrupt Enable */\n 3666: #define  SDIO_MASK_CTIMEOUTIE                ((uint32_t)0x00000004)        /*!< Command TimeOut Interrupt Enable */\n 3667: #define  SDIO_MASK_DTIMEOUTIE                ((uint32_t)0x00000008)        /*!< Data TimeOut Interrupt Enable */\n 3668  #define  SDIO_MASK_TXUNDERRIE                ((uint32_t)0x00000010)        /*!< Tx FIFO UnderRun Error Interrupt Enable */\n 3669  #define  SDIO_MASK_RXOVERRIE                 ((uint32_t)0x00000020)        /*!< Rx FIFO OverRun Error Interrupt Enable */\n 3670  #define  SDIO_MASK_CMDRENDIE                 ((uint32_t)0x00000040)        /*!< Command Response Received Interrupt Enable */\n 3671: #define  SDIO_MASK_CMDSENTIE                 ((uint32_t)0x00000080)        /*!< Command Sent Interrupt Enable */\n 3672  #define  SDIO_MASK_DATAENDIE                 ((uint32_t)0x00000100)        /*!< Data End Interrupt Enable */\n 3673  #define  SDIO_MASK_STBITERRIE                ((uint32_t)0x00000200)        /*!< Start Bit Error Interrupt Enable */\n 3674  #define  SDIO_MASK_DBCKENDIE                 ((uint32_t)0x00000400)        /*!< Data Block End Interrupt Enable */\n 3675: #define  SDIO_MASK_CMDACTIE                  ((uint32_t)0x00000800)        /*!< Command Acting Interrupt Enable */\n 3676: #define  SDIO_MASK_TXACTIE                   ((uint32_t)0x00001000)        /*!< Data Transmit Acting Interrupt Enable */\n 3677: #define  SDIO_MASK_RXACTIE                   ((uint32_t)0x00002000)        /*!< Data receive acting interrupt enabled */\n 3678  #define  SDIO_MASK_TXFIFOHEIE                ((uint32_t)0x00004000)        /*!< Tx FIFO Half Empty interrupt Enable */\n 3679  #define  SDIO_MASK_RXFIFOHFIE                ((uint32_t)0x00008000)        /*!< Rx FIFO Half Full interrupt Enable */\n ....\n 3684  #define  SDIO_MASK_TXDAVLIE                  ((uint32_t)0x00100000)        /*!< Data available in Tx FIFO interrupt Enable */\n 3685  #define  SDIO_MASK_RXDAVLIE                  ((uint32_t)0x00200000)        /*!< Data available in Rx FIFO interrupt Enable */\n 3686: #define  SDIO_MASK_SDIOITIE                  ((uint32_t)0x00400000)        /*!< SDIO Mode Interrupt Received interrupt Enable */\n 3687  #define  SDIO_MASK_CEATAENDIE                ((uint32_t)0x00800000)        /*!< CE-ATA command completion signal received Interrupt Enable */\n 3688  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f107xc.h:\n   31    *\n   32    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   33:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   34:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   35    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   36    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n   ..\n 2750  #define  DMA_CCR_EN                          ((uint32_t)0x00000001)        /*!< Channel enable */\n 2751  #define  DMA_CCR_TCIE                        ((uint32_t)0x00000002)        /*!< Transfer complete interrupt enable */\n 2752: #define  DMA_CCR_HTIE                        ((uint32_t)0x00000004)        /*!< Half Transfer interrupt enable */\n 2753  #define  DMA_CCR_TEIE                        ((uint32_t)0x00000008)        /*!< Transfer error interrupt enable */\n 2754  #define  DMA_CCR_DIR                         ((uint32_t)0x00000010)        /*!< Data transfer direction */\n ....\n 3296  #define  TIM_DIER_CC4IE                      ((uint32_t)0x00000010)            /*!<Capture/Compare 4 interrupt enable */\n 3297  #define  TIM_DIER_COMIE                      ((uint32_t)0x00000020)            /*!<COM interrupt enable */\n 3298: #define  TIM_DIER_TIE                        ((uint32_t)0x00000040)            /*!<Trigger interrupt enable */\n 3299  #define  TIM_DIER_BIE                        ((uint32_t)0x00000080)            /*!<Break interrupt enable */\n 3300  #define  TIM_DIER_UDE                        ((uint32_t)0x00000100)            /*!<Update DMA request enable */\n ....\n 3748  #define  SDIO_MASK_CCRCFAILIE                ((uint32_t)0x00000001)        /*!< Command CRC Fail Interrupt Enable */\n 3749  #define  SDIO_MASK_DCRCFAILIE                ((uint32_t)0x00000002)        /*!< Data CRC Fail Interrupt Enable */\n 3750: #define  SDIO_MASK_CTIMEOUTIE                ((uint32_t)0x00000004)        /*!< Command TimeOut Interrupt Enable */\n 3751: #define  SDIO_MASK_DTIMEOUTIE                ((uint32_t)0x00000008)        /*!< Data TimeOut Interrupt Enable */\n 3752  #define  SDIO_MASK_TXUNDERRIE                ((uint32_t)0x00000010)        /*!< Tx FIFO UnderRun Error Interrupt Enable */\n 3753  #define  SDIO_MASK_RXOVERRIE                 ((uint32_t)0x00000020)        /*!< Rx FIFO OverRun Error Interrupt Enable */\n 3754  #define  SDIO_MASK_CMDRENDIE                 ((uint32_t)0x00000040)        /*!< Command Response Received Interrupt Enable */\n 3755: #define  SDIO_MASK_CMDSENTIE                 ((uint32_t)0x00000080)        /*!< Command Sent Interrupt Enable */\n 3756  #define  SDIO_MASK_DATAENDIE                 ((uint32_t)0x00000100)        /*!< Data End Interrupt Enable */\n 3757  #define  SDIO_MASK_STBITERRIE                ((uint32_t)0x00000200)        /*!< Start Bit Error Interrupt Enable */\n 3758  #define  SDIO_MASK_DBCKENDIE                 ((uint32_t)0x00000400)        /*!< Data Block End Interrupt Enable */\n 3759: #define  SDIO_MASK_CMDACTIE                  ((uint32_t)0x00000800)        /*!< Command Acting Interrupt Enable */\n 3760: #define  SDIO_MASK_TXACTIE                   ((uint32_t)0x00001000)        /*!< Data Transmit Acting Interrupt Enable */\n 3761: #define  SDIO_MASK_RXACTIE                   ((uint32_t)0x00002000)        /*!< Data receive acting interrupt enabled */\n 3762  #define  SDIO_MASK_TXFIFOHEIE                ((uint32_t)0x00004000)        /*!< Tx FIFO Half Empty interrupt Enable */\n 3763  #define  SDIO_MASK_RXFIFOHFIE                ((uint32_t)0x00008000)        /*!< Rx FIFO Half Full interrupt Enable */\n ....\n 3768  #define  SDIO_MASK_TXDAVLIE                  ((uint32_t)0x00100000)        /*!< Data available in Tx FIFO interrupt Enable */\n 3769  #define  SDIO_MASK_RXDAVLIE                  ((uint32_t)0x00200000)        /*!< Data available in Rx FIFO interrupt Enable */\n 3770: #define  SDIO_MASK_SDIOITIE                  ((uint32_t)0x00400000)        /*!< SDIO Mode Interrupt Received interrupt Enable */\n 3771  #define  SDIO_MASK_CEATAENDIE                ((uint32_t)0x00800000)        /*!< CE-ATA command completion signal received Interrupt Enable */\n 3772  \n ....\n 6835  #define ETH_DMAIER_ERIE      ((uint32_t)0x00004000)  /* Early receive interrupt enable */\n 6836  #define ETH_DMAIER_FBEIE     ((uint32_t)0x00002000)  /* Fatal bus error interrupt enable */\n 6837: #define ETH_DMAIER_ETIE      ((uint32_t)0x00000400)  /* Early transmit interrupt enable */\n 6838: #define ETH_DMAIER_RWTIE     ((uint32_t)0x00000200)  /* Receive watchdog timeout interrupt enable */\n 6839  #define ETH_DMAIER_RPSIE     ((uint32_t)0x00000100)  /* Receive process stopped interrupt enable */\n 6840  #define ETH_DMAIER_RBUIE     ((uint32_t)0x00000080)  /* Receive buffer unavailable interrupt enable */\n ....\n 6842  #define ETH_DMAIER_TUIE      ((uint32_t)0x00000020)  /* Transmit Underflow interrupt enable */\n 6843  #define ETH_DMAIER_ROIE      ((uint32_t)0x00000010)  /* Receive Overflow interrupt enable */\n 6844: #define ETH_DMAIER_TJTIE     ((uint32_t)0x00000008)  /* Transmit jabber timeout interrupt enable */\n 6845  #define ETH_DMAIER_TBUIE     ((uint32_t)0x00000004)  /* Transmit buffer unavailable interrupt enable */\n 6846  #define ETH_DMAIER_TPSIE     ((uint32_t)0x00000002)  /* Transmit process stopped interrupt enable */\n 6847: #define ETH_DMAIER_TIE       ((uint32_t)0x00000001)  /* Transmit interrupt enable */\n 6848  \n 6849  /* Bit definition for Ethernet DMA Missed Frame and Buffer Overflow Counter Register */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f1xx.h:\n   33    *\n   34    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   35:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   36:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   37    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   38    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\system_stm32f1xx.h:\n   23    *\n   24    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   25:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   26:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   27    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   28    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Source\\Templates\\gcc\\startup_stm32f103xb.s:\n   31    *\n   32    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   33:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   34:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   35    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   36    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Source\\Templates\\system_stm32f1xx.c:\n   50    *\n   51    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   52:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   53:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   54    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   55    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Include\\arm_common_tables.h:\n   26  *\n   27  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n   28: * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n   29: * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\n   30  * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n   31  * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Include\\arm_const_structs.h:\n   28  *\n   29  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n   30: * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n   31: * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\n   32  * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n   33  * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Include\\arm_math.h:\n   26  *\n   27  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n   28: * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n   29: * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\n   30  * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n   31  * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Include\\core_cm0.h:\n   23     *\n   24     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   25:    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   26:    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n   27     ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE\n   28     LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n   ..\n  554   */\n  555  \n  556: /* Interrupt Priorities are WORD accessible only under ARMv6M                   */\n  557  /* The following MACROS handle generation of the register offset and byte masks */\n  558  #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Include\\core_cm0plus.h:\n   23     *\n   24     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   25:    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   26:    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n   27     ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE\n   28     LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n   ..\n  668   */\n  669  \n  670: /* Interrupt Priorities are WORD accessible only under ARMv6M                   */\n  671  /* The following MACROS handle generation of the register offset and byte masks */\n  672  #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Include\\core_cm3.h:\n   23     *\n   24     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   25:    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   26:    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n   27     ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE\n   28     LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Include\\core_cm4.h:\n   23     *\n   24     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   25:    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   26:    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n   27     ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE\n   28     LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Include\\core_cm7.h:\n   23     *\n   24     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   25:    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   26:    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n   27     ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE\n   28     LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Include\\core_cmFunc.h:\n   23     *\n   24     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   25:    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   26:    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n   27     ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE\n   28     LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Include\\core_cmInstr.h:\n   23     *\n   24     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   25:    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   26:    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n   27     ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE\n   28     LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Include\\core_cmSimd.h:\n   23     *\n   24     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   25:    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   26:    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n   27     ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE\n   28     LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Include\\core_sc000.h:\n   23     *\n   24     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   25:    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   26:    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n   27     ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE\n   28     LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n   ..\n  678   */\n  679  \n  680: /* Interrupt Priorities are WORD accessible only under ARMv6M                   */\n  681  /* The following MACROS handle generation of the register offset and byte masks */\n  682  #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Include\\core_sc300.h:\n   23     *\n   24     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   25:    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   26:    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n   27     ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE\n   28     LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\Legacy\\stm32_hal_legacy.h:\n   24    *\n   25    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   26:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   27:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   28    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   29    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n   ..\n 2469  #define  SDIO_CMD0TIMEOUT	          SDMMC_CMD0TIMEOUT\n 2470  #define  SD_SDIO_SEND_IF_COND	      SD_SDMMC_SEND_IF_COND\n 2471: /* alias CMSIS for compatibilities */\n 2472  #define  SDIO_IRQn                  SDMMC1_IRQn\n 2473  #define  SDIO_IRQHandler            SDMMC1_IRQHandler\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal.h:\n   24    *\n   25    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   26:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   27:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   28    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   29    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal_cortex.h:\n   23    *\n   24    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   25:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   26:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   27    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   28    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal_def.h:\n   24    *\n   25    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   26:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   27:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   28    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   29    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal_dma.h:\n   23    *\n   24    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   25:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   26:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   27    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   28    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n   ..\n  241    */\n  242  #define DMA_IT_TC                         ((uint32_t)DMA_CCR_TCIE)\n  243: #define DMA_IT_HT                         ((uint32_t)DMA_CCR_HTIE)\n  244  #define DMA_IT_TE                         ((uint32_t)DMA_CCR_TEIE)\n  245  /**\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal_dma_ex.h:\n   23    *\n   24    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   25:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   26:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   27    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   28    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal_flash.h:\n   23    *\n   24    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   25:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   26:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   27    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   28    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal_flash_ex.h:\n   23    *\n   24    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   25:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   26:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   27    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   28    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal_gpio.h:\n   23    *\n   24    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   25:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   26:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   27    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   28    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal_gpio_ex.h:\n   23    *\n   24    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   25:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   26:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   27    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   28    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal_pcd.h:\n   23    *\n   24    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   25:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   26:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   27    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   28    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal_pcd_ex.h:\n   23    *\n   24    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   25:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   26:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   27    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   28    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal_pwr.h:\n   23    *\n   24    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   25:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   26:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   27    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   28    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal_rcc.h:\n   23    *\n   24    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   25:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   26:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   27    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   28    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal_rcc_ex.h:\n   23    *\n   24    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   25:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   26:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   27    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   28    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal_tim.h:\n   23    *\n   24    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   25:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   26:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   27    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   28    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n   ..\n  507  #define TIM_IT_CC4              (TIM_DIER_CC4IE)\n  508  #define TIM_IT_COM              (TIM_DIER_COMIE)\n  509: #define TIM_IT_TRIGGER          (TIM_DIER_TIE)\n  510  #define TIM_IT_BREAK            (TIM_DIER_BIE)\n  511  /**\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal_tim_ex.h:\n   23    *\n   24    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   25:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   26:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   27    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   28    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_ll_usb.h:\n   23    *\n   24    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   25:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   26:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   27    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   28    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal.c:\n   38    *\n   39    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   40:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   41:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   42    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   43    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_cortex.c:\n    8    *\n    9    *          This file provides firmware functions to manage the following\n   10:   *          functionalities of the CORTEX:\n   11    *           + Initialization and de-initialization functions\n   12    *           + Peripheral Control functions\n   ..\n  108    *\n  109    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  110:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  111:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n  112    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n  113    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n  ...\n  156      [..]\n  157        This section provide the Cortex HAL driver functions allowing to configure Interrupts\n  158:       Systick functionalities \n  159  \n  160  @endverbatim\n  ...\n  286      [..]\n  287        This subsection provides a set of functions allowing to control the CORTEX\n  288:       (NVIC, SYSTICK, MPU) functionalities. \n  289   \n  290        \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_dma.c:\n    8    *    \n    9    *          This file provides firmware functions to manage the following \n   10:   *          functionalities of the Direct Memory Access (DMA) peripheral:\n   11    *           + Initialization and de-initialization functions\n   12    *           + IO operation functions\n   ..\n   88    *\n   89    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   90:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   91:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   92    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   93    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_flash.c:\n    7    * @brief   FLASH HAL module driver.\n    8    *          This file provides firmware functions to manage the following \n    9:   *          functionalities of the internal FLASH memory:\n   10    *           + Program operations functions\n   11    *           + Memory Control functions \n   ..\n   88    *\n   89    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   90:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   91:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   92    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   93    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_flash_ex.c:\n    8    *    \n    9    *          This file provides firmware functions to manage the following \n   10:   *          functionalities of the FLASH peripheral:\n   11    *           + Extended Initialization/de-initialization functions\n   12    *           + Extended I/O operation functions\n   ..\n   45    *\n   46    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   47:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   48:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   49    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   50    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_gpio.c:\n    7    * @brief   GPIO HAL module driver.\n    8    *         This file provides firmware functions to manage the following \n    9:   *          functionalities of the General Purpose Input/Output (GPIO) peripheral:\n   10    *           + Initialization and de-initialization functions\n   11    *           + IO operation functions\n   ..\n  107    *\n  108    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  109:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  110:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n  111    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n  112    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_gpio_ex.c:\n    7    * @brief   GPIO Extension HAL module driver.\n    8    *         This file provides firmware functions to manage the following \n    9:   *          functionalities of the General Purpose Input/Output (GPIO) extension peripheral.\n   10    *           + Extended features functions\n   11    *         \n   ..\n   42    *\n   43    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   44:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   45:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   46    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   47    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_pcd.c:\n    7    * @brief   PCD HAL module driver.\n    8    *          This file provides firmware functions to manage the following \n    9:   *          functionalities of the USB Peripheral Controller:\n   10    *           + Initialization and de-initialization functions\n   11    *           + IO operation functions\n   ..\n   62    *\n   63    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   64:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   65:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   66    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   67    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_pcd_ex.c:\n    7    * @brief   Extended PCD HAL module driver.\n    8    *          This file provides firmware functions to manage the following \n    9:   *          functionalities of the USB Peripheral Controller:\n   10    *           + Extended features functions: Update FIFO configuration, \n   11    *           PMA configuration for EPs  \n   ..\n   28    *\n   29    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   30:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   31:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   32    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   33    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_pwr.c:\n    8    *\n    9    *          This file provides firmware functions to manage the following\n   10:   *          functionalities of the Power Controller (PWR) peripheral:\n   11    *           + Initialization/de-initialization functions\n   12    *           + Peripheral Control functions \n   ..\n   29    *\n   30    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   31:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   32:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   33    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   34    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_rcc.c:\n    7    * @brief   RCC HAL module driver.\n    8    *          This file provides firmware functions to manage the following \n    9:   *          functionalities of the Reset and Clock Control (RCC) peripheral:\n   10    *           + Initialization and de-initialization functions\n   11    *           + Peripheral Control functions\n   ..\n   65    *\n   66    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   67:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   68:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   69    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   70    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_rcc_ex.c:\n    7    * @brief   Extended RCC HAL module driver.\n    8    *          This file provides firmware functions to manage the following \n    9:   *          functionalities RCC extension peripheral:\n   10    *           + Extended Peripheral Control functions\n   11    *  \n   ..\n   27    *\n   28    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   29:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   30:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   31    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   32    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_tim.c:\n    7    * @brief   TIM HAL module driver\n    8    *          This file provides firmware functions to manage the following \n    9:   *          functionalities of the Timer (TIM) peripheral:\n   10    *           + Time Base Initialization\n   11    *           + Time Base Start\n   ..\n  113    *\n  114    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  115:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  116:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n  117    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n  118    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n  ...\n 2277    tmpccmr1 |= (sConfig->IC1Filter << 4) | (sConfig->IC2Filter << 12);\n 2278  \n 2279:   /* Set the TI1 and the TI2 Polarities */\n 2280    tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);\n 2281    tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_tim_ex.c:\n    7    * @brief   TIM HAL module driver.\n    8    *          This file provides firmware functions to manage the following\n    9:   *          functionalities of the Timer Extended peripheral:\n   10    *           + Time Hall Sensor Interface Initialization\n   11    *           + Time Hall Sensor Interface Start\n   12    *           + Time Complementary signal bread and dead time configuration\n   13    *           + Time Master and Slave synchronization configuration\n   14:   *           + Timer remapping capabilities configuration\n   15    @verbatim\n   16    ==============================================================================\n   ..\n   84    *\n   85    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   86:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   87:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   88    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   89    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_ll_usb.c:\n    8    *\n    9    *          This file provides firmware functions to manage the following \n   10:   *          functionalities of the USB Peripheral Controller:\n   11    *           + Initialization/de-initialization functions\n   12    *           + I/O operation functions\n   ..\n   43    *\n   44    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   45:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   46:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   47    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   48    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Inc\\Backup\\mxconstants.h.bak:\n   19    *\n   20    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   21:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   22:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   23    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   24    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Inc\\Backup\\stm32f1xx_hal_conf.h.bak:\n   20    *\n   21    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   22:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   23:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   24    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   25    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Inc\\Backup\\stm32f1xx_it.h.bak:\n   19    *\n   20    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   21:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   22:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   23    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   24    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Inc\\Backup\\usb_device.h.bak:\n   19    *\n   20    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   21:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   22:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   23    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   24    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Inc\\Backup\\usbd_conf.h.bak:\n   19    *\n   20    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   21:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   22:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   23    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   24    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Inc\\Backup\\usbd_desc.h.bak:\n   19    *\n   20    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   21:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   22:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   23    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   24    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Inc\\mxconstants.h:\n   19    *\n   20    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   21:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   22:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   23    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   24    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Inc\\stm32f1xx_hal_conf.h:\n   20    *\n   21    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   22:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   23:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   24    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   25    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Inc\\stm32f1xx_it.h:\n   19    *\n   20    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   21:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   22:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   23    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   24    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Inc\\usb_device.h:\n   19    *\n   20    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   21:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   22:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   23    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   24    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Inc\\usbd_conf.h:\n   19    *\n   20    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   21:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   22:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   23    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   24    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Inc\\usbd_desc.h:\n   19    *\n   20    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   21:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   22:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   23    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   24    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Middlewares\\ST\\STM32_USB_Device_Library\\Class\\HID\\Inc\\usbd_hid.h:\n   19    * Unless required by applicable law or agreed to in writing, software \n   20    * distributed under the License is distributed on an \"AS IS\" BASIS, \n   21:   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   22    * See the License for the specific language governing permissions and\n   23    * limitations under the License.\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Middlewares\\ST\\STM32_USB_Device_Library\\Class\\HID\\Inc\\usbd_hid.h.bak:\n   19    * Unless required by applicable law or agreed to in writing, software \n   20    * distributed under the License is distributed on an \"AS IS\" BASIS, \n   21:   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   22    * See the License for the specific language governing permissions and\n   23    * limitations under the License.\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Middlewares\\ST\\STM32_USB_Device_Library\\Class\\HID\\Src\\usbd_hid.c:\n   40    * Unless required by applicable law or agreed to in writing, software \n   41    * distributed under the License is distributed on an \"AS IS\" BASIS, \n   42:   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   43    * See the License for the specific language governing permissions and\n   44    * limitations under the License.\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Middlewares\\ST\\STM32_USB_Device_Library\\Class\\HID\\Src\\usbd_hid.c.bak:\n   40    * Unless required by applicable law or agreed to in writing, software \n   41    * distributed under the License is distributed on an \"AS IS\" BASIS, \n   42:   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   43    * See the License for the specific language governing permissions and\n   44    * limitations under the License.\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Middlewares\\ST\\STM32_USB_Device_Library\\Core\\Inc\\usbd_core.h:\n   19    * Unless required by applicable law or agreed to in writing, software \n   20    * distributed under the License is distributed on an \"AS IS\" BASIS, \n   21:   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   22    * See the License for the specific language governing permissions and\n   23    * limitations under the License.\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Middlewares\\ST\\STM32_USB_Device_Library\\Core\\Inc\\usbd_ctlreq.h:\n   19    * Unless required by applicable law or agreed to in writing, software \n   20    * distributed under the License is distributed on an \"AS IS\" BASIS, \n   21:   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   22    * See the License for the specific language governing permissions and\n   23    * limitations under the License.\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Middlewares\\ST\\STM32_USB_Device_Library\\Core\\Inc\\usbd_def.h:\n   19    * Unless required by applicable law or agreed to in writing, software \n   20    * distributed under the License is distributed on an \"AS IS\" BASIS, \n   21:   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   22    * See the License for the specific language governing permissions and\n   23    * limitations under the License.\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Middlewares\\ST\\STM32_USB_Device_Library\\Core\\Inc\\usbd_def.h.bak:\n   19    * Unless required by applicable law or agreed to in writing, software \n   20    * distributed under the License is distributed on an \"AS IS\" BASIS, \n   21:   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   22    * See the License for the specific language governing permissions and\n   23    * limitations under the License.\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Middlewares\\ST\\STM32_USB_Device_Library\\Core\\Inc\\usbd_ioreq.h:\n   19    * Unless required by applicable law or agreed to in writing, software \n   20    * distributed under the License is distributed on an \"AS IS\" BASIS, \n   21:   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   22    * See the License for the specific language governing permissions and\n   23    * limitations under the License.\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Middlewares\\ST\\STM32_USB_Device_Library\\Core\\Src\\usbd_core.c:\n   19    * Unless required by applicable law or agreed to in writing, software \n   20    * distributed under the License is distributed on an \"AS IS\" BASIS, \n   21:   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   22    * See the License for the specific language governing permissions and\n   23    * limitations under the License.\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Middlewares\\ST\\STM32_USB_Device_Library\\Core\\Src\\usbd_ctlreq.c:\n   19    * Unless required by applicable law or agreed to in writing, software \n   20    * distributed under the License is distributed on an \"AS IS\" BASIS, \n   21:   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   22    * See the License for the specific language governing permissions and\n   23    * limitations under the License.\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Middlewares\\ST\\STM32_USB_Device_Library\\Core\\Src\\usbd_ioreq.c:\n   19    * Unless required by applicable law or agreed to in writing, software \n   20    * distributed under the License is distributed on an \"AS IS\" BASIS, \n   21:   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   22    * See the License for the specific language governing permissions and\n   23    * limitations under the License.\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\Backup\\main.c.bak:\n   19    *\n   20    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   21:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   22:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   23    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   24    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\Backup\\stm32f1xx_hal_msp.c.bak:\n   20    *\n   21    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   22:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   23:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   24    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   25    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\Backup\\stm32f1xx_it.c.bak:\n   19    *\n   20    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   21:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   22:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   23    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   24    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\Backup\\usb_device.c.bak:\n   20    *\n   21    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   22:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   23:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   24    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   25    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\Backup\\usbd_conf.c.bak:\n   20    *\n   21    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   22:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   23:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   24    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   25    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\Backup\\usbd_desc.c.bak:\n   20    *\n   21    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   22:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   23:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   24    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   25    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\main.c:\n   19   *\n   20   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   21:  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   22:  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   23   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   24   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\main.c.bak:\n   19    *\n   20    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   21:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   22:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   23    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   24    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\stm32f1xx_hal_msp.c:\n   20    *\n   21    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   22:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   23:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   24    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   25    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\stm32f1xx_it.c:\n   19    *\n   20    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   21:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   22:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   23    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   24    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\usb_device.c:\n   20    *\n   21    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   22:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   23:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   24    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   25    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\usbd_conf.c:\n   20    *\n   21    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   22:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   23:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   24    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   25    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\usbd_conf.c.bak:\n   20    *\n   21    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   22:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   23:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   24    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   25    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\usbd_desc.c:\n   20    *\n   21    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   22:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   23:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   24    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   25    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\usbd_desc.c.bak:\n   20    *\n   21    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   22:   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   23:   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   24    * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   25    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\nD:\\WorkSTM32\\stm32_PPM_F103\\TrueSTUDIO\\stm32_PPM_F103 Configuration\\.cproject:\n   13  			</storageModule>\n   14  			<storageModule moduleId=\"cdtBuildSystem\" version=\"4.0.0\">\n   15: 				<configuration artifactExtension=\"elf\" artifactName=\"stm32_PPM_F103 Configuration\" buildArtefactType=\"org.eclipse.cdt.build.core.buildArtefactType.exe\" buildProperties=\"org.eclipse.cdt.build.core.buildArtefactType=org.eclipse.cdt.build.core.buildArtefactType.exe\" cleanCommand=\"rm -rf\" description=\"\" id=\"com.atollic.truestudio.exe.debug.1518366166\" name=\"Debug\" parent=\"com.atollic.truestudio.exe.debug\" postbuildStep=\"\" prebuildStep=\"\">\n   16  					<folderInfo id=\"com.atollic.truestudio.exe.debug.1518366166.2031504340\" name=\"/\" resourcePath=\"\">\n   17  						<toolChain id=\"com.atollic.truestudio.exe.debug.toolchain.683225115\" name=\"Atollic ARM Tools\" superClass=\"com.atollic.truestudio.exe.debug.toolchain\">\n\n349 matches across 104 files\n\n\nSearching 126 files for \"TIM_DIER\"\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f100xb.h:\n 2799  #define  TIM_SMCR_ETP                        ((uint32_t)0x00008000)            /*!<External trigger polarity */\n 2800  \n 2801: /*******************  Bit definition for TIM_DIER register  ******************/\n 2802: #define  TIM_DIER_UIE                        ((uint32_t)0x00000001)            /*!<Update interrupt enable */\n 2803: #define  TIM_DIER_CC1IE                      ((uint32_t)0x00000002)            /*!<Capture/Compare 1 interrupt enable */\n 2804: #define  TIM_DIER_CC2IE                      ((uint32_t)0x00000004)            /*!<Capture/Compare 2 interrupt enable */\n 2805: #define  TIM_DIER_CC3IE                      ((uint32_t)0x00000008)            /*!<Capture/Compare 3 interrupt enable */\n 2806: #define  TIM_DIER_CC4IE                      ((uint32_t)0x00000010)            /*!<Capture/Compare 4 interrupt enable */\n 2807: #define  TIM_DIER_COMIE                      ((uint32_t)0x00000020)            /*!<COM interrupt enable */\n 2808: #define  TIM_DIER_TIE                        ((uint32_t)0x00000040)            /*!<Trigger interrupt enable */\n 2809: #define  TIM_DIER_BIE                        ((uint32_t)0x00000080)            /*!<Break interrupt enable */\n 2810: #define  TIM_DIER_UDE                        ((uint32_t)0x00000100)            /*!<Update DMA request enable */\n 2811: #define  TIM_DIER_CC1DE                      ((uint32_t)0x00000200)            /*!<Capture/Compare 1 DMA request enable */\n 2812: #define  TIM_DIER_CC2DE                      ((uint32_t)0x00000400)            /*!<Capture/Compare 2 DMA request enable */\n 2813: #define  TIM_DIER_CC3DE                      ((uint32_t)0x00000800)            /*!<Capture/Compare 3 DMA request enable */\n 2814: #define  TIM_DIER_CC4DE                      ((uint32_t)0x00001000)            /*!<Capture/Compare 4 DMA request enable */\n 2815: #define  TIM_DIER_COMDE                      ((uint32_t)0x00002000)            /*!<COM DMA request enable */\n 2816: #define  TIM_DIER_TDE                        ((uint32_t)0x00004000)            /*!<Trigger DMA request enable */\n 2817  \n 2818  /********************  Bit definition for TIM_SR register  *******************/\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f100xe.h:\n 3030  #define  TIM_SMCR_ETP                        ((uint32_t)0x00008000)            /*!<External trigger polarity */\n 3031  \n 3032: /*******************  Bit definition for TIM_DIER register  ******************/\n 3033: #define  TIM_DIER_UIE                        ((uint32_t)0x00000001)            /*!<Update interrupt enable */\n 3034: #define  TIM_DIER_CC1IE                      ((uint32_t)0x00000002)            /*!<Capture/Compare 1 interrupt enable */\n 3035: #define  TIM_DIER_CC2IE                      ((uint32_t)0x00000004)            /*!<Capture/Compare 2 interrupt enable */\n 3036: #define  TIM_DIER_CC3IE                      ((uint32_t)0x00000008)            /*!<Capture/Compare 3 interrupt enable */\n 3037: #define  TIM_DIER_CC4IE                      ((uint32_t)0x00000010)            /*!<Capture/Compare 4 interrupt enable */\n 3038: #define  TIM_DIER_COMIE                      ((uint32_t)0x00000020)            /*!<COM interrupt enable */\n 3039: #define  TIM_DIER_TIE                        ((uint32_t)0x00000040)            /*!<Trigger interrupt enable */\n 3040: #define  TIM_DIER_BIE                        ((uint32_t)0x00000080)            /*!<Break interrupt enable */\n 3041: #define  TIM_DIER_UDE                        ((uint32_t)0x00000100)            /*!<Update DMA request enable */\n 3042: #define  TIM_DIER_CC1DE                      ((uint32_t)0x00000200)            /*!<Capture/Compare 1 DMA request enable */\n 3043: #define  TIM_DIER_CC2DE                      ((uint32_t)0x00000400)            /*!<Capture/Compare 2 DMA request enable */\n 3044: #define  TIM_DIER_CC3DE                      ((uint32_t)0x00000800)            /*!<Capture/Compare 3 DMA request enable */\n 3045: #define  TIM_DIER_CC4DE                      ((uint32_t)0x00001000)            /*!<Capture/Compare 4 DMA request enable */\n 3046: #define  TIM_DIER_COMDE                      ((uint32_t)0x00002000)            /*!<COM DMA request enable */\n 3047: #define  TIM_DIER_TDE                        ((uint32_t)0x00004000)            /*!<Trigger DMA request enable */\n 3048  \n 3049  /********************  Bit definition for TIM_SR register  *******************/\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f101x6.h:\n 2523  #define  TIM_SMCR_ETP                        ((uint32_t)0x00008000)            /*!<External trigger polarity */\n 2524  \n 2525: /*******************  Bit definition for TIM_DIER register  ******************/\n 2526: #define  TIM_DIER_UIE                        ((uint32_t)0x00000001)            /*!<Update interrupt enable */\n 2527: #define  TIM_DIER_CC1IE                      ((uint32_t)0x00000002)            /*!<Capture/Compare 1 interrupt enable */\n 2528: #define  TIM_DIER_CC2IE                      ((uint32_t)0x00000004)            /*!<Capture/Compare 2 interrupt enable */\n 2529: #define  TIM_DIER_CC3IE                      ((uint32_t)0x00000008)            /*!<Capture/Compare 3 interrupt enable */\n 2530: #define  TIM_DIER_CC4IE                      ((uint32_t)0x00000010)            /*!<Capture/Compare 4 interrupt enable */\n 2531: #define  TIM_DIER_COMIE                      ((uint32_t)0x00000020)            /*!<COM interrupt enable */\n 2532: #define  TIM_DIER_TIE                        ((uint32_t)0x00000040)            /*!<Trigger interrupt enable */\n 2533: #define  TIM_DIER_BIE                        ((uint32_t)0x00000080)            /*!<Break interrupt enable */\n 2534: #define  TIM_DIER_UDE                        ((uint32_t)0x00000100)            /*!<Update DMA request enable */\n 2535: #define  TIM_DIER_CC1DE                      ((uint32_t)0x00000200)            /*!<Capture/Compare 1 DMA request enable */\n 2536: #define  TIM_DIER_CC2DE                      ((uint32_t)0x00000400)            /*!<Capture/Compare 2 DMA request enable */\n 2537: #define  TIM_DIER_CC3DE                      ((uint32_t)0x00000800)            /*!<Capture/Compare 3 DMA request enable */\n 2538: #define  TIM_DIER_CC4DE                      ((uint32_t)0x00001000)            /*!<Capture/Compare 4 DMA request enable */\n 2539: #define  TIM_DIER_COMDE                      ((uint32_t)0x00002000)            /*!<COM DMA request enable */\n 2540: #define  TIM_DIER_TDE                        ((uint32_t)0x00004000)            /*!<Trigger DMA request enable */\n 2541  \n 2542  /********************  Bit definition for TIM_SR register  *******************/\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f101xb.h:\n 2557  #define  TIM_SMCR_ETP                        ((uint32_t)0x00008000)            /*!<External trigger polarity */\n 2558  \n 2559: /*******************  Bit definition for TIM_DIER register  ******************/\n 2560: #define  TIM_DIER_UIE                        ((uint32_t)0x00000001)            /*!<Update interrupt enable */\n 2561: #define  TIM_DIER_CC1IE                      ((uint32_t)0x00000002)            /*!<Capture/Compare 1 interrupt enable */\n 2562: #define  TIM_DIER_CC2IE                      ((uint32_t)0x00000004)            /*!<Capture/Compare 2 interrupt enable */\n 2563: #define  TIM_DIER_CC3IE                      ((uint32_t)0x00000008)            /*!<Capture/Compare 3 interrupt enable */\n 2564: #define  TIM_DIER_CC4IE                      ((uint32_t)0x00000010)            /*!<Capture/Compare 4 interrupt enable */\n 2565: #define  TIM_DIER_COMIE                      ((uint32_t)0x00000020)            /*!<COM interrupt enable */\n 2566: #define  TIM_DIER_TIE                        ((uint32_t)0x00000040)            /*!<Trigger interrupt enable */\n 2567: #define  TIM_DIER_BIE                        ((uint32_t)0x00000080)            /*!<Break interrupt enable */\n 2568: #define  TIM_DIER_UDE                        ((uint32_t)0x00000100)            /*!<Update DMA request enable */\n 2569: #define  TIM_DIER_CC1DE                      ((uint32_t)0x00000200)            /*!<Capture/Compare 1 DMA request enable */\n 2570: #define  TIM_DIER_CC2DE                      ((uint32_t)0x00000400)            /*!<Capture/Compare 2 DMA request enable */\n 2571: #define  TIM_DIER_CC3DE                      ((uint32_t)0x00000800)            /*!<Capture/Compare 3 DMA request enable */\n 2572: #define  TIM_DIER_CC4DE                      ((uint32_t)0x00001000)            /*!<Capture/Compare 4 DMA request enable */\n 2573: #define  TIM_DIER_COMDE                      ((uint32_t)0x00002000)            /*!<COM DMA request enable */\n 2574: #define  TIM_DIER_TDE                        ((uint32_t)0x00004000)            /*!<Trigger DMA request enable */\n 2575  \n 2576  /********************  Bit definition for TIM_SR register  *******************/\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f101xe.h:\n 2931  #define  TIM_SMCR_ETP                        ((uint32_t)0x00008000)            /*!<External trigger polarity */\n 2932  \n 2933: /*******************  Bit definition for TIM_DIER register  ******************/\n 2934: #define  TIM_DIER_UIE                        ((uint32_t)0x00000001)            /*!<Update interrupt enable */\n 2935: #define  TIM_DIER_CC1IE                      ((uint32_t)0x00000002)            /*!<Capture/Compare 1 interrupt enable */\n 2936: #define  TIM_DIER_CC2IE                      ((uint32_t)0x00000004)            /*!<Capture/Compare 2 interrupt enable */\n 2937: #define  TIM_DIER_CC3IE                      ((uint32_t)0x00000008)            /*!<Capture/Compare 3 interrupt enable */\n 2938: #define  TIM_DIER_CC4IE                      ((uint32_t)0x00000010)            /*!<Capture/Compare 4 interrupt enable */\n 2939: #define  TIM_DIER_COMIE                      ((uint32_t)0x00000020)            /*!<COM interrupt enable */\n 2940: #define  TIM_DIER_TIE                        ((uint32_t)0x00000040)            /*!<Trigger interrupt enable */\n 2941: #define  TIM_DIER_BIE                        ((uint32_t)0x00000080)            /*!<Break interrupt enable */\n 2942: #define  TIM_DIER_UDE                        ((uint32_t)0x00000100)            /*!<Update DMA request enable */\n 2943: #define  TIM_DIER_CC1DE                      ((uint32_t)0x00000200)            /*!<Capture/Compare 1 DMA request enable */\n 2944: #define  TIM_DIER_CC2DE                      ((uint32_t)0x00000400)            /*!<Capture/Compare 2 DMA request enable */\n 2945: #define  TIM_DIER_CC3DE                      ((uint32_t)0x00000800)            /*!<Capture/Compare 3 DMA request enable */\n 2946: #define  TIM_DIER_CC4DE                      ((uint32_t)0x00001000)            /*!<Capture/Compare 4 DMA request enable */\n 2947: #define  TIM_DIER_COMDE                      ((uint32_t)0x00002000)            /*!<COM DMA request enable */\n 2948: #define  TIM_DIER_TDE                        ((uint32_t)0x00004000)            /*!<Trigger DMA request enable */\n 2949  \n 2950  /********************  Bit definition for TIM_SR register  *******************/\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f101xg.h:\n 2984  #define  TIM_SMCR_ETP                        ((uint32_t)0x00008000)            /*!<External trigger polarity */\n 2985  \n 2986: /*******************  Bit definition for TIM_DIER register  ******************/\n 2987: #define  TIM_DIER_UIE                        ((uint32_t)0x00000001)            /*!<Update interrupt enable */\n 2988: #define  TIM_DIER_CC1IE                      ((uint32_t)0x00000002)            /*!<Capture/Compare 1 interrupt enable */\n 2989: #define  TIM_DIER_CC2IE                      ((uint32_t)0x00000004)            /*!<Capture/Compare 2 interrupt enable */\n 2990: #define  TIM_DIER_CC3IE                      ((uint32_t)0x00000008)            /*!<Capture/Compare 3 interrupt enable */\n 2991: #define  TIM_DIER_CC4IE                      ((uint32_t)0x00000010)            /*!<Capture/Compare 4 interrupt enable */\n 2992: #define  TIM_DIER_COMIE                      ((uint32_t)0x00000020)            /*!<COM interrupt enable */\n 2993: #define  TIM_DIER_TIE                        ((uint32_t)0x00000040)            /*!<Trigger interrupt enable */\n 2994: #define  TIM_DIER_BIE                        ((uint32_t)0x00000080)            /*!<Break interrupt enable */\n 2995: #define  TIM_DIER_UDE                        ((uint32_t)0x00000100)            /*!<Update DMA request enable */\n 2996: #define  TIM_DIER_CC1DE                      ((uint32_t)0x00000200)            /*!<Capture/Compare 1 DMA request enable */\n 2997: #define  TIM_DIER_CC2DE                      ((uint32_t)0x00000400)            /*!<Capture/Compare 2 DMA request enable */\n 2998: #define  TIM_DIER_CC3DE                      ((uint32_t)0x00000800)            /*!<Capture/Compare 3 DMA request enable */\n 2999: #define  TIM_DIER_CC4DE                      ((uint32_t)0x00001000)            /*!<Capture/Compare 4 DMA request enable */\n 3000: #define  TIM_DIER_COMDE                      ((uint32_t)0x00002000)            /*!<COM DMA request enable */\n 3001: #define  TIM_DIER_TDE                        ((uint32_t)0x00004000)            /*!<Trigger DMA request enable */\n 3002  \n 3003  /********************  Bit definition for TIM_SR register  *******************/\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f102x6.h:\n 2566  #define  TIM_SMCR_ETP                        ((uint32_t)0x00008000)            /*!<External trigger polarity */\n 2567  \n 2568: /*******************  Bit definition for TIM_DIER register  ******************/\n 2569: #define  TIM_DIER_UIE                        ((uint32_t)0x00000001)            /*!<Update interrupt enable */\n 2570: #define  TIM_DIER_CC1IE                      ((uint32_t)0x00000002)            /*!<Capture/Compare 1 interrupt enable */\n 2571: #define  TIM_DIER_CC2IE                      ((uint32_t)0x00000004)            /*!<Capture/Compare 2 interrupt enable */\n 2572: #define  TIM_DIER_CC3IE                      ((uint32_t)0x00000008)            /*!<Capture/Compare 3 interrupt enable */\n 2573: #define  TIM_DIER_CC4IE                      ((uint32_t)0x00000010)            /*!<Capture/Compare 4 interrupt enable */\n 2574: #define  TIM_DIER_COMIE                      ((uint32_t)0x00000020)            /*!<COM interrupt enable */\n 2575: #define  TIM_DIER_TIE                        ((uint32_t)0x00000040)            /*!<Trigger interrupt enable */\n 2576: #define  TIM_DIER_BIE                        ((uint32_t)0x00000080)            /*!<Break interrupt enable */\n 2577: #define  TIM_DIER_UDE                        ((uint32_t)0x00000100)            /*!<Update DMA request enable */\n 2578: #define  TIM_DIER_CC1DE                      ((uint32_t)0x00000200)            /*!<Capture/Compare 1 DMA request enable */\n 2579: #define  TIM_DIER_CC2DE                      ((uint32_t)0x00000400)            /*!<Capture/Compare 2 DMA request enable */\n 2580: #define  TIM_DIER_CC3DE                      ((uint32_t)0x00000800)            /*!<Capture/Compare 3 DMA request enable */\n 2581: #define  TIM_DIER_CC4DE                      ((uint32_t)0x00001000)            /*!<Capture/Compare 4 DMA request enable */\n 2582: #define  TIM_DIER_COMDE                      ((uint32_t)0x00002000)            /*!<COM DMA request enable */\n 2583: #define  TIM_DIER_TDE                        ((uint32_t)0x00004000)            /*!<Trigger DMA request enable */\n 2584  \n 2585  /********************  Bit definition for TIM_SR register  *******************/\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f102xb.h:\n 2596  #define  TIM_SMCR_ETP                        ((uint32_t)0x00008000)            /*!<External trigger polarity */\n 2597  \n 2598: /*******************  Bit definition for TIM_DIER register  ******************/\n 2599: #define  TIM_DIER_UIE                        ((uint32_t)0x00000001)            /*!<Update interrupt enable */\n 2600: #define  TIM_DIER_CC1IE                      ((uint32_t)0x00000002)            /*!<Capture/Compare 1 interrupt enable */\n 2601: #define  TIM_DIER_CC2IE                      ((uint32_t)0x00000004)            /*!<Capture/Compare 2 interrupt enable */\n 2602: #define  TIM_DIER_CC3IE                      ((uint32_t)0x00000008)            /*!<Capture/Compare 3 interrupt enable */\n 2603: #define  TIM_DIER_CC4IE                      ((uint32_t)0x00000010)            /*!<Capture/Compare 4 interrupt enable */\n 2604: #define  TIM_DIER_COMIE                      ((uint32_t)0x00000020)            /*!<COM interrupt enable */\n 2605: #define  TIM_DIER_TIE                        ((uint32_t)0x00000040)            /*!<Trigger interrupt enable */\n 2606: #define  TIM_DIER_BIE                        ((uint32_t)0x00000080)            /*!<Break interrupt enable */\n 2607: #define  TIM_DIER_UDE                        ((uint32_t)0x00000100)            /*!<Update DMA request enable */\n 2608: #define  TIM_DIER_CC1DE                      ((uint32_t)0x00000200)            /*!<Capture/Compare 1 DMA request enable */\n 2609: #define  TIM_DIER_CC2DE                      ((uint32_t)0x00000400)            /*!<Capture/Compare 2 DMA request enable */\n 2610: #define  TIM_DIER_CC3DE                      ((uint32_t)0x00000800)            /*!<Capture/Compare 3 DMA request enable */\n 2611: #define  TIM_DIER_CC4DE                      ((uint32_t)0x00001000)            /*!<Capture/Compare 4 DMA request enable */\n 2612: #define  TIM_DIER_COMDE                      ((uint32_t)0x00002000)            /*!<COM DMA request enable */\n 2613: #define  TIM_DIER_TDE                        ((uint32_t)0x00004000)            /*!<Trigger DMA request enable */\n 2614  \n 2615  /********************  Bit definition for TIM_SR register  *******************/\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f103x6.h:\n 2660  #define  TIM_SMCR_ETP                        ((uint32_t)0x00008000)            /*!<External trigger polarity */\n 2661  \n 2662: /*******************  Bit definition for TIM_DIER register  ******************/\n 2663: #define  TIM_DIER_UIE                        ((uint32_t)0x00000001)            /*!<Update interrupt enable */\n 2664: #define  TIM_DIER_CC1IE                      ((uint32_t)0x00000002)            /*!<Capture/Compare 1 interrupt enable */\n 2665: #define  TIM_DIER_CC2IE                      ((uint32_t)0x00000004)            /*!<Capture/Compare 2 interrupt enable */\n 2666: #define  TIM_DIER_CC3IE                      ((uint32_t)0x00000008)            /*!<Capture/Compare 3 interrupt enable */\n 2667: #define  TIM_DIER_CC4IE                      ((uint32_t)0x00000010)            /*!<Capture/Compare 4 interrupt enable */\n 2668: #define  TIM_DIER_COMIE                      ((uint32_t)0x00000020)            /*!<COM interrupt enable */\n 2669: #define  TIM_DIER_TIE                        ((uint32_t)0x00000040)            /*!<Trigger interrupt enable */\n 2670: #define  TIM_DIER_BIE                        ((uint32_t)0x00000080)            /*!<Break interrupt enable */\n 2671: #define  TIM_DIER_UDE                        ((uint32_t)0x00000100)            /*!<Update DMA request enable */\n 2672: #define  TIM_DIER_CC1DE                      ((uint32_t)0x00000200)            /*!<Capture/Compare 1 DMA request enable */\n 2673: #define  TIM_DIER_CC2DE                      ((uint32_t)0x00000400)            /*!<Capture/Compare 2 DMA request enable */\n 2674: #define  TIM_DIER_CC3DE                      ((uint32_t)0x00000800)            /*!<Capture/Compare 3 DMA request enable */\n 2675: #define  TIM_DIER_CC4DE                      ((uint32_t)0x00001000)            /*!<Capture/Compare 4 DMA request enable */\n 2676: #define  TIM_DIER_COMDE                      ((uint32_t)0x00002000)            /*!<COM DMA request enable */\n 2677: #define  TIM_DIER_TDE                        ((uint32_t)0x00004000)            /*!<Trigger DMA request enable */\n 2678  \n 2679  /********************  Bit definition for TIM_SR register  *******************/\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f103xb.h:\n 2694  #define  TIM_SMCR_ETP                        ((uint32_t)0x00008000)            /*!<External trigger polarity */\n 2695  \n 2696: /*******************  Bit definition for TIM_DIER register  ******************/\n 2697: #define  TIM_DIER_UIE                        ((uint32_t)0x00000001)            /*!<Update interrupt enable */\n 2698: #define  TIM_DIER_CC1IE                      ((uint32_t)0x00000002)            /*!<Capture/Compare 1 interrupt enable */\n 2699: #define  TIM_DIER_CC2IE                      ((uint32_t)0x00000004)            /*!<Capture/Compare 2 interrupt enable */\n 2700: #define  TIM_DIER_CC3IE                      ((uint32_t)0x00000008)            /*!<Capture/Compare 3 interrupt enable */\n 2701: #define  TIM_DIER_CC4IE                      ((uint32_t)0x00000010)            /*!<Capture/Compare 4 interrupt enable */\n 2702: #define  TIM_DIER_COMIE                      ((uint32_t)0x00000020)            /*!<COM interrupt enable */\n 2703: #define  TIM_DIER_TIE                        ((uint32_t)0x00000040)            /*!<Trigger interrupt enable */\n 2704: #define  TIM_DIER_BIE                        ((uint32_t)0x00000080)            /*!<Break interrupt enable */\n 2705: #define  TIM_DIER_UDE                        ((uint32_t)0x00000100)            /*!<Update DMA request enable */\n 2706: #define  TIM_DIER_CC1DE                      ((uint32_t)0x00000200)            /*!<Capture/Compare 1 DMA request enable */\n 2707: #define  TIM_DIER_CC2DE                      ((uint32_t)0x00000400)            /*!<Capture/Compare 2 DMA request enable */\n 2708: #define  TIM_DIER_CC3DE                      ((uint32_t)0x00000800)            /*!<Capture/Compare 3 DMA request enable */\n 2709: #define  TIM_DIER_CC4DE                      ((uint32_t)0x00001000)            /*!<Capture/Compare 4 DMA request enable */\n 2710: #define  TIM_DIER_COMDE                      ((uint32_t)0x00002000)            /*!<COM DMA request enable */\n 2711: #define  TIM_DIER_TDE                        ((uint32_t)0x00004000)            /*!<Trigger DMA request enable */\n 2712  \n 2713  /********************  Bit definition for TIM_SR register  *******************/\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f103xe.h:\n 3088  #define  TIM_SMCR_ETP                        ((uint32_t)0x00008000)            /*!<External trigger polarity */\n 3089  \n 3090: /*******************  Bit definition for TIM_DIER register  ******************/\n 3091: #define  TIM_DIER_UIE                        ((uint32_t)0x00000001)            /*!<Update interrupt enable */\n 3092: #define  TIM_DIER_CC1IE                      ((uint32_t)0x00000002)            /*!<Capture/Compare 1 interrupt enable */\n 3093: #define  TIM_DIER_CC2IE                      ((uint32_t)0x00000004)            /*!<Capture/Compare 2 interrupt enable */\n 3094: #define  TIM_DIER_CC3IE                      ((uint32_t)0x00000008)            /*!<Capture/Compare 3 interrupt enable */\n 3095: #define  TIM_DIER_CC4IE                      ((uint32_t)0x00000010)            /*!<Capture/Compare 4 interrupt enable */\n 3096: #define  TIM_DIER_COMIE                      ((uint32_t)0x00000020)            /*!<COM interrupt enable */\n 3097: #define  TIM_DIER_TIE                        ((uint32_t)0x00000040)            /*!<Trigger interrupt enable */\n 3098: #define  TIM_DIER_BIE                        ((uint32_t)0x00000080)            /*!<Break interrupt enable */\n 3099: #define  TIM_DIER_UDE                        ((uint32_t)0x00000100)            /*!<Update DMA request enable */\n 3100: #define  TIM_DIER_CC1DE                      ((uint32_t)0x00000200)            /*!<Capture/Compare 1 DMA request enable */\n 3101: #define  TIM_DIER_CC2DE                      ((uint32_t)0x00000400)            /*!<Capture/Compare 2 DMA request enable */\n 3102: #define  TIM_DIER_CC3DE                      ((uint32_t)0x00000800)            /*!<Capture/Compare 3 DMA request enable */\n 3103: #define  TIM_DIER_CC4DE                      ((uint32_t)0x00001000)            /*!<Capture/Compare 4 DMA request enable */\n 3104: #define  TIM_DIER_COMDE                      ((uint32_t)0x00002000)            /*!<COM DMA request enable */\n 3105: #define  TIM_DIER_TDE                        ((uint32_t)0x00004000)            /*!<Trigger DMA request enable */\n 3106  \n 3107  /********************  Bit definition for TIM_SR register  *******************/\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f103xg.h:\n 3124  #define  TIM_SMCR_ETP                        ((uint32_t)0x00008000)            /*!<External trigger polarity */\n 3125  \n 3126: /*******************  Bit definition for TIM_DIER register  ******************/\n 3127: #define  TIM_DIER_UIE                        ((uint32_t)0x00000001)            /*!<Update interrupt enable */\n 3128: #define  TIM_DIER_CC1IE                      ((uint32_t)0x00000002)            /*!<Capture/Compare 1 interrupt enable */\n 3129: #define  TIM_DIER_CC2IE                      ((uint32_t)0x00000004)            /*!<Capture/Compare 2 interrupt enable */\n 3130: #define  TIM_DIER_CC3IE                      ((uint32_t)0x00000008)            /*!<Capture/Compare 3 interrupt enable */\n 3131: #define  TIM_DIER_CC4IE                      ((uint32_t)0x00000010)            /*!<Capture/Compare 4 interrupt enable */\n 3132: #define  TIM_DIER_COMIE                      ((uint32_t)0x00000020)            /*!<COM interrupt enable */\n 3133: #define  TIM_DIER_TIE                        ((uint32_t)0x00000040)            /*!<Trigger interrupt enable */\n 3134: #define  TIM_DIER_BIE                        ((uint32_t)0x00000080)            /*!<Break interrupt enable */\n 3135: #define  TIM_DIER_UDE                        ((uint32_t)0x00000100)            /*!<Update DMA request enable */\n 3136: #define  TIM_DIER_CC1DE                      ((uint32_t)0x00000200)            /*!<Capture/Compare 1 DMA request enable */\n 3137: #define  TIM_DIER_CC2DE                      ((uint32_t)0x00000400)            /*!<Capture/Compare 2 DMA request enable */\n 3138: #define  TIM_DIER_CC3DE                      ((uint32_t)0x00000800)            /*!<Capture/Compare 3 DMA request enable */\n 3139: #define  TIM_DIER_CC4DE                      ((uint32_t)0x00001000)            /*!<Capture/Compare 4 DMA request enable */\n 3140: #define  TIM_DIER_COMDE                      ((uint32_t)0x00002000)            /*!<COM DMA request enable */\n 3141: #define  TIM_DIER_TDE                        ((uint32_t)0x00004000)            /*!<Trigger DMA request enable */\n 3142  \n 3143  /********************  Bit definition for TIM_SR register  *******************/\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f105xc.h:\n 3205  #define  TIM_SMCR_ETP                        ((uint32_t)0x00008000)            /*!<External trigger polarity */\n 3206  \n 3207: /*******************  Bit definition for TIM_DIER register  ******************/\n 3208: #define  TIM_DIER_UIE                        ((uint32_t)0x00000001)            /*!<Update interrupt enable */\n 3209: #define  TIM_DIER_CC1IE                      ((uint32_t)0x00000002)            /*!<Capture/Compare 1 interrupt enable */\n 3210: #define  TIM_DIER_CC2IE                      ((uint32_t)0x00000004)            /*!<Capture/Compare 2 interrupt enable */\n 3211: #define  TIM_DIER_CC3IE                      ((uint32_t)0x00000008)            /*!<Capture/Compare 3 interrupt enable */\n 3212: #define  TIM_DIER_CC4IE                      ((uint32_t)0x00000010)            /*!<Capture/Compare 4 interrupt enable */\n 3213: #define  TIM_DIER_COMIE                      ((uint32_t)0x00000020)            /*!<COM interrupt enable */\n 3214: #define  TIM_DIER_TIE                        ((uint32_t)0x00000040)            /*!<Trigger interrupt enable */\n 3215: #define  TIM_DIER_BIE                        ((uint32_t)0x00000080)            /*!<Break interrupt enable */\n 3216: #define  TIM_DIER_UDE                        ((uint32_t)0x00000100)            /*!<Update DMA request enable */\n 3217: #define  TIM_DIER_CC1DE                      ((uint32_t)0x00000200)            /*!<Capture/Compare 1 DMA request enable */\n 3218: #define  TIM_DIER_CC2DE                      ((uint32_t)0x00000400)            /*!<Capture/Compare 2 DMA request enable */\n 3219: #define  TIM_DIER_CC3DE                      ((uint32_t)0x00000800)            /*!<Capture/Compare 3 DMA request enable */\n 3220: #define  TIM_DIER_CC4DE                      ((uint32_t)0x00001000)            /*!<Capture/Compare 4 DMA request enable */\n 3221: #define  TIM_DIER_COMDE                      ((uint32_t)0x00002000)            /*!<COM DMA request enable */\n 3222: #define  TIM_DIER_TDE                        ((uint32_t)0x00004000)            /*!<Trigger DMA request enable */\n 3223  \n 3224  /********************  Bit definition for TIM_SR register  *******************/\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f107xc.h:\n 3289  #define  TIM_SMCR_ETP                        ((uint32_t)0x00008000)            /*!<External trigger polarity */\n 3290  \n 3291: /*******************  Bit definition for TIM_DIER register  ******************/\n 3292: #define  TIM_DIER_UIE                        ((uint32_t)0x00000001)            /*!<Update interrupt enable */\n 3293: #define  TIM_DIER_CC1IE                      ((uint32_t)0x00000002)            /*!<Capture/Compare 1 interrupt enable */\n 3294: #define  TIM_DIER_CC2IE                      ((uint32_t)0x00000004)            /*!<Capture/Compare 2 interrupt enable */\n 3295: #define  TIM_DIER_CC3IE                      ((uint32_t)0x00000008)            /*!<Capture/Compare 3 interrupt enable */\n 3296: #define  TIM_DIER_CC4IE                      ((uint32_t)0x00000010)            /*!<Capture/Compare 4 interrupt enable */\n 3297: #define  TIM_DIER_COMIE                      ((uint32_t)0x00000020)            /*!<COM interrupt enable */\n 3298: #define  TIM_DIER_TIE                        ((uint32_t)0x00000040)            /*!<Trigger interrupt enable */\n 3299: #define  TIM_DIER_BIE                        ((uint32_t)0x00000080)            /*!<Break interrupt enable */\n 3300: #define  TIM_DIER_UDE                        ((uint32_t)0x00000100)            /*!<Update DMA request enable */\n 3301: #define  TIM_DIER_CC1DE                      ((uint32_t)0x00000200)            /*!<Capture/Compare 1 DMA request enable */\n 3302: #define  TIM_DIER_CC2DE                      ((uint32_t)0x00000400)            /*!<Capture/Compare 2 DMA request enable */\n 3303: #define  TIM_DIER_CC3DE                      ((uint32_t)0x00000800)            /*!<Capture/Compare 3 DMA request enable */\n 3304: #define  TIM_DIER_CC4DE                      ((uint32_t)0x00001000)            /*!<Capture/Compare 4 DMA request enable */\n 3305: #define  TIM_DIER_COMDE                      ((uint32_t)0x00002000)            /*!<COM DMA request enable */\n 3306: #define  TIM_DIER_TDE                        ((uint32_t)0x00004000)            /*!<Trigger DMA request enable */\n 3307  \n 3308  /********************  Bit definition for TIM_SR register  *******************/\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal_tim.h:\n  501    * @{\n  502    */\n  503: #define TIM_IT_UPDATE           (TIM_DIER_UIE)\n  504: #define TIM_IT_CC1              (TIM_DIER_CC1IE)\n  505: #define TIM_IT_CC2              (TIM_DIER_CC2IE)\n  506: #define TIM_IT_CC3              (TIM_DIER_CC3IE)\n  507: #define TIM_IT_CC4              (TIM_DIER_CC4IE)\n  508: #define TIM_IT_COM              (TIM_DIER_COMIE)\n  509: #define TIM_IT_TRIGGER          (TIM_DIER_TIE)\n  510: #define TIM_IT_BREAK            (TIM_DIER_BIE)\n  511  /**\n  512    * @}\n  ...\n  526    * @{\n  527    */\n  528: #define TIM_DMA_UPDATE                     (TIM_DIER_UDE)\n  529: #define TIM_DMA_CC1                        (TIM_DIER_CC1DE)\n  530: #define TIM_DMA_CC2                        (TIM_DIER_CC2DE)\n  531: #define TIM_DMA_CC3                        (TIM_DIER_CC3DE)\n  532: #define TIM_DMA_CC4                        (TIM_DIER_CC4DE)\n  533: #define TIM_DMA_COM                        (TIM_DIER_COMDE)\n  534: #define TIM_DMA_TRIGGER                    (TIM_DIER_TDE)\n  535  /**\n  536    * @}\n\n239 matches across 15 files\n\n\nSearching 126 files for \"TIM_IT_TRIGGER\"\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal_tim.h:\n  507  #define TIM_IT_CC4              (TIM_DIER_CC4IE)\n  508  #define TIM_IT_COM              (TIM_DIER_COMIE)\n  509: #define TIM_IT_TRIGGER          (TIM_DIER_TIE)\n  510  #define TIM_IT_BREAK            (TIM_DIER_BIE)\n  511  /**\n  ...\n 1235    *            @arg TIM_IT_CC4:  Capture/Compare 4 interrupt\n 1236    *            @arg TIM_IT_COM:   Commutation interrupt\n 1237:   *            @arg TIM_IT_TRIGGER: Trigger interrupt\n 1238    *            @arg TIM_IT_BREAK: Break interrupt\n 1239    * @retval None\n ....\n 1252    *            @arg TIM_IT_CC4:  Capture/Compare 4 interrupt\n 1253    *            @arg TIM_IT_COM:   Commutation interrupt\n 1254:   *            @arg TIM_IT_TRIGGER: Trigger interrupt\n 1255    *            @arg TIM_IT_BREAK: Break interrupt\n 1256    * @retval None\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_tim.c:\n 2836    if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)\n 2837    {\n 2838:     if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)\n 2839      {\n 2840:       __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);\n 2841        HAL_TIM_TriggerCallback(htim);\n 2842      }\n ....\n 4086  \n 4087    /* Disable Trigger Interrupt */\n 4088:   __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);\n 4089  \n 4090    /* Disable Trigger DMA request */\n ....\n 4122  \n 4123    /* Enable Trigger Interrupt */\n 4124:   __HAL_TIM_ENABLE_IT(htim, TIM_IT_TRIGGER);\n 4125  \n 4126    /* Disable Trigger DMA request */\n\n7 matches across 2 files\n\n\nSearching 126 files for \"TI1FP1\"\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal_tim.h:\n  740  #define TIM_TS_ITR3                        ((uint32_t)0x0030)\n  741  #define TIM_TS_TI1F_ED                     ((uint32_t)0x0040)\n  742: #define TIM_TS_TI1FP1                      ((uint32_t)0x0050)\n  743  #define TIM_TS_TI2FP2                      ((uint32_t)0x0060)\n  744  #define TIM_TS_ETRF                        ((uint32_t)0x0070)\n  ...\n 1032                                               ((SELECTION) == TIM_TS_ITR3)    || \\\n 1033                                               ((SELECTION) == TIM_TS_TI1F_ED) || \\\n 1034:                                              ((SELECTION) == TIM_TS_TI1FP1)  || \\\n 1035                                               ((SELECTION) == TIM_TS_TI2FP2)  || \\\n 1036                                               ((SELECTION) == TIM_TS_ETRF))\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_tim.c:\n 3215        /* Select the Trigger source */\n 3216          htim->Instance->SMCR &= ~TIM_SMCR_TS;\n 3217:       htim->Instance->SMCR |= TIM_TS_TI1FP1;\n 3218  \n 3219        /* Select the Slave Mode */\n ....\n 4898      break;\n 4899  \n 4900:   case TIM_TS_TI1FP1:\n 4901      {\n 4902        /* Check the parameters */\n ....\n 5238    *            @arg TIM_TS_ITR3 : Internal Trigger 3\n 5239    *            @arg TIM_TS_TI1F_ED : TI1 Edge Detector\n 5240:   *            @arg TIM_TS_TI1FP1 : Filtered Timer Input 1\n 5241    *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2\n 5242    *            @arg TIM_TS_ETRF : External Trigger input\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\Backup\\main.c.bak:\n  204  \n  205    sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;\n  206:   sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;\n  207    sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;\n  208    sSlaveConfig.TriggerFilter = 0;\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\main.c:\n  210  \n  211  	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;\n  212: 	sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;\n  213  	sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;\n  214  	sSlaveConfig.TriggerFilter = 0;\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\main.c.bak:\n  157  \n  158    sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;\n  159:   sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;\n  160    sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;\n  161    sSlaveConfig.TriggerFilter = 0;\n\nD:\\WorkSTM32\\stm32_PPM_F103\\stm32_PPM_F103.ioc:\n   89  RCC.USBPrescaler=RCC_USBPLLCLK_DIV1_5\n   90  RCC.VCOOutput2Freq_Value=8000000\n   91: SH.S_TIM1_CH1.0=TIM1_CH1,TriggerSource_TI1FP1\n   92  SH.S_TIM1_CH1.1=TIM1_CH1,Input_Capture1_from_TI1\n   93  SH.S_TIM1_CH1.ConfNb=2\n\nD:\\WorkSTM32\\stm32_PPM_F103\\stm32_PPM_F103.txt:\n   10  RCC	Crystal/Ceramic Resonator	RCC_OSC_OUT	PD1-OSC_OUT\n   11  TIM1	Reset Mode	TIM1_VS_ControllerModeReset	VP_TIM1_VS_ControllerModeReset\n   12: TIM1	TI1FP1	TIM1_CH1	PA8\n   13  TIM1	Internal Clock	TIM1_VS_ClockSourceINT	VP_TIM1_VS_ClockSourceINT\n   14  TIM1	Input Capture direct mode	TIM1_CH1	PA8\n\n10 matches across 7 files\n\n\nSearching 126 files for \"TIM_DIER_CC1IE\"\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f100xb.h:\n 2801  /*******************  Bit definition for TIM_DIER register  ******************/\n 2802  #define  TIM_DIER_UIE                        ((uint32_t)0x00000001)            /*!<Update interrupt enable */\n 2803: #define  TIM_DIER_CC1IE                      ((uint32_t)0x00000002)            /*!<Capture/Compare 1 interrupt enable */\n 2804  #define  TIM_DIER_CC2IE                      ((uint32_t)0x00000004)            /*!<Capture/Compare 2 interrupt enable */\n 2805  #define  TIM_DIER_CC3IE                      ((uint32_t)0x00000008)            /*!<Capture/Compare 3 interrupt enable */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f100xe.h:\n 3032  /*******************  Bit definition for TIM_DIER register  ******************/\n 3033  #define  TIM_DIER_UIE                        ((uint32_t)0x00000001)            /*!<Update interrupt enable */\n 3034: #define  TIM_DIER_CC1IE                      ((uint32_t)0x00000002)            /*!<Capture/Compare 1 interrupt enable */\n 3035  #define  TIM_DIER_CC2IE                      ((uint32_t)0x00000004)            /*!<Capture/Compare 2 interrupt enable */\n 3036  #define  TIM_DIER_CC3IE                      ((uint32_t)0x00000008)            /*!<Capture/Compare 3 interrupt enable */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f101x6.h:\n 2525  /*******************  Bit definition for TIM_DIER register  ******************/\n 2526  #define  TIM_DIER_UIE                        ((uint32_t)0x00000001)            /*!<Update interrupt enable */\n 2527: #define  TIM_DIER_CC1IE                      ((uint32_t)0x00000002)            /*!<Capture/Compare 1 interrupt enable */\n 2528  #define  TIM_DIER_CC2IE                      ((uint32_t)0x00000004)            /*!<Capture/Compare 2 interrupt enable */\n 2529  #define  TIM_DIER_CC3IE                      ((uint32_t)0x00000008)            /*!<Capture/Compare 3 interrupt enable */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f101xb.h:\n 2559  /*******************  Bit definition for TIM_DIER register  ******************/\n 2560  #define  TIM_DIER_UIE                        ((uint32_t)0x00000001)            /*!<Update interrupt enable */\n 2561: #define  TIM_DIER_CC1IE                      ((uint32_t)0x00000002)            /*!<Capture/Compare 1 interrupt enable */\n 2562  #define  TIM_DIER_CC2IE                      ((uint32_t)0x00000004)            /*!<Capture/Compare 2 interrupt enable */\n 2563  #define  TIM_DIER_CC3IE                      ((uint32_t)0x00000008)            /*!<Capture/Compare 3 interrupt enable */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f101xe.h:\n 2933  /*******************  Bit definition for TIM_DIER register  ******************/\n 2934  #define  TIM_DIER_UIE                        ((uint32_t)0x00000001)            /*!<Update interrupt enable */\n 2935: #define  TIM_DIER_CC1IE                      ((uint32_t)0x00000002)            /*!<Capture/Compare 1 interrupt enable */\n 2936  #define  TIM_DIER_CC2IE                      ((uint32_t)0x00000004)            /*!<Capture/Compare 2 interrupt enable */\n 2937  #define  TIM_DIER_CC3IE                      ((uint32_t)0x00000008)            /*!<Capture/Compare 3 interrupt enable */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f101xg.h:\n 2986  /*******************  Bit definition for TIM_DIER register  ******************/\n 2987  #define  TIM_DIER_UIE                        ((uint32_t)0x00000001)            /*!<Update interrupt enable */\n 2988: #define  TIM_DIER_CC1IE                      ((uint32_t)0x00000002)            /*!<Capture/Compare 1 interrupt enable */\n 2989  #define  TIM_DIER_CC2IE                      ((uint32_t)0x00000004)            /*!<Capture/Compare 2 interrupt enable */\n 2990  #define  TIM_DIER_CC3IE                      ((uint32_t)0x00000008)            /*!<Capture/Compare 3 interrupt enable */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f102x6.h:\n 2568  /*******************  Bit definition for TIM_DIER register  ******************/\n 2569  #define  TIM_DIER_UIE                        ((uint32_t)0x00000001)            /*!<Update interrupt enable */\n 2570: #define  TIM_DIER_CC1IE                      ((uint32_t)0x00000002)            /*!<Capture/Compare 1 interrupt enable */\n 2571  #define  TIM_DIER_CC2IE                      ((uint32_t)0x00000004)            /*!<Capture/Compare 2 interrupt enable */\n 2572  #define  TIM_DIER_CC3IE                      ((uint32_t)0x00000008)            /*!<Capture/Compare 3 interrupt enable */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f102xb.h:\n 2598  /*******************  Bit definition for TIM_DIER register  ******************/\n 2599  #define  TIM_DIER_UIE                        ((uint32_t)0x00000001)            /*!<Update interrupt enable */\n 2600: #define  TIM_DIER_CC1IE                      ((uint32_t)0x00000002)            /*!<Capture/Compare 1 interrupt enable */\n 2601  #define  TIM_DIER_CC2IE                      ((uint32_t)0x00000004)            /*!<Capture/Compare 2 interrupt enable */\n 2602  #define  TIM_DIER_CC3IE                      ((uint32_t)0x00000008)            /*!<Capture/Compare 3 interrupt enable */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f103x6.h:\n 2662  /*******************  Bit definition for TIM_DIER register  ******************/\n 2663  #define  TIM_DIER_UIE                        ((uint32_t)0x00000001)            /*!<Update interrupt enable */\n 2664: #define  TIM_DIER_CC1IE                      ((uint32_t)0x00000002)            /*!<Capture/Compare 1 interrupt enable */\n 2665  #define  TIM_DIER_CC2IE                      ((uint32_t)0x00000004)            /*!<Capture/Compare 2 interrupt enable */\n 2666  #define  TIM_DIER_CC3IE                      ((uint32_t)0x00000008)            /*!<Capture/Compare 3 interrupt enable */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f103xb.h:\n 2696  /*******************  Bit definition for TIM_DIER register  ******************/\n 2697  #define  TIM_DIER_UIE                        ((uint32_t)0x00000001)            /*!<Update interrupt enable */\n 2698: #define  TIM_DIER_CC1IE                      ((uint32_t)0x00000002)            /*!<Capture/Compare 1 interrupt enable */\n 2699  #define  TIM_DIER_CC2IE                      ((uint32_t)0x00000004)            /*!<Capture/Compare 2 interrupt enable */\n 2700  #define  TIM_DIER_CC3IE                      ((uint32_t)0x00000008)            /*!<Capture/Compare 3 interrupt enable */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f103xe.h:\n 3090  /*******************  Bit definition for TIM_DIER register  ******************/\n 3091  #define  TIM_DIER_UIE                        ((uint32_t)0x00000001)            /*!<Update interrupt enable */\n 3092: #define  TIM_DIER_CC1IE                      ((uint32_t)0x00000002)            /*!<Capture/Compare 1 interrupt enable */\n 3093  #define  TIM_DIER_CC2IE                      ((uint32_t)0x00000004)            /*!<Capture/Compare 2 interrupt enable */\n 3094  #define  TIM_DIER_CC3IE                      ((uint32_t)0x00000008)            /*!<Capture/Compare 3 interrupt enable */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f103xg.h:\n 3126  /*******************  Bit definition for TIM_DIER register  ******************/\n 3127  #define  TIM_DIER_UIE                        ((uint32_t)0x00000001)            /*!<Update interrupt enable */\n 3128: #define  TIM_DIER_CC1IE                      ((uint32_t)0x00000002)            /*!<Capture/Compare 1 interrupt enable */\n 3129  #define  TIM_DIER_CC2IE                      ((uint32_t)0x00000004)            /*!<Capture/Compare 2 interrupt enable */\n 3130  #define  TIM_DIER_CC3IE                      ((uint32_t)0x00000008)            /*!<Capture/Compare 3 interrupt enable */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f105xc.h:\n 3207  /*******************  Bit definition for TIM_DIER register  ******************/\n 3208  #define  TIM_DIER_UIE                        ((uint32_t)0x00000001)            /*!<Update interrupt enable */\n 3209: #define  TIM_DIER_CC1IE                      ((uint32_t)0x00000002)            /*!<Capture/Compare 1 interrupt enable */\n 3210  #define  TIM_DIER_CC2IE                      ((uint32_t)0x00000004)            /*!<Capture/Compare 2 interrupt enable */\n 3211  #define  TIM_DIER_CC3IE                      ((uint32_t)0x00000008)            /*!<Capture/Compare 3 interrupt enable */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f107xc.h:\n 3291  /*******************  Bit definition for TIM_DIER register  ******************/\n 3292  #define  TIM_DIER_UIE                        ((uint32_t)0x00000001)            /*!<Update interrupt enable */\n 3293: #define  TIM_DIER_CC1IE                      ((uint32_t)0x00000002)            /*!<Capture/Compare 1 interrupt enable */\n 3294  #define  TIM_DIER_CC2IE                      ((uint32_t)0x00000004)            /*!<Capture/Compare 2 interrupt enable */\n 3295  #define  TIM_DIER_CC3IE                      ((uint32_t)0x00000008)            /*!<Capture/Compare 3 interrupt enable */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal_tim.h:\n  502    */\n  503  #define TIM_IT_UPDATE           (TIM_DIER_UIE)\n  504: #define TIM_IT_CC1              (TIM_DIER_CC1IE)\n  505  #define TIM_IT_CC2              (TIM_DIER_CC2IE)\n  506  #define TIM_IT_CC3              (TIM_DIER_CC3IE)\n\n15 matches across 15 files\n\n\nSearching 126 files for \"TIM_IT_CC1\"\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal_tim.h:\n  502    */\n  503  #define TIM_IT_UPDATE           (TIM_DIER_UIE)\n  504: #define TIM_IT_CC1              (TIM_DIER_CC1IE)\n  505  #define TIM_IT_CC2              (TIM_DIER_CC2IE)\n  506  #define TIM_IT_CC3              (TIM_DIER_CC3IE)\n  ...\n 1230    *          This parameter can be one of the following values:\n 1231    *            @arg TIM_IT_UPDATE: Update interrupt\n 1232:   *            @arg TIM_IT_CC1:   Capture/Compare 1 interrupt\n 1233    *            @arg TIM_IT_CC2:  Capture/Compare 2 interrupt\n 1234    *            @arg TIM_IT_CC3:  Capture/Compare 3 interrupt\n ....\n 1247    *          This parameter can be one of the following values:\n 1248    *            @arg TIM_IT_UPDATE: Update interrupt\n 1249:   *            @arg TIM_IT_CC1:   Capture/Compare 1 interrupt\n 1250    *            @arg TIM_IT_CC2:  Capture/Compare 2 interrupt\n 1251    *            @arg TIM_IT_CC3:  Capture/Compare 3 interrupt\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_tim.c:\n  645      {\n  646        /* Enable the TIM Capture/Compare 1 interrupt */\n  647:       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);\n  648      }\n  649      break;\n  ...\n  711      {\n  712        /* Disable the TIM Capture/Compare 1 interrupt */\n  713:       __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);\n  714      }\n  715      break;\n  ...\n 1148      {\n 1149        /* Enable the TIM Capture/Compare 1 interrupt */\n 1150:       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);\n 1151      }\n 1152      break;\n ....\n 1214      {\n 1215        /* Disable the TIM Capture/Compare 1 interrupt */\n 1216:       __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);\n 1217      }\n 1218      break;\n ....\n 1636      {\n 1637        /* Enable the TIM Capture/Compare 1 interrupt */\n 1638:       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);\n 1639      }\n 1640      break;\n ....\n 1695      {\n 1696        /* Disable the TIM Capture/Compare 1 interrupt */\n 1697:       __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);\n 1698      }\n 1699      break;\n ....\n 2126  \n 2127    /* Enable the TIM Capture/Compare 1 interrupt */\n 2128:   __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);\n 2129  \n 2130    /* Enable the TIM Capture/Compare 2 interrupt */\n ....\n 2156  {\n 2157    /* Disable the TIM Capture/Compare 1 interrupt */\n 2158:   __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);\n 2159  \n 2160    /* Disable the TIM Capture/Compare 2 interrupt */\n ....\n 2457    {\n 2458      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);\n 2459:     __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);\n 2460        break;\n 2461    }\n ....\n 2470       TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);\n 2471       TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);\n 2472:      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);\n 2473       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);\n 2474       break;\n ....\n 2505  \n 2506      /* Disable the capture compare Interrupts 1 */\n 2507:   __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);\n 2508    }\n 2509    else if(Channel == TIM_CHANNEL_2)\n ....\n 2520  \n 2521      /* Disable the capture compare Interrupts 1 and 2 */\n 2522:     __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);\n 2523      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);\n 2524    }\n ....\n 2731    if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)\n 2732    {\n 2733:     if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)\n 2734      {\n 2735        {\n 2736:         __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);\n 2737          htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;\n 2738  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_tim_ex.c:\n  342  \n  343    /* Enable the capture compare Interrupts 1 event */\n  344:   __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);\n  345  \n  346    /* Enable the Input Capture channel 1\n  ...\n  370  \n  371    /* Disable the capture compare Interrupts event */\n  372:   __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);\n  373  \n  374    /* Disable the Peripheral */\n  ...\n  563      {\n  564        /* Enable the TIM Output Compare interrupt */\n  565:       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);\n  566      }\n  567      break;\n  ...\n  632      {\n  633        /* Disable the TIM Output Compare interrupt */\n  634:       __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);\n  635      }\n  636      break;\n  ...\n  979      {\n  980        /* Enable the TIM Capture/Compare 1 interrupt */\n  981:       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);\n  982      }\n  983      break;\n  ...\n 1048      {\n 1049        /* Disable the TIM Capture/Compare 1 interrupt */\n 1050:       __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);\n 1051      }\n 1052      break;\n ....\n 1373  \n 1374    /* Enable the TIM Capture/Compare 1 interrupt */\n 1375:   __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);\n 1376  \n 1377    /* Enable the TIM Capture/Compare 2 interrupt */\n ....\n 1404  \n 1405    /* Disable the TIM Capture/Compare 1 interrupt */\n 1406:   __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);\n 1407  \n 1408    /* Disable the TIM Capture/Compare 2 interrupt */\n\n25 matches across 3 files\n\n\nSearching 126 files for \"__HAL_TIM_ENABLE_IT\"\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal_tim.h:\n 1239    * @retval None\n 1240    */\n 1241: #define __HAL_TIM_ENABLE_IT(__HANDLE__, __INTERRUPT__)    ((__HANDLE__)->Instance->DIER |= (__INTERRUPT__))\n 1242  \n 1243  /**\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_tim.c:\n  347  \n  348     /* Enable the TIM Update interrupt */\n  349:    __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);\n  350  \n  351     /* Enable the Peripheral */\n  ...\n  645      {\n  646        /* Enable the TIM Capture/Compare 1 interrupt */\n  647:       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);\n  648      }\n  649      break;\n  ...\n  652      {\n  653        /* Enable the TIM Capture/Compare 2 interrupt */\n  654:       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);\n  655      }\n  656      break;\n  ...\n  659      {\n  660        /* Enable the TIM Capture/Compare 3 interrupt */\n  661:       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);\n  662      }\n  663      break;\n  ...\n  666      {\n  667        /* Enable the TIM Capture/Compare 4 interrupt */\n  668:       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);\n  669      }\n  670      break;\n  ...\n 1148      {\n 1149        /* Enable the TIM Capture/Compare 1 interrupt */\n 1150:       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);\n 1151      }\n 1152      break;\n ....\n 1155      {\n 1156        /* Enable the TIM Capture/Compare 2 interrupt */\n 1157:       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);\n 1158      }\n 1159      break;\n ....\n 1162      {\n 1163        /* Enable the TIM Capture/Compare 3 interrupt */\n 1164:       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);\n 1165      }\n 1166      break;\n ....\n 1169      {\n 1170        /* Enable the TIM Capture/Compare 4 interrupt */\n 1171:       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);\n 1172      }\n 1173      break;\n ....\n 1636      {\n 1637        /* Enable the TIM Capture/Compare 1 interrupt */\n 1638:       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);\n 1639      }\n 1640      break;\n ....\n 1643      {\n 1644        /* Enable the TIM Capture/Compare 2 interrupt */\n 1645:       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);\n 1646      }\n 1647      break;\n ....\n 1650      {\n 1651        /* Enable the TIM Capture/Compare 3 interrupt */\n 1652:       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);\n 1653      }\n 1654      break;\n ....\n 1657      {\n 1658        /* Enable the TIM Capture/Compare 4 interrupt */\n 1659:       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);\n 1660      }\n 1661      break;\n ....\n 2126  \n 2127    /* Enable the TIM Capture/Compare 1 interrupt */\n 2128:   __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);\n 2129  \n 2130    /* Enable the TIM Capture/Compare 2 interrupt */\n 2131:   __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);\n 2132  \n 2133    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);\n ....\n 2457    {\n 2458      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);\n 2459:     __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);\n 2460        break;\n 2461    }\n ....\n 2463    {\n 2464      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);\n 2465:     __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);\n 2466        break;\n 2467    }\n ....\n 2470       TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);\n 2471       TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);\n 2472:      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);\n 2473:      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);\n 2474       break;\n 2475      }\n ....\n 4122  \n 4123    /* Enable Trigger Interrupt */\n 4124:   __HAL_TIM_ENABLE_IT(htim, TIM_IT_TRIGGER);\n 4125  \n 4126    /* Disable Trigger DMA request */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_tim_ex.c:\n  342  \n  343    /* Enable the capture compare Interrupts 1 event */\n  344:   __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);\n  345  \n  346    /* Enable the Input Capture channel 1\n  ...\n  563      {\n  564        /* Enable the TIM Output Compare interrupt */\n  565:       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);\n  566      }\n  567      break;\n  ...\n  570      {\n  571        /* Enable the TIM Output Compare interrupt */\n  572:       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);\n  573      }\n  574      break;\n  ...\n  577      {\n  578        /* Enable the TIM Output Compare interrupt */\n  579:       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);\n  580      }\n  581      break;\n  ...\n  584      {\n  585        /* Enable the TIM Output Compare interrupt */\n  586:       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);\n  587      }\n  588      break;\n  ...\n  593  \n  594    /* Enable the TIM Break interrupt */\n  595:   __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);\n  596  \n  597    /* Enable the Capture compare channel N */\n  ...\n  979      {\n  980        /* Enable the TIM Capture/Compare 1 interrupt */\n  981:       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);\n  982      }\n  983      break;\n  ...\n  986      {\n  987        /* Enable the TIM Capture/Compare 2 interrupt */\n  988:       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);\n  989      }\n  990      break;\n  ...\n  993      {\n  994        /* Enable the TIM Capture/Compare 3 interrupt */\n  995:       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);\n  996      }\n  997      break;\n  ...\n 1000      {\n 1001        /* Enable the TIM Capture/Compare 4 interrupt */\n 1002:       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);\n 1003      }\n 1004      break;\n ....\n 1009  \n 1010    /* Enable the TIM Break interrupt */\n 1011:   __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);\n 1012  \n 1013    /* Enable the complementary PWM output  */\n ....\n 1373  \n 1374    /* Enable the TIM Capture/Compare 1 interrupt */\n 1375:   __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);\n 1376  \n 1377    /* Enable the TIM Capture/Compare 2 interrupt */\n 1378:   __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);\n 1379  \n 1380    /* Enable the complementary One Pulse output */\n ....\n 1545  \n 1546    /* Enable the Commutation Interrupt Request */\n 1547:   __HAL_TIM_ENABLE_IT(htim, TIM_IT_COM);\n 1548  \n 1549    __HAL_UNLOCK(htim);\n\n35 matches across 3 files\n\n\nSearching 126 files for \"TIM_DIER_TIE\"\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f100xb.h:\n 2806  #define  TIM_DIER_CC4IE                      ((uint32_t)0x00000010)            /*!<Capture/Compare 4 interrupt enable */\n 2807  #define  TIM_DIER_COMIE                      ((uint32_t)0x00000020)            /*!<COM interrupt enable */\n 2808: #define  TIM_DIER_TIE                        ((uint32_t)0x00000040)            /*!<Trigger interrupt enable */\n 2809  #define  TIM_DIER_BIE                        ((uint32_t)0x00000080)            /*!<Break interrupt enable */\n 2810  #define  TIM_DIER_UDE                        ((uint32_t)0x00000100)            /*!<Update DMA request enable */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f100xe.h:\n 3037  #define  TIM_DIER_CC4IE                      ((uint32_t)0x00000010)            /*!<Capture/Compare 4 interrupt enable */\n 3038  #define  TIM_DIER_COMIE                      ((uint32_t)0x00000020)            /*!<COM interrupt enable */\n 3039: #define  TIM_DIER_TIE                        ((uint32_t)0x00000040)            /*!<Trigger interrupt enable */\n 3040  #define  TIM_DIER_BIE                        ((uint32_t)0x00000080)            /*!<Break interrupt enable */\n 3041  #define  TIM_DIER_UDE                        ((uint32_t)0x00000100)            /*!<Update DMA request enable */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f101x6.h:\n 2530  #define  TIM_DIER_CC4IE                      ((uint32_t)0x00000010)            /*!<Capture/Compare 4 interrupt enable */\n 2531  #define  TIM_DIER_COMIE                      ((uint32_t)0x00000020)            /*!<COM interrupt enable */\n 2532: #define  TIM_DIER_TIE                        ((uint32_t)0x00000040)            /*!<Trigger interrupt enable */\n 2533  #define  TIM_DIER_BIE                        ((uint32_t)0x00000080)            /*!<Break interrupt enable */\n 2534  #define  TIM_DIER_UDE                        ((uint32_t)0x00000100)            /*!<Update DMA request enable */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f101xb.h:\n 2564  #define  TIM_DIER_CC4IE                      ((uint32_t)0x00000010)            /*!<Capture/Compare 4 interrupt enable */\n 2565  #define  TIM_DIER_COMIE                      ((uint32_t)0x00000020)            /*!<COM interrupt enable */\n 2566: #define  TIM_DIER_TIE                        ((uint32_t)0x00000040)            /*!<Trigger interrupt enable */\n 2567  #define  TIM_DIER_BIE                        ((uint32_t)0x00000080)            /*!<Break interrupt enable */\n 2568  #define  TIM_DIER_UDE                        ((uint32_t)0x00000100)            /*!<Update DMA request enable */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f101xe.h:\n 2938  #define  TIM_DIER_CC4IE                      ((uint32_t)0x00000010)            /*!<Capture/Compare 4 interrupt enable */\n 2939  #define  TIM_DIER_COMIE                      ((uint32_t)0x00000020)            /*!<COM interrupt enable */\n 2940: #define  TIM_DIER_TIE                        ((uint32_t)0x00000040)            /*!<Trigger interrupt enable */\n 2941  #define  TIM_DIER_BIE                        ((uint32_t)0x00000080)            /*!<Break interrupt enable */\n 2942  #define  TIM_DIER_UDE                        ((uint32_t)0x00000100)            /*!<Update DMA request enable */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f101xg.h:\n 2991  #define  TIM_DIER_CC4IE                      ((uint32_t)0x00000010)            /*!<Capture/Compare 4 interrupt enable */\n 2992  #define  TIM_DIER_COMIE                      ((uint32_t)0x00000020)            /*!<COM interrupt enable */\n 2993: #define  TIM_DIER_TIE                        ((uint32_t)0x00000040)            /*!<Trigger interrupt enable */\n 2994  #define  TIM_DIER_BIE                        ((uint32_t)0x00000080)            /*!<Break interrupt enable */\n 2995  #define  TIM_DIER_UDE                        ((uint32_t)0x00000100)            /*!<Update DMA request enable */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f102x6.h:\n 2573  #define  TIM_DIER_CC4IE                      ((uint32_t)0x00000010)            /*!<Capture/Compare 4 interrupt enable */\n 2574  #define  TIM_DIER_COMIE                      ((uint32_t)0x00000020)            /*!<COM interrupt enable */\n 2575: #define  TIM_DIER_TIE                        ((uint32_t)0x00000040)            /*!<Trigger interrupt enable */\n 2576  #define  TIM_DIER_BIE                        ((uint32_t)0x00000080)            /*!<Break interrupt enable */\n 2577  #define  TIM_DIER_UDE                        ((uint32_t)0x00000100)            /*!<Update DMA request enable */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f102xb.h:\n 2603  #define  TIM_DIER_CC4IE                      ((uint32_t)0x00000010)            /*!<Capture/Compare 4 interrupt enable */\n 2604  #define  TIM_DIER_COMIE                      ((uint32_t)0x00000020)            /*!<COM interrupt enable */\n 2605: #define  TIM_DIER_TIE                        ((uint32_t)0x00000040)            /*!<Trigger interrupt enable */\n 2606  #define  TIM_DIER_BIE                        ((uint32_t)0x00000080)            /*!<Break interrupt enable */\n 2607  #define  TIM_DIER_UDE                        ((uint32_t)0x00000100)            /*!<Update DMA request enable */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f103x6.h:\n 2667  #define  TIM_DIER_CC4IE                      ((uint32_t)0x00000010)            /*!<Capture/Compare 4 interrupt enable */\n 2668  #define  TIM_DIER_COMIE                      ((uint32_t)0x00000020)            /*!<COM interrupt enable */\n 2669: #define  TIM_DIER_TIE                        ((uint32_t)0x00000040)            /*!<Trigger interrupt enable */\n 2670  #define  TIM_DIER_BIE                        ((uint32_t)0x00000080)            /*!<Break interrupt enable */\n 2671  #define  TIM_DIER_UDE                        ((uint32_t)0x00000100)            /*!<Update DMA request enable */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f103xb.h:\n 2701  #define  TIM_DIER_CC4IE                      ((uint32_t)0x00000010)            /*!<Capture/Compare 4 interrupt enable */\n 2702  #define  TIM_DIER_COMIE                      ((uint32_t)0x00000020)            /*!<COM interrupt enable */\n 2703: #define  TIM_DIER_TIE                        ((uint32_t)0x00000040)            /*!<Trigger interrupt enable */\n 2704  #define  TIM_DIER_BIE                        ((uint32_t)0x00000080)            /*!<Break interrupt enable */\n 2705  #define  TIM_DIER_UDE                        ((uint32_t)0x00000100)            /*!<Update DMA request enable */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f103xe.h:\n 3095  #define  TIM_DIER_CC4IE                      ((uint32_t)0x00000010)            /*!<Capture/Compare 4 interrupt enable */\n 3096  #define  TIM_DIER_COMIE                      ((uint32_t)0x00000020)            /*!<COM interrupt enable */\n 3097: #define  TIM_DIER_TIE                        ((uint32_t)0x00000040)            /*!<Trigger interrupt enable */\n 3098  #define  TIM_DIER_BIE                        ((uint32_t)0x00000080)            /*!<Break interrupt enable */\n 3099  #define  TIM_DIER_UDE                        ((uint32_t)0x00000100)            /*!<Update DMA request enable */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f103xg.h:\n 3131  #define  TIM_DIER_CC4IE                      ((uint32_t)0x00000010)            /*!<Capture/Compare 4 interrupt enable */\n 3132  #define  TIM_DIER_COMIE                      ((uint32_t)0x00000020)            /*!<COM interrupt enable */\n 3133: #define  TIM_DIER_TIE                        ((uint32_t)0x00000040)            /*!<Trigger interrupt enable */\n 3134  #define  TIM_DIER_BIE                        ((uint32_t)0x00000080)            /*!<Break interrupt enable */\n 3135  #define  TIM_DIER_UDE                        ((uint32_t)0x00000100)            /*!<Update DMA request enable */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f105xc.h:\n 3212  #define  TIM_DIER_CC4IE                      ((uint32_t)0x00000010)            /*!<Capture/Compare 4 interrupt enable */\n 3213  #define  TIM_DIER_COMIE                      ((uint32_t)0x00000020)            /*!<COM interrupt enable */\n 3214: #define  TIM_DIER_TIE                        ((uint32_t)0x00000040)            /*!<Trigger interrupt enable */\n 3215  #define  TIM_DIER_BIE                        ((uint32_t)0x00000080)            /*!<Break interrupt enable */\n 3216  #define  TIM_DIER_UDE                        ((uint32_t)0x00000100)            /*!<Update DMA request enable */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f107xc.h:\n 3296  #define  TIM_DIER_CC4IE                      ((uint32_t)0x00000010)            /*!<Capture/Compare 4 interrupt enable */\n 3297  #define  TIM_DIER_COMIE                      ((uint32_t)0x00000020)            /*!<COM interrupt enable */\n 3298: #define  TIM_DIER_TIE                        ((uint32_t)0x00000040)            /*!<Trigger interrupt enable */\n 3299  #define  TIM_DIER_BIE                        ((uint32_t)0x00000080)            /*!<Break interrupt enable */\n 3300  #define  TIM_DIER_UDE                        ((uint32_t)0x00000100)            /*!<Update DMA request enable */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal_tim.h:\n  507  #define TIM_IT_CC4              (TIM_DIER_CC4IE)\n  508  #define TIM_IT_COM              (TIM_DIER_COMIE)\n  509: #define TIM_IT_TRIGGER          (TIM_DIER_TIE)\n  510  #define TIM_IT_BREAK            (TIM_DIER_BIE)\n  511  /**\n\n15 matches across 15 files\n\n\nSearching 129 files for \"HAL_TIM_IC_Start_IT\"\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal_tim.h:\n 1634  HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel);\n 1635  /* Non-Blocking mode: Interrupt */\n 1636: HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel);\n 1637  HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel);\n 1638  /* Non-Blocking mode: DMA */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_tim.c:\n   85       (#) Activate the TIM peripheral using one of the start functions depending from the feature used:\n   86             (++) Time Base : HAL_TIM_Base_Start(), HAL_TIM_Base_Start_DMA(), HAL_TIM_Base_Start_IT()\n   87:            (++) Input Capture :  HAL_TIM_IC_Start(), HAL_TIM_IC_Start_DMA(), HAL_TIM_IC_Start_IT()\n   88             (++) Output Compare : HAL_TIM_OC_Start(), HAL_TIM_OC_Start_DMA(), HAL_TIM_OC_Start_IT()\n   89             (++) PWM generation : HAL_TIM_PWM_Start(), HAL_TIM_PWM_Start_DMA(), HAL_TIM_PWM_Start_IT()\n   ..\n 1626    * @retval HAL status\n 1627  */\n 1628: HAL_StatusTypeDef HAL_TIM_IC_Start_IT (TIM_HandleTypeDef *htim, uint32_t Channel)\n 1629  {\n 1630    /* Check the parameters */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\Backup\\main.c.bak:\n  124  \n  125    /* USER CODE BEGIN 2 */\n  126: 	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);\n  127  \n  128    /* USER CODE END 2 */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\main.c:\n  134  \n  135  	/* USER CODE BEGIN 2 */\n  136: 	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);\n  137  \n  138  	/* USER CODE END 2 */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\stm32_PPM_F103\\Debug\\bin\\stm32_PPM_F103.elf:\n    <binary>\n\nD:\\WorkSTM32\\stm32_PPM_F103\\stm32_PPM_F103\\Debug\\bin\\stm32_PPM_F103.map:\n 1191                  0x080052f4       0x14 ..\\obj\\stm32f1xx_hal_tim.o\n 1192                  0x080052f4                HAL_TIM_IC_MspInit\n 1193:  .text.HAL_TIM_IC_Start_IT\n 1194                  0x08005308       0xc0 ..\\obj\\stm32f1xx_hal_tim.o\n 1195:                 0x08005308                HAL_TIM_IC_Start_IT\n 1196   .text.HAL_TIM_IRQHandler\n 1197                  0x080053c8      0x210 ..\\obj\\stm32f1xx_hal_tim.o\n\n9 matches across 6 files\n\n\nSearching 130 files for \"HAL_NVIC_SetPriority\"\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal_cortex.h:\n  412    */  \n  413  /* Initialization and de-initialization functions *****************************/\n  414: void     HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup);\n  415: void     HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority);\n  416  void     HAL_NVIC_EnableIRQ(IRQn_Type IRQn);\n  417  void     HAL_NVIC_DisableIRQ(IRQn_Type IRQn);\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal.c:\n  170  \n  171    /* Set Interrupt Group Priority */\n  172:   HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);\n  173  \n  174    /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */\n  ...\n  253  \n  254    /*Configure the SysTick IRQ priority */\n  255:   HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);\n  256  \n  257     /* Return function status */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_cortex.c:\n   24      The Cortex-M3 exceptions are managed by CMSIS functions.\n   25     \n   26:     (#) Configure the NVIC Priority Grouping using HAL_NVIC_SetPriorityGrouping()\n   27          function according to the following table.\n   28  \n   29       The table below gives the allowed values of the pre-emption priority and subpriority according\n   30:      to the Priority Grouping configuration performed by HAL_NVIC_SetPriorityGrouping() function.\n   31         ==========================================================================================================================\n   32           NVIC_PriorityGroup   | NVIC_IRQChannelPreemptionPriority | NVIC_IRQChannelSubPriority  |       Description\n   ..\n   47                                |                                   |                             | 0 bits for subpriority                       \n   48         ==========================================================================================================================\n   49:      (#)  Configure the priority of the selected IRQ Channels using HAL_NVIC_SetPriority() \n   50  \n   51       (#)  Enable the selected IRQ Channels using HAL_NVIC_EnableIRQ() \n   ..\n   81  \n   82     (+) You can change the SysTick IRQ priority by calling the\n   83:        HAL_NVIC_SetPriority(SysTick_IRQn,...) function just after the HAL_SYSTICK_Config() function \n   84:        call. The HAL_NVIC_SetPriority() call the NVIC_SetPriority() function which is a CMSIS function.\n   85  \n   86     (+) To adjust the SysTick time base, use the following formula:\n   ..\n  182    * @retval None\n  183    */\n  184: void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)\n  185  {\n  186    /* Check the parameters */\n  ...\n  204    * @retval None\n  205    */\n  206: void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)\n  207  {\n  208    uint32_t prioritygroup = 0x00;\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_dma.c:\n   44       =================================== \n   45      [..]\n   46:       (+) Configure the DMA interrupt priority using HAL_NVIC_SetPriority()\n   47        (+) Enable the DMA IRQ handler using HAL_NVIC_EnableIRQ() \n   48        (+) Use HAL_DMA_Start_IT() to start DMA transfer after the configuration of  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_gpio.c:\n   67     \n   68     (#) In case of external interrupt/event mode selection, configure NVIC IRQ priority \n   69:        mapped to the EXTI line using HAL_NVIC_SetPriority() and enable it using\n   70         HAL_NVIC_EnableIRQ().\n   71           \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\Backup\\main.c.bak:\n  178  \n  179    /* SysTick_IRQn interrupt configuration */\n  180:   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);\n  181  }\n  182  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\Backup\\stm32f1xx_hal_msp.c.bak:\n   50    __HAL_RCC_AFIO_CLK_ENABLE();\n   51  \n   52:   HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);\n   53  \n   54    /* System interrupt init*/\n   55    /* SysTick_IRQn interrupt configuration */\n   56:   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);\n   57  \n   58    /* USER CODE BEGIN MspInit 1 */\n   ..\n   82  \n   83    /* Peripheral interrupt init*/\n   84:     HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);\n   85      HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);\n   86    /* USER CODE BEGIN TIM1_MspInit 1 */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\Backup\\usbd_conf.c.bak:\n   69  \n   70      /* Peripheral interrupt init*/\n   71:     HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);\n   72      HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);\n   73    /* USER CODE BEGIN USB_MspInit 1 */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\main.c:\n  185  \n  186  	/* SysTick_IRQn interrupt configuration */\n  187: 	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);\n  188  }\n  189  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\main.c.bak:\n  131  \n  132    /* SysTick_IRQn interrupt configuration */\n  133:   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);\n  134  }\n  135  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\stm32f1xx_hal_msp.c:\n   50    __HAL_RCC_AFIO_CLK_ENABLE();\n   51  \n   52:   HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);\n   53  \n   54    /* System interrupt init*/\n   55    /* SysTick_IRQn interrupt configuration */\n   56:   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);\n   57  \n   58    /* USER CODE BEGIN MspInit 1 */\n   ..\n   82  \n   83    /* Peripheral interrupt init*/\n   84:     HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);\n   85      HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);\n   86    /* USER CODE BEGIN TIM1_MspInit 1 */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\usbd_conf.c:\n   81  \n   82      /* Peripheral interrupt init*/\n   83:     HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);\n   84      HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);\n   85    /* USER CODE BEGIN USB_MspInit 1 */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\usbd_conf.c.bak:\n   69  \n   70      /* Peripheral interrupt init*/\n   71:     HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);\n   72      HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);\n   73    /* USER CODE BEGIN USB_MspInit 1 */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\stm32_PPM_F103\\Debug\\bin\\stm32_PPM_F103.elf:\n    <binary>\n\nD:\\WorkSTM32\\stm32_PPM_F103\\stm32_PPM_F103\\Debug\\bin\\stm32_PPM_F103.map:\n  838   .text.SysTick_Config\n  839                  0x0800057c       0x44 ..\\obj\\stm32f1xx_hal_cortex.o\n  840:  .text.HAL_NVIC_SetPriorityGrouping\n  841                  0x080005c0       0x14 ..\\obj\\stm32f1xx_hal_cortex.o\n  842:                 0x080005c0                HAL_NVIC_SetPriorityGrouping\n  843:  .text.HAL_NVIC_SetPriority\n  844                  0x080005d4       0x38 ..\\obj\\stm32f1xx_hal_cortex.o\n  845:                 0x080005d4                HAL_NVIC_SetPriority\n  846   .text.HAL_NVIC_EnableIRQ\n  847                  0x0800060c       0x1c ..\\obj\\stm32f1xx_hal_cortex.o\n\n33 matches across 15 files\n\n\nSearching 130 files for \"tim1_cc_irq\"\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f100xb.h:\n  121    TIM1_UP_TIM16_IRQn          = 25,     /*!< TIM1 Update and TIM16 Interrupts                     */\n  122    TIM1_TRG_COM_TIM17_IRQn     = 26,     /*!< TIM1 Trigger and Commutation and TIM17 Interrupt     */\n  123:   TIM1_CC_IRQn                = 27,     /*!< TIM1 Capture Compare Interrupt                       */\n  124    TIM2_IRQn                   = 28,     /*!< TIM2 global Interrupt                                */\n  125    TIM3_IRQn                   = 29,     /*!< TIM3 global Interrupt                                */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f100xe.h:\n  121    TIM1_UP_TIM16_IRQn          = 25,     /*!< TIM1 Update and TIM16 Interrupts                     */\n  122    TIM1_TRG_COM_TIM17_IRQn     = 26,     /*!< TIM1 Trigger and Commutation and TIM17 Interrupt     */\n  123:   TIM1_CC_IRQn                = 27,     /*!< TIM1 Capture Compare Interrupt                       */\n  124    TIM2_IRQn                   = 28,     /*!< TIM2 global Interrupt                                */\n  125    TIM3_IRQn                   = 29,     /*!< TIM3 global Interrupt                                */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f103x6.h:\n  125    TIM1_UP_IRQn                = 25,     /*!< TIM1 Update Interrupt                                */\n  126    TIM1_TRG_COM_IRQn           = 26,     /*!< TIM1 Trigger and Commutation Interrupt               */\n  127:   TIM1_CC_IRQn                = 27,     /*!< TIM1 Capture Compare Interrupt                       */\n  128    TIM2_IRQn                   = 28,     /*!< TIM2 global Interrupt                                */\n  129    TIM3_IRQn                   = 29,     /*!< TIM3 global Interrupt                                */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f103xb.h:\n  125    TIM1_UP_IRQn                = 25,     /*!< TIM1 Update Interrupt                                */\n  126    TIM1_TRG_COM_IRQn           = 26,     /*!< TIM1 Trigger and Commutation Interrupt               */\n  127:   TIM1_CC_IRQn                = 27,     /*!< TIM1 Capture Compare Interrupt                       */\n  128    TIM2_IRQn                   = 28,     /*!< TIM2 global Interrupt                                */\n  129    TIM3_IRQn                   = 29,     /*!< TIM3 global Interrupt                                */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f103xe.h:\n  125    TIM1_UP_IRQn                = 25,     /*!< TIM1 Update Interrupt                                */\n  126    TIM1_TRG_COM_IRQn           = 26,     /*!< TIM1 Trigger and Commutation Interrupt               */\n  127:   TIM1_CC_IRQn                = 27,     /*!< TIM1 Capture Compare Interrupt                       */\n  128    TIM2_IRQn                   = 28,     /*!< TIM2 global Interrupt                                */\n  129    TIM3_IRQn                   = 29,     /*!< TIM3 global Interrupt                                */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f103xg.h:\n  125    TIM1_UP_TIM10_IRQn          = 25,     /*!< TIM1 Update Interrupt and TIM10 global Interrupt     */\n  126    TIM1_TRG_COM_TIM11_IRQn     = 26,     /*!< TIM1 Trigger and Commutation Interrupt and TIM11 global interrupt */\n  127:   TIM1_CC_IRQn                = 27,     /*!< TIM1 Capture Compare Interrupt                       */\n  128    TIM2_IRQn                   = 28,     /*!< TIM2 global Interrupt                                */\n  129    TIM3_IRQn                   = 29,     /*!< TIM3 global Interrupt                                */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f105xc.h:\n  125    TIM1_UP_IRQn                = 25,     /*!< TIM1 Update Interrupt                                */\n  126    TIM1_TRG_COM_IRQn           = 26,     /*!< TIM1 Trigger and Commutation Interrupt               */\n  127:   TIM1_CC_IRQn                = 27,     /*!< TIM1 Capture Compare Interrupt                       */\n  128    TIM2_IRQn                   = 28,     /*!< TIM2 global Interrupt                                */\n  129    TIM3_IRQn                   = 29,     /*!< TIM3 global Interrupt                                */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f107xc.h:\n  125    TIM1_UP_IRQn                = 25,     /*!< TIM1 Update Interrupt                                */\n  126    TIM1_TRG_COM_IRQn           = 26,     /*!< TIM1 Trigger and Commutation Interrupt               */\n  127:   TIM1_CC_IRQn                = 27,     /*!< TIM1 Capture Compare Interrupt                       */\n  128    TIM2_IRQn                   = 28,     /*!< TIM2 global Interrupt                                */\n  129    TIM3_IRQn                   = 29,     /*!< TIM3 global Interrupt                                */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Source\\Templates\\gcc\\startup_stm32f103xb.s:\n  186    .word TIM1_UP_IRQHandler\n  187    .word TIM1_TRG_COM_IRQHandler\n  188:   .word TIM1_CC_IRQHandler\n  189    .word TIM2_IRQHandler\n  190    .word TIM3_IRQHandler\n  ...\n  328    .thumb_set TIM1_TRG_COM_IRQHandler,Default_Handler\n  329  \n  330:   .weak TIM1_CC_IRQHandler\n  331:   .thumb_set TIM1_CC_IRQHandler,Default_Handler\n  332  \n  333    .weak TIM2_IRQHandler\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\Backup\\startup_stm32f10x_md.s.bak:\n  166  	.word	TIM1_UP_IRQHandler\n  167  	.word	TIM1_TRG_COM_IRQHandler\n  168: 	.word	TIM1_CC_IRQHandler\n  169  	.word	TIM2_IRQHandler\n  170  	.word	TIM3_IRQHandler\n  ...\n  308  	.thumb_set TIM1_TRG_COM_IRQHandler,Default_Handler\n  309  \n  310: 	.weak	TIM1_CC_IRQHandler\n  311: 	.thumb_set TIM1_CC_IRQHandler,Default_Handler\n  312  \n  313  	.weak	TIM2_IRQHandler\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\startup_stm32f10x_md.s:\n  166  	.word	TIM1_UP_IRQHandler\n  167  	.word	TIM1_TRG_COM_IRQHandler\n  168: 	.word	TIM1_CC_IRQHandler\n  169  	.word	TIM2_IRQHandler\n  170  	.word	TIM3_IRQHandler\n  ...\n  308  	.thumb_set TIM1_TRG_COM_IRQHandler,Default_Handler\n  309  \n  310: 	.weak	TIM1_CC_IRQHandler\n  311: 	.thumb_set TIM1_CC_IRQHandler,Default_Handler\n  312  \n  313  	.weak	TIM2_IRQHandler\n\nD:\\WorkSTM32\\stm32_PPM_F103\\stm32_PPM_F103\\Debug\\bin\\stm32_PPM_F103.elf:\n    <binary>\n\nD:\\WorkSTM32\\stm32_PPM_F103\\stm32_PPM_F103\\Debug\\bin\\stm32_PPM_F103.map:\n  896                  0x080020e8                EXTI2_IRQHandler\n  897                  0x080020e8                DebugMon_Handler\n  898:                 0x080020e8                TIM1_CC_IRQHandler\n  899                  0x080020e8                HardFault_Handler\n  900                  0x080020e8                PVD_IRQHandler\n\n20 matches across 13 files\n\n\nSearching 130 files for \"IRQn_Type\"\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f100xb.h:\n  139    TIM6_DAC_IRQn               = 54,     /*!< TIM6 and DAC underrun Interrupt                      */\n  140    TIM7_IRQn                   = 55,     /*!< TIM7 global Interrupt                                */\n  141: } IRQn_Type;\n  142  \n  143  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f100xe.h:\n  154                                               mapped at position 60 only if the MISC_REMAP bit in \n  155                                               the AFIO_MAPR2 register is set)                      */\n  156: } IRQn_Type;\n  157  \n  158  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f101x6.h:\n  127    EXTI15_10_IRQn              = 40,     /*!< External Line[15:10] Interrupts                      */\n  128    RTC_Alarm_IRQn              = 41,     /*!< RTC Alarm through EXTI Line Interrupt                */\n  129: } IRQn_Type;\n  130  \n  131  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f101xb.h:\n  132    EXTI15_10_IRQn              = 40,     /*!< External Line[15:10] Interrupts                      */\n  133    RTC_Alarm_IRQn              = 41,     /*!< RTC Alarm through EXTI Line Interrupt                */\n  134: } IRQn_Type;\n  135  \n  136  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f101xe.h:\n  143    DMA2_Channel3_IRQn          = 58,     /*!< DMA2 Channel 3 global Interrupt                      */\n  144    DMA2_Channel4_5_IRQn        = 59,     /*!< DMA2 Channel 4 and Channel 5 global Interrupt        */\n  145: } IRQn_Type;\n  146  \n  147  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f101xg.h:\n  149    DMA2_Channel3_IRQn          = 58,     /*!< DMA2 Channel 3 global Interrupt                      */\n  150    DMA2_Channel4_5_IRQn        = 59,     /*!< DMA2 Channel 4 and Channel 5 global Interrupt        */\n  151: } IRQn_Type;\n  152  \n  153  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f102x6.h:\n  130    RTC_Alarm_IRQn              = 41,     /*!< RTC Alarm through EXTI Line Interrupt                */\n  131    USBWakeUp_IRQn              = 42,     /*!< USB Device WakeUp from suspend through EXTI Line Interrupt */\n  132: } IRQn_Type;\n  133  \n  134  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f102xb.h:\n  135    RTC_Alarm_IRQn              = 41,     /*!< RTC Alarm through EXTI Line Interrupt                */\n  136    USBWakeUp_IRQn              = 42,     /*!< USB Device WakeUp from suspend through EXTI Line Interrupt */\n  137: } IRQn_Type;\n  138  \n  139  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f103x6.h:\n  136    RTC_Alarm_IRQn              = 41,     /*!< RTC Alarm through EXTI Line Interrupt                */\n  137    USBWakeUp_IRQn              = 42,     /*!< USB Device WakeUp from suspend through EXTI Line Interrupt */\n  138: } IRQn_Type;\n  139  \n  140  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f103xb.h:\n  141    RTC_Alarm_IRQn              = 41,     /*!< RTC Alarm through EXTI Line Interrupt                */\n  142    USBWakeUp_IRQn              = 42,     /*!< USB Device WakeUp from suspend through EXTI Line Interrupt */\n  143: } IRQn_Type;\n  144  \n  145  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f103xe.h:\n  158    DMA2_Channel3_IRQn          = 58,     /*!< DMA2 Channel 3 global Interrupt                      */\n  159    DMA2_Channel4_5_IRQn        = 59,     /*!< DMA2 Channel 4 and Channel 5 global Interrupt        */\n  160: } IRQn_Type;\n  161  \n  162  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f103xg.h:\n  158    DMA2_Channel3_IRQn          = 58,     /*!< DMA2 Channel 3 global Interrupt                      */\n  159    DMA2_Channel4_5_IRQn        = 59,     /*!< DMA2 Channel 4 and Channel 5 global Interrupt        */\n  160: } IRQn_Type;\n  161  \n  162  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f105xc.h:\n  157    CAN2_SCE_IRQn               = 66,     /*!< CAN2 SCE Interrupt                                   */\n  158    OTG_FS_IRQn                 = 67      /*!< USB OTG FS global Interrupt                          */\n  159: } IRQn_Type;\n  160  \n  161  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f107xc.h:\n  159    CAN2_SCE_IRQn               = 66,     /*!< CAN2 SCE Interrupt                                   */\n  160    OTG_FS_IRQn                 = 67      /*!< USB OTG FS global Interrupt                          */\n  161: } IRQn_Type;\n  162  \n  163  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Include\\core_cm0.h:\n  567      \\param [in]      IRQn  External interrupt number. Value cannot be negative.\n  568   */\n  569: __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)\n  570  {\n  571    NVIC->ISER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));\n  ...\n  579      \\param [in]      IRQn  External interrupt number. Value cannot be negative.\n  580   */\n  581: __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)\n  582  {\n  583    NVIC->ICER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));\n  ...\n  595      \\return             1  Interrupt status is pending.\n  596   */\n  597: __STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)\n  598  {\n  599    return((uint32_t)(((NVIC->ISPR[0] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));\n  ...\n  607      \\param [in]      IRQn  Interrupt number. Value cannot be negative.\n  608   */\n  609: __STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)\n  610  {\n  611    NVIC->ISPR[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));\n  ...\n  619      \\param [in]      IRQn  External interrupt number. Value cannot be negative.\n  620   */\n  621: __STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)\n  622  {\n  623    NVIC->ICPR[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));\n  ...\n  634      \\param [in]  priority  Priority to set.\n  635   */\n  636: __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)\n  637  {\n  638    if((int32_t)(IRQn) < 0) {\n  ...\n  658                          priority bits of the microcontroller.\n  659   */\n  660: __STATIC_INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)\n  661  {\n  662  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Include\\core_cm0plus.h:\n  681      \\param [in]      IRQn  External interrupt number. Value cannot be negative.\n  682   */\n  683: __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)\n  684  {\n  685    NVIC->ISER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));\n  ...\n  693      \\param [in]      IRQn  External interrupt number. Value cannot be negative.\n  694   */\n  695: __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)\n  696  {\n  697    NVIC->ICER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));\n  ...\n  709      \\return             1  Interrupt status is pending.\n  710   */\n  711: __STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)\n  712  {\n  713    return((uint32_t)(((NVIC->ISPR[0] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));\n  ...\n  721      \\param [in]      IRQn  Interrupt number. Value cannot be negative.\n  722   */\n  723: __STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)\n  724  {\n  725    NVIC->ISPR[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));\n  ...\n  733      \\param [in]      IRQn  External interrupt number. Value cannot be negative.\n  734   */\n  735: __STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)\n  736  {\n  737    NVIC->ICPR[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));\n  ...\n  748      \\param [in]  priority  Priority to set.\n  749   */\n  750: __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)\n  751  {\n  752    if((int32_t)(IRQn) < 0) {\n  ...\n  772                          priority bits of the microcontroller.\n  773   */\n  774: __STATIC_INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)\n  775  {\n  776  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Include\\core_cm3.h:\n 1380      \\param [in]      IRQn  External interrupt number. Value cannot be negative.\n 1381   */\n 1382: __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)\n 1383  {\n 1384    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));\n ....\n 1392      \\param [in]      IRQn  External interrupt number. Value cannot be negative.\n 1393   */\n 1394: __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)\n 1395  {\n 1396    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));\n ....\n 1408      \\return             1  Interrupt status is pending.\n 1409   */\n 1410: __STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)\n 1411  {\n 1412    return((uint32_t)(((NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));\n ....\n 1420      \\param [in]      IRQn  Interrupt number. Value cannot be negative.\n 1421   */\n 1422: __STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)\n 1423  {\n 1424    NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));\n ....\n 1432      \\param [in]      IRQn  External interrupt number. Value cannot be negative.\n 1433   */\n 1434: __STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)\n 1435  {\n 1436    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));\n ....\n 1447      \\return             1  Interrupt status is active.\n 1448   */\n 1449: __STATIC_INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)\n 1450  {\n 1451    return((uint32_t)(((NVIC->IABR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));\n ....\n 1462      \\param [in]  priority  Priority to set.\n 1463   */\n 1464: __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)\n 1465  {\n 1466    if((int32_t)IRQn < 0) {\n ....\n 1484                          priority bits of the microcontroller.\n 1485   */\n 1486: __STATIC_INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)\n 1487  {\n 1488  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Include\\core_cm4.h:\n 1545      \\param [in]      IRQn  External interrupt number. Value cannot be negative.\n 1546   */\n 1547: __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)\n 1548  {\n 1549    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));\n ....\n 1557      \\param [in]      IRQn  External interrupt number. Value cannot be negative.\n 1558   */\n 1559: __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)\n 1560  {\n 1561    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));\n ....\n 1573      \\return             1  Interrupt status is pending.\n 1574   */\n 1575: __STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)\n 1576  {\n 1577    return((uint32_t)(((NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));\n ....\n 1585      \\param [in]      IRQn  Interrupt number. Value cannot be negative.\n 1586   */\n 1587: __STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)\n 1588  {\n 1589    NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));\n ....\n 1597      \\param [in]      IRQn  External interrupt number. Value cannot be negative.\n 1598   */\n 1599: __STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)\n 1600  {\n 1601    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));\n ....\n 1612      \\return             1  Interrupt status is active.\n 1613   */\n 1614: __STATIC_INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)\n 1615  {\n 1616    return((uint32_t)(((NVIC->IABR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));\n ....\n 1627      \\param [in]  priority  Priority to set.\n 1628   */\n 1629: __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)\n 1630  {\n 1631    if((int32_t)IRQn < 0) {\n ....\n 1649                          priority bits of the microcontroller.\n 1650   */\n 1651: __STATIC_INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)\n 1652  {\n 1653  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Include\\core_cm7.h:\n 1732      \\param [in]      IRQn  External interrupt number. Value cannot be negative.\n 1733   */\n 1734: __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)\n 1735  {\n 1736    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));\n ....\n 1744      \\param [in]      IRQn  External interrupt number. Value cannot be negative.\n 1745   */\n 1746: __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)\n 1747  {\n 1748    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));\n ....\n 1760      \\return             1  Interrupt status is pending.\n 1761   */\n 1762: __STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)\n 1763  {\n 1764    return((uint32_t)(((NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));\n ....\n 1772      \\param [in]      IRQn  Interrupt number. Value cannot be negative.\n 1773   */\n 1774: __STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)\n 1775  {\n 1776    NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));\n ....\n 1784      \\param [in]      IRQn  External interrupt number. Value cannot be negative.\n 1785   */\n 1786: __STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)\n 1787  {\n 1788    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));\n ....\n 1799      \\return             1  Interrupt status is active.\n 1800   */\n 1801: __STATIC_INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)\n 1802  {\n 1803    return((uint32_t)(((NVIC->IABR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));\n ....\n 1814      \\param [in]  priority  Priority to set.\n 1815   */\n 1816: __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)\n 1817  {\n 1818    if((int32_t)IRQn < 0) {\n ....\n 1836                          priority bits of the microcontroller.\n 1837   */\n 1838: __STATIC_INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)\n 1839  {\n 1840  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Include\\core_sc000.h:\n  691      \\param [in]      IRQn  External interrupt number. Value cannot be negative.\n  692   */\n  693: __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)\n  694  {\n  695    NVIC->ISER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));\n  ...\n  703      \\param [in]      IRQn  External interrupt number. Value cannot be negative.\n  704   */\n  705: __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)\n  706  {\n  707    NVIC->ICER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));\n  ...\n  719      \\return             1  Interrupt status is pending.\n  720   */\n  721: __STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)\n  722  {\n  723    return((uint32_t)(((NVIC->ISPR[0] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));\n  ...\n  731      \\param [in]      IRQn  Interrupt number. Value cannot be negative.\n  732   */\n  733: __STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)\n  734  {\n  735    NVIC->ISPR[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));\n  ...\n  743      \\param [in]      IRQn  External interrupt number. Value cannot be negative.\n  744   */\n  745: __STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)\n  746  {\n  747    NVIC->ICPR[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));\n  ...\n  758      \\param [in]  priority  Priority to set.\n  759   */\n  760: __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)\n  761  {\n  762    if((int32_t)(IRQn) < 0) {\n  ...\n  782                          priority bits of the microcontroller.\n  783   */\n  784: __STATIC_INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)\n  785  {\n  786  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Include\\core_sc300.h:\n 1362      \\param [in]      IRQn  External interrupt number. Value cannot be negative.\n 1363   */\n 1364: __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)\n 1365  {\n 1366    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));\n ....\n 1374      \\param [in]      IRQn  External interrupt number. Value cannot be negative.\n 1375   */\n 1376: __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)\n 1377  {\n 1378    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));\n ....\n 1390      \\return             1  Interrupt status is pending.\n 1391   */\n 1392: __STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)\n 1393  {\n 1394    return((uint32_t)(((NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));\n ....\n 1402      \\param [in]      IRQn  Interrupt number. Value cannot be negative.\n 1403   */\n 1404: __STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)\n 1405  {\n 1406    NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));\n ....\n 1414      \\param [in]      IRQn  External interrupt number. Value cannot be negative.\n 1415   */\n 1416: __STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)\n 1417  {\n 1418    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));\n ....\n 1429      \\return             1  Interrupt status is active.\n 1430   */\n 1431: __STATIC_INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)\n 1432  {\n 1433    return((uint32_t)(((NVIC->IABR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));\n ....\n 1444      \\param [in]  priority  Priority to set.\n 1445   */\n 1446: __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)\n 1447  {\n 1448    if((int32_t)IRQn < 0) {\n ....\n 1466                          priority bits of the microcontroller.\n 1467   */\n 1468: __STATIC_INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)\n 1469  {\n 1470  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal_cortex.h:\n  413  /* Initialization and de-initialization functions *****************************/\n  414  void     HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup);\n  415: void     HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority);\n  416: void     HAL_NVIC_EnableIRQ(IRQn_Type IRQn);\n  417: void     HAL_NVIC_DisableIRQ(IRQn_Type IRQn);\n  418  void     HAL_NVIC_SystemReset(void);\n  419  uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb);\n  ...\n  430  #endif /* __MPU_PRESENT */\n  431  uint32_t HAL_NVIC_GetPriorityGrouping(void);\n  432: void     HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t* pPreemptPriority, uint32_t* pSubPriority);\n  433: uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn);\n  434: void     HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn);\n  435: void     HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn);\n  436: uint32_t HAL_NVIC_GetActive(IRQn_Type IRQn);\n  437  void     HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource);\n  438  void     HAL_SYSTICK_IRQHandler(void);\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_cortex.c:\n  194    * @brief  Sets the priority of an interrupt.\n  195    * @param  IRQn: External interrupt number\n  196:   *         This parameter can be an enumerator of IRQn_Type enumeration\n  197    *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))\n  198    * @param  PreemptPriority: The pre-emption priority for the IRQn channel.\n  ...\n  204    * @retval None\n  205    */\n  206: void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)\n  207  {\n  208    uint32_t prioritygroup = 0x00;\n  ...\n  222    *         function should be called before. \n  223    * @param  IRQn External interrupt number\n  224:   *         This parameter can be an enumerator of IRQn_Type enumeration\n  225    *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))\n  226    * @retval None\n  227    */\n  228: void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)\n  229  {\n  230    /* Check the parameters */\n  ...\n  238    * @brief  Disables a device specific interrupt in the NVIC interrupt controller.\n  239    * @param  IRQn External interrupt number\n  240:   *         This parameter can be an enumerator of IRQn_Type enumeration\n  241    *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  \n  242    * @retval None\n  243    */\n  244: void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)\n  245  {\n  246    /* Check the parameters */\n  ...\n  353    * @brief  Gets the priority of an interrupt.\n  354    * @param  IRQn: External interrupt number\n  355:   *         This parameter can be an enumerator of IRQn_Type enumeration\n  356    *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))\n  357    * @param   PriorityGroup: the priority grouping bits length.\n  ...\n  371    * @retval None\n  372    */\n  373: void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t* pPreemptPriority, uint32_t* pSubPriority)\n  374  {\n  375    /* Check the parameters */\n  ...\n  382    * @brief  Sets Pending bit of an external interrupt.\n  383    * @param  IRQn External interrupt number\n  384:   *         This parameter can be an enumerator of IRQn_Type enumeration\n  385    *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  \n  386    * @retval None\n  387    */\n  388: void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)\n  389  { \n  390    /* Set interrupt pending */\n  ...\n  396    *         and returns the pending bit for the specified interrupt).\n  397    * @param IRQn External interrupt number\n  398:   *         This parameter can be an enumerator of IRQn_Type enumeration\n  399    *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  \n  400    * @retval status: - 0  Interrupt status is not pending.\n  401    *                 - 1  Interrupt status is pending.\n  402    */\n  403: uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)\n  404  { \n  405    /* Return 1 if pending else 0 */\n  ...\n  410    * @brief Clears the pending bit of an external interrupt.\n  411    * @param IRQn External interrupt number\n  412:   *         This parameter can be an enumerator of IRQn_Type enumeration\n  413    *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  \n  414    * @retval None\n  415    */\n  416: void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)\n  417  { \n  418    /* Clear pending interrupt */\n  ...\n  423    * @brief Gets active interrupt ( reads the active register in NVIC and returns the active bit).\n  424    * @param IRQn External interrupt number\n  425:   *         This parameter can be an enumerator of IRQn_Type enumeration\n  426    *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  \n  427    * @retval status: - 0  Interrupt status is not pending.\n  428    *                 - 1  Interrupt status is pending.\n  429    */\n  430: uint32_t HAL_NVIC_GetActive(IRQn_Type IRQn)\n  431  { \n  432    /* Return 1 if active else 0 */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\stm32_PPM_F103\\Debug\\bin\\stm32_PPM_F103.elf:\n    <binary>\n\n92 matches across 24 files\n\n\nSearching 126 files for \"hal_tim_enable_it\"\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal_tim.h:\n 1239    * @retval None\n 1240    */\n 1241: #define __HAL_TIM_ENABLE_IT(__HANDLE__, __INTERRUPT__)    ((__HANDLE__)->Instance->DIER |= (__INTERRUPT__))\n 1242  \n 1243  /**\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_tim.c:\n  347  \n  348     /* Enable the TIM Update interrupt */\n  349:    __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);\n  350  \n  351     /* Enable the Peripheral */\n  ...\n  645      {\n  646        /* Enable the TIM Capture/Compare 1 interrupt */\n  647:       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);\n  648      }\n  649      break;\n  ...\n  652      {\n  653        /* Enable the TIM Capture/Compare 2 interrupt */\n  654:       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);\n  655      }\n  656      break;\n  ...\n  659      {\n  660        /* Enable the TIM Capture/Compare 3 interrupt */\n  661:       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);\n  662      }\n  663      break;\n  ...\n  666      {\n  667        /* Enable the TIM Capture/Compare 4 interrupt */\n  668:       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);\n  669      }\n  670      break;\n  ...\n 1148      {\n 1149        /* Enable the TIM Capture/Compare 1 interrupt */\n 1150:       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);\n 1151      }\n 1152      break;\n ....\n 1155      {\n 1156        /* Enable the TIM Capture/Compare 2 interrupt */\n 1157:       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);\n 1158      }\n 1159      break;\n ....\n 1162      {\n 1163        /* Enable the TIM Capture/Compare 3 interrupt */\n 1164:       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);\n 1165      }\n 1166      break;\n ....\n 1169      {\n 1170        /* Enable the TIM Capture/Compare 4 interrupt */\n 1171:       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);\n 1172      }\n 1173      break;\n ....\n 1636      {\n 1637        /* Enable the TIM Capture/Compare 1 interrupt */\n 1638:       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);\n 1639      }\n 1640      break;\n ....\n 1643      {\n 1644        /* Enable the TIM Capture/Compare 2 interrupt */\n 1645:       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);\n 1646      }\n 1647      break;\n ....\n 1650      {\n 1651        /* Enable the TIM Capture/Compare 3 interrupt */\n 1652:       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);\n 1653      }\n 1654      break;\n ....\n 1657      {\n 1658        /* Enable the TIM Capture/Compare 4 interrupt */\n 1659:       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);\n 1660      }\n 1661      break;\n ....\n 2126  \n 2127    /* Enable the TIM Capture/Compare 1 interrupt */\n 2128:   __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);\n 2129  \n 2130    /* Enable the TIM Capture/Compare 2 interrupt */\n 2131:   __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);\n 2132  \n 2133    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);\n ....\n 2457    {\n 2458      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);\n 2459:     __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);\n 2460        break;\n 2461    }\n ....\n 2463    {\n 2464      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);\n 2465:     __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);\n 2466        break;\n 2467    }\n ....\n 2470       TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);\n 2471       TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);\n 2472:      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);\n 2473:      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);\n 2474       break;\n 2475      }\n ....\n 4122  \n 4123    /* Enable Trigger Interrupt */\n 4124:   __HAL_TIM_ENABLE_IT(htim, TIM_IT_TRIGGER);\n 4125  \n 4126    /* Disable Trigger DMA request */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_tim_ex.c:\n  342  \n  343    /* Enable the capture compare Interrupts 1 event */\n  344:   __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);\n  345  \n  346    /* Enable the Input Capture channel 1\n  ...\n  563      {\n  564        /* Enable the TIM Output Compare interrupt */\n  565:       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);\n  566      }\n  567      break;\n  ...\n  570      {\n  571        /* Enable the TIM Output Compare interrupt */\n  572:       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);\n  573      }\n  574      break;\n  ...\n  577      {\n  578        /* Enable the TIM Output Compare interrupt */\n  579:       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);\n  580      }\n  581      break;\n  ...\n  584      {\n  585        /* Enable the TIM Output Compare interrupt */\n  586:       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);\n  587      }\n  588      break;\n  ...\n  593  \n  594    /* Enable the TIM Break interrupt */\n  595:   __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);\n  596  \n  597    /* Enable the Capture compare channel N */\n  ...\n  979      {\n  980        /* Enable the TIM Capture/Compare 1 interrupt */\n  981:       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);\n  982      }\n  983      break;\n  ...\n  986      {\n  987        /* Enable the TIM Capture/Compare 2 interrupt */\n  988:       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);\n  989      }\n  990      break;\n  ...\n  993      {\n  994        /* Enable the TIM Capture/Compare 3 interrupt */\n  995:       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);\n  996      }\n  997      break;\n  ...\n 1000      {\n 1001        /* Enable the TIM Capture/Compare 4 interrupt */\n 1002:       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);\n 1003      }\n 1004      break;\n ....\n 1009  \n 1010    /* Enable the TIM Break interrupt */\n 1011:   __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);\n 1012  \n 1013    /* Enable the complementary PWM output  */\n ....\n 1373  \n 1374    /* Enable the TIM Capture/Compare 1 interrupt */\n 1375:   __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);\n 1376  \n 1377    /* Enable the TIM Capture/Compare 2 interrupt */\n 1378:   __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);\n 1379  \n 1380    /* Enable the complementary One Pulse output */\n ....\n 1545  \n 1546    /* Enable the Commutation Interrupt Request */\n 1547:   __HAL_TIM_ENABLE_IT(htim, TIM_IT_COM);\n 1548  \n 1549    __HAL_UNLOCK(htim);\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\main.c:\n  228  \n  229  //	HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);\n  230: 	_HAL_TIM_ENABLE_IT(&htim1, TIM_IT_TRIGGER);\n  231  \n  232  }\n\n36 matches across 4 files\n\n\nSearching 130 files for \"dbgmcu\"\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f100xb.h:\n  262    __IO uint32_t IDCODE;\n  263    __IO uint32_t CR;\n  264: }DBGMCU_TypeDef;\n  265  \n  266  /** \n  ...\n  610  \n  611  \n  612: #define DBGMCU_BASE          ((uint32_t)0xE0042000) /*!< Debug MCU registers base address */\n  613  \n  614  \n  ...\n  666  #define FLASH               ((FLASH_TypeDef *) FLASH_R_BASE)\n  667  #define OB                  ((OB_TypeDef *) OB_BASE)\n  668: #define DBGMCU              ((DBGMCU_TypeDef *) DBGMCU_BASE)\n  669  \n  670  \n  ...\n 3528  /******************************************************************************/\n 3529  \n 3530: /****************  Bit definition for DBGMCU_IDCODE register  *****************/\n 3531: #define  DBGMCU_IDCODE_DEV_ID                ((uint32_t)0x00000FFF)        /*!< Device Identifier */\n 3532  \n 3533: #define  DBGMCU_IDCODE_REV_ID                ((uint32_t)0xFFFF0000)        /*!< REV_ID[15:0] bits (Revision Identifier) */\n 3534: #define  DBGMCU_IDCODE_REV_ID_0              ((uint32_t)0x00010000)        /*!< Bit 0 */\n 3535: #define  DBGMCU_IDCODE_REV_ID_1              ((uint32_t)0x00020000)        /*!< Bit 1 */\n 3536: #define  DBGMCU_IDCODE_REV_ID_2              ((uint32_t)0x00040000)        /*!< Bit 2 */\n 3537: #define  DBGMCU_IDCODE_REV_ID_3              ((uint32_t)0x00080000)        /*!< Bit 3 */\n 3538: #define  DBGMCU_IDCODE_REV_ID_4              ((uint32_t)0x00100000)        /*!< Bit 4 */\n 3539: #define  DBGMCU_IDCODE_REV_ID_5              ((uint32_t)0x00200000)        /*!< Bit 5 */\n 3540: #define  DBGMCU_IDCODE_REV_ID_6              ((uint32_t)0x00400000)        /*!< Bit 6 */\n 3541: #define  DBGMCU_IDCODE_REV_ID_7              ((uint32_t)0x00800000)        /*!< Bit 7 */\n 3542: #define  DBGMCU_IDCODE_REV_ID_8              ((uint32_t)0x01000000)        /*!< Bit 8 */\n 3543: #define  DBGMCU_IDCODE_REV_ID_9              ((uint32_t)0x02000000)        /*!< Bit 9 */\n 3544: #define  DBGMCU_IDCODE_REV_ID_10             ((uint32_t)0x04000000)        /*!< Bit 10 */\n 3545: #define  DBGMCU_IDCODE_REV_ID_11             ((uint32_t)0x08000000)        /*!< Bit 11 */\n 3546: #define  DBGMCU_IDCODE_REV_ID_12             ((uint32_t)0x10000000)        /*!< Bit 12 */\n 3547: #define  DBGMCU_IDCODE_REV_ID_13             ((uint32_t)0x20000000)        /*!< Bit 13 */\n 3548: #define  DBGMCU_IDCODE_REV_ID_14             ((uint32_t)0x40000000)        /*!< Bit 14 */\n 3549: #define  DBGMCU_IDCODE_REV_ID_15             ((uint32_t)0x80000000)        /*!< Bit 15 */\n 3550  \n 3551: /******************  Bit definition for DBGMCU_CR register  *******************/\n 3552: #define  DBGMCU_CR_DBG_SLEEP                 ((uint32_t)0x00000001)        /*!< Debug Sleep Mode */\n 3553: #define  DBGMCU_CR_DBG_STOP                  ((uint32_t)0x00000002)        /*!< Debug Stop Mode */\n 3554: #define  DBGMCU_CR_DBG_STANDBY               ((uint32_t)0x00000004)        /*!< Debug Standby mode */\n 3555: #define  DBGMCU_CR_TRACE_IOEN                ((uint32_t)0x00000020)        /*!< Trace Pin Assignment Control */\n 3556  \n 3557: #define  DBGMCU_CR_TRACE_MODE                ((uint32_t)0x000000C0)        /*!< TRACE_MODE[1:0] bits (Trace Pin Assignment Control) */\n 3558: #define  DBGMCU_CR_TRACE_MODE_0              ((uint32_t)0x00000040)        /*!< Bit 0 */\n 3559: #define  DBGMCU_CR_TRACE_MODE_1              ((uint32_t)0x00000080)        /*!< Bit 1 */\n 3560  \n 3561: #define  DBGMCU_CR_DBG_IWDG_STOP             ((uint32_t)0x00000100)        /*!< Debug Independent Watchdog stopped when Core is halted */\n 3562: #define  DBGMCU_CR_DBG_WWDG_STOP             ((uint32_t)0x00000200)        /*!< Debug Window Watchdog stopped when Core is halted */\n 3563: #define  DBGMCU_CR_DBG_TIM1_STOP             ((uint32_t)0x00000400)        /*!< TIM1 counter stopped when core is halted */\n 3564: #define  DBGMCU_CR_DBG_TIM2_STOP             ((uint32_t)0x00000800)        /*!< TIM2 counter stopped when core is halted */\n 3565: #define  DBGMCU_CR_DBG_TIM3_STOP             ((uint32_t)0x00001000)        /*!< TIM3 counter stopped when core is halted */\n 3566: #define  DBGMCU_CR_DBG_TIM4_STOP             ((uint32_t)0x00002000)        /*!< TIM4 counter stopped when core is halted */\n 3567: #define  DBGMCU_CR_DBG_I2C1_SMBUS_TIMEOUT    ((uint32_t)0x00008000)        /*!< SMBUS timeout mode stopped when Core is halted */\n 3568: #define  DBGMCU_CR_DBG_I2C2_SMBUS_TIMEOUT    ((uint32_t)0x00010000)        /*!< SMBUS timeout mode stopped when Core is halted */\n 3569: #define  DBGMCU_CR_DBG_TIM15_STOP            ((uint32_t)0x00400000)        /*!< Debug TIM15 stopped when Core is halted */\n 3570: #define  DBGMCU_CR_DBG_TIM16_STOP            ((uint32_t)0x00800000)        /*!< Debug TIM16 stopped when Core is halted */\n 3571: #define  DBGMCU_CR_DBG_TIM17_STOP            ((uint32_t)0x01000000)        /*!< Debug TIM17 stopped when Core is halted */\n 3572  \n 3573  /******************************************************************************/\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f100xe.h:\n  310    __IO uint32_t IDCODE;\n  311    __IO uint32_t CR;\n  312: }DBGMCU_TypeDef;\n  313  \n  314  /** \n  ...\n  702  #define FSMC_BANK1E_R_BASE    (FSMC_R_BASE + 0x0104)    /*!< FSMC Bank1E registers base address */\n  703  \n  704: #define DBGMCU_BASE          ((uint32_t)0xE0042000) /*!< Debug MCU registers base address */\n  705  \n  706  \n  ...\n  775  #define FSMC_Bank1          ((FSMC_Bank1_TypeDef *) FSMC_BANK1_R_BASE)\n  776  #define FSMC_Bank1E         ((FSMC_Bank1E_TypeDef *) FSMC_BANK1E_R_BASE)\n  777: #define DBGMCU              ((DBGMCU_TypeDef *) DBGMCU_BASE)\n  778  \n  779  \n  ...\n 3872  /******************************************************************************/\n 3873  \n 3874: /****************  Bit definition for DBGMCU_IDCODE register  *****************/\n 3875: #define  DBGMCU_IDCODE_DEV_ID                ((uint32_t)0x00000FFF)        /*!< Device Identifier */\n 3876  \n 3877: #define  DBGMCU_IDCODE_REV_ID                ((uint32_t)0xFFFF0000)        /*!< REV_ID[15:0] bits (Revision Identifier) */\n 3878: #define  DBGMCU_IDCODE_REV_ID_0              ((uint32_t)0x00010000)        /*!< Bit 0 */\n 3879: #define  DBGMCU_IDCODE_REV_ID_1              ((uint32_t)0x00020000)        /*!< Bit 1 */\n 3880: #define  DBGMCU_IDCODE_REV_ID_2              ((uint32_t)0x00040000)        /*!< Bit 2 */\n 3881: #define  DBGMCU_IDCODE_REV_ID_3              ((uint32_t)0x00080000)        /*!< Bit 3 */\n 3882: #define  DBGMCU_IDCODE_REV_ID_4              ((uint32_t)0x00100000)        /*!< Bit 4 */\n 3883: #define  DBGMCU_IDCODE_REV_ID_5              ((uint32_t)0x00200000)        /*!< Bit 5 */\n 3884: #define  DBGMCU_IDCODE_REV_ID_6              ((uint32_t)0x00400000)        /*!< Bit 6 */\n 3885: #define  DBGMCU_IDCODE_REV_ID_7              ((uint32_t)0x00800000)        /*!< Bit 7 */\n 3886: #define  DBGMCU_IDCODE_REV_ID_8              ((uint32_t)0x01000000)        /*!< Bit 8 */\n 3887: #define  DBGMCU_IDCODE_REV_ID_9              ((uint32_t)0x02000000)        /*!< Bit 9 */\n 3888: #define  DBGMCU_IDCODE_REV_ID_10             ((uint32_t)0x04000000)        /*!< Bit 10 */\n 3889: #define  DBGMCU_IDCODE_REV_ID_11             ((uint32_t)0x08000000)        /*!< Bit 11 */\n 3890: #define  DBGMCU_IDCODE_REV_ID_12             ((uint32_t)0x10000000)        /*!< Bit 12 */\n 3891: #define  DBGMCU_IDCODE_REV_ID_13             ((uint32_t)0x20000000)        /*!< Bit 13 */\n 3892: #define  DBGMCU_IDCODE_REV_ID_14             ((uint32_t)0x40000000)        /*!< Bit 14 */\n 3893: #define  DBGMCU_IDCODE_REV_ID_15             ((uint32_t)0x80000000)        /*!< Bit 15 */\n 3894  \n 3895: /******************  Bit definition for DBGMCU_CR register  *******************/\n 3896: #define  DBGMCU_CR_DBG_SLEEP                 ((uint32_t)0x00000001)        /*!< Debug Sleep Mode */\n 3897: #define  DBGMCU_CR_DBG_STOP                  ((uint32_t)0x00000002)        /*!< Debug Stop Mode */\n 3898: #define  DBGMCU_CR_DBG_STANDBY               ((uint32_t)0x00000004)        /*!< Debug Standby mode */\n 3899: #define  DBGMCU_CR_TRACE_IOEN                ((uint32_t)0x00000020)        /*!< Trace Pin Assignment Control */\n 3900  \n 3901: #define  DBGMCU_CR_TRACE_MODE                ((uint32_t)0x000000C0)        /*!< TRACE_MODE[1:0] bits (Trace Pin Assignment Control) */\n 3902: #define  DBGMCU_CR_TRACE_MODE_0              ((uint32_t)0x00000040)        /*!< Bit 0 */\n 3903: #define  DBGMCU_CR_TRACE_MODE_1              ((uint32_t)0x00000080)        /*!< Bit 1 */\n 3904  \n 3905: #define  DBGMCU_CR_DBG_IWDG_STOP             ((uint32_t)0x00000100)        /*!< Debug Independent Watchdog stopped when Core is halted */\n 3906: #define  DBGMCU_CR_DBG_WWDG_STOP             ((uint32_t)0x00000200)        /*!< Debug Window Watchdog stopped when Core is halted */\n 3907: #define  DBGMCU_CR_DBG_TIM1_STOP             ((uint32_t)0x00000400)        /*!< TIM1 counter stopped when core is halted */\n 3908: #define  DBGMCU_CR_DBG_TIM2_STOP             ((uint32_t)0x00000800)        /*!< TIM2 counter stopped when core is halted */\n 3909: #define  DBGMCU_CR_DBG_TIM3_STOP             ((uint32_t)0x00001000)        /*!< TIM3 counter stopped when core is halted */\n 3910: #define  DBGMCU_CR_DBG_TIM4_STOP             ((uint32_t)0x00002000)        /*!< TIM4 counter stopped when core is halted */\n 3911: #define  DBGMCU_CR_DBG_I2C1_SMBUS_TIMEOUT    ((uint32_t)0x00008000)        /*!< SMBUS timeout mode stopped when Core is halted */\n 3912: #define  DBGMCU_CR_DBG_I2C2_SMBUS_TIMEOUT    ((uint32_t)0x00010000)        /*!< SMBUS timeout mode stopped when Core is halted */\n 3913: #define  DBGMCU_CR_DBG_TIM5_STOP             ((uint32_t)0x00040000)        /*!< TIM5 counter stopped when core is halted */\n 3914: #define  DBGMCU_CR_DBG_TIM6_STOP             ((uint32_t)0x00080000)        /*!< TIM6 counter stopped when core is halted */\n 3915: #define  DBGMCU_CR_DBG_TIM7_STOP             ((uint32_t)0x00100000)        /*!< TIM7 counter stopped when core is halted */\n 3916: #define  DBGMCU_CR_DBG_TIM15_STOP            ((uint32_t)0x00400000)        /*!< Debug TIM15 stopped when Core is halted */\n 3917: #define  DBGMCU_CR_DBG_TIM16_STOP            ((uint32_t)0x00800000)        /*!< Debug TIM16 stopped when Core is halted */\n 3918: #define  DBGMCU_CR_DBG_TIM17_STOP            ((uint32_t)0x01000000)        /*!< Debug TIM17 stopped when Core is halted */\n 3919: #define  DBGMCU_CR_DBG_TIM12_STOP            ((uint32_t)0x02000000)        /*!< Debug TIM12 stopped when Core is halted */\n 3920: #define  DBGMCU_CR_DBG_TIM13_STOP            ((uint32_t)0x04000000)        /*!< Debug TIM13 stopped when Core is halted */\n 3921: #define  DBGMCU_CR_DBG_TIM14_STOP            ((uint32_t)0x08000000)        /*!< Debug TIM14 stopped when Core is halted */\n 3922  \n 3923  /******************************************************************************/\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f101x6.h:\n  215    __IO uint32_t IDCODE;\n  216    __IO uint32_t CR;\n  217: }DBGMCU_TypeDef;\n  218  \n  219  /** \n  ...\n  549  \n  550  \n  551: #define DBGMCU_BASE          ((uint32_t)0xE0042000) /*!< Debug MCU registers base address */\n  552  \n  553  \n  ...\n  592  #define FLASH               ((FLASH_TypeDef *) FLASH_R_BASE)\n  593  #define OB                  ((OB_TypeDef *) OB_BASE)\n  594: #define DBGMCU              ((DBGMCU_TypeDef *) DBGMCU_BASE)\n  595  \n  596  \n  ...\n 3254  /******************************************************************************/\n 3255  \n 3256: /****************  Bit definition for DBGMCU_IDCODE register  *****************/\n 3257: #define  DBGMCU_IDCODE_DEV_ID                ((uint32_t)0x00000FFF)        /*!< Device Identifier */\n 3258  \n 3259: #define  DBGMCU_IDCODE_REV_ID                ((uint32_t)0xFFFF0000)        /*!< REV_ID[15:0] bits (Revision Identifier) */\n 3260: #define  DBGMCU_IDCODE_REV_ID_0              ((uint32_t)0x00010000)        /*!< Bit 0 */\n 3261: #define  DBGMCU_IDCODE_REV_ID_1              ((uint32_t)0x00020000)        /*!< Bit 1 */\n 3262: #define  DBGMCU_IDCODE_REV_ID_2              ((uint32_t)0x00040000)        /*!< Bit 2 */\n 3263: #define  DBGMCU_IDCODE_REV_ID_3              ((uint32_t)0x00080000)        /*!< Bit 3 */\n 3264: #define  DBGMCU_IDCODE_REV_ID_4              ((uint32_t)0x00100000)        /*!< Bit 4 */\n 3265: #define  DBGMCU_IDCODE_REV_ID_5              ((uint32_t)0x00200000)        /*!< Bit 5 */\n 3266: #define  DBGMCU_IDCODE_REV_ID_6              ((uint32_t)0x00400000)        /*!< Bit 6 */\n 3267: #define  DBGMCU_IDCODE_REV_ID_7              ((uint32_t)0x00800000)        /*!< Bit 7 */\n 3268: #define  DBGMCU_IDCODE_REV_ID_8              ((uint32_t)0x01000000)        /*!< Bit 8 */\n 3269: #define  DBGMCU_IDCODE_REV_ID_9              ((uint32_t)0x02000000)        /*!< Bit 9 */\n 3270: #define  DBGMCU_IDCODE_REV_ID_10             ((uint32_t)0x04000000)        /*!< Bit 10 */\n 3271: #define  DBGMCU_IDCODE_REV_ID_11             ((uint32_t)0x08000000)        /*!< Bit 11 */\n 3272: #define  DBGMCU_IDCODE_REV_ID_12             ((uint32_t)0x10000000)        /*!< Bit 12 */\n 3273: #define  DBGMCU_IDCODE_REV_ID_13             ((uint32_t)0x20000000)        /*!< Bit 13 */\n 3274: #define  DBGMCU_IDCODE_REV_ID_14             ((uint32_t)0x40000000)        /*!< Bit 14 */\n 3275: #define  DBGMCU_IDCODE_REV_ID_15             ((uint32_t)0x80000000)        /*!< Bit 15 */\n 3276  \n 3277: /******************  Bit definition for DBGMCU_CR register  *******************/\n 3278: #define  DBGMCU_CR_DBG_SLEEP                 ((uint32_t)0x00000001)        /*!< Debug Sleep Mode */\n 3279: #define  DBGMCU_CR_DBG_STOP                  ((uint32_t)0x00000002)        /*!< Debug Stop Mode */\n 3280: #define  DBGMCU_CR_DBG_STANDBY               ((uint32_t)0x00000004)        /*!< Debug Standby mode */\n 3281: #define  DBGMCU_CR_TRACE_IOEN                ((uint32_t)0x00000020)        /*!< Trace Pin Assignment Control */\n 3282  \n 3283: #define  DBGMCU_CR_TRACE_MODE                ((uint32_t)0x000000C0)        /*!< TRACE_MODE[1:0] bits (Trace Pin Assignment Control) */\n 3284: #define  DBGMCU_CR_TRACE_MODE_0              ((uint32_t)0x00000040)        /*!< Bit 0 */\n 3285: #define  DBGMCU_CR_TRACE_MODE_1              ((uint32_t)0x00000080)        /*!< Bit 1 */\n 3286  \n 3287: #define  DBGMCU_CR_DBG_IWDG_STOP             ((uint32_t)0x00000100)        /*!< Debug Independent Watchdog stopped when Core is halted */\n 3288: #define  DBGMCU_CR_DBG_WWDG_STOP             ((uint32_t)0x00000200)        /*!< Debug Window Watchdog stopped when Core is halted */\n 3289: #define  DBGMCU_CR_DBG_TIM2_STOP             ((uint32_t)0x00000800)        /*!< TIM2 counter stopped when core is halted */\n 3290: #define  DBGMCU_CR_DBG_TIM3_STOP             ((uint32_t)0x00001000)        /*!< TIM3 counter stopped when core is halted */\n 3291: #define  DBGMCU_CR_DBG_I2C1_SMBUS_TIMEOUT    ((uint32_t)0x00008000)        /*!< SMBUS timeout mode stopped when Core is halted */\n 3292  \n 3293  /******************************************************************************/\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f101xb.h:\n  220    __IO uint32_t IDCODE;\n  221    __IO uint32_t CR;\n  222: }DBGMCU_TypeDef;\n  223  \n  224  /** \n  ...\n  559  \n  560  \n  561: #define DBGMCU_BASE          ((uint32_t)0xE0042000) /*!< Debug MCU registers base address */\n  562  \n  563  \n  ...\n  607  #define FLASH               ((FLASH_TypeDef *) FLASH_R_BASE)\n  608  #define OB                  ((OB_TypeDef *) OB_BASE)\n  609: #define DBGMCU              ((DBGMCU_TypeDef *) DBGMCU_BASE)\n  610  \n  611  \n  ...\n 3288  /******************************************************************************/\n 3289  \n 3290: /****************  Bit definition for DBGMCU_IDCODE register  *****************/\n 3291: #define  DBGMCU_IDCODE_DEV_ID                ((uint32_t)0x00000FFF)        /*!< Device Identifier */\n 3292  \n 3293: #define  DBGMCU_IDCODE_REV_ID                ((uint32_t)0xFFFF0000)        /*!< REV_ID[15:0] bits (Revision Identifier) */\n 3294: #define  DBGMCU_IDCODE_REV_ID_0              ((uint32_t)0x00010000)        /*!< Bit 0 */\n 3295: #define  DBGMCU_IDCODE_REV_ID_1              ((uint32_t)0x00020000)        /*!< Bit 1 */\n 3296: #define  DBGMCU_IDCODE_REV_ID_2              ((uint32_t)0x00040000)        /*!< Bit 2 */\n 3297: #define  DBGMCU_IDCODE_REV_ID_3              ((uint32_t)0x00080000)        /*!< Bit 3 */\n 3298: #define  DBGMCU_IDCODE_REV_ID_4              ((uint32_t)0x00100000)        /*!< Bit 4 */\n 3299: #define  DBGMCU_IDCODE_REV_ID_5              ((uint32_t)0x00200000)        /*!< Bit 5 */\n 3300: #define  DBGMCU_IDCODE_REV_ID_6              ((uint32_t)0x00400000)        /*!< Bit 6 */\n 3301: #define  DBGMCU_IDCODE_REV_ID_7              ((uint32_t)0x00800000)        /*!< Bit 7 */\n 3302: #define  DBGMCU_IDCODE_REV_ID_8              ((uint32_t)0x01000000)        /*!< Bit 8 */\n 3303: #define  DBGMCU_IDCODE_REV_ID_9              ((uint32_t)0x02000000)        /*!< Bit 9 */\n 3304: #define  DBGMCU_IDCODE_REV_ID_10             ((uint32_t)0x04000000)        /*!< Bit 10 */\n 3305: #define  DBGMCU_IDCODE_REV_ID_11             ((uint32_t)0x08000000)        /*!< Bit 11 */\n 3306: #define  DBGMCU_IDCODE_REV_ID_12             ((uint32_t)0x10000000)        /*!< Bit 12 */\n 3307: #define  DBGMCU_IDCODE_REV_ID_13             ((uint32_t)0x20000000)        /*!< Bit 13 */\n 3308: #define  DBGMCU_IDCODE_REV_ID_14             ((uint32_t)0x40000000)        /*!< Bit 14 */\n 3309: #define  DBGMCU_IDCODE_REV_ID_15             ((uint32_t)0x80000000)        /*!< Bit 15 */\n 3310  \n 3311: /******************  Bit definition for DBGMCU_CR register  *******************/\n 3312: #define  DBGMCU_CR_DBG_SLEEP                 ((uint32_t)0x00000001)        /*!< Debug Sleep Mode */\n 3313: #define  DBGMCU_CR_DBG_STOP                  ((uint32_t)0x00000002)        /*!< Debug Stop Mode */\n 3314: #define  DBGMCU_CR_DBG_STANDBY               ((uint32_t)0x00000004)        /*!< Debug Standby mode */\n 3315: #define  DBGMCU_CR_TRACE_IOEN                ((uint32_t)0x00000020)        /*!< Trace Pin Assignment Control */\n 3316  \n 3317: #define  DBGMCU_CR_TRACE_MODE                ((uint32_t)0x000000C0)        /*!< TRACE_MODE[1:0] bits (Trace Pin Assignment Control) */\n 3318: #define  DBGMCU_CR_TRACE_MODE_0              ((uint32_t)0x00000040)        /*!< Bit 0 */\n 3319: #define  DBGMCU_CR_TRACE_MODE_1              ((uint32_t)0x00000080)        /*!< Bit 1 */\n 3320  \n 3321: #define  DBGMCU_CR_DBG_IWDG_STOP             ((uint32_t)0x00000100)        /*!< Debug Independent Watchdog stopped when Core is halted */\n 3322: #define  DBGMCU_CR_DBG_WWDG_STOP             ((uint32_t)0x00000200)        /*!< Debug Window Watchdog stopped when Core is halted */\n 3323: #define  DBGMCU_CR_DBG_TIM2_STOP             ((uint32_t)0x00000800)        /*!< TIM2 counter stopped when core is halted */\n 3324: #define  DBGMCU_CR_DBG_TIM3_STOP             ((uint32_t)0x00001000)        /*!< TIM3 counter stopped when core is halted */\n 3325: #define  DBGMCU_CR_DBG_TIM4_STOP             ((uint32_t)0x00002000)        /*!< TIM4 counter stopped when core is halted */\n 3326: #define  DBGMCU_CR_DBG_I2C1_SMBUS_TIMEOUT    ((uint32_t)0x00008000)        /*!< SMBUS timeout mode stopped when Core is halted */\n 3327: #define  DBGMCU_CR_DBG_I2C2_SMBUS_TIMEOUT    ((uint32_t)0x00010000)        /*!< SMBUS timeout mode stopped when Core is halted */\n 3328  \n 3329  /******************************************************************************/\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f101xe.h:\n  284    __IO uint32_t IDCODE;\n  285    __IO uint32_t CR;\n  286: }DBGMCU_TypeDef;\n  287  \n  288  /** \n  ...\n  707  #define FSMC_BANK4_R_BASE     (FSMC_R_BASE + 0x00A0)    /*!< FSMC Bank4 registers base address */\n  708  \n  709: #define DBGMCU_BASE          ((uint32_t)0xE0042000) /*!< Debug MCU registers base address */\n  710  \n  711  \n  ...\n  774  #define FSMC_Bank2_3        ((FSMC_Bank2_3_TypeDef *) FSMC_BANK2_3_R_BASE)\n  775  #define FSMC_Bank4          ((FSMC_Bank4_TypeDef *) FSMC_BANK4_R_BASE)\n  776: #define DBGMCU              ((DBGMCU_TypeDef *) DBGMCU_BASE)\n  777  \n  778  \n  ...\n 3934  /******************************************************************************/\n 3935  \n 3936: /****************  Bit definition for DBGMCU_IDCODE register  *****************/\n 3937: #define  DBGMCU_IDCODE_DEV_ID                ((uint32_t)0x00000FFF)        /*!< Device Identifier */\n 3938  \n 3939: #define  DBGMCU_IDCODE_REV_ID                ((uint32_t)0xFFFF0000)        /*!< REV_ID[15:0] bits (Revision Identifier) */\n 3940: #define  DBGMCU_IDCODE_REV_ID_0              ((uint32_t)0x00010000)        /*!< Bit 0 */\n 3941: #define  DBGMCU_IDCODE_REV_ID_1              ((uint32_t)0x00020000)        /*!< Bit 1 */\n 3942: #define  DBGMCU_IDCODE_REV_ID_2              ((uint32_t)0x00040000)        /*!< Bit 2 */\n 3943: #define  DBGMCU_IDCODE_REV_ID_3              ((uint32_t)0x00080000)        /*!< Bit 3 */\n 3944: #define  DBGMCU_IDCODE_REV_ID_4              ((uint32_t)0x00100000)        /*!< Bit 4 */\n 3945: #define  DBGMCU_IDCODE_REV_ID_5              ((uint32_t)0x00200000)        /*!< Bit 5 */\n 3946: #define  DBGMCU_IDCODE_REV_ID_6              ((uint32_t)0x00400000)        /*!< Bit 6 */\n 3947: #define  DBGMCU_IDCODE_REV_ID_7              ((uint32_t)0x00800000)        /*!< Bit 7 */\n 3948: #define  DBGMCU_IDCODE_REV_ID_8              ((uint32_t)0x01000000)        /*!< Bit 8 */\n 3949: #define  DBGMCU_IDCODE_REV_ID_9              ((uint32_t)0x02000000)        /*!< Bit 9 */\n 3950: #define  DBGMCU_IDCODE_REV_ID_10             ((uint32_t)0x04000000)        /*!< Bit 10 */\n 3951: #define  DBGMCU_IDCODE_REV_ID_11             ((uint32_t)0x08000000)        /*!< Bit 11 */\n 3952: #define  DBGMCU_IDCODE_REV_ID_12             ((uint32_t)0x10000000)        /*!< Bit 12 */\n 3953: #define  DBGMCU_IDCODE_REV_ID_13             ((uint32_t)0x20000000)        /*!< Bit 13 */\n 3954: #define  DBGMCU_IDCODE_REV_ID_14             ((uint32_t)0x40000000)        /*!< Bit 14 */\n 3955: #define  DBGMCU_IDCODE_REV_ID_15             ((uint32_t)0x80000000)        /*!< Bit 15 */\n 3956  \n 3957: /******************  Bit definition for DBGMCU_CR register  *******************/\n 3958: #define  DBGMCU_CR_DBG_SLEEP                 ((uint32_t)0x00000001)        /*!< Debug Sleep Mode */\n 3959: #define  DBGMCU_CR_DBG_STOP                  ((uint32_t)0x00000002)        /*!< Debug Stop Mode */\n 3960: #define  DBGMCU_CR_DBG_STANDBY               ((uint32_t)0x00000004)        /*!< Debug Standby mode */\n 3961: #define  DBGMCU_CR_TRACE_IOEN                ((uint32_t)0x00000020)        /*!< Trace Pin Assignment Control */\n 3962  \n 3963: #define  DBGMCU_CR_TRACE_MODE                ((uint32_t)0x000000C0)        /*!< TRACE_MODE[1:0] bits (Trace Pin Assignment Control) */\n 3964: #define  DBGMCU_CR_TRACE_MODE_0              ((uint32_t)0x00000040)        /*!< Bit 0 */\n 3965: #define  DBGMCU_CR_TRACE_MODE_1              ((uint32_t)0x00000080)        /*!< Bit 1 */\n 3966  \n 3967: #define  DBGMCU_CR_DBG_IWDG_STOP             ((uint32_t)0x00000100)        /*!< Debug Independent Watchdog stopped when Core is halted */\n 3968: #define  DBGMCU_CR_DBG_WWDG_STOP             ((uint32_t)0x00000200)        /*!< Debug Window Watchdog stopped when Core is halted */\n 3969: #define  DBGMCU_CR_DBG_TIM1_STOP             ((uint32_t)0x00000400)        /*!< TIM1 counter stopped when core is halted */\n 3970: #define  DBGMCU_CR_DBG_TIM2_STOP             ((uint32_t)0x00000800)        /*!< TIM2 counter stopped when core is halted */\n 3971: #define  DBGMCU_CR_DBG_TIM3_STOP             ((uint32_t)0x00001000)        /*!< TIM3 counter stopped when core is halted */\n 3972: #define  DBGMCU_CR_DBG_TIM4_STOP             ((uint32_t)0x00002000)        /*!< TIM4 counter stopped when core is halted */\n 3973: #define  DBGMCU_CR_DBG_I2C1_SMBUS_TIMEOUT    ((uint32_t)0x00008000)        /*!< SMBUS timeout mode stopped when Core is halted */\n 3974: #define  DBGMCU_CR_DBG_I2C2_SMBUS_TIMEOUT    ((uint32_t)0x00010000)        /*!< SMBUS timeout mode stopped when Core is halted */\n 3975: #define  DBGMCU_CR_DBG_TIM5_STOP             ((uint32_t)0x00040000)        /*!< TIM5 counter stopped when core is halted */\n 3976: #define  DBGMCU_CR_DBG_TIM6_STOP             ((uint32_t)0x00080000)        /*!< TIM6 counter stopped when core is halted */\n 3977: #define  DBGMCU_CR_DBG_TIM7_STOP             ((uint32_t)0x00100000)        /*!< TIM7 counter stopped when core is halted */\n 3978: #define  DBGMCU_CR_DBG_TIM9_STOP             ((uint32_t)0x10000000)        /*!< Debug TIM9 stopped when Core is halted */\n 3979: #define  DBGMCU_CR_DBG_TIM10_STOP            ((uint32_t)0x20000000)        /*!< Debug TIM10 stopped when Core is halted */\n 3980: #define  DBGMCU_CR_DBG_TIM11_STOP            ((uint32_t)0x40000000)        /*!< Debug TIM11 stopped when Core is halted */\n 3981  \n 3982  /******************************************************************************/\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f101xg.h:\n  290    __IO uint32_t IDCODE;\n  291    __IO uint32_t CR;\n  292: }DBGMCU_TypeDef;\n  293  \n  294  /** \n  ...\n  727  #define FSMC_BANK4_R_BASE     (FSMC_R_BASE + 0x00A0)    /*!< FSMC Bank4 registers base address */\n  728  \n  729: #define DBGMCU_BASE          ((uint32_t)0xE0042000) /*!< Debug MCU registers base address */\n  730  \n  731  \n  ...\n  801  #define FSMC_Bank2_3        ((FSMC_Bank2_3_TypeDef *) FSMC_BANK2_3_R_BASE)\n  802  #define FSMC_Bank4          ((FSMC_Bank4_TypeDef *) FSMC_BANK4_R_BASE)\n  803: #define DBGMCU              ((DBGMCU_TypeDef *) DBGMCU_BASE)\n  804  \n  805  \n  ...\n 3987  /******************************************************************************/\n 3988  \n 3989: /****************  Bit definition for DBGMCU_IDCODE register  *****************/\n 3990: #define  DBGMCU_IDCODE_DEV_ID                ((uint32_t)0x00000FFF)        /*!< Device Identifier */\n 3991  \n 3992: #define  DBGMCU_IDCODE_REV_ID                ((uint32_t)0xFFFF0000)        /*!< REV_ID[15:0] bits (Revision Identifier) */\n 3993: #define  DBGMCU_IDCODE_REV_ID_0              ((uint32_t)0x00010000)        /*!< Bit 0 */\n 3994: #define  DBGMCU_IDCODE_REV_ID_1              ((uint32_t)0x00020000)        /*!< Bit 1 */\n 3995: #define  DBGMCU_IDCODE_REV_ID_2              ((uint32_t)0x00040000)        /*!< Bit 2 */\n 3996: #define  DBGMCU_IDCODE_REV_ID_3              ((uint32_t)0x00080000)        /*!< Bit 3 */\n 3997: #define  DBGMCU_IDCODE_REV_ID_4              ((uint32_t)0x00100000)        /*!< Bit 4 */\n 3998: #define  DBGMCU_IDCODE_REV_ID_5              ((uint32_t)0x00200000)        /*!< Bit 5 */\n 3999: #define  DBGMCU_IDCODE_REV_ID_6              ((uint32_t)0x00400000)        /*!< Bit 6 */\n 4000: #define  DBGMCU_IDCODE_REV_ID_7              ((uint32_t)0x00800000)        /*!< Bit 7 */\n 4001: #define  DBGMCU_IDCODE_REV_ID_8              ((uint32_t)0x01000000)        /*!< Bit 8 */\n 4002: #define  DBGMCU_IDCODE_REV_ID_9              ((uint32_t)0x02000000)        /*!< Bit 9 */\n 4003: #define  DBGMCU_IDCODE_REV_ID_10             ((uint32_t)0x04000000)        /*!< Bit 10 */\n 4004: #define  DBGMCU_IDCODE_REV_ID_11             ((uint32_t)0x08000000)        /*!< Bit 11 */\n 4005: #define  DBGMCU_IDCODE_REV_ID_12             ((uint32_t)0x10000000)        /*!< Bit 12 */\n 4006: #define  DBGMCU_IDCODE_REV_ID_13             ((uint32_t)0x20000000)        /*!< Bit 13 */\n 4007: #define  DBGMCU_IDCODE_REV_ID_14             ((uint32_t)0x40000000)        /*!< Bit 14 */\n 4008: #define  DBGMCU_IDCODE_REV_ID_15             ((uint32_t)0x80000000)        /*!< Bit 15 */\n 4009  \n 4010: /******************  Bit definition for DBGMCU_CR register  *******************/\n 4011: #define  DBGMCU_CR_DBG_SLEEP                 ((uint32_t)0x00000001)        /*!< Debug Sleep Mode */\n 4012: #define  DBGMCU_CR_DBG_STOP                  ((uint32_t)0x00000002)        /*!< Debug Stop Mode */\n 4013: #define  DBGMCU_CR_DBG_STANDBY               ((uint32_t)0x00000004)        /*!< Debug Standby mode */\n 4014: #define  DBGMCU_CR_TRACE_IOEN                ((uint32_t)0x00000020)        /*!< Trace Pin Assignment Control */\n 4015  \n 4016: #define  DBGMCU_CR_TRACE_MODE                ((uint32_t)0x000000C0)        /*!< TRACE_MODE[1:0] bits (Trace Pin Assignment Control) */\n 4017: #define  DBGMCU_CR_TRACE_MODE_0              ((uint32_t)0x00000040)        /*!< Bit 0 */\n 4018: #define  DBGMCU_CR_TRACE_MODE_1              ((uint32_t)0x00000080)        /*!< Bit 1 */\n 4019  \n 4020: #define  DBGMCU_CR_DBG_IWDG_STOP             ((uint32_t)0x00000100)        /*!< Debug Independent Watchdog stopped when Core is halted */\n 4021: #define  DBGMCU_CR_DBG_WWDG_STOP             ((uint32_t)0x00000200)        /*!< Debug Window Watchdog stopped when Core is halted */\n 4022: #define  DBGMCU_CR_DBG_TIM1_STOP             ((uint32_t)0x00000400)        /*!< TIM1 counter stopped when core is halted */\n 4023: #define  DBGMCU_CR_DBG_TIM2_STOP             ((uint32_t)0x00000800)        /*!< TIM2 counter stopped when core is halted */\n 4024: #define  DBGMCU_CR_DBG_TIM3_STOP             ((uint32_t)0x00001000)        /*!< TIM3 counter stopped when core is halted */\n 4025: #define  DBGMCU_CR_DBG_TIM4_STOP             ((uint32_t)0x00002000)        /*!< TIM4 counter stopped when core is halted */\n 4026: #define  DBGMCU_CR_DBG_I2C1_SMBUS_TIMEOUT    ((uint32_t)0x00008000)        /*!< SMBUS timeout mode stopped when Core is halted */\n 4027: #define  DBGMCU_CR_DBG_I2C2_SMBUS_TIMEOUT    ((uint32_t)0x00010000)        /*!< SMBUS timeout mode stopped when Core is halted */\n 4028: #define  DBGMCU_CR_DBG_TIM5_STOP             ((uint32_t)0x00040000)        /*!< TIM5 counter stopped when core is halted */\n 4029: #define  DBGMCU_CR_DBG_TIM6_STOP             ((uint32_t)0x00080000)        /*!< TIM6 counter stopped when core is halted */\n 4030: #define  DBGMCU_CR_DBG_TIM7_STOP             ((uint32_t)0x00100000)        /*!< TIM7 counter stopped when core is halted */\n 4031: #define  DBGMCU_CR_DBG_TIM12_STOP            ((uint32_t)0x02000000)        /*!< Debug TIM12 stopped when Core is halted */\n 4032: #define  DBGMCU_CR_DBG_TIM13_STOP            ((uint32_t)0x04000000)        /*!< Debug TIM13 stopped when Core is halted */\n 4033: #define  DBGMCU_CR_DBG_TIM14_STOP            ((uint32_t)0x08000000)        /*!< Debug TIM14 stopped when Core is halted */\n 4034: #define  DBGMCU_CR_DBG_TIM9_STOP             ((uint32_t)0x10000000)        /*!< Debug TIM9 stopped when Core is halted */\n 4035: #define  DBGMCU_CR_DBG_TIM10_STOP            ((uint32_t)0x20000000)        /*!< Debug TIM10 stopped when Core is halted */\n 4036: #define  DBGMCU_CR_DBG_TIM11_STOP            ((uint32_t)0x40000000)        /*!< Debug TIM11 stopped when Core is halted */\n 4037  \n 4038  /******************************************************************************/\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f102x6.h:\n  218    __IO uint32_t IDCODE;\n  219    __IO uint32_t CR;\n  220: }DBGMCU_TypeDef;\n  221  \n  222  /** \n  ...\n  585  \n  586  \n  587: #define DBGMCU_BASE          ((uint32_t)0xE0042000) /*!< Debug MCU registers base address */\n  588  \n  589  /* USB device FS */\n  ...\n  632  #define FLASH               ((FLASH_TypeDef *) FLASH_R_BASE)\n  633  #define OB                  ((OB_TypeDef *) OB_BASE)\n  634: #define DBGMCU              ((DBGMCU_TypeDef *) DBGMCU_BASE)\n  635  \n  636  \n  ...\n 4013  /******************************************************************************/\n 4014  \n 4015: /****************  Bit definition for DBGMCU_IDCODE register  *****************/\n 4016: #define  DBGMCU_IDCODE_DEV_ID                ((uint32_t)0x00000FFF)        /*!< Device Identifier */\n 4017  \n 4018: #define  DBGMCU_IDCODE_REV_ID                ((uint32_t)0xFFFF0000)        /*!< REV_ID[15:0] bits (Revision Identifier) */\n 4019: #define  DBGMCU_IDCODE_REV_ID_0              ((uint32_t)0x00010000)        /*!< Bit 0 */\n 4020: #define  DBGMCU_IDCODE_REV_ID_1              ((uint32_t)0x00020000)        /*!< Bit 1 */\n 4021: #define  DBGMCU_IDCODE_REV_ID_2              ((uint32_t)0x00040000)        /*!< Bit 2 */\n 4022: #define  DBGMCU_IDCODE_REV_ID_3              ((uint32_t)0x00080000)        /*!< Bit 3 */\n 4023: #define  DBGMCU_IDCODE_REV_ID_4              ((uint32_t)0x00100000)        /*!< Bit 4 */\n 4024: #define  DBGMCU_IDCODE_REV_ID_5              ((uint32_t)0x00200000)        /*!< Bit 5 */\n 4025: #define  DBGMCU_IDCODE_REV_ID_6              ((uint32_t)0x00400000)        /*!< Bit 6 */\n 4026: #define  DBGMCU_IDCODE_REV_ID_7              ((uint32_t)0x00800000)        /*!< Bit 7 */\n 4027: #define  DBGMCU_IDCODE_REV_ID_8              ((uint32_t)0x01000000)        /*!< Bit 8 */\n 4028: #define  DBGMCU_IDCODE_REV_ID_9              ((uint32_t)0x02000000)        /*!< Bit 9 */\n 4029: #define  DBGMCU_IDCODE_REV_ID_10             ((uint32_t)0x04000000)        /*!< Bit 10 */\n 4030: #define  DBGMCU_IDCODE_REV_ID_11             ((uint32_t)0x08000000)        /*!< Bit 11 */\n 4031: #define  DBGMCU_IDCODE_REV_ID_12             ((uint32_t)0x10000000)        /*!< Bit 12 */\n 4032: #define  DBGMCU_IDCODE_REV_ID_13             ((uint32_t)0x20000000)        /*!< Bit 13 */\n 4033: #define  DBGMCU_IDCODE_REV_ID_14             ((uint32_t)0x40000000)        /*!< Bit 14 */\n 4034: #define  DBGMCU_IDCODE_REV_ID_15             ((uint32_t)0x80000000)        /*!< Bit 15 */\n 4035  \n 4036: /******************  Bit definition for DBGMCU_CR register  *******************/\n 4037: #define  DBGMCU_CR_DBG_SLEEP                 ((uint32_t)0x00000001)        /*!< Debug Sleep Mode */\n 4038: #define  DBGMCU_CR_DBG_STOP                  ((uint32_t)0x00000002)        /*!< Debug Stop Mode */\n 4039: #define  DBGMCU_CR_DBG_STANDBY               ((uint32_t)0x00000004)        /*!< Debug Standby mode */\n 4040: #define  DBGMCU_CR_TRACE_IOEN                ((uint32_t)0x00000020)        /*!< Trace Pin Assignment Control */\n 4041  \n 4042: #define  DBGMCU_CR_TRACE_MODE                ((uint32_t)0x000000C0)        /*!< TRACE_MODE[1:0] bits (Trace Pin Assignment Control) */\n 4043: #define  DBGMCU_CR_TRACE_MODE_0              ((uint32_t)0x00000040)        /*!< Bit 0 */\n 4044: #define  DBGMCU_CR_TRACE_MODE_1              ((uint32_t)0x00000080)        /*!< Bit 1 */\n 4045  \n 4046: #define  DBGMCU_CR_DBG_IWDG_STOP             ((uint32_t)0x00000100)        /*!< Debug Independent Watchdog stopped when Core is halted */\n 4047: #define  DBGMCU_CR_DBG_WWDG_STOP             ((uint32_t)0x00000200)        /*!< Debug Window Watchdog stopped when Core is halted */\n 4048: #define  DBGMCU_CR_DBG_TIM2_STOP             ((uint32_t)0x00000800)        /*!< TIM2 counter stopped when core is halted */\n 4049: #define  DBGMCU_CR_DBG_TIM3_STOP             ((uint32_t)0x00001000)        /*!< TIM3 counter stopped when core is halted */\n 4050: #define  DBGMCU_CR_DBG_I2C1_SMBUS_TIMEOUT    ((uint32_t)0x00008000)        /*!< SMBUS timeout mode stopped when Core is halted */\n 4051  \n 4052  /******************************************************************************/\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f102xb.h:\n  223    __IO uint32_t IDCODE;\n  224    __IO uint32_t CR;\n  225: }DBGMCU_TypeDef;\n  226  \n  227  /** \n  ...\n  594  \n  595  \n  596: #define DBGMCU_BASE          ((uint32_t)0xE0042000) /*!< Debug MCU registers base address */\n  597  \n  598  /* USB device FS */\n  ...\n  645  #define FLASH               ((FLASH_TypeDef *) FLASH_R_BASE)\n  646  #define OB                  ((OB_TypeDef *) OB_BASE)\n  647: #define DBGMCU              ((DBGMCU_TypeDef *) DBGMCU_BASE)\n  648  \n  649  \n  ...\n 4043  /******************************************************************************/\n 4044  \n 4045: /****************  Bit definition for DBGMCU_IDCODE register  *****************/\n 4046: #define  DBGMCU_IDCODE_DEV_ID                ((uint32_t)0x00000FFF)        /*!< Device Identifier */\n 4047  \n 4048: #define  DBGMCU_IDCODE_REV_ID                ((uint32_t)0xFFFF0000)        /*!< REV_ID[15:0] bits (Revision Identifier) */\n 4049: #define  DBGMCU_IDCODE_REV_ID_0              ((uint32_t)0x00010000)        /*!< Bit 0 */\n 4050: #define  DBGMCU_IDCODE_REV_ID_1              ((uint32_t)0x00020000)        /*!< Bit 1 */\n 4051: #define  DBGMCU_IDCODE_REV_ID_2              ((uint32_t)0x00040000)        /*!< Bit 2 */\n 4052: #define  DBGMCU_IDCODE_REV_ID_3              ((uint32_t)0x00080000)        /*!< Bit 3 */\n 4053: #define  DBGMCU_IDCODE_REV_ID_4              ((uint32_t)0x00100000)        /*!< Bit 4 */\n 4054: #define  DBGMCU_IDCODE_REV_ID_5              ((uint32_t)0x00200000)        /*!< Bit 5 */\n 4055: #define  DBGMCU_IDCODE_REV_ID_6              ((uint32_t)0x00400000)        /*!< Bit 6 */\n 4056: #define  DBGMCU_IDCODE_REV_ID_7              ((uint32_t)0x00800000)        /*!< Bit 7 */\n 4057: #define  DBGMCU_IDCODE_REV_ID_8              ((uint32_t)0x01000000)        /*!< Bit 8 */\n 4058: #define  DBGMCU_IDCODE_REV_ID_9              ((uint32_t)0x02000000)        /*!< Bit 9 */\n 4059: #define  DBGMCU_IDCODE_REV_ID_10             ((uint32_t)0x04000000)        /*!< Bit 10 */\n 4060: #define  DBGMCU_IDCODE_REV_ID_11             ((uint32_t)0x08000000)        /*!< Bit 11 */\n 4061: #define  DBGMCU_IDCODE_REV_ID_12             ((uint32_t)0x10000000)        /*!< Bit 12 */\n 4062: #define  DBGMCU_IDCODE_REV_ID_13             ((uint32_t)0x20000000)        /*!< Bit 13 */\n 4063: #define  DBGMCU_IDCODE_REV_ID_14             ((uint32_t)0x40000000)        /*!< Bit 14 */\n 4064: #define  DBGMCU_IDCODE_REV_ID_15             ((uint32_t)0x80000000)        /*!< Bit 15 */\n 4065  \n 4066: /******************  Bit definition for DBGMCU_CR register  *******************/\n 4067: #define  DBGMCU_CR_DBG_SLEEP                 ((uint32_t)0x00000001)        /*!< Debug Sleep Mode */\n 4068: #define  DBGMCU_CR_DBG_STOP                  ((uint32_t)0x00000002)        /*!< Debug Stop Mode */\n 4069: #define  DBGMCU_CR_DBG_STANDBY               ((uint32_t)0x00000004)        /*!< Debug Standby mode */\n 4070: #define  DBGMCU_CR_TRACE_IOEN                ((uint32_t)0x00000020)        /*!< Trace Pin Assignment Control */\n 4071  \n 4072: #define  DBGMCU_CR_TRACE_MODE                ((uint32_t)0x000000C0)        /*!< TRACE_MODE[1:0] bits (Trace Pin Assignment Control) */\n 4073: #define  DBGMCU_CR_TRACE_MODE_0              ((uint32_t)0x00000040)        /*!< Bit 0 */\n 4074: #define  DBGMCU_CR_TRACE_MODE_1              ((uint32_t)0x00000080)        /*!< Bit 1 */\n 4075  \n 4076: #define  DBGMCU_CR_DBG_IWDG_STOP             ((uint32_t)0x00000100)        /*!< Debug Independent Watchdog stopped when Core is halted */\n 4077: #define  DBGMCU_CR_DBG_WWDG_STOP             ((uint32_t)0x00000200)        /*!< Debug Window Watchdog stopped when Core is halted */\n 4078: #define  DBGMCU_CR_DBG_TIM2_STOP             ((uint32_t)0x00000800)        /*!< TIM2 counter stopped when core is halted */\n 4079: #define  DBGMCU_CR_DBG_TIM3_STOP             ((uint32_t)0x00001000)        /*!< TIM3 counter stopped when core is halted */\n 4080: #define  DBGMCU_CR_DBG_TIM4_STOP             ((uint32_t)0x00002000)        /*!< TIM4 counter stopped when core is halted */\n 4081: #define  DBGMCU_CR_DBG_I2C1_SMBUS_TIMEOUT    ((uint32_t)0x00008000)        /*!< SMBUS timeout mode stopped when Core is halted */\n 4082: #define  DBGMCU_CR_DBG_I2C2_SMBUS_TIMEOUT    ((uint32_t)0x00010000)        /*!< SMBUS timeout mode stopped when Core is halted */\n 4083  \n 4084  /******************************************************************************/\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f103x6.h:\n  287    __IO uint32_t IDCODE;\n  288    __IO uint32_t CR;\n  289: }DBGMCU_TypeDef;\n  290  \n  291  /** \n  ...\n  657  \n  658  \n  659: #define DBGMCU_BASE          ((uint32_t)0xE0042000) /*!< Debug MCU registers base address */\n  660  \n  661  /* USB device FS */\n  ...\n  707  #define FLASH               ((FLASH_TypeDef *) FLASH_R_BASE)\n  708  #define OB                  ((OB_TypeDef *) OB_BASE)\n  709: #define DBGMCU              ((DBGMCU_TypeDef *) DBGMCU_BASE)\n  710  \n  711  \n  ...\n 5366  /******************************************************************************/\n 5367  \n 5368: /****************  Bit definition for DBGMCU_IDCODE register  *****************/\n 5369: #define  DBGMCU_IDCODE_DEV_ID                ((uint32_t)0x00000FFF)        /*!< Device Identifier */\n 5370  \n 5371: #define  DBGMCU_IDCODE_REV_ID                ((uint32_t)0xFFFF0000)        /*!< REV_ID[15:0] bits (Revision Identifier) */\n 5372: #define  DBGMCU_IDCODE_REV_ID_0              ((uint32_t)0x00010000)        /*!< Bit 0 */\n 5373: #define  DBGMCU_IDCODE_REV_ID_1              ((uint32_t)0x00020000)        /*!< Bit 1 */\n 5374: #define  DBGMCU_IDCODE_REV_ID_2              ((uint32_t)0x00040000)        /*!< Bit 2 */\n 5375: #define  DBGMCU_IDCODE_REV_ID_3              ((uint32_t)0x00080000)        /*!< Bit 3 */\n 5376: #define  DBGMCU_IDCODE_REV_ID_4              ((uint32_t)0x00100000)        /*!< Bit 4 */\n 5377: #define  DBGMCU_IDCODE_REV_ID_5              ((uint32_t)0x00200000)        /*!< Bit 5 */\n 5378: #define  DBGMCU_IDCODE_REV_ID_6              ((uint32_t)0x00400000)        /*!< Bit 6 */\n 5379: #define  DBGMCU_IDCODE_REV_ID_7              ((uint32_t)0x00800000)        /*!< Bit 7 */\n 5380: #define  DBGMCU_IDCODE_REV_ID_8              ((uint32_t)0x01000000)        /*!< Bit 8 */\n 5381: #define  DBGMCU_IDCODE_REV_ID_9              ((uint32_t)0x02000000)        /*!< Bit 9 */\n 5382: #define  DBGMCU_IDCODE_REV_ID_10             ((uint32_t)0x04000000)        /*!< Bit 10 */\n 5383: #define  DBGMCU_IDCODE_REV_ID_11             ((uint32_t)0x08000000)        /*!< Bit 11 */\n 5384: #define  DBGMCU_IDCODE_REV_ID_12             ((uint32_t)0x10000000)        /*!< Bit 12 */\n 5385: #define  DBGMCU_IDCODE_REV_ID_13             ((uint32_t)0x20000000)        /*!< Bit 13 */\n 5386: #define  DBGMCU_IDCODE_REV_ID_14             ((uint32_t)0x40000000)        /*!< Bit 14 */\n 5387: #define  DBGMCU_IDCODE_REV_ID_15             ((uint32_t)0x80000000)        /*!< Bit 15 */\n 5388  \n 5389: /******************  Bit definition for DBGMCU_CR register  *******************/\n 5390: #define  DBGMCU_CR_DBG_SLEEP                 ((uint32_t)0x00000001)        /*!< Debug Sleep Mode */\n 5391: #define  DBGMCU_CR_DBG_STOP                  ((uint32_t)0x00000002)        /*!< Debug Stop Mode */\n 5392: #define  DBGMCU_CR_DBG_STANDBY               ((uint32_t)0x00000004)        /*!< Debug Standby mode */\n 5393: #define  DBGMCU_CR_TRACE_IOEN                ((uint32_t)0x00000020)        /*!< Trace Pin Assignment Control */\n 5394  \n 5395: #define  DBGMCU_CR_TRACE_MODE                ((uint32_t)0x000000C0)        /*!< TRACE_MODE[1:0] bits (Trace Pin Assignment Control) */\n 5396: #define  DBGMCU_CR_TRACE_MODE_0              ((uint32_t)0x00000040)        /*!< Bit 0 */\n 5397: #define  DBGMCU_CR_TRACE_MODE_1              ((uint32_t)0x00000080)        /*!< Bit 1 */\n 5398  \n 5399: #define  DBGMCU_CR_DBG_IWDG_STOP             ((uint32_t)0x00000100)        /*!< Debug Independent Watchdog stopped when Core is halted */\n 5400: #define  DBGMCU_CR_DBG_WWDG_STOP             ((uint32_t)0x00000200)        /*!< Debug Window Watchdog stopped when Core is halted */\n 5401: #define  DBGMCU_CR_DBG_TIM1_STOP             ((uint32_t)0x00000400)        /*!< TIM1 counter stopped when core is halted */\n 5402: #define  DBGMCU_CR_DBG_TIM2_STOP             ((uint32_t)0x00000800)        /*!< TIM2 counter stopped when core is halted */\n 5403: #define  DBGMCU_CR_DBG_TIM3_STOP             ((uint32_t)0x00001000)        /*!< TIM3 counter stopped when core is halted */\n 5404: #define  DBGMCU_CR_DBG_CAN1_STOP             ((uint32_t)0x00004000)        /*!< Debug CAN1 stopped when Core is halted */\n 5405: #define  DBGMCU_CR_DBG_I2C1_SMBUS_TIMEOUT    ((uint32_t)0x00008000)        /*!< SMBUS timeout mode stopped when Core is halted */\n 5406  \n 5407  /******************************************************************************/\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f103xb.h:\n  292    __IO uint32_t IDCODE;\n  293    __IO uint32_t CR;\n  294: }DBGMCU_TypeDef;\n  295  \n  296  /** \n  ...\n  667  \n  668  \n  669: #define DBGMCU_BASE          ((uint32_t)0xE0042000) /*!< Debug MCU registers base address */\n  670  \n  671  /* USB device FS */\n  ...\n  722  #define FLASH               ((FLASH_TypeDef *) FLASH_R_BASE)\n  723  #define OB                  ((OB_TypeDef *) OB_BASE)\n  724: #define DBGMCU              ((DBGMCU_TypeDef *) DBGMCU_BASE)\n  725  \n  726  \n  ...\n 5400  /******************************************************************************/\n 5401  \n 5402: /****************  Bit definition for DBGMCU_IDCODE register  *****************/\n 5403: #define  DBGMCU_IDCODE_DEV_ID                ((uint32_t)0x00000FFF)        /*!< Device Identifier */\n 5404  \n 5405: #define  DBGMCU_IDCODE_REV_ID                ((uint32_t)0xFFFF0000)        /*!< REV_ID[15:0] bits (Revision Identifier) */\n 5406: #define  DBGMCU_IDCODE_REV_ID_0              ((uint32_t)0x00010000)        /*!< Bit 0 */\n 5407: #define  DBGMCU_IDCODE_REV_ID_1              ((uint32_t)0x00020000)        /*!< Bit 1 */\n 5408: #define  DBGMCU_IDCODE_REV_ID_2              ((uint32_t)0x00040000)        /*!< Bit 2 */\n 5409: #define  DBGMCU_IDCODE_REV_ID_3              ((uint32_t)0x00080000)        /*!< Bit 3 */\n 5410: #define  DBGMCU_IDCODE_REV_ID_4              ((uint32_t)0x00100000)        /*!< Bit 4 */\n 5411: #define  DBGMCU_IDCODE_REV_ID_5              ((uint32_t)0x00200000)        /*!< Bit 5 */\n 5412: #define  DBGMCU_IDCODE_REV_ID_6              ((uint32_t)0x00400000)        /*!< Bit 6 */\n 5413: #define  DBGMCU_IDCODE_REV_ID_7              ((uint32_t)0x00800000)        /*!< Bit 7 */\n 5414: #define  DBGMCU_IDCODE_REV_ID_8              ((uint32_t)0x01000000)        /*!< Bit 8 */\n 5415: #define  DBGMCU_IDCODE_REV_ID_9              ((uint32_t)0x02000000)        /*!< Bit 9 */\n 5416: #define  DBGMCU_IDCODE_REV_ID_10             ((uint32_t)0x04000000)        /*!< Bit 10 */\n 5417: #define  DBGMCU_IDCODE_REV_ID_11             ((uint32_t)0x08000000)        /*!< Bit 11 */\n 5418: #define  DBGMCU_IDCODE_REV_ID_12             ((uint32_t)0x10000000)        /*!< Bit 12 */\n 5419: #define  DBGMCU_IDCODE_REV_ID_13             ((uint32_t)0x20000000)        /*!< Bit 13 */\n 5420: #define  DBGMCU_IDCODE_REV_ID_14             ((uint32_t)0x40000000)        /*!< Bit 14 */\n 5421: #define  DBGMCU_IDCODE_REV_ID_15             ((uint32_t)0x80000000)        /*!< Bit 15 */\n 5422  \n 5423: /******************  Bit definition for DBGMCU_CR register  *******************/\n 5424: #define  DBGMCU_CR_DBG_SLEEP                 ((uint32_t)0x00000001)        /*!< Debug Sleep Mode */\n 5425: #define  DBGMCU_CR_DBG_STOP                  ((uint32_t)0x00000002)        /*!< Debug Stop Mode */\n 5426: #define  DBGMCU_CR_DBG_STANDBY               ((uint32_t)0x00000004)        /*!< Debug Standby mode */\n 5427: #define  DBGMCU_CR_TRACE_IOEN                ((uint32_t)0x00000020)        /*!< Trace Pin Assignment Control */\n 5428  \n 5429: #define  DBGMCU_CR_TRACE_MODE                ((uint32_t)0x000000C0)        /*!< TRACE_MODE[1:0] bits (Trace Pin Assignment Control) */\n 5430: #define  DBGMCU_CR_TRACE_MODE_0              ((uint32_t)0x00000040)        /*!< Bit 0 */\n 5431: #define  DBGMCU_CR_TRACE_MODE_1              ((uint32_t)0x00000080)        /*!< Bit 1 */\n 5432  \n 5433: #define  DBGMCU_CR_DBG_IWDG_STOP             ((uint32_t)0x00000100)        /*!< Debug Independent Watchdog stopped when Core is halted */\n 5434: #define  DBGMCU_CR_DBG_WWDG_STOP             ((uint32_t)0x00000200)        /*!< Debug Window Watchdog stopped when Core is halted */\n 5435: #define  DBGMCU_CR_DBG_TIM1_STOP             ((uint32_t)0x00000400)        /*!< TIM1 counter stopped when core is halted */\n 5436: #define  DBGMCU_CR_DBG_TIM2_STOP             ((uint32_t)0x00000800)        /*!< TIM2 counter stopped when core is halted */\n 5437: #define  DBGMCU_CR_DBG_TIM3_STOP             ((uint32_t)0x00001000)        /*!< TIM3 counter stopped when core is halted */\n 5438: #define  DBGMCU_CR_DBG_TIM4_STOP             ((uint32_t)0x00002000)        /*!< TIM4 counter stopped when core is halted */\n 5439: #define  DBGMCU_CR_DBG_CAN1_STOP             ((uint32_t)0x00004000)        /*!< Debug CAN1 stopped when Core is halted */\n 5440: #define  DBGMCU_CR_DBG_I2C1_SMBUS_TIMEOUT    ((uint32_t)0x00008000)        /*!< SMBUS timeout mode stopped when Core is halted */\n 5441: #define  DBGMCU_CR_DBG_I2C2_SMBUS_TIMEOUT    ((uint32_t)0x00010000)        /*!< SMBUS timeout mode stopped when Core is halted */\n 5442  \n 5443  /******************************************************************************/\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f103xe.h:\n  362    __IO uint32_t IDCODE;\n  363    __IO uint32_t CR;\n  364: }DBGMCU_TypeDef;\n  365  \n  366  /** \n  ...\n  824  #define FSMC_BANK4_R_BASE     (FSMC_R_BASE + 0x00A0)    /*!< FSMC Bank4 registers base address */\n  825  \n  826: #define DBGMCU_BASE          ((uint32_t)0xE0042000) /*!< Debug MCU registers base address */\n  827  \n  828  /* USB device FS */\n  ...\n  900  #define FSMC_Bank2_3        ((FSMC_Bank2_3_TypeDef *) FSMC_BANK2_3_R_BASE)\n  901  #define FSMC_Bank4          ((FSMC_Bank4_TypeDef *) FSMC_BANK4_R_BASE)\n  902: #define DBGMCU              ((DBGMCU_TypeDef *) DBGMCU_BASE)\n  903  \n  904  \n  ...\n 6089  /******************************************************************************/\n 6090  \n 6091: /****************  Bit definition for DBGMCU_IDCODE register  *****************/\n 6092: #define  DBGMCU_IDCODE_DEV_ID                ((uint32_t)0x00000FFF)        /*!< Device Identifier */\n 6093  \n 6094: #define  DBGMCU_IDCODE_REV_ID                ((uint32_t)0xFFFF0000)        /*!< REV_ID[15:0] bits (Revision Identifier) */\n 6095: #define  DBGMCU_IDCODE_REV_ID_0              ((uint32_t)0x00010000)        /*!< Bit 0 */\n 6096: #define  DBGMCU_IDCODE_REV_ID_1              ((uint32_t)0x00020000)        /*!< Bit 1 */\n 6097: #define  DBGMCU_IDCODE_REV_ID_2              ((uint32_t)0x00040000)        /*!< Bit 2 */\n 6098: #define  DBGMCU_IDCODE_REV_ID_3              ((uint32_t)0x00080000)        /*!< Bit 3 */\n 6099: #define  DBGMCU_IDCODE_REV_ID_4              ((uint32_t)0x00100000)        /*!< Bit 4 */\n 6100: #define  DBGMCU_IDCODE_REV_ID_5              ((uint32_t)0x00200000)        /*!< Bit 5 */\n 6101: #define  DBGMCU_IDCODE_REV_ID_6              ((uint32_t)0x00400000)        /*!< Bit 6 */\n 6102: #define  DBGMCU_IDCODE_REV_ID_7              ((uint32_t)0x00800000)        /*!< Bit 7 */\n 6103: #define  DBGMCU_IDCODE_REV_ID_8              ((uint32_t)0x01000000)        /*!< Bit 8 */\n 6104: #define  DBGMCU_IDCODE_REV_ID_9              ((uint32_t)0x02000000)        /*!< Bit 9 */\n 6105: #define  DBGMCU_IDCODE_REV_ID_10             ((uint32_t)0x04000000)        /*!< Bit 10 */\n 6106: #define  DBGMCU_IDCODE_REV_ID_11             ((uint32_t)0x08000000)        /*!< Bit 11 */\n 6107: #define  DBGMCU_IDCODE_REV_ID_12             ((uint32_t)0x10000000)        /*!< Bit 12 */\n 6108: #define  DBGMCU_IDCODE_REV_ID_13             ((uint32_t)0x20000000)        /*!< Bit 13 */\n 6109: #define  DBGMCU_IDCODE_REV_ID_14             ((uint32_t)0x40000000)        /*!< Bit 14 */\n 6110: #define  DBGMCU_IDCODE_REV_ID_15             ((uint32_t)0x80000000)        /*!< Bit 15 */\n 6111  \n 6112: /******************  Bit definition for DBGMCU_CR register  *******************/\n 6113: #define  DBGMCU_CR_DBG_SLEEP                 ((uint32_t)0x00000001)        /*!< Debug Sleep Mode */\n 6114: #define  DBGMCU_CR_DBG_STOP                  ((uint32_t)0x00000002)        /*!< Debug Stop Mode */\n 6115: #define  DBGMCU_CR_DBG_STANDBY               ((uint32_t)0x00000004)        /*!< Debug Standby mode */\n 6116: #define  DBGMCU_CR_TRACE_IOEN                ((uint32_t)0x00000020)        /*!< Trace Pin Assignment Control */\n 6117  \n 6118: #define  DBGMCU_CR_TRACE_MODE                ((uint32_t)0x000000C0)        /*!< TRACE_MODE[1:0] bits (Trace Pin Assignment Control) */\n 6119: #define  DBGMCU_CR_TRACE_MODE_0              ((uint32_t)0x00000040)        /*!< Bit 0 */\n 6120: #define  DBGMCU_CR_TRACE_MODE_1              ((uint32_t)0x00000080)        /*!< Bit 1 */\n 6121  \n 6122: #define  DBGMCU_CR_DBG_IWDG_STOP             ((uint32_t)0x00000100)        /*!< Debug Independent Watchdog stopped when Core is halted */\n 6123: #define  DBGMCU_CR_DBG_WWDG_STOP             ((uint32_t)0x00000200)        /*!< Debug Window Watchdog stopped when Core is halted */\n 6124: #define  DBGMCU_CR_DBG_TIM1_STOP             ((uint32_t)0x00000400)        /*!< TIM1 counter stopped when core is halted */\n 6125: #define  DBGMCU_CR_DBG_TIM2_STOP             ((uint32_t)0x00000800)        /*!< TIM2 counter stopped when core is halted */\n 6126: #define  DBGMCU_CR_DBG_TIM3_STOP             ((uint32_t)0x00001000)        /*!< TIM3 counter stopped when core is halted */\n 6127: #define  DBGMCU_CR_DBG_TIM4_STOP             ((uint32_t)0x00002000)        /*!< TIM4 counter stopped when core is halted */\n 6128: #define  DBGMCU_CR_DBG_CAN1_STOP             ((uint32_t)0x00004000)        /*!< Debug CAN1 stopped when Core is halted */\n 6129: #define  DBGMCU_CR_DBG_I2C1_SMBUS_TIMEOUT    ((uint32_t)0x00008000)        /*!< SMBUS timeout mode stopped when Core is halted */\n 6130: #define  DBGMCU_CR_DBG_I2C2_SMBUS_TIMEOUT    ((uint32_t)0x00010000)        /*!< SMBUS timeout mode stopped when Core is halted */\n 6131: #define  DBGMCU_CR_DBG_TIM8_STOP             ((uint32_t)0x00020000)        /*!< TIM8 counter stopped when core is halted */\n 6132: #define  DBGMCU_CR_DBG_TIM5_STOP             ((uint32_t)0x00040000)        /*!< TIM5 counter stopped when core is halted */\n 6133: #define  DBGMCU_CR_DBG_TIM6_STOP             ((uint32_t)0x00080000)        /*!< TIM6 counter stopped when core is halted */\n 6134: #define  DBGMCU_CR_DBG_TIM7_STOP             ((uint32_t)0x00100000)        /*!< TIM7 counter stopped when core is halted */\n 6135  \n 6136  /******************************************************************************/\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f103xg.h:\n  362    __IO uint32_t IDCODE;\n  363    __IO uint32_t CR;\n  364: }DBGMCU_TypeDef;\n  365  \n  366  /** \n  ...\n  837  #define FSMC_BANK4_R_BASE     (FSMC_R_BASE + 0x00A0)    /*!< FSMC Bank4 registers base address */\n  838  \n  839: #define DBGMCU_BASE          ((uint32_t)0xE0042000) /*!< Debug MCU registers base address */\n  840  \n  841  /* USB device FS */\n  ...\n  919  #define FSMC_Bank2_3        ((FSMC_Bank2_3_TypeDef *) FSMC_BANK2_3_R_BASE)\n  920  #define FSMC_Bank4          ((FSMC_Bank4_TypeDef *) FSMC_BANK4_R_BASE)\n  921: #define DBGMCU              ((DBGMCU_TypeDef *) DBGMCU_BASE)\n  922  \n  923  \n  ...\n 6125  /******************************************************************************/\n 6126  \n 6127: /****************  Bit definition for DBGMCU_IDCODE register  *****************/\n 6128: #define  DBGMCU_IDCODE_DEV_ID                ((uint32_t)0x00000FFF)        /*!< Device Identifier */\n 6129  \n 6130: #define  DBGMCU_IDCODE_REV_ID                ((uint32_t)0xFFFF0000)        /*!< REV_ID[15:0] bits (Revision Identifier) */\n 6131: #define  DBGMCU_IDCODE_REV_ID_0              ((uint32_t)0x00010000)        /*!< Bit 0 */\n 6132: #define  DBGMCU_IDCODE_REV_ID_1              ((uint32_t)0x00020000)        /*!< Bit 1 */\n 6133: #define  DBGMCU_IDCODE_REV_ID_2              ((uint32_t)0x00040000)        /*!< Bit 2 */\n 6134: #define  DBGMCU_IDCODE_REV_ID_3              ((uint32_t)0x00080000)        /*!< Bit 3 */\n 6135: #define  DBGMCU_IDCODE_REV_ID_4              ((uint32_t)0x00100000)        /*!< Bit 4 */\n 6136: #define  DBGMCU_IDCODE_REV_ID_5              ((uint32_t)0x00200000)        /*!< Bit 5 */\n 6137: #define  DBGMCU_IDCODE_REV_ID_6              ((uint32_t)0x00400000)        /*!< Bit 6 */\n 6138: #define  DBGMCU_IDCODE_REV_ID_7              ((uint32_t)0x00800000)        /*!< Bit 7 */\n 6139: #define  DBGMCU_IDCODE_REV_ID_8              ((uint32_t)0x01000000)        /*!< Bit 8 */\n 6140: #define  DBGMCU_IDCODE_REV_ID_9              ((uint32_t)0x02000000)        /*!< Bit 9 */\n 6141: #define  DBGMCU_IDCODE_REV_ID_10             ((uint32_t)0x04000000)        /*!< Bit 10 */\n 6142: #define  DBGMCU_IDCODE_REV_ID_11             ((uint32_t)0x08000000)        /*!< Bit 11 */\n 6143: #define  DBGMCU_IDCODE_REV_ID_12             ((uint32_t)0x10000000)        /*!< Bit 12 */\n 6144: #define  DBGMCU_IDCODE_REV_ID_13             ((uint32_t)0x20000000)        /*!< Bit 13 */\n 6145: #define  DBGMCU_IDCODE_REV_ID_14             ((uint32_t)0x40000000)        /*!< Bit 14 */\n 6146: #define  DBGMCU_IDCODE_REV_ID_15             ((uint32_t)0x80000000)        /*!< Bit 15 */\n 6147  \n 6148: /******************  Bit definition for DBGMCU_CR register  *******************/\n 6149: #define  DBGMCU_CR_DBG_SLEEP                 ((uint32_t)0x00000001)        /*!< Debug Sleep Mode */\n 6150: #define  DBGMCU_CR_DBG_STOP                  ((uint32_t)0x00000002)        /*!< Debug Stop Mode */\n 6151: #define  DBGMCU_CR_DBG_STANDBY               ((uint32_t)0x00000004)        /*!< Debug Standby mode */\n 6152: #define  DBGMCU_CR_TRACE_IOEN                ((uint32_t)0x00000020)        /*!< Trace Pin Assignment Control */\n 6153  \n 6154: #define  DBGMCU_CR_TRACE_MODE                ((uint32_t)0x000000C0)        /*!< TRACE_MODE[1:0] bits (Trace Pin Assignment Control) */\n 6155: #define  DBGMCU_CR_TRACE_MODE_0              ((uint32_t)0x00000040)        /*!< Bit 0 */\n 6156: #define  DBGMCU_CR_TRACE_MODE_1              ((uint32_t)0x00000080)        /*!< Bit 1 */\n 6157  \n 6158: #define  DBGMCU_CR_DBG_IWDG_STOP             ((uint32_t)0x00000100)        /*!< Debug Independent Watchdog stopped when Core is halted */\n 6159: #define  DBGMCU_CR_DBG_WWDG_STOP             ((uint32_t)0x00000200)        /*!< Debug Window Watchdog stopped when Core is halted */\n 6160: #define  DBGMCU_CR_DBG_TIM1_STOP             ((uint32_t)0x00000400)        /*!< TIM1 counter stopped when core is halted */\n 6161: #define  DBGMCU_CR_DBG_TIM2_STOP             ((uint32_t)0x00000800)        /*!< TIM2 counter stopped when core is halted */\n 6162: #define  DBGMCU_CR_DBG_TIM3_STOP             ((uint32_t)0x00001000)        /*!< TIM3 counter stopped when core is halted */\n 6163: #define  DBGMCU_CR_DBG_TIM4_STOP             ((uint32_t)0x00002000)        /*!< TIM4 counter stopped when core is halted */\n 6164: #define  DBGMCU_CR_DBG_CAN1_STOP             ((uint32_t)0x00004000)        /*!< Debug CAN1 stopped when Core is halted */\n 6165: #define  DBGMCU_CR_DBG_I2C1_SMBUS_TIMEOUT    ((uint32_t)0x00008000)        /*!< SMBUS timeout mode stopped when Core is halted */\n 6166: #define  DBGMCU_CR_DBG_I2C2_SMBUS_TIMEOUT    ((uint32_t)0x00010000)        /*!< SMBUS timeout mode stopped when Core is halted */\n 6167: #define  DBGMCU_CR_DBG_TIM8_STOP             ((uint32_t)0x00020000)        /*!< TIM8 counter stopped when core is halted */\n 6168: #define  DBGMCU_CR_DBG_TIM5_STOP             ((uint32_t)0x00040000)        /*!< TIM5 counter stopped when core is halted */\n 6169: #define  DBGMCU_CR_DBG_TIM6_STOP             ((uint32_t)0x00080000)        /*!< TIM6 counter stopped when core is halted */\n 6170: #define  DBGMCU_CR_DBG_TIM7_STOP             ((uint32_t)0x00100000)        /*!< TIM7 counter stopped when core is halted */\n 6171: #define  DBGMCU_CR_DBG_TIM12_STOP            ((uint32_t)0x02000000)        /*!< Debug TIM12 stopped when Core is halted */\n 6172: #define  DBGMCU_CR_DBG_TIM13_STOP            ((uint32_t)0x04000000)        /*!< Debug TIM13 stopped when Core is halted */\n 6173: #define  DBGMCU_CR_DBG_TIM14_STOP            ((uint32_t)0x08000000)        /*!< Debug TIM14 stopped when Core is halted */\n 6174: #define  DBGMCU_CR_DBG_TIM9_STOP             ((uint32_t)0x10000000)        /*!< Debug TIM9 stopped when Core is halted */\n 6175: #define  DBGMCU_CR_DBG_TIM10_STOP            ((uint32_t)0x20000000)        /*!< Debug TIM10 stopped when Core is halted */\n 6176: #define  DBGMCU_CR_DBG_TIM11_STOP            ((uint32_t)0x40000000)        /*!< Debug TIM11 stopped when Core is halted */\n 6177  \n 6178  /******************************************************************************/\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f105xc.h:\n  361    __IO uint32_t IDCODE;\n  362    __IO uint32_t CR;\n  363: }DBGMCU_TypeDef;\n  364  \n  365  /** \n  ...\n  834  \n  835  \n  836: #define DBGMCU_BASE          ((uint32_t)0xE0042000) /*!< Debug MCU registers base address */\n  837  \n  838  \n  ...\n  914  #define FLASH               ((FLASH_TypeDef *) FLASH_R_BASE)\n  915  #define OB                  ((OB_TypeDef *) OB_BASE)\n  916: #define DBGMCU              ((DBGMCU_TypeDef *) DBGMCU_BASE)\n  917  \n  918  #define USB_OTG_FS          ((USB_OTG_GlobalTypeDef *) USB_OTG_FS_PERIPH_BASE)\n  ...\n 6226  /******************************************************************************/\n 6227  \n 6228: /****************  Bit definition for DBGMCU_IDCODE register  *****************/\n 6229: #define  DBGMCU_IDCODE_DEV_ID                ((uint32_t)0x00000FFF)        /*!< Device Identifier */\n 6230  \n 6231: #define  DBGMCU_IDCODE_REV_ID                ((uint32_t)0xFFFF0000)        /*!< REV_ID[15:0] bits (Revision Identifier) */\n 6232: #define  DBGMCU_IDCODE_REV_ID_0              ((uint32_t)0x00010000)        /*!< Bit 0 */\n 6233: #define  DBGMCU_IDCODE_REV_ID_1              ((uint32_t)0x00020000)        /*!< Bit 1 */\n 6234: #define  DBGMCU_IDCODE_REV_ID_2              ((uint32_t)0x00040000)        /*!< Bit 2 */\n 6235: #define  DBGMCU_IDCODE_REV_ID_3              ((uint32_t)0x00080000)        /*!< Bit 3 */\n 6236: #define  DBGMCU_IDCODE_REV_ID_4              ((uint32_t)0x00100000)        /*!< Bit 4 */\n 6237: #define  DBGMCU_IDCODE_REV_ID_5              ((uint32_t)0x00200000)        /*!< Bit 5 */\n 6238: #define  DBGMCU_IDCODE_REV_ID_6              ((uint32_t)0x00400000)        /*!< Bit 6 */\n 6239: #define  DBGMCU_IDCODE_REV_ID_7              ((uint32_t)0x00800000)        /*!< Bit 7 */\n 6240: #define  DBGMCU_IDCODE_REV_ID_8              ((uint32_t)0x01000000)        /*!< Bit 8 */\n 6241: #define  DBGMCU_IDCODE_REV_ID_9              ((uint32_t)0x02000000)        /*!< Bit 9 */\n 6242: #define  DBGMCU_IDCODE_REV_ID_10             ((uint32_t)0x04000000)        /*!< Bit 10 */\n 6243: #define  DBGMCU_IDCODE_REV_ID_11             ((uint32_t)0x08000000)        /*!< Bit 11 */\n 6244: #define  DBGMCU_IDCODE_REV_ID_12             ((uint32_t)0x10000000)        /*!< Bit 12 */\n 6245: #define  DBGMCU_IDCODE_REV_ID_13             ((uint32_t)0x20000000)        /*!< Bit 13 */\n 6246: #define  DBGMCU_IDCODE_REV_ID_14             ((uint32_t)0x40000000)        /*!< Bit 14 */\n 6247: #define  DBGMCU_IDCODE_REV_ID_15             ((uint32_t)0x80000000)        /*!< Bit 15 */\n 6248  \n 6249: /******************  Bit definition for DBGMCU_CR register  *******************/\n 6250: #define  DBGMCU_CR_DBG_SLEEP                 ((uint32_t)0x00000001)        /*!< Debug Sleep Mode */\n 6251: #define  DBGMCU_CR_DBG_STOP                  ((uint32_t)0x00000002)        /*!< Debug Stop Mode */\n 6252: #define  DBGMCU_CR_DBG_STANDBY               ((uint32_t)0x00000004)        /*!< Debug Standby mode */\n 6253: #define  DBGMCU_CR_TRACE_IOEN                ((uint32_t)0x00000020)        /*!< Trace Pin Assignment Control */\n 6254  \n 6255: #define  DBGMCU_CR_TRACE_MODE                ((uint32_t)0x000000C0)        /*!< TRACE_MODE[1:0] bits (Trace Pin Assignment Control) */\n 6256: #define  DBGMCU_CR_TRACE_MODE_0              ((uint32_t)0x00000040)        /*!< Bit 0 */\n 6257: #define  DBGMCU_CR_TRACE_MODE_1              ((uint32_t)0x00000080)        /*!< Bit 1 */\n 6258  \n 6259: #define  DBGMCU_CR_DBG_IWDG_STOP             ((uint32_t)0x00000100)        /*!< Debug Independent Watchdog stopped when Core is halted */\n 6260: #define  DBGMCU_CR_DBG_WWDG_STOP             ((uint32_t)0x00000200)        /*!< Debug Window Watchdog stopped when Core is halted */\n 6261: #define  DBGMCU_CR_DBG_TIM1_STOP             ((uint32_t)0x00000400)        /*!< TIM1 counter stopped when core is halted */\n 6262: #define  DBGMCU_CR_DBG_TIM2_STOP             ((uint32_t)0x00000800)        /*!< TIM2 counter stopped when core is halted */\n 6263: #define  DBGMCU_CR_DBG_TIM3_STOP             ((uint32_t)0x00001000)        /*!< TIM3 counter stopped when core is halted */\n 6264: #define  DBGMCU_CR_DBG_TIM4_STOP             ((uint32_t)0x00002000)        /*!< TIM4 counter stopped when core is halted */\n 6265: #define  DBGMCU_CR_DBG_CAN1_STOP             ((uint32_t)0x00004000)        /*!< Debug CAN1 stopped when Core is halted */\n 6266: #define  DBGMCU_CR_DBG_I2C1_SMBUS_TIMEOUT    ((uint32_t)0x00008000)        /*!< SMBUS timeout mode stopped when Core is halted */\n 6267: #define  DBGMCU_CR_DBG_I2C2_SMBUS_TIMEOUT    ((uint32_t)0x00010000)        /*!< SMBUS timeout mode stopped when Core is halted */\n 6268: #define  DBGMCU_CR_DBG_TIM5_STOP             ((uint32_t)0x00040000)        /*!< TIM5 counter stopped when core is halted */\n 6269: #define  DBGMCU_CR_DBG_TIM6_STOP             ((uint32_t)0x00080000)        /*!< TIM6 counter stopped when core is halted */\n 6270: #define  DBGMCU_CR_DBG_TIM7_STOP             ((uint32_t)0x00100000)        /*!< TIM7 counter stopped when core is halted */\n 6271: #define  DBGMCU_CR_DBG_CAN2_STOP             ((uint32_t)0x00200000)        /*!< Debug CAN2 stopped when Core is halted */\n 6272: #define  DBGMCU_CR_DBG_TIM9_STOP             ((uint32_t)0x10000000)        /*!< Debug TIM9 stopped when Core is halted */\n 6273: #define  DBGMCU_CR_DBG_TIM10_STOP            ((uint32_t)0x20000000)        /*!< Debug TIM10 stopped when Core is halted */\n 6274: #define  DBGMCU_CR_DBG_TIM11_STOP            ((uint32_t)0x40000000)        /*!< Debug TIM11 stopped when Core is halted */\n 6275  \n 6276  /******************************************************************************/\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f107xc.h:\n  363    __IO uint32_t IDCODE;\n  364    __IO uint32_t CR;\n  365: }DBGMCU_TypeDef;\n  366  \n  367  /** \n  ...\n  913  \n  914  \n  915: #define DBGMCU_BASE          ((uint32_t)0xE0042000) /*!< Debug MCU registers base address */\n  916  \n  917  \n  ...\n  994  #define OB                  ((OB_TypeDef *) OB_BASE)\n  995  #define ETH                 ((ETH_TypeDef *) ETH_BASE)\n  996: #define DBGMCU              ((DBGMCU_TypeDef *) DBGMCU_BASE)\n  997  \n  998  #define USB_OTG_FS          ((USB_OTG_GlobalTypeDef *) USB_OTG_FS_PERIPH_BASE)\n  ...\n 6310  /******************************************************************************/\n 6311  \n 6312: /****************  Bit definition for DBGMCU_IDCODE register  *****************/\n 6313: #define  DBGMCU_IDCODE_DEV_ID                ((uint32_t)0x00000FFF)        /*!< Device Identifier */\n 6314  \n 6315: #define  DBGMCU_IDCODE_REV_ID                ((uint32_t)0xFFFF0000)        /*!< REV_ID[15:0] bits (Revision Identifier) */\n 6316: #define  DBGMCU_IDCODE_REV_ID_0              ((uint32_t)0x00010000)        /*!< Bit 0 */\n 6317: #define  DBGMCU_IDCODE_REV_ID_1              ((uint32_t)0x00020000)        /*!< Bit 1 */\n 6318: #define  DBGMCU_IDCODE_REV_ID_2              ((uint32_t)0x00040000)        /*!< Bit 2 */\n 6319: #define  DBGMCU_IDCODE_REV_ID_3              ((uint32_t)0x00080000)        /*!< Bit 3 */\n 6320: #define  DBGMCU_IDCODE_REV_ID_4              ((uint32_t)0x00100000)        /*!< Bit 4 */\n 6321: #define  DBGMCU_IDCODE_REV_ID_5              ((uint32_t)0x00200000)        /*!< Bit 5 */\n 6322: #define  DBGMCU_IDCODE_REV_ID_6              ((uint32_t)0x00400000)        /*!< Bit 6 */\n 6323: #define  DBGMCU_IDCODE_REV_ID_7              ((uint32_t)0x00800000)        /*!< Bit 7 */\n 6324: #define  DBGMCU_IDCODE_REV_ID_8              ((uint32_t)0x01000000)        /*!< Bit 8 */\n 6325: #define  DBGMCU_IDCODE_REV_ID_9              ((uint32_t)0x02000000)        /*!< Bit 9 */\n 6326: #define  DBGMCU_IDCODE_REV_ID_10             ((uint32_t)0x04000000)        /*!< Bit 10 */\n 6327: #define  DBGMCU_IDCODE_REV_ID_11             ((uint32_t)0x08000000)        /*!< Bit 11 */\n 6328: #define  DBGMCU_IDCODE_REV_ID_12             ((uint32_t)0x10000000)        /*!< Bit 12 */\n 6329: #define  DBGMCU_IDCODE_REV_ID_13             ((uint32_t)0x20000000)        /*!< Bit 13 */\n 6330: #define  DBGMCU_IDCODE_REV_ID_14             ((uint32_t)0x40000000)        /*!< Bit 14 */\n 6331: #define  DBGMCU_IDCODE_REV_ID_15             ((uint32_t)0x80000000)        /*!< Bit 15 */\n 6332  \n 6333: /******************  Bit definition for DBGMCU_CR register  *******************/\n 6334: #define  DBGMCU_CR_DBG_SLEEP                 ((uint32_t)0x00000001)        /*!< Debug Sleep Mode */\n 6335: #define  DBGMCU_CR_DBG_STOP                  ((uint32_t)0x00000002)        /*!< Debug Stop Mode */\n 6336: #define  DBGMCU_CR_DBG_STANDBY               ((uint32_t)0x00000004)        /*!< Debug Standby mode */\n 6337: #define  DBGMCU_CR_TRACE_IOEN                ((uint32_t)0x00000020)        /*!< Trace Pin Assignment Control */\n 6338  \n 6339: #define  DBGMCU_CR_TRACE_MODE                ((uint32_t)0x000000C0)        /*!< TRACE_MODE[1:0] bits (Trace Pin Assignment Control) */\n 6340: #define  DBGMCU_CR_TRACE_MODE_0              ((uint32_t)0x00000040)        /*!< Bit 0 */\n 6341: #define  DBGMCU_CR_TRACE_MODE_1              ((uint32_t)0x00000080)        /*!< Bit 1 */\n 6342  \n 6343: #define  DBGMCU_CR_DBG_IWDG_STOP             ((uint32_t)0x00000100)        /*!< Debug Independent Watchdog stopped when Core is halted */\n 6344: #define  DBGMCU_CR_DBG_WWDG_STOP             ((uint32_t)0x00000200)        /*!< Debug Window Watchdog stopped when Core is halted */\n 6345: #define  DBGMCU_CR_DBG_TIM1_STOP             ((uint32_t)0x00000400)        /*!< TIM1 counter stopped when core is halted */\n 6346: #define  DBGMCU_CR_DBG_TIM2_STOP             ((uint32_t)0x00000800)        /*!< TIM2 counter stopped when core is halted */\n 6347: #define  DBGMCU_CR_DBG_TIM3_STOP             ((uint32_t)0x00001000)        /*!< TIM3 counter stopped when core is halted */\n 6348: #define  DBGMCU_CR_DBG_TIM4_STOP             ((uint32_t)0x00002000)        /*!< TIM4 counter stopped when core is halted */\n 6349: #define  DBGMCU_CR_DBG_CAN1_STOP             ((uint32_t)0x00004000)        /*!< Debug CAN1 stopped when Core is halted */\n 6350: #define  DBGMCU_CR_DBG_I2C1_SMBUS_TIMEOUT    ((uint32_t)0x00008000)        /*!< SMBUS timeout mode stopped when Core is halted */\n 6351: #define  DBGMCU_CR_DBG_I2C2_SMBUS_TIMEOUT    ((uint32_t)0x00010000)        /*!< SMBUS timeout mode stopped when Core is halted */\n 6352: #define  DBGMCU_CR_DBG_TIM5_STOP             ((uint32_t)0x00040000)        /*!< TIM5 counter stopped when core is halted */\n 6353: #define  DBGMCU_CR_DBG_TIM6_STOP             ((uint32_t)0x00080000)        /*!< TIM6 counter stopped when core is halted */\n 6354: #define  DBGMCU_CR_DBG_TIM7_STOP             ((uint32_t)0x00100000)        /*!< TIM7 counter stopped when core is halted */\n 6355: #define  DBGMCU_CR_DBG_CAN2_STOP             ((uint32_t)0x00200000)        /*!< Debug CAN2 stopped when Core is halted */\n 6356: #define  DBGMCU_CR_DBG_TIM9_STOP             ((uint32_t)0x10000000)        /*!< Debug TIM9 stopped when Core is halted */\n 6357: #define  DBGMCU_CR_DBG_TIM10_STOP            ((uint32_t)0x20000000)        /*!< Debug TIM10 stopped when Core is halted */\n 6358: #define  DBGMCU_CR_DBG_TIM11_STOP            ((uint32_t)0x40000000)        /*!< Debug TIM11 stopped when Core is halted */\n 6359  \n 6360  /******************************************************************************/\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\Legacy\\stm32_hal_legacy.h:\n  833    * @{\n  834    */\n  835: #define HAL_EnableDBGSleepMode HAL_DBGMCU_EnableDBGSleepMode\n  836: #define HAL_DisableDBGSleepMode HAL_DBGMCU_DisableDBGSleepMode\n  837: #define HAL_EnableDBGStopMode HAL_DBGMCU_EnableDBGStopMode\n  838: #define HAL_DisableDBGStopMode HAL_DBGMCU_DisableDBGStopMode\n  839: #define HAL_EnableDBGStandbyMode HAL_DBGMCU_EnableDBGStandbyMode\n  840: #define HAL_DisableDBGStandbyMode HAL_DBGMCU_DisableDBGStandbyMode\n  841: #define HAL_DBG_LowPowerConfig(Periph, cmd) (((cmd)==ENABLE)? HAL_DBGMCU_DBG_EnableLowPowerConfig(Periph) : HAL_DBGMCU_DBG_DisableLowPowerConfig(Periph))\n  842  #define HAL_VREFINT_OutputSelect  HAL_SYSCFG_VREFINT_OutputSelect\n  843  #define HAL_Lock_Cmd(cmd) (((cmd)==ENABLE) ? HAL_SYSCFG_Enable_Lock_VREFINT() : HAL_SYSCFG_Disable_Lock_VREFINT())\n  ...\n 1114    */\n 1115     \n 1116: /** @defgroup HAL_DBGMCU_Aliased_Macros HAL DBGMCU Aliased Macros maintained for legacy purpose\n 1117    * @{\n 1118    */\n 1119: #define __HAL_FREEZE_TIM1_DBGMCU __HAL_DBGMCU_FREEZE_TIM1\n 1120: #define __HAL_UNFREEZE_TIM1_DBGMCU __HAL_DBGMCU_UNFREEZE_TIM1\n 1121: #define __HAL_FREEZE_TIM2_DBGMCU __HAL_DBGMCU_FREEZE_TIM2\n 1122: #define __HAL_UNFREEZE_TIM2_DBGMCU __HAL_DBGMCU_UNFREEZE_TIM2\n 1123: #define __HAL_FREEZE_TIM3_DBGMCU __HAL_DBGMCU_FREEZE_TIM3\n 1124: #define __HAL_UNFREEZE_TIM3_DBGMCU __HAL_DBGMCU_UNFREEZE_TIM3\n 1125: #define __HAL_FREEZE_TIM4_DBGMCU __HAL_DBGMCU_FREEZE_TIM4\n 1126: #define __HAL_UNFREEZE_TIM4_DBGMCU __HAL_DBGMCU_UNFREEZE_TIM4\n 1127: #define __HAL_FREEZE_TIM5_DBGMCU __HAL_DBGMCU_FREEZE_TIM5\n 1128: #define __HAL_UNFREEZE_TIM5_DBGMCU __HAL_DBGMCU_UNFREEZE_TIM5\n 1129: #define __HAL_FREEZE_TIM6_DBGMCU __HAL_DBGMCU_FREEZE_TIM6\n 1130: #define __HAL_UNFREEZE_TIM6_DBGMCU __HAL_DBGMCU_UNFREEZE_TIM6\n 1131: #define __HAL_FREEZE_TIM7_DBGMCU __HAL_DBGMCU_FREEZE_TIM7\n 1132: #define __HAL_UNFREEZE_TIM7_DBGMCU __HAL_DBGMCU_UNFREEZE_TIM7\n 1133: #define __HAL_FREEZE_TIM8_DBGMCU __HAL_DBGMCU_FREEZE_TIM8\n 1134: #define __HAL_UNFREEZE_TIM8_DBGMCU __HAL_DBGMCU_UNFREEZE_TIM8\n 1135  \n 1136: #define __HAL_FREEZE_TIM9_DBGMCU __HAL_DBGMCU_FREEZE_TIM9\n 1137: #define __HAL_UNFREEZE_TIM9_DBGMCU __HAL_DBGMCU_UNFREEZE_TIM9\n 1138: #define __HAL_FREEZE_TIM10_DBGMCU __HAL_DBGMCU_FREEZE_TIM10\n 1139: #define __HAL_UNFREEZE_TIM10_DBGMCU __HAL_DBGMCU_UNFREEZE_TIM10\n 1140: #define __HAL_FREEZE_TIM11_DBGMCU __HAL_DBGMCU_FREEZE_TIM11\n 1141: #define __HAL_UNFREEZE_TIM11_DBGMCU __HAL_DBGMCU_UNFREEZE_TIM11\n 1142: #define __HAL_FREEZE_TIM12_DBGMCU __HAL_DBGMCU_FREEZE_TIM12\n 1143: #define __HAL_UNFREEZE_TIM12_DBGMCU __HAL_DBGMCU_UNFREEZE_TIM12\n 1144: #define __HAL_FREEZE_TIM13_DBGMCU __HAL_DBGMCU_FREEZE_TIM13\n 1145: #define __HAL_UNFREEZE_TIM13_DBGMCU __HAL_DBGMCU_UNFREEZE_TIM13\n 1146: #define __HAL_FREEZE_TIM14_DBGMCU __HAL_DBGMCU_FREEZE_TIM14\n 1147: #define __HAL_UNFREEZE_TIM14_DBGMCU __HAL_DBGMCU_UNFREEZE_TIM14\n 1148: #define __HAL_FREEZE_CAN2_DBGMCU __HAL_DBGMCU_FREEZE_CAN2\n 1149: #define __HAL_UNFREEZE_CAN2_DBGMCU __HAL_DBGMCU_UNFREEZE_CAN2\n 1150  \n 1151  \n 1152: #define __HAL_FREEZE_TIM15_DBGMCU __HAL_DBGMCU_FREEZE_TIM15\n 1153: #define __HAL_UNFREEZE_TIM15_DBGMCU __HAL_DBGMCU_UNFREEZE_TIM15\n 1154: #define __HAL_FREEZE_TIM16_DBGMCU __HAL_DBGMCU_FREEZE_TIM16\n 1155: #define __HAL_UNFREEZE_TIM16_DBGMCU __HAL_DBGMCU_UNFREEZE_TIM16\n 1156: #define __HAL_FREEZE_TIM17_DBGMCU __HAL_DBGMCU_FREEZE_TIM17\n 1157: #define __HAL_UNFREEZE_TIM17_DBGMCU __HAL_DBGMCU_UNFREEZE_TIM17\n 1158: #define __HAL_FREEZE_RTC_DBGMCU __HAL_DBGMCU_FREEZE_RTC\n 1159: #define __HAL_UNFREEZE_RTC_DBGMCU __HAL_DBGMCU_UNFREEZE_RTC\n 1160: #define __HAL_FREEZE_WWDG_DBGMCU __HAL_DBGMCU_FREEZE_WWDG\n 1161: #define __HAL_UNFREEZE_WWDG_DBGMCU __HAL_DBGMCU_UNFREEZE_WWDG\n 1162: #define __HAL_FREEZE_IWDG_DBGMCU __HAL_DBGMCU_FREEZE_IWDG\n 1163: #define __HAL_UNFREEZE_IWDG_DBGMCU __HAL_DBGMCU_UNFREEZE_IWDG\n 1164: #define __HAL_FREEZE_I2C1_TIMEOUT_DBGMCU __HAL_DBGMCU_FREEZE_I2C1_TIMEOUT\n 1165: #define __HAL_UNFREEZE_I2C1_TIMEOUT_DBGMCU __HAL_DBGMCU_UNFREEZE_I2C1_TIMEOUT\n 1166: #define __HAL_FREEZE_I2C2_TIMEOUT_DBGMCU __HAL_DBGMCU_FREEZE_I2C2_TIMEOUT\n 1167: #define __HAL_UNFREEZE_I2C2_TIMEOUT_DBGMCU __HAL_DBGMCU_UNFREEZE_I2C2_TIMEOUT\n 1168: #define __HAL_FREEZE_I2C3_TIMEOUT_DBGMCU __HAL_DBGMCU_FREEZE_I2C3_TIMEOUT\n 1169: #define __HAL_UNFREEZE_I2C3_TIMEOUT_DBGMCU __HAL_DBGMCU_UNFREEZE_I2C3_TIMEOUT\n 1170: #define __HAL_FREEZE_CAN1_DBGMCU __HAL_DBGMCU_FREEZE_CAN1\n 1171: #define __HAL_UNFREEZE_CAN1_DBGMCU __HAL_DBGMCU_UNFREEZE_CAN1\n 1172: #define __HAL_FREEZE_LPTIM1_DBGMCU __HAL_DBGMCU_FREEZE_LPTIM1\n 1173: #define __HAL_UNFREEZE_LPTIM1_DBGMCU __HAL_DBGMCU_UNFREEZE_LPTIM1\n 1174: #define __HAL_FREEZE_LPTIM2_DBGMCU __HAL_DBGMCU_FREEZE_LPTIM2\n 1175: #define __HAL_UNFREEZE_LPTIM2_DBGMCU __HAL_DBGMCU_UNFREEZE_LPTIM2\n 1176  \n 1177  /**\n ....\n 1490  #define __DAC1_FORCE_RESET __HAL_RCC_DAC1_FORCE_RESET\n 1491  #define __DAC1_RELEASE_RESET __HAL_RCC_DAC1_RELEASE_RESET\n 1492: #define __DBGMCU_CLK_ENABLE     __HAL_RCC_DBGMCU_CLK_ENABLE\n 1493: #define __DBGMCU_CLK_DISABLE     __HAL_RCC_DBGMCU_CLK_DISABLE\n 1494: #define __DBGMCU_FORCE_RESET    __HAL_RCC_DBGMCU_FORCE_RESET\n 1495: #define __DBGMCU_RELEASE_RESET  __HAL_RCC_DBGMCU_RELEASE_RESET\n 1496  #define __DFSDM_CLK_DISABLE __HAL_RCC_DFSDM_CLK_DISABLE\n 1497  #define __DFSDM_CLK_ENABLE __HAL_RCC_DFSDM_CLK_ENABLE\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal.h:\n   65    */\n   66  \n   67: /** @defgroup DBGMCU_Freeze_Unfreeze Freeze Unfreeze Peripherals in Debug mode\n   68    * @brief   Freeze/Unfreeze Peripherals in Debug mode \n   69    * Note: On devices STM32F10xx8 and STM32F10xxB,\n   ..\n   71    *                  STM32F101xF/G and STM32F103xF/G\n   72    *                  STM32F10xx4 and STM32F10xx6\n   73:   *       Debug registers DBGMCU_IDCODE and DBGMCU_CR are accessible only in \n   74    *       debug mode (not accessible by the user software in normal mode).\n   75    *       Refer to errata sheet of these devices for more details.\n   ..\n   81    * @brief  TIM2 Peripherals Debug mode \n   82    */\n   83: #define __HAL_DBGMCU_FREEZE_TIM2()            SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_TIM2_STOP)\n   84: #define __HAL_DBGMCU_UNFREEZE_TIM2()          CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_TIM2_STOP)\n   85  \n   86  /**\n   87    * @brief  TIM3 Peripherals Debug mode \n   88    */\n   89: #define __HAL_DBGMCU_FREEZE_TIM3()            SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_TIM3_STOP)\n   90: #define __HAL_DBGMCU_UNFREEZE_TIM3()          CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_TIM3_STOP)\n   91  \n   92: #if defined (DBGMCU_CR_DBG_TIM4_STOP)\n   93  /**\n   94    * @brief  TIM4 Peripherals Debug mode \n   95    */\n   96: #define __HAL_DBGMCU_FREEZE_TIM4()            SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_TIM4_STOP)\n   97: #define __HAL_DBGMCU_UNFREEZE_TIM4()          CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_TIM4_STOP)\n   98  #endif\n   99  \n  100: #if defined (DBGMCU_CR_DBG_TIM5_STOP)\n  101  /**\n  102    * @brief  TIM5 Peripherals Debug mode \n  103    */\n  104: #define __HAL_DBGMCU_FREEZE_TIM5()            SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_TIM5_STOP)\n  105: #define __HAL_DBGMCU_UNFREEZE_TIM5()          CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_TIM5_STOP)\n  106  #endif\n  107  \n  108: #if defined (DBGMCU_CR_DBG_TIM6_STOP)\n  109  /**\n  110    * @brief  TIM6 Peripherals Debug mode \n  111    */\n  112: #define __HAL_DBGMCU_FREEZE_TIM6()            SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_TIM6_STOP)\n  113: #define __HAL_DBGMCU_UNFREEZE_TIM6()          CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_TIM6_STOP)\n  114  #endif\n  115  \n  116: #if defined (DBGMCU_CR_DBG_TIM7_STOP)\n  117  /**\n  118    * @brief  TIM7 Peripherals Debug mode \n  119    */\n  120: #define __HAL_DBGMCU_FREEZE_TIM7()            SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_TIM7_STOP)\n  121: #define __HAL_DBGMCU_UNFREEZE_TIM7()          CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_TIM7_STOP)\n  122  #endif\n  123  \n  124: #if defined (DBGMCU_CR_DBG_TIM12_STOP)\n  125  /**\n  126    * @brief  TIM12 Peripherals Debug mode \n  127    */\n  128: #define __HAL_DBGMCU_FREEZE_TIM12()            SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_TIM12_STOP)\n  129: #define __HAL_DBGMCU_UNFREEZE_TIM12()          CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_TIM12_STOP)\n  130  #endif\n  131  \n  132: #if defined (DBGMCU_CR_DBG_TIM13_STOP)\n  133  /**\n  134    * @brief  TIM13 Peripherals Debug mode \n  135    */\n  136: #define __HAL_DBGMCU_FREEZE_TIM13()            SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_TIM13_STOP)\n  137: #define __HAL_DBGMCU_UNFREEZE_TIM13()          CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_TIM13_STOP)\n  138  #endif\n  139  \n  140: #if defined (DBGMCU_CR_DBG_TIM14_STOP)\n  141  /**\n  142    * @brief  TIM14 Peripherals Debug mode \n  143    */\n  144: #define __HAL_DBGMCU_FREEZE_TIM14()            SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_TIM14_STOP)\n  145: #define __HAL_DBGMCU_UNFREEZE_TIM14()          CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_TIM14_STOP)\n  146  #endif\n  147  \n  ...\n  149    * @brief  WWDG Peripherals Debug mode \n  150    */\n  151: #define __HAL_DBGMCU_FREEZE_WWDG()            SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_WWDG_STOP)\n  152: #define __HAL_DBGMCU_UNFREEZE_WWDG()          CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_WWDG_STOP)\n  153  \n  154  /**\n  155    * @brief  IWDG Peripherals Debug mode \n  156    */\n  157: #define __HAL_DBGMCU_FREEZE_IWDG()            SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_IWDG_STOP)\n  158: #define __HAL_DBGMCU_UNFREEZE_IWDG()          CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_IWDG_STOP)\n  159  \n  160  /**\n  161    * @brief  I2C1 Peripherals Debug mode \n  162    */\n  163: #define __HAL_DBGMCU_FREEZE_I2C1_TIMEOUT()    SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_I2C1_SMBUS_TIMEOUT)\n  164: #define __HAL_DBGMCU_UNFREEZE_I2C1_TIMEOUT()  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_I2C1_SMBUS_TIMEOUT)\n  165  \n  166: #if defined (DBGMCU_CR_DBG_I2C2_SMBUS_TIMEOUT)\n  167  /**\n  168    * @brief  I2C2 Peripherals Debug mode \n  169    */\n  170: #define __HAL_DBGMCU_FREEZE_I2C2_TIMEOUT()    SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_I2C2_SMBUS_TIMEOUT)\n  171: #define __HAL_DBGMCU_UNFREEZE_I2C2_TIMEOUT()  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_I2C2_SMBUS_TIMEOUT)\n  172  #endif\n  173  \n  174: #if defined (DBGMCU_CR_DBG_CAN1_STOP)\n  175  /**\n  176    * @brief  CAN1 Peripherals Debug mode \n  177    */\n  178: #define __HAL_DBGMCU_FREEZE_CAN1()            SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_CAN1_STOP)\n  179: #define __HAL_DBGMCU_UNFREEZE_CAN1()          CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_CAN1_STOP)\n  180  #endif\n  181  \n  182: #if defined (DBGMCU_CR_DBG_CAN2_STOP)\n  183  /**\n  184    * @brief  CAN2 Peripherals Debug mode \n  185    */\n  186: #define __HAL_DBGMCU_FREEZE_CAN2()            SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_CAN2_STOP)\n  187: #define __HAL_DBGMCU_UNFREEZE_CAN2()          CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_CAN2_STOP)\n  188  #endif   \n  189     \n  190  /* Peripherals on APB2 */\n  191: #if defined (DBGMCU_CR_DBG_TIM1_STOP)\n  192  /**\n  193    * @brief  TIM1 Peripherals Debug mode \n  194    */\n  195: #define __HAL_DBGMCU_FREEZE_TIM1()            SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_TIM1_STOP)\n  196: #define __HAL_DBGMCU_UNFREEZE_TIM1()          CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_TIM1_STOP)\n  197  #endif\n  198  \n  199: #if defined (DBGMCU_CR_DBG_TIM8_STOP)\n  200  /**\n  201    * @brief  TIM8 Peripherals Debug mode \n  202    */\n  203: #define __HAL_DBGMCU_FREEZE_TIM8()            SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_TIM8_STOP)\n  204: #define __HAL_DBGMCU_UNFREEZE_TIM8()          CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_TIM8_STOP)\n  205  #endif\n  206  \n  207: #if defined (DBGMCU_CR_DBG_TIM9_STOP)\n  208  /**\n  209    * @brief  TIM9 Peripherals Debug mode \n  210    */\n  211: #define __HAL_DBGMCU_FREEZE_TIM9()            SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_TIM9_STOP)\n  212: #define __HAL_DBGMCU_UNFREEZE_TIM9()          CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_TIM9_STOP)\n  213  #endif\n  214  \n  215: #if defined (DBGMCU_CR_DBG_TIM10_STOP)\n  216  /**\n  217    * @brief  TIM10 Peripherals Debug mode \n  218    */\n  219: #define __HAL_DBGMCU_FREEZE_TIM10()            SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_TIM10_STOP)\n  220: #define __HAL_DBGMCU_UNFREEZE_TIM10()          CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_TIM10_STOP)\n  221  #endif\n  222  \n  223: #if defined (DBGMCU_CR_DBG_TIM11_STOP)\n  224  /**\n  225    * @brief  TIM11 Peripherals Debug mode \n  226    */\n  227: #define __HAL_DBGMCU_FREEZE_TIM11()            SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_TIM11_STOP)\n  228: #define __HAL_DBGMCU_UNFREEZE_TIM11()          CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_TIM11_STOP)\n  229  #endif\n  230  \n  231  \n  232: #if defined (DBGMCU_CR_DBG_TIM15_STOP)\n  233  /**\n  234    * @brief  TIM15 Peripherals Debug mode \n  235    */\n  236: #define __HAL_DBGMCU_FREEZE_TIM15()            SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_TIM15_STOP)\n  237: #define __HAL_DBGMCU_UNFREEZE_TIM15()          CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_TIM15_STOP)\n  238  #endif\n  239  \n  240: #if defined (DBGMCU_CR_DBG_TIM16_STOP)\n  241  /**\n  242    * @brief  TIM16 Peripherals Debug mode \n  243    */\n  244: #define __HAL_DBGMCU_FREEZE_TIM16()            SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_TIM16_STOP)\n  245: #define __HAL_DBGMCU_UNFREEZE_TIM16()          CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_TIM16_STOP)\n  246  #endif\n  247  \n  248: #if defined (DBGMCU_CR_DBG_TIM17_STOP)\n  249  /**\n  250    * @brief  TIM17 Peripherals Debug mode \n  251    */\n  252: #define __HAL_DBGMCU_FREEZE_TIM17()            SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_TIM17_STOP)\n  253: #define __HAL_DBGMCU_UNFREEZE_TIM17()          CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_TIM17_STOP)\n  254  #endif\n  255  \n  ...\n  296  uint32_t          HAL_GetREVID(void);\n  297  uint32_t          HAL_GetDEVID(void);\n  298: void              HAL_DBGMCU_EnableDBGSleepMode(void);\n  299: void              HAL_DBGMCU_DisableDBGSleepMode(void);\n  300: void              HAL_DBGMCU_EnableDBGStopMode(void);\n  301: void              HAL_DBGMCU_DisableDBGStopMode(void);\n  302: void              HAL_DBGMCU_EnableDBGStandbyMode(void);\n  303: void              HAL_DBGMCU_DisableDBGStandbyMode(void);\n  304  \n  305  /**\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal.c:\n  378    *                  STM32F101xF/G and STM32F103xF/G\n  379    *                  STM32F10xx4 and STM32F10xx6\n  380:   *       Debug registers DBGMCU_IDCODE and DBGMCU_CR are accessible only in \n  381    *       debug mode (not accessible by the user software in normal mode).\n  382    *       Refer to errata sheet of these devices for more details.\n  ...\n  385  uint32_t HAL_GetREVID(void)\n  386  {\n  387:   return((DBGMCU->IDCODE) >> POSITION_VAL(DBGMCU_IDCODE_REV_ID));\n  388  }\n  389  \n  ...\n  394    *                  STM32F101xF/G and STM32F103xF/G\n  395    *                  STM32F10xx4 and STM32F10xx6\n  396:   *       Debug registers DBGMCU_IDCODE and DBGMCU_CR are accessible only in \n  397    *       debug mode (not accessible by the user software in normal mode).\n  398    *       Refer to errata sheet of these devices for more details.\n  ...\n  401  uint32_t HAL_GetDEVID(void)\n  402  {\n  403:    return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);\n  404  }\n  405  \n  ...\n  408    * @retval None\n  409    */\n  410: void HAL_DBGMCU_EnableDBGSleepMode(void)\n  411  {\n  412:   SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);\n  413  }\n  414  \n  ...\n  419    *                  STM32F101xF/G and STM32F103xF/G\n  420    *                  STM32F10xx4 and STM32F10xx6\n  421:   *       Debug registers DBGMCU_IDCODE and DBGMCU_CR are accessible only in \n  422    *       debug mode (not accessible by the user software in normal mode).\n  423    *       Refer to errata sheet of these devices for more details.\n  424    * @retval None\n  425    */\n  426: void HAL_DBGMCU_DisableDBGSleepMode(void)\n  427  {\n  428:   CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);\n  429  }\n  430  \n  ...\n  435    *                  STM32F101xF/G and STM32F103xF/G\n  436    *                  STM32F10xx4 and STM32F10xx6\n  437:   *       Debug registers DBGMCU_IDCODE and DBGMCU_CR are accessible only in \n  438    *       debug mode (not accessible by the user software in normal mode).\n  439    *       Refer to errata sheet of these devices for more details.\n  440    * Note: On all STM32F1 devices:\n  441    *       If the system tick timer interrupt is enabled during the Stop mode \n  442:   *       debug (DBG_STOP bit set in the DBGMCU_CR register ), it will wakeup\n  443    *       the system from Stop mode.\n  444    *       Workaround: To debug the Stop mode, disable the system tick timer \n  ...\n  447    * Note: On all STM32F1 devices:\n  448    *       If the system tick timer interrupt is enabled during the Stop mode  \n  449:   *       debug (DBG_STOP bit set in the DBGMCU_CR register ), it will wakeup\n  450    *       the system from Stop mode.\n  451    *       Workaround: To debug the Stop mode, disable the system tick timer\n  ...\n  454    * @retval None\n  455    */\n  456: void HAL_DBGMCU_EnableDBGStopMode(void)\n  457  {\n  458:   SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);\n  459  }\n  460  \n  ...\n  465    *                  STM32F101xF/G and STM32F103xF/G\n  466    *                  STM32F10xx4 and STM32F10xx6\n  467:   *       Debug registers DBGMCU_IDCODE and DBGMCU_CR are accessible only in \n  468    *       debug mode (not accessible by the user software in normal mode).\n  469    *       Refer to errata sheet of these devices for more details.\n  470    * @retval None\n  471    */\n  472: void HAL_DBGMCU_DisableDBGStopMode(void)\n  473  {\n  474:   CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);\n  475  }\n  476  \n  ...\n  481    *                  STM32F101xF/G and STM32F103xF/G\n  482    *                  STM32F10xx4 and STM32F10xx6\n  483:   *       Debug registers DBGMCU_IDCODE and DBGMCU_CR are accessible only in \n  484    *       debug mode (not accessible by the user software in normal mode).\n  485    *       Refer to errata sheet of these devices for more details.\n  486    * @retval None\n  487    */\n  488: void HAL_DBGMCU_EnableDBGStandbyMode(void)\n  489  {\n  490:   SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);\n  491  }\n  492  \n  ...\n  497    *                  STM32F101xF/G and STM32F103xF/G\n  498    *                  STM32F10xx4 and STM32F10xx6\n  499:   *       Debug registers DBGMCU_IDCODE and DBGMCU_CR are accessible only in \n  500    *       debug mode (not accessible by the user software in normal mode).\n  501    *       Refer to errata sheet of these devices for more details.\n  502    * @retval None\n  503    */\n  504: void HAL_DBGMCU_DisableDBGStandbyMode(void)\n  505  {\n  506:   CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);\n  507  }\n  508  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\main.c:\n  140  	/* Infinite loop */\n  141  	/* USER CODE BEGIN WHILE */\n  142: 	#define DBGMCU_TIM1_STOP  (uint32_t)0x00000400\n  143: 	DBGMCU->CR |= DBGMCU_TIM1_STOP;\n  144  	while (1) {\n  145  		/* USER CODE END WHILE */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\stm32_PPM_F103\\Debug\\bin\\stm32_PPM_F103.elf:\n    <binary>\n\nD:\\WorkSTM32\\stm32_PPM_F103\\stm32_PPM_F103\\Debug\\bin\\stm32_PPM_F103.map:\n  116   .text.HAL_GetDEVID\n  117                  0x00000000       0x1c ..\\obj\\stm32f1xx_hal.o\n  118:  .text.HAL_DBGMCU_EnableDBGSleepMode\n  119                  0x00000000       0x1c ..\\obj\\stm32f1xx_hal.o\n  120:  .text.HAL_DBGMCU_DisableDBGSleepMode\n  121                  0x00000000       0x1c ..\\obj\\stm32f1xx_hal.o\n  122:  .text.HAL_DBGMCU_EnableDBGStopMode\n  123                  0x00000000       0x1c ..\\obj\\stm32f1xx_hal.o\n  124:  .text.HAL_DBGMCU_DisableDBGStopMode\n  125                  0x00000000       0x1c ..\\obj\\stm32f1xx_hal.o\n  126:  .text.HAL_DBGMCU_EnableDBGStandbyMode\n  127                  0x00000000       0x1c ..\\obj\\stm32f1xx_hal.o\n  128:  .text.HAL_DBGMCU_DisableDBGStandbyMode\n  129                  0x00000000       0x1c ..\\obj\\stm32f1xx_hal.o\n  130   .text          0x00000000        0x0 ..\\obj\\stm32f1xx_it.o\n\nD:\\WorkSTM32\\stm32_PPM_F103\\TrueSTUDIO\\stm32_PPM_F103 Configuration\\stm32_PPM_F103 Configuration.elf.launch:\n    8  <intAttribute key=\"com.atollic.hardwaredebug.jlink_common.scan_chain_irpre\" value=\"0\" />\n    9  <intAttribute key=\"com.atollic.hardwaredebug.jlink_common.scan_chain_pos\" value=\"0\" />\n   10: <stringAttribute key=\"com.atollic.hardwaredebug.launch.analyzeCommands\" value=\"# Set flash parallelism mode to 32, 16, or 8 bit when using STM32 F2/F4 microcontrollers&#xD;&#xA;# 2=32 bit, 1=16 bit and 0=8 bit parallelism mode&#xD;&#xA;monitor flash set_parallelism_mode 2&#xD;&#xA;&#xD;&#xA;# Load the program executable&#xD;&#xA;load&#x9;&#x9;&#xD;&#xA;&#xD;&#xA;# Enable Debug connection in low power modes (DBGMCU-&gt;CR)&#xD;&#xA;set *0xE0042004 = (*0xE0042004) | 0x7&#xD;&#xA;# Start the executable&#xD;&#xA;continue\" />\n   11  <booleanAttribute key=\"com.atollic.hardwaredebug.launch.enable_swv\" value=\"false\" />\n   12  <intAttribute key=\"com.atollic.hardwaredebug.launch.formatVersion\" value=\"2\" />\n   ..\n   15  <intAttribute key=\"com.atollic.hardwaredebug.launch.portNumber\" value=\"61234\" />\n   16  <stringAttribute key=\"com.atollic.hardwaredebug.launch.remoteCommand\" value=\"target extended-remote\" />\n   17: <stringAttribute key=\"com.atollic.hardwaredebug.launch.runCommands\" value=\"# Set flash parallelism mode to 32, 16, or 8 bit when using STM32 F2/F4 microcontrollers&#xD;&#xA;# 2=32 bit, 1=16 bit and 0=8 bit parallelism mode&#xD;&#xA;monitor flash set_parallelism_mode 2&#xD;&#xA;&#xD;&#xA;# Load the program executable&#xD;&#xA;load&#x9;&#x9;&#xD;&#xA;&#xD;&#xA;# Enable Debug connection in low power modes (DBGMCU-&gt;CR)&#xD;&#xA;set *0xE0042004 = (*0xE0042004) | 0x7&#xD;&#xA;# Set a breakpoint at main().&#xD;&#xA;tbreak main&#xD;&#xA;&#xD;&#xA;# Run to the breakpoint.&#xD;&#xA;continue\" />\n   18  <stringAttribute key=\"com.atollic.hardwaredebug.launch.serverParam\" value=\"-p 61234 -l 1 -d\" />\n   19  <booleanAttribute key=\"com.atollic.hardwaredebug.launch.startServer\" value=\"true\" />\n   ..\n   24  <booleanAttribute key=\"com.atollic.hardwaredebug.launch.swv_wait_for_sync\" value=\"true\" />\n   25  <booleanAttribute key=\"com.atollic.hardwaredebug.launch.useRemoteTarget\" value=\"true\" />\n   26: <stringAttribute key=\"com.atollic.hardwaredebug.launch.verifyCommands\" value=\"# Set flash parallelism mode to 32, 16, or 8 bit when using STM32 F2/F4 microcontrollers&#xD;&#xA;# 2=32 bit, 1=16 bit and 0=8 bit parallelism mode&#xD;&#xA;monitor flash set_parallelism_mode 2&#xD;&#xA;&#xD;&#xA;# Load the program executable&#xD;&#xA;load&#x9;&#x9;&#xD;&#xA;&#xD;&#xA;# Enable Debug connection in low power modes (DBGMCU-&gt;CR)&#xD;&#xA;set *0xE0042004 = (*0xE0042004) | 0x7&#xD;&#xA;# The executable starts automatically\" />\n   27  <booleanAttribute key=\"com.atollic.hardwaredebug.stlink.enable_logging\" value=\"false\" />\n   28  <stringAttribute key=\"com.atollic.hardwaredebug.stlink.log_file\" value=\"D:/WorkSTM32/stm32_PPM_F103//TrueSTUDIO/stm32_PPM_F103 Configuration\\Debug\\st-link_gdbserver_log.txt\" />\n\n958 matches across 21 files\n\n\nSearching 130 files for \"__HAL_TIM_GET_FLAG\"\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal_tim.h:\n 1309    * @retval The new state of __FLAG__ (TRUE or FALSE).\n 1310    */\n 1311: #define __HAL_TIM_GET_FLAG(__HANDLE__, __FLAG__)          (((__HANDLE__)->Instance->SR &(__FLAG__)) == (__FLAG__))\n 1312  \n 1313  /**\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_tim.c:\n 2729  {\n 2730    /* Capture compare 1 event */\n 2731:   if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)\n 2732    {\n 2733      if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)\n ....\n 2753    }\n 2754    /* Capture compare 2 event */\n 2755:   if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)\n 2756    {\n 2757      if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)\n ....\n 2774    }\n 2775    /* Capture compare 3 event */\n 2776:   if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)\n 2777    {\n 2778      if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)\n ....\n 2795    }\n 2796    /* Capture compare 4 event */\n 2797:   if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)\n 2798    {\n 2799      if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)\n ....\n 2816    }\n 2817    /* TIM Update event */\n 2818:   if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)\n 2819    {\n 2820      if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)\n ....\n 2825    }\n 2826    /* TIM Break input event */\n 2827:   if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)\n 2828    {\n 2829      if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)\n ....\n 2834    }\n 2835    /* TIM Trigger detection event */\n 2836:   if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)\n 2837    {\n 2838      if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)\n ....\n 2843    }\n 2844    /* TIM commutation event */\n 2845:   if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)\n 2846    {\n 2847      if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)\n\n9 matches across 2 files\n\n\nSearching 130 files for \"reset\"\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f100xb.h:\n  398  \n  399  /** \n  400:   * @brief Reset and Clock Control\n  401    */\n  402  \n  ...\n  698  \n  699  /********************  Bit definition for CRC_CR register  ********************/\n  700: #define  CRC_CR_RESET                        ((uint32_t)0x00000001)        /*!< RESET bit */\n  701  \n  702  /******************************************************************************/\n  ...\n  794  /******************************************************************************/\n  795  /*                                                                            */\n  796: /*                         Reset and Clock Control                            */\n  797  /*                                                                            */\n  798  /******************************************************************************/\n  ...\n  944  \n  945  /*****************  Bit definition for RCC_APB2RSTR register  *****************/\n  946: #define  RCC_APB2RSTR_AFIORST                ((uint32_t)0x00000001)        /*!< Alternate Function I/O reset */\n  947: #define  RCC_APB2RSTR_IOPARST                ((uint32_t)0x00000004)        /*!< I/O port A reset */\n  948: #define  RCC_APB2RSTR_IOPBRST                ((uint32_t)0x00000008)        /*!< I/O port B reset */\n  949: #define  RCC_APB2RSTR_IOPCRST                ((uint32_t)0x00000010)        /*!< I/O port C reset */\n  950: #define  RCC_APB2RSTR_IOPDRST                ((uint32_t)0x00000020)        /*!< I/O port D reset */\n  951: #define  RCC_APB2RSTR_ADC1RST                ((uint32_t)0x00000200)        /*!< ADC 1 interface reset */\n  952  \n  953  \n  954: #define  RCC_APB2RSTR_TIM1RST                ((uint32_t)0x00000800)        /*!< TIM1 Timer reset */\n  955: #define  RCC_APB2RSTR_SPI1RST                ((uint32_t)0x00001000)        /*!< SPI 1 reset */\n  956: #define  RCC_APB2RSTR_USART1RST              ((uint32_t)0x00004000)        /*!< USART1 reset */\n  957  \n  958: #define  RCC_APB2RSTR_TIM15RST               ((uint32_t)0x00010000)        /*!< TIM15 Timer reset */\n  959: #define  RCC_APB2RSTR_TIM16RST               ((uint32_t)0x00020000)        /*!< TIM16 Timer reset */\n  960: #define  RCC_APB2RSTR_TIM17RST               ((uint32_t)0x00040000)        /*!< TIM17 Timer reset */\n  961  \n  962: #define  RCC_APB2RSTR_IOPERST               ((uint32_t)0x00000040)        /*!< I/O port E reset */\n  963  \n  964  \n  ...\n  966  \n  967  /*****************  Bit definition for RCC_APB1RSTR register  *****************/\n  968: #define  RCC_APB1RSTR_TIM2RST                ((uint32_t)0x00000001)        /*!< Timer 2 reset */\n  969: #define  RCC_APB1RSTR_TIM3RST                ((uint32_t)0x00000002)        /*!< Timer 3 reset */\n  970: #define  RCC_APB1RSTR_WWDGRST                ((uint32_t)0x00000800)        /*!< Window Watchdog reset */\n  971: #define  RCC_APB1RSTR_USART2RST              ((uint32_t)0x00020000)        /*!< USART 2 reset */\n  972: #define  RCC_APB1RSTR_I2C1RST                ((uint32_t)0x00200000)        /*!< I2C 1 reset */\n  973  \n  974  \n  975: #define  RCC_APB1RSTR_BKPRST                 ((uint32_t)0x08000000)        /*!< Backup interface reset */\n  976: #define  RCC_APB1RSTR_PWRRST                 ((uint32_t)0x10000000)        /*!< Power interface reset */\n  977  \n  978: #define  RCC_APB1RSTR_TIM4RST               ((uint32_t)0x00000004)        /*!< Timer 4 reset */\n  979: #define  RCC_APB1RSTR_SPI2RST               ((uint32_t)0x00004000)        /*!< SPI 2 reset */\n  980: #define  RCC_APB1RSTR_USART3RST             ((uint32_t)0x00040000)        /*!< USART 3 reset */\n  981: #define  RCC_APB1RSTR_I2C2RST               ((uint32_t)0x00400000)        /*!< I2C 2 reset */\n  982  \n  983  \n  984  \n  985: #define  RCC_APB1RSTR_TIM6RST                ((uint32_t)0x00000010)        /*!< Timer 6 reset */\n  986: #define  RCC_APB1RSTR_TIM7RST                ((uint32_t)0x00000020)        /*!< Timer 7 reset */\n  987: #define  RCC_APB1RSTR_CECRST                 ((uint32_t)0x40000000)        /*!< CEC interface reset */ \n  988  \n  989  \n  990  \n  991: #define  RCC_APB1RSTR_DACRST                 ((uint32_t)0x20000000)        /*!< DAC interface reset */\n  992  \n  993  /******************  Bit definition for RCC_AHBENR register  ******************/\n  ...\n 1064  \n 1065  #define  RCC_BDCR_RTCEN                      ((uint32_t)0x00008000)        /*!< RTC clock enable */\n 1066: #define  RCC_BDCR_BDRST                      ((uint32_t)0x00010000)        /*!< Backup domain software reset  */\n 1067  \n 1068  /*******************  Bit definition for RCC_CSR register  ********************/  \n 1069  #define  RCC_CSR_LSION                       ((uint32_t)0x00000001)        /*!< Internal Low Speed oscillator enable */\n 1070  #define  RCC_CSR_LSIRDY                      ((uint32_t)0x00000002)        /*!< Internal Low Speed oscillator Ready */\n 1071: #define  RCC_CSR_RMVF                        ((uint32_t)0x01000000)        /*!< Remove reset flag */\n 1072: #define  RCC_CSR_PINRSTF                     ((uint32_t)0x04000000)        /*!< PIN reset flag */\n 1073: #define  RCC_CSR_PORRSTF                     ((uint32_t)0x08000000)        /*!< POR/PDR reset flag */\n 1074: #define  RCC_CSR_SFTRSTF                     ((uint32_t)0x10000000)        /*!< Software Reset flag */\n 1075: #define  RCC_CSR_IWDGRSTF                    ((uint32_t)0x20000000)        /*!< Independent Watchdog reset flag */\n 1076: #define  RCC_CSR_WWDGRSTF                    ((uint32_t)0x40000000)        /*!< Window watchdog reset flag */\n 1077: #define  RCC_CSR_LPWRRSTF                    ((uint32_t)0x80000000)        /*!< Low-Power reset flag */\n 1078  \n 1079  \n ....\n 1301  #define GPIO_BSRR_BS15                       ((uint32_t)0x00008000)        /*!< Port x Set bit 15 */\n 1302  \n 1303: #define GPIO_BSRR_BR0                        ((uint32_t)0x00010000)        /*!< Port x Reset bit 0 */\n 1304: #define GPIO_BSRR_BR1                        ((uint32_t)0x00020000)        /*!< Port x Reset bit 1 */\n 1305: #define GPIO_BSRR_BR2                        ((uint32_t)0x00040000)        /*!< Port x Reset bit 2 */\n 1306: #define GPIO_BSRR_BR3                        ((uint32_t)0x00080000)        /*!< Port x Reset bit 3 */\n 1307: #define GPIO_BSRR_BR4                        ((uint32_t)0x00100000)        /*!< Port x Reset bit 4 */\n 1308: #define GPIO_BSRR_BR5                        ((uint32_t)0x00200000)        /*!< Port x Reset bit 5 */\n 1309: #define GPIO_BSRR_BR6                        ((uint32_t)0x00400000)        /*!< Port x Reset bit 6 */\n 1310: #define GPIO_BSRR_BR7                        ((uint32_t)0x00800000)        /*!< Port x Reset bit 7 */\n 1311: #define GPIO_BSRR_BR8                        ((uint32_t)0x01000000)        /*!< Port x Reset bit 8 */\n 1312: #define GPIO_BSRR_BR9                        ((uint32_t)0x02000000)        /*!< Port x Reset bit 9 */\n 1313: #define GPIO_BSRR_BR10                       ((uint32_t)0x04000000)        /*!< Port x Reset bit 10 */\n 1314: #define GPIO_BSRR_BR11                       ((uint32_t)0x08000000)        /*!< Port x Reset bit 11 */\n 1315: #define GPIO_BSRR_BR12                       ((uint32_t)0x10000000)        /*!< Port x Reset bit 12 */\n 1316: #define GPIO_BSRR_BR13                       ((uint32_t)0x20000000)        /*!< Port x Reset bit 13 */\n 1317: #define GPIO_BSRR_BR14                       ((uint32_t)0x40000000)        /*!< Port x Reset bit 14 */\n 1318: #define GPIO_BSRR_BR15                       ((uint32_t)0x80000000)        /*!< Port x Reset bit 15 */\n 1319  \n 1320  /*******************  Bit definition for GPIO_BRR register  *******************/\n 1321: #define GPIO_BRR_BR0                         ((uint32_t)0x0001)            /*!< Port x Reset bit 0 */\n 1322: #define GPIO_BRR_BR1                         ((uint32_t)0x0002)            /*!< Port x Reset bit 1 */\n 1323: #define GPIO_BRR_BR2                         ((uint32_t)0x0004)            /*!< Port x Reset bit 2 */\n 1324: #define GPIO_BRR_BR3                         ((uint32_t)0x0008)            /*!< Port x Reset bit 3 */\n 1325: #define GPIO_BRR_BR4                         ((uint32_t)0x0010)            /*!< Port x Reset bit 4 */\n 1326: #define GPIO_BRR_BR5                         ((uint32_t)0x0020)            /*!< Port x Reset bit 5 */\n 1327: #define GPIO_BRR_BR6                         ((uint32_t)0x0040)            /*!< Port x Reset bit 6 */\n 1328: #define GPIO_BRR_BR7                         ((uint32_t)0x0080)            /*!< Port x Reset bit 7 */\n 1329: #define GPIO_BRR_BR8                         ((uint32_t)0x0100)            /*!< Port x Reset bit 8 */\n 1330: #define GPIO_BRR_BR9                         ((uint32_t)0x0200)            /*!< Port x Reset bit 9 */\n 1331: #define GPIO_BRR_BR10                        ((uint32_t)0x0400)            /*!< Port x Reset bit 10 */\n 1332: #define GPIO_BRR_BR11                        ((uint32_t)0x0800)            /*!< Port x Reset bit 11 */\n 1333: #define GPIO_BRR_BR12                        ((uint32_t)0x1000)            /*!< Port x Reset bit 12 */\n 1334: #define GPIO_BRR_BR13                        ((uint32_t)0x2000)            /*!< Port x Reset bit 13 */\n 1335: #define GPIO_BRR_BR14                        ((uint32_t)0x4000)            /*!< Port x Reset bit 14 */\n 1336: #define GPIO_BRR_BR15                        ((uint32_t)0x8000)            /*!< Port x Reset bit 15 */\n 1337  \n 1338  /******************  Bit definition for GPIO_LCKR register  *******************/\n ....\n 1450  #define AFIO_MAPR_SWJ_CFG_2                  ((uint32_t)0x04000000)        /*!< Bit 2 */\n 1451  \n 1452: #define AFIO_MAPR_SWJ_CFG_RESET              ((uint32_t)0x00000000)        /*!< Full SWJ (JTAG-DP + SW-DP) : Reset State */\n 1453  #define AFIO_MAPR_SWJ_CFG_NOJNTRST           ((uint32_t)0x01000000)        /*!< Full SWJ (JTAG-DP + SW-DP) but without JNTRST */\n 1454  #define AFIO_MAPR_SWJ_CFG_JTAGDISABLE        ((uint32_t)0x02000000)        /*!< JTAG-DP Disabled and SW-DP Enabled */\n ....\n 1910  \n 1911  /*!<*****************  Bit definition for SCB_AIRCR register  *******************/\n 1912: #define  SCB_AIRCR_VECTRESET                 ((uint32_t)0x00000001)        /*!< System Reset bit */\n 1913  #define  SCB_AIRCR_VECTCLRACTIVE             ((uint32_t)0x00000002)        /*!< Clear active vector bit */\n 1914: #define  SCB_AIRCR_SYSRESETREQ               ((uint32_t)0x00000004)        /*!< Requests chip control logic to generate a reset */\n 1915  \n 1916  #define  SCB_AIRCR_PRIGROUP                  ((uint32_t)0x00000700)        /*!< PRIGROUP[2:0] bits (Priority group) */\n ....\n 2290  #define  ADC_CR2_CONT                        ((uint32_t)0x00000002)        /*!< Continuous Conversion */\n 2291  #define  ADC_CR2_CAL                         ((uint32_t)0x00000004)        /*!< A/D Calibration */\n 2292: #define  ADC_CR2_RSTCAL                      ((uint32_t)0x00000008)        /*!< Reset Calibration */\n 2293  #define  ADC_CR2_DMA                         ((uint32_t)0x00000100)        /*!< Direct Memory access mode */\n 2294  #define  ADC_CR2_ALIGN                       ((uint32_t)0x00000800)        /*!< Data Alignment */\n ....\n 3368  #define  I2C_CR1_PEC                         ((uint32_t)0x00001000)        /*!< Packet Error Checking */\n 3369  #define  I2C_CR1_ALERT                       ((uint32_t)0x00002000)        /*!< SMBus Alert */\n 3370: #define  I2C_CR1_SWRST                       ((uint32_t)0x00008000)        /*!< Software Reset */\n 3371  \n 3372  /*******************  Bit definition for I2C_CR2 register  ********************/\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f100xe.h:\n  464  \n  465  /** \n  466:   * @brief Reset and Clock Control\n  467    */\n  468  \n  ...\n  807  \n  808  /********************  Bit definition for CRC_CR register  ********************/\n  809: #define  CRC_CR_RESET                        ((uint32_t)0x00000001)        /*!< RESET bit */\n  810  \n  811  /******************************************************************************/\n  ...\n  999  /******************************************************************************/\n 1000  /*                                                                            */\n 1001: /*                         Reset and Clock Control                            */\n 1002  /*                                                                            */\n 1003  /******************************************************************************/\n ....\n 1149  \n 1150  /*****************  Bit definition for RCC_APB2RSTR register  *****************/\n 1151: #define  RCC_APB2RSTR_AFIORST                ((uint32_t)0x00000001)        /*!< Alternate Function I/O reset */\n 1152: #define  RCC_APB2RSTR_IOPARST                ((uint32_t)0x00000004)        /*!< I/O port A reset */\n 1153: #define  RCC_APB2RSTR_IOPBRST                ((uint32_t)0x00000008)        /*!< I/O port B reset */\n 1154: #define  RCC_APB2RSTR_IOPCRST                ((uint32_t)0x00000010)        /*!< I/O port C reset */\n 1155: #define  RCC_APB2RSTR_IOPDRST                ((uint32_t)0x00000020)        /*!< I/O port D reset */\n 1156: #define  RCC_APB2RSTR_ADC1RST                ((uint32_t)0x00000200)        /*!< ADC 1 interface reset */\n 1157  \n 1158  \n 1159: #define  RCC_APB2RSTR_TIM1RST                ((uint32_t)0x00000800)        /*!< TIM1 Timer reset */\n 1160: #define  RCC_APB2RSTR_SPI1RST                ((uint32_t)0x00001000)        /*!< SPI 1 reset */\n 1161: #define  RCC_APB2RSTR_USART1RST              ((uint32_t)0x00004000)        /*!< USART1 reset */\n 1162  \n 1163: #define  RCC_APB2RSTR_TIM15RST               ((uint32_t)0x00010000)        /*!< TIM15 Timer reset */\n 1164: #define  RCC_APB2RSTR_TIM16RST               ((uint32_t)0x00020000)        /*!< TIM16 Timer reset */\n 1165: #define  RCC_APB2RSTR_TIM17RST               ((uint32_t)0x00040000)        /*!< TIM17 Timer reset */\n 1166  \n 1167: #define  RCC_APB2RSTR_IOPERST               ((uint32_t)0x00000040)        /*!< I/O port E reset */\n 1168  \n 1169  \n 1170: #define  RCC_APB2RSTR_IOPFRST               ((uint32_t)0x00000080)        /*!< I/O port F reset */\n 1171: #define  RCC_APB2RSTR_IOPGRST               ((uint32_t)0x00000100)        /*!< I/O port G reset */\n 1172  \n 1173  \n 1174  /*****************  Bit definition for RCC_APB1RSTR register  *****************/\n 1175: #define  RCC_APB1RSTR_TIM2RST                ((uint32_t)0x00000001)        /*!< Timer 2 reset */\n 1176: #define  RCC_APB1RSTR_TIM3RST                ((uint32_t)0x00000002)        /*!< Timer 3 reset */\n 1177: #define  RCC_APB1RSTR_WWDGRST                ((uint32_t)0x00000800)        /*!< Window Watchdog reset */\n 1178: #define  RCC_APB1RSTR_USART2RST              ((uint32_t)0x00020000)        /*!< USART 2 reset */\n 1179: #define  RCC_APB1RSTR_I2C1RST                ((uint32_t)0x00200000)        /*!< I2C 1 reset */\n 1180  \n 1181  \n 1182: #define  RCC_APB1RSTR_BKPRST                 ((uint32_t)0x08000000)        /*!< Backup interface reset */\n 1183: #define  RCC_APB1RSTR_PWRRST                 ((uint32_t)0x10000000)        /*!< Power interface reset */\n 1184  \n 1185: #define  RCC_APB1RSTR_TIM4RST               ((uint32_t)0x00000004)        /*!< Timer 4 reset */\n 1186: #define  RCC_APB1RSTR_SPI2RST               ((uint32_t)0x00004000)        /*!< SPI 2 reset */\n 1187: #define  RCC_APB1RSTR_USART3RST             ((uint32_t)0x00040000)        /*!< USART 3 reset */\n 1188: #define  RCC_APB1RSTR_I2C2RST               ((uint32_t)0x00400000)        /*!< I2C 2 reset */\n 1189  \n 1190  \n 1191  \n 1192: #define  RCC_APB1RSTR_TIM6RST                ((uint32_t)0x00000010)        /*!< Timer 6 reset */\n 1193: #define  RCC_APB1RSTR_TIM7RST                ((uint32_t)0x00000020)        /*!< Timer 7 reset */\n 1194: #define  RCC_APB1RSTR_CECRST                 ((uint32_t)0x40000000)        /*!< CEC interface reset */ \n 1195  \n 1196: #define  RCC_APB1RSTR_TIM5RST                ((uint32_t)0x00000008)        /*!< Timer 5 reset */\n 1197: #define  RCC_APB1RSTR_TIM12RST               ((uint32_t)0x00000040)        /*!< TIM12 Timer reset */\n 1198: #define  RCC_APB1RSTR_TIM13RST               ((uint32_t)0x00000080)        /*!< TIM13 Timer reset */\n 1199: #define  RCC_APB1RSTR_TIM14RST               ((uint32_t)0x00000100)        /*!< TIM14 Timer reset */\n 1200: #define  RCC_APB1RSTR_SPI3RST                ((uint32_t)0x00008000)        /*!< SPI 3 reset */ \n 1201: #define  RCC_APB1RSTR_UART4RST               ((uint32_t)0x00080000)        /*!< UART 4 reset */\n 1202: #define  RCC_APB1RSTR_UART5RST               ((uint32_t)0x00100000)        /*!< UART 5 reset */ \n 1203  \n 1204  \n 1205: #define  RCC_APB1RSTR_DACRST                 ((uint32_t)0x20000000)        /*!< DAC interface reset */\n 1206  \n 1207  /******************  Bit definition for RCC_AHBENR register  ******************/\n ....\n 1289  \n 1290  #define  RCC_BDCR_RTCEN                      ((uint32_t)0x00008000)        /*!< RTC clock enable */\n 1291: #define  RCC_BDCR_BDRST                      ((uint32_t)0x00010000)        /*!< Backup domain software reset  */\n 1292  \n 1293  /*******************  Bit definition for RCC_CSR register  ********************/  \n 1294  #define  RCC_CSR_LSION                       ((uint32_t)0x00000001)        /*!< Internal Low Speed oscillator enable */\n 1295  #define  RCC_CSR_LSIRDY                      ((uint32_t)0x00000002)        /*!< Internal Low Speed oscillator Ready */\n 1296: #define  RCC_CSR_RMVF                        ((uint32_t)0x01000000)        /*!< Remove reset flag */\n 1297: #define  RCC_CSR_PINRSTF                     ((uint32_t)0x04000000)        /*!< PIN reset flag */\n 1298: #define  RCC_CSR_PORRSTF                     ((uint32_t)0x08000000)        /*!< POR/PDR reset flag */\n 1299: #define  RCC_CSR_SFTRSTF                     ((uint32_t)0x10000000)        /*!< Software Reset flag */\n 1300: #define  RCC_CSR_IWDGRSTF                    ((uint32_t)0x20000000)        /*!< Independent Watchdog reset flag */\n 1301: #define  RCC_CSR_WWDGRSTF                    ((uint32_t)0x40000000)        /*!< Window watchdog reset flag */\n 1302: #define  RCC_CSR_LPWRRSTF                    ((uint32_t)0x80000000)        /*!< Low-Power reset flag */\n 1303  \n 1304  \n ....\n 1526  #define GPIO_BSRR_BS15                       ((uint32_t)0x00008000)        /*!< Port x Set bit 15 */\n 1527  \n 1528: #define GPIO_BSRR_BR0                        ((uint32_t)0x00010000)        /*!< Port x Reset bit 0 */\n 1529: #define GPIO_BSRR_BR1                        ((uint32_t)0x00020000)        /*!< Port x Reset bit 1 */\n 1530: #define GPIO_BSRR_BR2                        ((uint32_t)0x00040000)        /*!< Port x Reset bit 2 */\n 1531: #define GPIO_BSRR_BR3                        ((uint32_t)0x00080000)        /*!< Port x Reset bit 3 */\n 1532: #define GPIO_BSRR_BR4                        ((uint32_t)0x00100000)        /*!< Port x Reset bit 4 */\n 1533: #define GPIO_BSRR_BR5                        ((uint32_t)0x00200000)        /*!< Port x Reset bit 5 */\n 1534: #define GPIO_BSRR_BR6                        ((uint32_t)0x00400000)        /*!< Port x Reset bit 6 */\n 1535: #define GPIO_BSRR_BR7                        ((uint32_t)0x00800000)        /*!< Port x Reset bit 7 */\n 1536: #define GPIO_BSRR_BR8                        ((uint32_t)0x01000000)        /*!< Port x Reset bit 8 */\n 1537: #define GPIO_BSRR_BR9                        ((uint32_t)0x02000000)        /*!< Port x Reset bit 9 */\n 1538: #define GPIO_BSRR_BR10                       ((uint32_t)0x04000000)        /*!< Port x Reset bit 10 */\n 1539: #define GPIO_BSRR_BR11                       ((uint32_t)0x08000000)        /*!< Port x Reset bit 11 */\n 1540: #define GPIO_BSRR_BR12                       ((uint32_t)0x10000000)        /*!< Port x Reset bit 12 */\n 1541: #define GPIO_BSRR_BR13                       ((uint32_t)0x20000000)        /*!< Port x Reset bit 13 */\n 1542: #define GPIO_BSRR_BR14                       ((uint32_t)0x40000000)        /*!< Port x Reset bit 14 */\n 1543: #define GPIO_BSRR_BR15                       ((uint32_t)0x80000000)        /*!< Port x Reset bit 15 */\n 1544  \n 1545  /*******************  Bit definition for GPIO_BRR register  *******************/\n 1546: #define GPIO_BRR_BR0                         ((uint32_t)0x0001)            /*!< Port x Reset bit 0 */\n 1547: #define GPIO_BRR_BR1                         ((uint32_t)0x0002)            /*!< Port x Reset bit 1 */\n 1548: #define GPIO_BRR_BR2                         ((uint32_t)0x0004)            /*!< Port x Reset bit 2 */\n 1549: #define GPIO_BRR_BR3                         ((uint32_t)0x0008)            /*!< Port x Reset bit 3 */\n 1550: #define GPIO_BRR_BR4                         ((uint32_t)0x0010)            /*!< Port x Reset bit 4 */\n 1551: #define GPIO_BRR_BR5                         ((uint32_t)0x0020)            /*!< Port x Reset bit 5 */\n 1552: #define GPIO_BRR_BR6                         ((uint32_t)0x0040)            /*!< Port x Reset bit 6 */\n 1553: #define GPIO_BRR_BR7                         ((uint32_t)0x0080)            /*!< Port x Reset bit 7 */\n 1554: #define GPIO_BRR_BR8                         ((uint32_t)0x0100)            /*!< Port x Reset bit 8 */\n 1555: #define GPIO_BRR_BR9                         ((uint32_t)0x0200)            /*!< Port x Reset bit 9 */\n 1556: #define GPIO_BRR_BR10                        ((uint32_t)0x0400)            /*!< Port x Reset bit 10 */\n 1557: #define GPIO_BRR_BR11                        ((uint32_t)0x0800)            /*!< Port x Reset bit 11 */\n 1558: #define GPIO_BRR_BR12                        ((uint32_t)0x1000)            /*!< Port x Reset bit 12 */\n 1559: #define GPIO_BRR_BR13                        ((uint32_t)0x2000)            /*!< Port x Reset bit 13 */\n 1560: #define GPIO_BRR_BR14                        ((uint32_t)0x4000)            /*!< Port x Reset bit 14 */\n 1561: #define GPIO_BRR_BR15                        ((uint32_t)0x8000)            /*!< Port x Reset bit 15 */\n 1562  \n 1563  /******************  Bit definition for GPIO_LCKR register  *******************/\n ....\n 1676  #define AFIO_MAPR_SWJ_CFG_2                  ((uint32_t)0x04000000)        /*!< Bit 2 */\n 1677  \n 1678: #define AFIO_MAPR_SWJ_CFG_RESET              ((uint32_t)0x00000000)        /*!< Full SWJ (JTAG-DP + SW-DP) : Reset State */\n 1679  #define AFIO_MAPR_SWJ_CFG_NOJNTRST           ((uint32_t)0x01000000)        /*!< Full SWJ (JTAG-DP + SW-DP) but without JNTRST */\n 1680  #define AFIO_MAPR_SWJ_CFG_JTAGDISABLE        ((uint32_t)0x02000000)        /*!< JTAG-DP Disabled and SW-DP Enabled */\n ....\n 2141  \n 2142  /*!<*****************  Bit definition for SCB_AIRCR register  *******************/\n 2143: #define  SCB_AIRCR_VECTRESET                 ((uint32_t)0x00000001)        /*!< System Reset bit */\n 2144  #define  SCB_AIRCR_VECTCLRACTIVE             ((uint32_t)0x00000002)        /*!< Clear active vector bit */\n 2145: #define  SCB_AIRCR_SYSRESETREQ               ((uint32_t)0x00000004)        /*!< Requests chip control logic to generate a reset */\n 2146  \n 2147  #define  SCB_AIRCR_PRIGROUP                  ((uint32_t)0x00000700)        /*!< PRIGROUP[2:0] bits (Priority group) */\n ....\n 2521  #define  ADC_CR2_CONT                        ((uint32_t)0x00000002)        /*!< Continuous Conversion */\n 2522  #define  ADC_CR2_CAL                         ((uint32_t)0x00000004)        /*!< A/D Calibration */\n 2523: #define  ADC_CR2_RSTCAL                      ((uint32_t)0x00000008)        /*!< Reset Calibration */\n 2524  #define  ADC_CR2_DMA                         ((uint32_t)0x00000100)        /*!< Direct Memory access mode */\n 2525  #define  ADC_CR2_ALIGN                       ((uint32_t)0x00000800)        /*!< Data Alignment */\n ....\n 3712  #define  I2C_CR1_PEC                         ((uint32_t)0x00001000)        /*!< Packet Error Checking */\n 3713  #define  I2C_CR1_ALERT                       ((uint32_t)0x00002000)        /*!< SMBus Alert */\n 3714: #define  I2C_CR1_SWRST                       ((uint32_t)0x00008000)        /*!< Software Reset */\n 3715  \n 3716  /*******************  Bit definition for I2C_CR2 register  ********************/\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f101x6.h:\n  351  \n  352  /** \n  353:   * @brief Reset and Clock Control\n  354    */\n  355  \n  ...\n  624  \n  625  /********************  Bit definition for CRC_CR register  ********************/\n  626: #define  CRC_CR_RESET                        ((uint32_t)0x00000001)        /*!< RESET bit */\n  627  \n  628  /******************************************************************************/\n  ...\n  720  /******************************************************************************/\n  721  /*                                                                            */\n  722: /*                         Reset and Clock Control                            */\n  723  /*                                                                            */\n  724  /******************************************************************************/\n  ...\n  870  \n  871  /*****************  Bit definition for RCC_APB2RSTR register  *****************/\n  872: #define  RCC_APB2RSTR_AFIORST                ((uint32_t)0x00000001)        /*!< Alternate Function I/O reset */\n  873: #define  RCC_APB2RSTR_IOPARST                ((uint32_t)0x00000004)        /*!< I/O port A reset */\n  874: #define  RCC_APB2RSTR_IOPBRST                ((uint32_t)0x00000008)        /*!< I/O port B reset */\n  875: #define  RCC_APB2RSTR_IOPCRST                ((uint32_t)0x00000010)        /*!< I/O port C reset */\n  876: #define  RCC_APB2RSTR_IOPDRST                ((uint32_t)0x00000020)        /*!< I/O port D reset */\n  877: #define  RCC_APB2RSTR_ADC1RST                ((uint32_t)0x00000200)        /*!< ADC 1 interface reset */\n  878  \n  879  \n  880: #define  RCC_APB2RSTR_TIM1RST                ((uint32_t)0x00000800)        /*!< TIM1 Timer reset */\n  881: #define  RCC_APB2RSTR_SPI1RST                ((uint32_t)0x00001000)        /*!< SPI 1 reset */\n  882: #define  RCC_APB2RSTR_USART1RST              ((uint32_t)0x00004000)        /*!< USART1 reset */\n  883  \n  884  \n  ...\n  888  \n  889  /*****************  Bit definition for RCC_APB1RSTR register  *****************/\n  890: #define  RCC_APB1RSTR_TIM2RST                ((uint32_t)0x00000001)        /*!< Timer 2 reset */\n  891: #define  RCC_APB1RSTR_TIM3RST                ((uint32_t)0x00000002)        /*!< Timer 3 reset */\n  892: #define  RCC_APB1RSTR_WWDGRST                ((uint32_t)0x00000800)        /*!< Window Watchdog reset */\n  893: #define  RCC_APB1RSTR_USART2RST              ((uint32_t)0x00020000)        /*!< USART 2 reset */\n  894: #define  RCC_APB1RSTR_I2C1RST                ((uint32_t)0x00200000)        /*!< I2C 1 reset */\n  895  \n  896  \n  897: #define  RCC_APB1RSTR_BKPRST                 ((uint32_t)0x08000000)        /*!< Backup interface reset */\n  898: #define  RCC_APB1RSTR_PWRRST                 ((uint32_t)0x10000000)        /*!< Power interface reset */\n  899  \n  900  \n  ...\n  966  \n  967  #define  RCC_BDCR_RTCEN                      ((uint32_t)0x00008000)        /*!< RTC clock enable */\n  968: #define  RCC_BDCR_BDRST                      ((uint32_t)0x00010000)        /*!< Backup domain software reset  */\n  969  \n  970  /*******************  Bit definition for RCC_CSR register  ********************/  \n  971  #define  RCC_CSR_LSION                       ((uint32_t)0x00000001)        /*!< Internal Low Speed oscillator enable */\n  972  #define  RCC_CSR_LSIRDY                      ((uint32_t)0x00000002)        /*!< Internal Low Speed oscillator Ready */\n  973: #define  RCC_CSR_RMVF                        ((uint32_t)0x01000000)        /*!< Remove reset flag */\n  974: #define  RCC_CSR_PINRSTF                     ((uint32_t)0x04000000)        /*!< PIN reset flag */\n  975: #define  RCC_CSR_PORRSTF                     ((uint32_t)0x08000000)        /*!< POR/PDR reset flag */\n  976: #define  RCC_CSR_SFTRSTF                     ((uint32_t)0x10000000)        /*!< Software Reset flag */\n  977: #define  RCC_CSR_IWDGRSTF                    ((uint32_t)0x20000000)        /*!< Independent Watchdog reset flag */\n  978: #define  RCC_CSR_WWDGRSTF                    ((uint32_t)0x40000000)        /*!< Window watchdog reset flag */\n  979: #define  RCC_CSR_LPWRRSTF                    ((uint32_t)0x80000000)        /*!< Low-Power reset flag */\n  980  \n  981  \n  ...\n 1179  #define GPIO_BSRR_BS15                       ((uint32_t)0x00008000)        /*!< Port x Set bit 15 */\n 1180  \n 1181: #define GPIO_BSRR_BR0                        ((uint32_t)0x00010000)        /*!< Port x Reset bit 0 */\n 1182: #define GPIO_BSRR_BR1                        ((uint32_t)0x00020000)        /*!< Port x Reset bit 1 */\n 1183: #define GPIO_BSRR_BR2                        ((uint32_t)0x00040000)        /*!< Port x Reset bit 2 */\n 1184: #define GPIO_BSRR_BR3                        ((uint32_t)0x00080000)        /*!< Port x Reset bit 3 */\n 1185: #define GPIO_BSRR_BR4                        ((uint32_t)0x00100000)        /*!< Port x Reset bit 4 */\n 1186: #define GPIO_BSRR_BR5                        ((uint32_t)0x00200000)        /*!< Port x Reset bit 5 */\n 1187: #define GPIO_BSRR_BR6                        ((uint32_t)0x00400000)        /*!< Port x Reset bit 6 */\n 1188: #define GPIO_BSRR_BR7                        ((uint32_t)0x00800000)        /*!< Port x Reset bit 7 */\n 1189: #define GPIO_BSRR_BR8                        ((uint32_t)0x01000000)        /*!< Port x Reset bit 8 */\n 1190: #define GPIO_BSRR_BR9                        ((uint32_t)0x02000000)        /*!< Port x Reset bit 9 */\n 1191: #define GPIO_BSRR_BR10                       ((uint32_t)0x04000000)        /*!< Port x Reset bit 10 */\n 1192: #define GPIO_BSRR_BR11                       ((uint32_t)0x08000000)        /*!< Port x Reset bit 11 */\n 1193: #define GPIO_BSRR_BR12                       ((uint32_t)0x10000000)        /*!< Port x Reset bit 12 */\n 1194: #define GPIO_BSRR_BR13                       ((uint32_t)0x20000000)        /*!< Port x Reset bit 13 */\n 1195: #define GPIO_BSRR_BR14                       ((uint32_t)0x40000000)        /*!< Port x Reset bit 14 */\n 1196: #define GPIO_BSRR_BR15                       ((uint32_t)0x80000000)        /*!< Port x Reset bit 15 */\n 1197  \n 1198  /*******************  Bit definition for GPIO_BRR register  *******************/\n 1199: #define GPIO_BRR_BR0                         ((uint32_t)0x0001)            /*!< Port x Reset bit 0 */\n 1200: #define GPIO_BRR_BR1                         ((uint32_t)0x0002)            /*!< Port x Reset bit 1 */\n 1201: #define GPIO_BRR_BR2                         ((uint32_t)0x0004)            /*!< Port x Reset bit 2 */\n 1202: #define GPIO_BRR_BR3                         ((uint32_t)0x0008)            /*!< Port x Reset bit 3 */\n 1203: #define GPIO_BRR_BR4                         ((uint32_t)0x0010)            /*!< Port x Reset bit 4 */\n 1204: #define GPIO_BRR_BR5                         ((uint32_t)0x0020)            /*!< Port x Reset bit 5 */\n 1205: #define GPIO_BRR_BR6                         ((uint32_t)0x0040)            /*!< Port x Reset bit 6 */\n 1206: #define GPIO_BRR_BR7                         ((uint32_t)0x0080)            /*!< Port x Reset bit 7 */\n 1207: #define GPIO_BRR_BR8                         ((uint32_t)0x0100)            /*!< Port x Reset bit 8 */\n 1208: #define GPIO_BRR_BR9                         ((uint32_t)0x0200)            /*!< Port x Reset bit 9 */\n 1209: #define GPIO_BRR_BR10                        ((uint32_t)0x0400)            /*!< Port x Reset bit 10 */\n 1210: #define GPIO_BRR_BR11                        ((uint32_t)0x0800)            /*!< Port x Reset bit 11 */\n 1211: #define GPIO_BRR_BR12                        ((uint32_t)0x1000)            /*!< Port x Reset bit 12 */\n 1212: #define GPIO_BRR_BR13                        ((uint32_t)0x2000)            /*!< Port x Reset bit 13 */\n 1213: #define GPIO_BRR_BR14                        ((uint32_t)0x4000)            /*!< Port x Reset bit 14 */\n 1214: #define GPIO_BRR_BR15                        ((uint32_t)0x8000)            /*!< Port x Reset bit 15 */\n 1215  \n 1216  /******************  Bit definition for GPIO_LCKR register  *******************/\n ....\n 1319  #define AFIO_MAPR_SWJ_CFG_2                  ((uint32_t)0x04000000)        /*!< Bit 2 */\n 1320  \n 1321: #define AFIO_MAPR_SWJ_CFG_RESET              ((uint32_t)0x00000000)        /*!< Full SWJ (JTAG-DP + SW-DP) : Reset State */\n 1322  #define AFIO_MAPR_SWJ_CFG_NOJNTRST           ((uint32_t)0x01000000)        /*!< Full SWJ (JTAG-DP + SW-DP) but without JNTRST */\n 1323  #define AFIO_MAPR_SWJ_CFG_JTAGDISABLE        ((uint32_t)0x02000000)        /*!< JTAG-DP Disabled and SW-DP Enabled */\n ....\n 1773  \n 1774  /*!<*****************  Bit definition for SCB_AIRCR register  *******************/\n 1775: #define  SCB_AIRCR_VECTRESET                 ((uint32_t)0x00000001)        /*!< System Reset bit */\n 1776  #define  SCB_AIRCR_VECTCLRACTIVE             ((uint32_t)0x00000002)        /*!< Clear active vector bit */\n 1777: #define  SCB_AIRCR_SYSRESETREQ               ((uint32_t)0x00000004)        /*!< Requests chip control logic to generate a reset */\n 1778  \n 1779  #define  SCB_AIRCR_PRIGROUP                  ((uint32_t)0x00000700)        /*!< PRIGROUP[2:0] bits (Priority group) */\n ....\n 2153  #define  ADC_CR2_CONT                        ((uint32_t)0x00000002)        /*!< Continuous Conversion */\n 2154  #define  ADC_CR2_CAL                         ((uint32_t)0x00000004)        /*!< A/D Calibration */\n 2155: #define  ADC_CR2_RSTCAL                      ((uint32_t)0x00000008)        /*!< Reset Calibration */\n 2156  #define  ADC_CR2_DMA                         ((uint32_t)0x00000100)        /*!< Direct Memory access mode */\n 2157  #define  ADC_CR2_ALIGN                       ((uint32_t)0x00000800)        /*!< Data Alignment */\n ....\n 3094  #define  I2C_CR1_PEC                         ((uint32_t)0x00001000)        /*!< Packet Error Checking */\n 3095  #define  I2C_CR1_ALERT                       ((uint32_t)0x00002000)        /*!< SMBus Alert */\n 3096: #define  I2C_CR1_SWRST                       ((uint32_t)0x00008000)        /*!< Software Reset */\n 3097  \n 3098  /*******************  Bit definition for I2C_CR2 register  ********************/\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f101xb.h:\n  356  \n  357  /** \n  358:   * @brief Reset and Clock Control\n  359    */\n  360  \n  ...\n  639  \n  640  /********************  Bit definition for CRC_CR register  ********************/\n  641: #define  CRC_CR_RESET                        ((uint32_t)0x00000001)        /*!< RESET bit */\n  642  \n  643  /******************************************************************************/\n  ...\n  735  /******************************************************************************/\n  736  /*                                                                            */\n  737: /*                         Reset and Clock Control                            */\n  738  /*                                                                            */\n  739  /******************************************************************************/\n  ...\n  885  \n  886  /*****************  Bit definition for RCC_APB2RSTR register  *****************/\n  887: #define  RCC_APB2RSTR_AFIORST                ((uint32_t)0x00000001)        /*!< Alternate Function I/O reset */\n  888: #define  RCC_APB2RSTR_IOPARST                ((uint32_t)0x00000004)        /*!< I/O port A reset */\n  889: #define  RCC_APB2RSTR_IOPBRST                ((uint32_t)0x00000008)        /*!< I/O port B reset */\n  890: #define  RCC_APB2RSTR_IOPCRST                ((uint32_t)0x00000010)        /*!< I/O port C reset */\n  891: #define  RCC_APB2RSTR_IOPDRST                ((uint32_t)0x00000020)        /*!< I/O port D reset */\n  892: #define  RCC_APB2RSTR_ADC1RST                ((uint32_t)0x00000200)        /*!< ADC 1 interface reset */\n  893  \n  894  \n  895: #define  RCC_APB2RSTR_TIM1RST                ((uint32_t)0x00000800)        /*!< TIM1 Timer reset */\n  896: #define  RCC_APB2RSTR_SPI1RST                ((uint32_t)0x00001000)        /*!< SPI 1 reset */\n  897: #define  RCC_APB2RSTR_USART1RST              ((uint32_t)0x00004000)        /*!< USART1 reset */\n  898  \n  899  \n  900: #define  RCC_APB2RSTR_IOPERST               ((uint32_t)0x00000040)        /*!< I/O port E reset */\n  901  \n  902  \n  ...\n  904  \n  905  /*****************  Bit definition for RCC_APB1RSTR register  *****************/\n  906: #define  RCC_APB1RSTR_TIM2RST                ((uint32_t)0x00000001)        /*!< Timer 2 reset */\n  907: #define  RCC_APB1RSTR_TIM3RST                ((uint32_t)0x00000002)        /*!< Timer 3 reset */\n  908: #define  RCC_APB1RSTR_WWDGRST                ((uint32_t)0x00000800)        /*!< Window Watchdog reset */\n  909: #define  RCC_APB1RSTR_USART2RST              ((uint32_t)0x00020000)        /*!< USART 2 reset */\n  910: #define  RCC_APB1RSTR_I2C1RST                ((uint32_t)0x00200000)        /*!< I2C 1 reset */\n  911  \n  912  \n  913: #define  RCC_APB1RSTR_BKPRST                 ((uint32_t)0x08000000)        /*!< Backup interface reset */\n  914: #define  RCC_APB1RSTR_PWRRST                 ((uint32_t)0x10000000)        /*!< Power interface reset */\n  915  \n  916: #define  RCC_APB1RSTR_TIM4RST               ((uint32_t)0x00000004)        /*!< Timer 4 reset */\n  917: #define  RCC_APB1RSTR_SPI2RST               ((uint32_t)0x00004000)        /*!< SPI 2 reset */\n  918: #define  RCC_APB1RSTR_USART3RST             ((uint32_t)0x00040000)        /*!< USART 3 reset */\n  919: #define  RCC_APB1RSTR_I2C2RST               ((uint32_t)0x00400000)        /*!< I2C 2 reset */\n  920  \n  921  \n  ...\n  991  \n  992  #define  RCC_BDCR_RTCEN                      ((uint32_t)0x00008000)        /*!< RTC clock enable */\n  993: #define  RCC_BDCR_BDRST                      ((uint32_t)0x00010000)        /*!< Backup domain software reset  */\n  994  \n  995  /*******************  Bit definition for RCC_CSR register  ********************/  \n  996  #define  RCC_CSR_LSION                       ((uint32_t)0x00000001)        /*!< Internal Low Speed oscillator enable */\n  997  #define  RCC_CSR_LSIRDY                      ((uint32_t)0x00000002)        /*!< Internal Low Speed oscillator Ready */\n  998: #define  RCC_CSR_RMVF                        ((uint32_t)0x01000000)        /*!< Remove reset flag */\n  999: #define  RCC_CSR_PINRSTF                     ((uint32_t)0x04000000)        /*!< PIN reset flag */\n 1000: #define  RCC_CSR_PORRSTF                     ((uint32_t)0x08000000)        /*!< POR/PDR reset flag */\n 1001: #define  RCC_CSR_SFTRSTF                     ((uint32_t)0x10000000)        /*!< Software Reset flag */\n 1002: #define  RCC_CSR_IWDGRSTF                    ((uint32_t)0x20000000)        /*!< Independent Watchdog reset flag */\n 1003: #define  RCC_CSR_WWDGRSTF                    ((uint32_t)0x40000000)        /*!< Window watchdog reset flag */\n 1004: #define  RCC_CSR_LPWRRSTF                    ((uint32_t)0x80000000)        /*!< Low-Power reset flag */\n 1005  \n 1006  \n ....\n 1204  #define GPIO_BSRR_BS15                       ((uint32_t)0x00008000)        /*!< Port x Set bit 15 */\n 1205  \n 1206: #define GPIO_BSRR_BR0                        ((uint32_t)0x00010000)        /*!< Port x Reset bit 0 */\n 1207: #define GPIO_BSRR_BR1                        ((uint32_t)0x00020000)        /*!< Port x Reset bit 1 */\n 1208: #define GPIO_BSRR_BR2                        ((uint32_t)0x00040000)        /*!< Port x Reset bit 2 */\n 1209: #define GPIO_BSRR_BR3                        ((uint32_t)0x00080000)        /*!< Port x Reset bit 3 */\n 1210: #define GPIO_BSRR_BR4                        ((uint32_t)0x00100000)        /*!< Port x Reset bit 4 */\n 1211: #define GPIO_BSRR_BR5                        ((uint32_t)0x00200000)        /*!< Port x Reset bit 5 */\n 1212: #define GPIO_BSRR_BR6                        ((uint32_t)0x00400000)        /*!< Port x Reset bit 6 */\n 1213: #define GPIO_BSRR_BR7                        ((uint32_t)0x00800000)        /*!< Port x Reset bit 7 */\n 1214: #define GPIO_BSRR_BR8                        ((uint32_t)0x01000000)        /*!< Port x Reset bit 8 */\n 1215: #define GPIO_BSRR_BR9                        ((uint32_t)0x02000000)        /*!< Port x Reset bit 9 */\n 1216: #define GPIO_BSRR_BR10                       ((uint32_t)0x04000000)        /*!< Port x Reset bit 10 */\n 1217: #define GPIO_BSRR_BR11                       ((uint32_t)0x08000000)        /*!< Port x Reset bit 11 */\n 1218: #define GPIO_BSRR_BR12                       ((uint32_t)0x10000000)        /*!< Port x Reset bit 12 */\n 1219: #define GPIO_BSRR_BR13                       ((uint32_t)0x20000000)        /*!< Port x Reset bit 13 */\n 1220: #define GPIO_BSRR_BR14                       ((uint32_t)0x40000000)        /*!< Port x Reset bit 14 */\n 1221: #define GPIO_BSRR_BR15                       ((uint32_t)0x80000000)        /*!< Port x Reset bit 15 */\n 1222  \n 1223  /*******************  Bit definition for GPIO_BRR register  *******************/\n 1224: #define GPIO_BRR_BR0                         ((uint32_t)0x0001)            /*!< Port x Reset bit 0 */\n 1225: #define GPIO_BRR_BR1                         ((uint32_t)0x0002)            /*!< Port x Reset bit 1 */\n 1226: #define GPIO_BRR_BR2                         ((uint32_t)0x0004)            /*!< Port x Reset bit 2 */\n 1227: #define GPIO_BRR_BR3                         ((uint32_t)0x0008)            /*!< Port x Reset bit 3 */\n 1228: #define GPIO_BRR_BR4                         ((uint32_t)0x0010)            /*!< Port x Reset bit 4 */\n 1229: #define GPIO_BRR_BR5                         ((uint32_t)0x0020)            /*!< Port x Reset bit 5 */\n 1230: #define GPIO_BRR_BR6                         ((uint32_t)0x0040)            /*!< Port x Reset bit 6 */\n 1231: #define GPIO_BRR_BR7                         ((uint32_t)0x0080)            /*!< Port x Reset bit 7 */\n 1232: #define GPIO_BRR_BR8                         ((uint32_t)0x0100)            /*!< Port x Reset bit 8 */\n 1233: #define GPIO_BRR_BR9                         ((uint32_t)0x0200)            /*!< Port x Reset bit 9 */\n 1234: #define GPIO_BRR_BR10                        ((uint32_t)0x0400)            /*!< Port x Reset bit 10 */\n 1235: #define GPIO_BRR_BR11                        ((uint32_t)0x0800)            /*!< Port x Reset bit 11 */\n 1236: #define GPIO_BRR_BR12                        ((uint32_t)0x1000)            /*!< Port x Reset bit 12 */\n 1237: #define GPIO_BRR_BR13                        ((uint32_t)0x2000)            /*!< Port x Reset bit 13 */\n 1238: #define GPIO_BRR_BR14                        ((uint32_t)0x4000)            /*!< Port x Reset bit 14 */\n 1239: #define GPIO_BRR_BR15                        ((uint32_t)0x8000)            /*!< Port x Reset bit 15 */\n 1240  \n 1241  /******************  Bit definition for GPIO_LCKR register  *******************/\n ....\n 1353  #define AFIO_MAPR_SWJ_CFG_2                  ((uint32_t)0x04000000)        /*!< Bit 2 */\n 1354  \n 1355: #define AFIO_MAPR_SWJ_CFG_RESET              ((uint32_t)0x00000000)        /*!< Full SWJ (JTAG-DP + SW-DP) : Reset State */\n 1356  #define AFIO_MAPR_SWJ_CFG_NOJNTRST           ((uint32_t)0x01000000)        /*!< Full SWJ (JTAG-DP + SW-DP) but without JNTRST */\n 1357  #define AFIO_MAPR_SWJ_CFG_JTAGDISABLE        ((uint32_t)0x02000000)        /*!< JTAG-DP Disabled and SW-DP Enabled */\n ....\n 1807  \n 1808  /*!<*****************  Bit definition for SCB_AIRCR register  *******************/\n 1809: #define  SCB_AIRCR_VECTRESET                 ((uint32_t)0x00000001)        /*!< System Reset bit */\n 1810  #define  SCB_AIRCR_VECTCLRACTIVE             ((uint32_t)0x00000002)        /*!< Clear active vector bit */\n 1811: #define  SCB_AIRCR_SYSRESETREQ               ((uint32_t)0x00000004)        /*!< Requests chip control logic to generate a reset */\n 1812  \n 1813  #define  SCB_AIRCR_PRIGROUP                  ((uint32_t)0x00000700)        /*!< PRIGROUP[2:0] bits (Priority group) */\n ....\n 2187  #define  ADC_CR2_CONT                        ((uint32_t)0x00000002)        /*!< Continuous Conversion */\n 2188  #define  ADC_CR2_CAL                         ((uint32_t)0x00000004)        /*!< A/D Calibration */\n 2189: #define  ADC_CR2_RSTCAL                      ((uint32_t)0x00000008)        /*!< Reset Calibration */\n 2190  #define  ADC_CR2_DMA                         ((uint32_t)0x00000100)        /*!< Direct Memory access mode */\n 2191  #define  ADC_CR2_ALIGN                       ((uint32_t)0x00000800)        /*!< Data Alignment */\n ....\n 3128  #define  I2C_CR1_PEC                         ((uint32_t)0x00001000)        /*!< Packet Error Checking */\n 3129  #define  I2C_CR1_ALERT                       ((uint32_t)0x00002000)        /*!< SMBus Alert */\n 3130: #define  I2C_CR1_SWRST                       ((uint32_t)0x00008000)        /*!< Software Reset */\n 3131  \n 3132  /*******************  Bit definition for I2C_CR2 register  ********************/\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f101xe.h:\n  473  \n  474  /** \n  475:   * @brief Reset and Clock Control\n  476    */\n  477  \n  ...\n  806  \n  807  /********************  Bit definition for CRC_CR register  ********************/\n  808: #define  CRC_CR_RESET                        ((uint32_t)0x00000001)        /*!< RESET bit */\n  809  \n  810  /******************************************************************************/\n  ...\n  998  /******************************************************************************/\n  999  /*                                                                            */\n 1000: /*                         Reset and Clock Control                            */\n 1001  /*                                                                            */\n 1002  /******************************************************************************/\n ....\n 1148  \n 1149  /*****************  Bit definition for RCC_APB2RSTR register  *****************/\n 1150: #define  RCC_APB2RSTR_AFIORST                ((uint32_t)0x00000001)        /*!< Alternate Function I/O reset */\n 1151: #define  RCC_APB2RSTR_IOPARST                ((uint32_t)0x00000004)        /*!< I/O port A reset */\n 1152: #define  RCC_APB2RSTR_IOPBRST                ((uint32_t)0x00000008)        /*!< I/O port B reset */\n 1153: #define  RCC_APB2RSTR_IOPCRST                ((uint32_t)0x00000010)        /*!< I/O port C reset */\n 1154: #define  RCC_APB2RSTR_IOPDRST                ((uint32_t)0x00000020)        /*!< I/O port D reset */\n 1155: #define  RCC_APB2RSTR_ADC1RST                ((uint32_t)0x00000200)        /*!< ADC 1 interface reset */\n 1156  \n 1157  \n 1158: #define  RCC_APB2RSTR_TIM1RST                ((uint32_t)0x00000800)        /*!< TIM1 Timer reset */\n 1159: #define  RCC_APB2RSTR_SPI1RST                ((uint32_t)0x00001000)        /*!< SPI 1 reset */\n 1160: #define  RCC_APB2RSTR_USART1RST              ((uint32_t)0x00004000)        /*!< USART1 reset */\n 1161  \n 1162  \n 1163: #define  RCC_APB2RSTR_IOPERST               ((uint32_t)0x00000040)        /*!< I/O port E reset */\n 1164  \n 1165: #define  RCC_APB2RSTR_IOPFRST               ((uint32_t)0x00000080)        /*!< I/O port F reset */\n 1166: #define  RCC_APB2RSTR_IOPGRST               ((uint32_t)0x00000100)        /*!< I/O port G reset */\n 1167  \n 1168  \n 1169  \n 1170  /*****************  Bit definition for RCC_APB1RSTR register  *****************/\n 1171: #define  RCC_APB1RSTR_TIM2RST                ((uint32_t)0x00000001)        /*!< Timer 2 reset */\n 1172: #define  RCC_APB1RSTR_TIM3RST                ((uint32_t)0x00000002)        /*!< Timer 3 reset */\n 1173: #define  RCC_APB1RSTR_WWDGRST                ((uint32_t)0x00000800)        /*!< Window Watchdog reset */\n 1174: #define  RCC_APB1RSTR_USART2RST              ((uint32_t)0x00020000)        /*!< USART 2 reset */\n 1175: #define  RCC_APB1RSTR_I2C1RST                ((uint32_t)0x00200000)        /*!< I2C 1 reset */\n 1176  \n 1177  \n 1178: #define  RCC_APB1RSTR_BKPRST                 ((uint32_t)0x08000000)        /*!< Backup interface reset */\n 1179: #define  RCC_APB1RSTR_PWRRST                 ((uint32_t)0x10000000)        /*!< Power interface reset */\n 1180  \n 1181: #define  RCC_APB1RSTR_TIM4RST               ((uint32_t)0x00000004)        /*!< Timer 4 reset */\n 1182: #define  RCC_APB1RSTR_SPI2RST               ((uint32_t)0x00004000)        /*!< SPI 2 reset */\n 1183: #define  RCC_APB1RSTR_USART3RST             ((uint32_t)0x00040000)        /*!< USART 3 reset */\n 1184: #define  RCC_APB1RSTR_I2C2RST               ((uint32_t)0x00400000)        /*!< I2C 2 reset */\n 1185  \n 1186  \n 1187: #define  RCC_APB1RSTR_TIM5RST                ((uint32_t)0x00000008)        /*!< Timer 5 reset */\n 1188: #define  RCC_APB1RSTR_TIM6RST                ((uint32_t)0x00000010)        /*!< Timer 6 reset */\n 1189: #define  RCC_APB1RSTR_TIM7RST                ((uint32_t)0x00000020)        /*!< Timer 7 reset */\n 1190: #define  RCC_APB1RSTR_SPI3RST                ((uint32_t)0x00008000)        /*!< SPI 3 reset */\n 1191: #define  RCC_APB1RSTR_UART4RST               ((uint32_t)0x00080000)        /*!< UART 4 reset */\n 1192: #define  RCC_APB1RSTR_UART5RST               ((uint32_t)0x00100000)        /*!< UART 5 reset */\n 1193  \n 1194  \n 1195  \n 1196  \n 1197: #define  RCC_APB1RSTR_DACRST                 ((uint32_t)0x20000000)        /*!< DAC interface reset */\n 1198  \n 1199  /******************  Bit definition for RCC_AHBENR register  ******************/\n ....\n 1274  \n 1275  #define  RCC_BDCR_RTCEN                      ((uint32_t)0x00008000)        /*!< RTC clock enable */\n 1276: #define  RCC_BDCR_BDRST                      ((uint32_t)0x00010000)        /*!< Backup domain software reset  */\n 1277  \n 1278  /*******************  Bit definition for RCC_CSR register  ********************/  \n 1279  #define  RCC_CSR_LSION                       ((uint32_t)0x00000001)        /*!< Internal Low Speed oscillator enable */\n 1280  #define  RCC_CSR_LSIRDY                      ((uint32_t)0x00000002)        /*!< Internal Low Speed oscillator Ready */\n 1281: #define  RCC_CSR_RMVF                        ((uint32_t)0x01000000)        /*!< Remove reset flag */\n 1282: #define  RCC_CSR_PINRSTF                     ((uint32_t)0x04000000)        /*!< PIN reset flag */\n 1283: #define  RCC_CSR_PORRSTF                     ((uint32_t)0x08000000)        /*!< POR/PDR reset flag */\n 1284: #define  RCC_CSR_SFTRSTF                     ((uint32_t)0x10000000)        /*!< Software Reset flag */\n 1285: #define  RCC_CSR_IWDGRSTF                    ((uint32_t)0x20000000)        /*!< Independent Watchdog reset flag */\n 1286: #define  RCC_CSR_WWDGRSTF                    ((uint32_t)0x40000000)        /*!< Window watchdog reset flag */\n 1287: #define  RCC_CSR_LPWRRSTF                    ((uint32_t)0x80000000)        /*!< Low-Power reset flag */\n 1288  \n 1289  \n ....\n 1487  #define GPIO_BSRR_BS15                       ((uint32_t)0x00008000)        /*!< Port x Set bit 15 */\n 1488  \n 1489: #define GPIO_BSRR_BR0                        ((uint32_t)0x00010000)        /*!< Port x Reset bit 0 */\n 1490: #define GPIO_BSRR_BR1                        ((uint32_t)0x00020000)        /*!< Port x Reset bit 1 */\n 1491: #define GPIO_BSRR_BR2                        ((uint32_t)0x00040000)        /*!< Port x Reset bit 2 */\n 1492: #define GPIO_BSRR_BR3                        ((uint32_t)0x00080000)        /*!< Port x Reset bit 3 */\n 1493: #define GPIO_BSRR_BR4                        ((uint32_t)0x00100000)        /*!< Port x Reset bit 4 */\n 1494: #define GPIO_BSRR_BR5                        ((uint32_t)0x00200000)        /*!< Port x Reset bit 5 */\n 1495: #define GPIO_BSRR_BR6                        ((uint32_t)0x00400000)        /*!< Port x Reset bit 6 */\n 1496: #define GPIO_BSRR_BR7                        ((uint32_t)0x00800000)        /*!< Port x Reset bit 7 */\n 1497: #define GPIO_BSRR_BR8                        ((uint32_t)0x01000000)        /*!< Port x Reset bit 8 */\n 1498: #define GPIO_BSRR_BR9                        ((uint32_t)0x02000000)        /*!< Port x Reset bit 9 */\n 1499: #define GPIO_BSRR_BR10                       ((uint32_t)0x04000000)        /*!< Port x Reset bit 10 */\n 1500: #define GPIO_BSRR_BR11                       ((uint32_t)0x08000000)        /*!< Port x Reset bit 11 */\n 1501: #define GPIO_BSRR_BR12                       ((uint32_t)0x10000000)        /*!< Port x Reset bit 12 */\n 1502: #define GPIO_BSRR_BR13                       ((uint32_t)0x20000000)        /*!< Port x Reset bit 13 */\n 1503: #define GPIO_BSRR_BR14                       ((uint32_t)0x40000000)        /*!< Port x Reset bit 14 */\n 1504: #define GPIO_BSRR_BR15                       ((uint32_t)0x80000000)        /*!< Port x Reset bit 15 */\n 1505  \n 1506  /*******************  Bit definition for GPIO_BRR register  *******************/\n 1507: #define GPIO_BRR_BR0                         ((uint32_t)0x0001)            /*!< Port x Reset bit 0 */\n 1508: #define GPIO_BRR_BR1                         ((uint32_t)0x0002)            /*!< Port x Reset bit 1 */\n 1509: #define GPIO_BRR_BR2                         ((uint32_t)0x0004)            /*!< Port x Reset bit 2 */\n 1510: #define GPIO_BRR_BR3                         ((uint32_t)0x0008)            /*!< Port x Reset bit 3 */\n 1511: #define GPIO_BRR_BR4                         ((uint32_t)0x0010)            /*!< Port x Reset bit 4 */\n 1512: #define GPIO_BRR_BR5                         ((uint32_t)0x0020)            /*!< Port x Reset bit 5 */\n 1513: #define GPIO_BRR_BR6                         ((uint32_t)0x0040)            /*!< Port x Reset bit 6 */\n 1514: #define GPIO_BRR_BR7                         ((uint32_t)0x0080)            /*!< Port x Reset bit 7 */\n 1515: #define GPIO_BRR_BR8                         ((uint32_t)0x0100)            /*!< Port x Reset bit 8 */\n 1516: #define GPIO_BRR_BR9                         ((uint32_t)0x0200)            /*!< Port x Reset bit 9 */\n 1517: #define GPIO_BRR_BR10                        ((uint32_t)0x0400)            /*!< Port x Reset bit 10 */\n 1518: #define GPIO_BRR_BR11                        ((uint32_t)0x0800)            /*!< Port x Reset bit 11 */\n 1519: #define GPIO_BRR_BR12                        ((uint32_t)0x1000)            /*!< Port x Reset bit 12 */\n 1520: #define GPIO_BRR_BR13                        ((uint32_t)0x2000)            /*!< Port x Reset bit 13 */\n 1521: #define GPIO_BRR_BR14                        ((uint32_t)0x4000)            /*!< Port x Reset bit 14 */\n 1522: #define GPIO_BRR_BR15                        ((uint32_t)0x8000)            /*!< Port x Reset bit 15 */\n 1523  \n 1524  /******************  Bit definition for GPIO_LCKR register  *******************/\n ....\n 1637  #define AFIO_MAPR_SWJ_CFG_2                  ((uint32_t)0x04000000)        /*!< Bit 2 */\n 1638  \n 1639: #define AFIO_MAPR_SWJ_CFG_RESET              ((uint32_t)0x00000000)        /*!< Full SWJ (JTAG-DP + SW-DP) : Reset State */\n 1640  #define AFIO_MAPR_SWJ_CFG_NOJNTRST           ((uint32_t)0x01000000)        /*!< Full SWJ (JTAG-DP + SW-DP) but without JNTRST */\n 1641  #define AFIO_MAPR_SWJ_CFG_JTAGDISABLE        ((uint32_t)0x02000000)        /*!< JTAG-DP Disabled and SW-DP Enabled */\n ....\n 2092  \n 2093  /*!<*****************  Bit definition for SCB_AIRCR register  *******************/\n 2094: #define  SCB_AIRCR_VECTRESET                 ((uint32_t)0x00000001)        /*!< System Reset bit */\n 2095  #define  SCB_AIRCR_VECTCLRACTIVE             ((uint32_t)0x00000002)        /*!< Clear active vector bit */\n 2096: #define  SCB_AIRCR_SYSRESETREQ               ((uint32_t)0x00000004)        /*!< Requests chip control logic to generate a reset */\n 2097  \n 2098  #define  SCB_AIRCR_PRIGROUP                  ((uint32_t)0x00000700)        /*!< PRIGROUP[2:0] bits (Priority group) */\n ....\n 2472  #define  ADC_CR2_CONT                        ((uint32_t)0x00000002)        /*!< Continuous Conversion */\n 2473  #define  ADC_CR2_CAL                         ((uint32_t)0x00000004)        /*!< A/D Calibration */\n 2474: #define  ADC_CR2_RSTCAL                      ((uint32_t)0x00000008)        /*!< Reset Calibration */\n 2475  #define  ADC_CR2_DMA                         ((uint32_t)0x00000100)        /*!< Direct Memory access mode */\n 2476  #define  ADC_CR2_ALIGN                       ((uint32_t)0x00000800)        /*!< Data Alignment */\n ....\n 3774  #define  I2C_CR1_PEC                         ((uint32_t)0x00001000)        /*!< Packet Error Checking */\n 3775  #define  I2C_CR1_ALERT                       ((uint32_t)0x00002000)        /*!< SMBus Alert */\n 3776: #define  I2C_CR1_SWRST                       ((uint32_t)0x00008000)        /*!< Software Reset */\n 3777  \n 3778  /*******************  Bit definition for I2C_CR2 register  ********************/\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f101xg.h:\n  485  \n  486  /** \n  487:   * @brief Reset and Clock Control\n  488    */\n  489  \n  ...\n  833  \n  834  /********************  Bit definition for CRC_CR register  ********************/\n  835: #define  CRC_CR_RESET                        ((uint32_t)0x00000001)        /*!< RESET bit */\n  836  \n  837  /******************************************************************************/\n  ...\n 1025  /******************************************************************************/\n 1026  /*                                                                            */\n 1027: /*                         Reset and Clock Control                            */\n 1028  /*                                                                            */\n 1029  /******************************************************************************/\n ....\n 1175  \n 1176  /*****************  Bit definition for RCC_APB2RSTR register  *****************/\n 1177: #define  RCC_APB2RSTR_AFIORST                ((uint32_t)0x00000001)        /*!< Alternate Function I/O reset */\n 1178: #define  RCC_APB2RSTR_IOPARST                ((uint32_t)0x00000004)        /*!< I/O port A reset */\n 1179: #define  RCC_APB2RSTR_IOPBRST                ((uint32_t)0x00000008)        /*!< I/O port B reset */\n 1180: #define  RCC_APB2RSTR_IOPCRST                ((uint32_t)0x00000010)        /*!< I/O port C reset */\n 1181: #define  RCC_APB2RSTR_IOPDRST                ((uint32_t)0x00000020)        /*!< I/O port D reset */\n 1182: #define  RCC_APB2RSTR_ADC1RST                ((uint32_t)0x00000200)        /*!< ADC 1 interface reset */\n 1183  \n 1184: #define  RCC_APB2RSTR_ADC2RST                ((uint32_t)0x00000400)        /*!< ADC 2 interface reset */\n 1185  \n 1186: #define  RCC_APB2RSTR_TIM1RST                ((uint32_t)0x00000800)        /*!< TIM1 Timer reset */\n 1187: #define  RCC_APB2RSTR_SPI1RST                ((uint32_t)0x00001000)        /*!< SPI 1 reset */\n 1188: #define  RCC_APB2RSTR_USART1RST              ((uint32_t)0x00004000)        /*!< USART1 reset */\n 1189  \n 1190  \n 1191: #define  RCC_APB2RSTR_IOPERST               ((uint32_t)0x00000040)        /*!< I/O port E reset */\n 1192  \n 1193: #define  RCC_APB2RSTR_IOPFRST               ((uint32_t)0x00000080)        /*!< I/O port F reset */\n 1194: #define  RCC_APB2RSTR_IOPGRST               ((uint32_t)0x00000100)        /*!< I/O port G reset */\n 1195  \n 1196  \n 1197: #define  RCC_APB2RSTR_TIM9RST               ((uint32_t)0x00080000)         /*!< TIM9 Timer reset */\n 1198: #define  RCC_APB2RSTR_TIM10RST              ((uint32_t)0x00100000)         /*!< TIM10 Timer reset */\n 1199: #define  RCC_APB2RSTR_TIM11RST              ((uint32_t)0x00200000)         /*!< TIM11 Timer reset */\n 1200  \n 1201  /*****************  Bit definition for RCC_APB1RSTR register  *****************/\n 1202: #define  RCC_APB1RSTR_TIM2RST                ((uint32_t)0x00000001)        /*!< Timer 2 reset */\n 1203: #define  RCC_APB1RSTR_TIM3RST                ((uint32_t)0x00000002)        /*!< Timer 3 reset */\n 1204: #define  RCC_APB1RSTR_WWDGRST                ((uint32_t)0x00000800)        /*!< Window Watchdog reset */\n 1205: #define  RCC_APB1RSTR_USART2RST              ((uint32_t)0x00020000)        /*!< USART 2 reset */\n 1206: #define  RCC_APB1RSTR_I2C1RST                ((uint32_t)0x00200000)        /*!< I2C 1 reset */\n 1207  \n 1208  \n 1209: #define  RCC_APB1RSTR_BKPRST                 ((uint32_t)0x08000000)        /*!< Backup interface reset */\n 1210: #define  RCC_APB1RSTR_PWRRST                 ((uint32_t)0x10000000)        /*!< Power interface reset */\n 1211  \n 1212: #define  RCC_APB1RSTR_TIM4RST               ((uint32_t)0x00000004)        /*!< Timer 4 reset */\n 1213: #define  RCC_APB1RSTR_SPI2RST               ((uint32_t)0x00004000)        /*!< SPI 2 reset */\n 1214: #define  RCC_APB1RSTR_USART3RST             ((uint32_t)0x00040000)        /*!< USART 3 reset */\n 1215: #define  RCC_APB1RSTR_I2C2RST               ((uint32_t)0x00400000)        /*!< I2C 2 reset */\n 1216  \n 1217  \n 1218: #define  RCC_APB1RSTR_TIM5RST                ((uint32_t)0x00000008)        /*!< Timer 5 reset */\n 1219: #define  RCC_APB1RSTR_TIM6RST                ((uint32_t)0x00000010)        /*!< Timer 6 reset */\n 1220: #define  RCC_APB1RSTR_TIM7RST                ((uint32_t)0x00000020)        /*!< Timer 7 reset */\n 1221: #define  RCC_APB1RSTR_SPI3RST                ((uint32_t)0x00008000)        /*!< SPI 3 reset */\n 1222: #define  RCC_APB1RSTR_UART4RST               ((uint32_t)0x00080000)        /*!< UART 4 reset */\n 1223: #define  RCC_APB1RSTR_UART5RST               ((uint32_t)0x00100000)        /*!< UART 5 reset */\n 1224  \n 1225  \n 1226  \n 1227  \n 1228: #define  RCC_APB1RSTR_TIM12RST               ((uint32_t)0x00000040)         /*!< TIM12 Timer reset */\n 1229: #define  RCC_APB1RSTR_TIM13RST               ((uint32_t)0x00000080)         /*!< TIM13 Timer reset */\n 1230: #define  RCC_APB1RSTR_TIM14RST               ((uint32_t)0x00000100)         /*!< TIM14 Timer reset */\n 1231: #define  RCC_APB1RSTR_DACRST                 ((uint32_t)0x20000000)        /*!< DAC interface reset */\n 1232  \n 1233  /******************  Bit definition for RCC_AHBENR register  ******************/\n ....\n 1315  \n 1316  #define  RCC_BDCR_RTCEN                      ((uint32_t)0x00008000)        /*!< RTC clock enable */\n 1317: #define  RCC_BDCR_BDRST                      ((uint32_t)0x00010000)        /*!< Backup domain software reset  */\n 1318  \n 1319  /*******************  Bit definition for RCC_CSR register  ********************/  \n 1320  #define  RCC_CSR_LSION                       ((uint32_t)0x00000001)        /*!< Internal Low Speed oscillator enable */\n 1321  #define  RCC_CSR_LSIRDY                      ((uint32_t)0x00000002)        /*!< Internal Low Speed oscillator Ready */\n 1322: #define  RCC_CSR_RMVF                        ((uint32_t)0x01000000)        /*!< Remove reset flag */\n 1323: #define  RCC_CSR_PINRSTF                     ((uint32_t)0x04000000)        /*!< PIN reset flag */\n 1324: #define  RCC_CSR_PORRSTF                     ((uint32_t)0x08000000)        /*!< POR/PDR reset flag */\n 1325: #define  RCC_CSR_SFTRSTF                     ((uint32_t)0x10000000)        /*!< Software Reset flag */\n 1326: #define  RCC_CSR_IWDGRSTF                    ((uint32_t)0x20000000)        /*!< Independent Watchdog reset flag */\n 1327: #define  RCC_CSR_WWDGRSTF                    ((uint32_t)0x40000000)        /*!< Window watchdog reset flag */\n 1328: #define  RCC_CSR_LPWRRSTF                    ((uint32_t)0x80000000)        /*!< Low-Power reset flag */\n 1329  \n 1330  \n ....\n 1528  #define GPIO_BSRR_BS15                       ((uint32_t)0x00008000)        /*!< Port x Set bit 15 */\n 1529  \n 1530: #define GPIO_BSRR_BR0                        ((uint32_t)0x00010000)        /*!< Port x Reset bit 0 */\n 1531: #define GPIO_BSRR_BR1                        ((uint32_t)0x00020000)        /*!< Port x Reset bit 1 */\n 1532: #define GPIO_BSRR_BR2                        ((uint32_t)0x00040000)        /*!< Port x Reset bit 2 */\n 1533: #define GPIO_BSRR_BR3                        ((uint32_t)0x00080000)        /*!< Port x Reset bit 3 */\n 1534: #define GPIO_BSRR_BR4                        ((uint32_t)0x00100000)        /*!< Port x Reset bit 4 */\n 1535: #define GPIO_BSRR_BR5                        ((uint32_t)0x00200000)        /*!< Port x Reset bit 5 */\n 1536: #define GPIO_BSRR_BR6                        ((uint32_t)0x00400000)        /*!< Port x Reset bit 6 */\n 1537: #define GPIO_BSRR_BR7                        ((uint32_t)0x00800000)        /*!< Port x Reset bit 7 */\n 1538: #define GPIO_BSRR_BR8                        ((uint32_t)0x01000000)        /*!< Port x Reset bit 8 */\n 1539: #define GPIO_BSRR_BR9                        ((uint32_t)0x02000000)        /*!< Port x Reset bit 9 */\n 1540: #define GPIO_BSRR_BR10                       ((uint32_t)0x04000000)        /*!< Port x Reset bit 10 */\n 1541: #define GPIO_BSRR_BR11                       ((uint32_t)0x08000000)        /*!< Port x Reset bit 11 */\n 1542: #define GPIO_BSRR_BR12                       ((uint32_t)0x10000000)        /*!< Port x Reset bit 12 */\n 1543: #define GPIO_BSRR_BR13                       ((uint32_t)0x20000000)        /*!< Port x Reset bit 13 */\n 1544: #define GPIO_BSRR_BR14                       ((uint32_t)0x40000000)        /*!< Port x Reset bit 14 */\n 1545: #define GPIO_BSRR_BR15                       ((uint32_t)0x80000000)        /*!< Port x Reset bit 15 */\n 1546  \n 1547  /*******************  Bit definition for GPIO_BRR register  *******************/\n 1548: #define GPIO_BRR_BR0                         ((uint32_t)0x0001)            /*!< Port x Reset bit 0 */\n 1549: #define GPIO_BRR_BR1                         ((uint32_t)0x0002)            /*!< Port x Reset bit 1 */\n 1550: #define GPIO_BRR_BR2                         ((uint32_t)0x0004)            /*!< Port x Reset bit 2 */\n 1551: #define GPIO_BRR_BR3                         ((uint32_t)0x0008)            /*!< Port x Reset bit 3 */\n 1552: #define GPIO_BRR_BR4                         ((uint32_t)0x0010)            /*!< Port x Reset bit 4 */\n 1553: #define GPIO_BRR_BR5                         ((uint32_t)0x0020)            /*!< Port x Reset bit 5 */\n 1554: #define GPIO_BRR_BR6                         ((uint32_t)0x0040)            /*!< Port x Reset bit 6 */\n 1555: #define GPIO_BRR_BR7                         ((uint32_t)0x0080)            /*!< Port x Reset bit 7 */\n 1556: #define GPIO_BRR_BR8                         ((uint32_t)0x0100)            /*!< Port x Reset bit 8 */\n 1557: #define GPIO_BRR_BR9                         ((uint32_t)0x0200)            /*!< Port x Reset bit 9 */\n 1558: #define GPIO_BRR_BR10                        ((uint32_t)0x0400)            /*!< Port x Reset bit 10 */\n 1559: #define GPIO_BRR_BR11                        ((uint32_t)0x0800)            /*!< Port x Reset bit 11 */\n 1560: #define GPIO_BRR_BR12                        ((uint32_t)0x1000)            /*!< Port x Reset bit 12 */\n 1561: #define GPIO_BRR_BR13                        ((uint32_t)0x2000)            /*!< Port x Reset bit 13 */\n 1562: #define GPIO_BRR_BR14                        ((uint32_t)0x4000)            /*!< Port x Reset bit 14 */\n 1563: #define GPIO_BRR_BR15                        ((uint32_t)0x8000)            /*!< Port x Reset bit 15 */\n 1564  \n 1565  /******************  Bit definition for GPIO_LCKR register  *******************/\n ....\n 1678  #define AFIO_MAPR_SWJ_CFG_2                  ((uint32_t)0x04000000)        /*!< Bit 2 */\n 1679  \n 1680: #define AFIO_MAPR_SWJ_CFG_RESET              ((uint32_t)0x00000000)        /*!< Full SWJ (JTAG-DP + SW-DP) : Reset State */\n 1681  #define AFIO_MAPR_SWJ_CFG_NOJNTRST           ((uint32_t)0x01000000)        /*!< Full SWJ (JTAG-DP + SW-DP) but without JNTRST */\n 1682  #define AFIO_MAPR_SWJ_CFG_JTAGDISABLE        ((uint32_t)0x02000000)        /*!< JTAG-DP Disabled and SW-DP Enabled */\n ....\n 2138  \n 2139  /*!<*****************  Bit definition for SCB_AIRCR register  *******************/\n 2140: #define  SCB_AIRCR_VECTRESET                 ((uint32_t)0x00000001)        /*!< System Reset bit */\n 2141  #define  SCB_AIRCR_VECTCLRACTIVE             ((uint32_t)0x00000002)        /*!< Clear active vector bit */\n 2142: #define  SCB_AIRCR_SYSRESETREQ               ((uint32_t)0x00000004)        /*!< Requests chip control logic to generate a reset */\n 2143  \n 2144  #define  SCB_AIRCR_PRIGROUP                  ((uint32_t)0x00000700)        /*!< PRIGROUP[2:0] bits (Priority group) */\n ....\n 2524  #define  ADC_CR2_CONT                        ((uint32_t)0x00000002)        /*!< Continuous Conversion */\n 2525  #define  ADC_CR2_CAL                         ((uint32_t)0x00000004)        /*!< A/D Calibration */\n 2526: #define  ADC_CR2_RSTCAL                      ((uint32_t)0x00000008)        /*!< Reset Calibration */\n 2527  #define  ADC_CR2_DMA                         ((uint32_t)0x00000100)        /*!< Direct Memory access mode */\n 2528  #define  ADC_CR2_ALIGN                       ((uint32_t)0x00000800)        /*!< Data Alignment */\n ....\n 3827  #define  I2C_CR1_PEC                         ((uint32_t)0x00001000)        /*!< Packet Error Checking */\n 3828  #define  I2C_CR1_ALERT                       ((uint32_t)0x00002000)        /*!< SMBus Alert */\n 3829: #define  I2C_CR1_SWRST                       ((uint32_t)0x00008000)        /*!< Software Reset */\n 3830  \n 3831  /*******************  Bit definition for I2C_CR2 register  ********************/\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f102x6.h:\n  354  \n  355  /** \n  356:   * @brief Reset and Clock Control\n  357    */\n  358  \n  ...\n  664  \n  665  /********************  Bit definition for CRC_CR register  ********************/\n  666: #define  CRC_CR_RESET                        ((uint32_t)0x00000001)        /*!< RESET bit */\n  667  \n  668  /******************************************************************************/\n  ...\n  760  /******************************************************************************/\n  761  /*                                                                            */\n  762: /*                         Reset and Clock Control                            */\n  763  /*                                                                            */\n  764  /******************************************************************************/\n  ...\n  911  \n  912  /*****************  Bit definition for RCC_APB2RSTR register  *****************/\n  913: #define  RCC_APB2RSTR_AFIORST                ((uint32_t)0x00000001)        /*!< Alternate Function I/O reset */\n  914: #define  RCC_APB2RSTR_IOPARST                ((uint32_t)0x00000004)        /*!< I/O port A reset */\n  915: #define  RCC_APB2RSTR_IOPBRST                ((uint32_t)0x00000008)        /*!< I/O port B reset */\n  916: #define  RCC_APB2RSTR_IOPCRST                ((uint32_t)0x00000010)        /*!< I/O port C reset */\n  917: #define  RCC_APB2RSTR_IOPDRST                ((uint32_t)0x00000020)        /*!< I/O port D reset */\n  918: #define  RCC_APB2RSTR_ADC1RST                ((uint32_t)0x00000200)        /*!< ADC 1 interface reset */\n  919  \n  920  \n  921: #define  RCC_APB2RSTR_TIM1RST                ((uint32_t)0x00000800)        /*!< TIM1 Timer reset */\n  922: #define  RCC_APB2RSTR_SPI1RST                ((uint32_t)0x00001000)        /*!< SPI 1 reset */\n  923: #define  RCC_APB2RSTR_USART1RST              ((uint32_t)0x00004000)        /*!< USART1 reset */\n  924  \n  925  \n  ...\n  929  \n  930  /*****************  Bit definition for RCC_APB1RSTR register  *****************/\n  931: #define  RCC_APB1RSTR_TIM2RST                ((uint32_t)0x00000001)        /*!< Timer 2 reset */\n  932: #define  RCC_APB1RSTR_TIM3RST                ((uint32_t)0x00000002)        /*!< Timer 3 reset */\n  933: #define  RCC_APB1RSTR_WWDGRST                ((uint32_t)0x00000800)        /*!< Window Watchdog reset */\n  934: #define  RCC_APB1RSTR_USART2RST              ((uint32_t)0x00020000)        /*!< USART 2 reset */\n  935: #define  RCC_APB1RSTR_I2C1RST                ((uint32_t)0x00200000)        /*!< I2C 1 reset */\n  936  \n  937  \n  938: #define  RCC_APB1RSTR_BKPRST                 ((uint32_t)0x08000000)        /*!< Backup interface reset */\n  939: #define  RCC_APB1RSTR_PWRRST                 ((uint32_t)0x10000000)        /*!< Power interface reset */\n  940  \n  941  \n  942: #define  RCC_APB1RSTR_USBRST                ((uint32_t)0x00800000)        /*!< USB Device reset */\n  943  \n  944  \n  ...\n 1009  \n 1010  #define  RCC_BDCR_RTCEN                      ((uint32_t)0x00008000)        /*!< RTC clock enable */\n 1011: #define  RCC_BDCR_BDRST                      ((uint32_t)0x00010000)        /*!< Backup domain software reset  */\n 1012  \n 1013  /*******************  Bit definition for RCC_CSR register  ********************/  \n 1014  #define  RCC_CSR_LSION                       ((uint32_t)0x00000001)        /*!< Internal Low Speed oscillator enable */\n 1015  #define  RCC_CSR_LSIRDY                      ((uint32_t)0x00000002)        /*!< Internal Low Speed oscillator Ready */\n 1016: #define  RCC_CSR_RMVF                        ((uint32_t)0x01000000)        /*!< Remove reset flag */\n 1017: #define  RCC_CSR_PINRSTF                     ((uint32_t)0x04000000)        /*!< PIN reset flag */\n 1018: #define  RCC_CSR_PORRSTF                     ((uint32_t)0x08000000)        /*!< POR/PDR reset flag */\n 1019: #define  RCC_CSR_SFTRSTF                     ((uint32_t)0x10000000)        /*!< Software Reset flag */\n 1020: #define  RCC_CSR_IWDGRSTF                    ((uint32_t)0x20000000)        /*!< Independent Watchdog reset flag */\n 1021: #define  RCC_CSR_WWDGRSTF                    ((uint32_t)0x40000000)        /*!< Window watchdog reset flag */\n 1022: #define  RCC_CSR_LPWRRSTF                    ((uint32_t)0x80000000)        /*!< Low-Power reset flag */\n 1023  \n 1024  \n ....\n 1222  #define GPIO_BSRR_BS15                       ((uint32_t)0x00008000)        /*!< Port x Set bit 15 */\n 1223  \n 1224: #define GPIO_BSRR_BR0                        ((uint32_t)0x00010000)        /*!< Port x Reset bit 0 */\n 1225: #define GPIO_BSRR_BR1                        ((uint32_t)0x00020000)        /*!< Port x Reset bit 1 */\n 1226: #define GPIO_BSRR_BR2                        ((uint32_t)0x00040000)        /*!< Port x Reset bit 2 */\n 1227: #define GPIO_BSRR_BR3                        ((uint32_t)0x00080000)        /*!< Port x Reset bit 3 */\n 1228: #define GPIO_BSRR_BR4                        ((uint32_t)0x00100000)        /*!< Port x Reset bit 4 */\n 1229: #define GPIO_BSRR_BR5                        ((uint32_t)0x00200000)        /*!< Port x Reset bit 5 */\n 1230: #define GPIO_BSRR_BR6                        ((uint32_t)0x00400000)        /*!< Port x Reset bit 6 */\n 1231: #define GPIO_BSRR_BR7                        ((uint32_t)0x00800000)        /*!< Port x Reset bit 7 */\n 1232: #define GPIO_BSRR_BR8                        ((uint32_t)0x01000000)        /*!< Port x Reset bit 8 */\n 1233: #define GPIO_BSRR_BR9                        ((uint32_t)0x02000000)        /*!< Port x Reset bit 9 */\n 1234: #define GPIO_BSRR_BR10                       ((uint32_t)0x04000000)        /*!< Port x Reset bit 10 */\n 1235: #define GPIO_BSRR_BR11                       ((uint32_t)0x08000000)        /*!< Port x Reset bit 11 */\n 1236: #define GPIO_BSRR_BR12                       ((uint32_t)0x10000000)        /*!< Port x Reset bit 12 */\n 1237: #define GPIO_BSRR_BR13                       ((uint32_t)0x20000000)        /*!< Port x Reset bit 13 */\n 1238: #define GPIO_BSRR_BR14                       ((uint32_t)0x40000000)        /*!< Port x Reset bit 14 */\n 1239: #define GPIO_BSRR_BR15                       ((uint32_t)0x80000000)        /*!< Port x Reset bit 15 */\n 1240  \n 1241  /*******************  Bit definition for GPIO_BRR register  *******************/\n 1242: #define GPIO_BRR_BR0                         ((uint32_t)0x0001)            /*!< Port x Reset bit 0 */\n 1243: #define GPIO_BRR_BR1                         ((uint32_t)0x0002)            /*!< Port x Reset bit 1 */\n 1244: #define GPIO_BRR_BR2                         ((uint32_t)0x0004)            /*!< Port x Reset bit 2 */\n 1245: #define GPIO_BRR_BR3                         ((uint32_t)0x0008)            /*!< Port x Reset bit 3 */\n 1246: #define GPIO_BRR_BR4                         ((uint32_t)0x0010)            /*!< Port x Reset bit 4 */\n 1247: #define GPIO_BRR_BR5                         ((uint32_t)0x0020)            /*!< Port x Reset bit 5 */\n 1248: #define GPIO_BRR_BR6                         ((uint32_t)0x0040)            /*!< Port x Reset bit 6 */\n 1249: #define GPIO_BRR_BR7                         ((uint32_t)0x0080)            /*!< Port x Reset bit 7 */\n 1250: #define GPIO_BRR_BR8                         ((uint32_t)0x0100)            /*!< Port x Reset bit 8 */\n 1251: #define GPIO_BRR_BR9                         ((uint32_t)0x0200)            /*!< Port x Reset bit 9 */\n 1252: #define GPIO_BRR_BR10                        ((uint32_t)0x0400)            /*!< Port x Reset bit 10 */\n 1253: #define GPIO_BRR_BR11                        ((uint32_t)0x0800)            /*!< Port x Reset bit 11 */\n 1254: #define GPIO_BRR_BR12                        ((uint32_t)0x1000)            /*!< Port x Reset bit 12 */\n 1255: #define GPIO_BRR_BR13                        ((uint32_t)0x2000)            /*!< Port x Reset bit 13 */\n 1256: #define GPIO_BRR_BR14                        ((uint32_t)0x4000)            /*!< Port x Reset bit 14 */\n 1257: #define GPIO_BRR_BR15                        ((uint32_t)0x8000)            /*!< Port x Reset bit 15 */\n 1258  \n 1259  /******************  Bit definition for GPIO_LCKR register  *******************/\n ....\n 1362  #define AFIO_MAPR_SWJ_CFG_2                  ((uint32_t)0x04000000)        /*!< Bit 2 */\n 1363  \n 1364: #define AFIO_MAPR_SWJ_CFG_RESET              ((uint32_t)0x00000000)        /*!< Full SWJ (JTAG-DP + SW-DP) : Reset State */\n 1365  #define AFIO_MAPR_SWJ_CFG_NOJNTRST           ((uint32_t)0x01000000)        /*!< Full SWJ (JTAG-DP + SW-DP) but without JNTRST */\n 1366  #define AFIO_MAPR_SWJ_CFG_JTAGDISABLE        ((uint32_t)0x02000000)        /*!< JTAG-DP Disabled and SW-DP Enabled */\n ....\n 1816  \n 1817  /*!<*****************  Bit definition for SCB_AIRCR register  *******************/\n 1818: #define  SCB_AIRCR_VECTRESET                 ((uint32_t)0x00000001)        /*!< System Reset bit */\n 1819  #define  SCB_AIRCR_VECTCLRACTIVE             ((uint32_t)0x00000002)        /*!< Clear active vector bit */\n 1820: #define  SCB_AIRCR_SYSRESETREQ               ((uint32_t)0x00000004)        /*!< Requests chip control logic to generate a reset */\n 1821  \n 1822  #define  SCB_AIRCR_PRIGROUP                  ((uint32_t)0x00000700)        /*!< PRIGROUP[2:0] bits (Priority group) */\n ....\n 2196  #define  ADC_CR2_CONT                        ((uint32_t)0x00000002)        /*!< Continuous Conversion */\n 2197  #define  ADC_CR2_CAL                         ((uint32_t)0x00000004)        /*!< A/D Calibration */\n 2198: #define  ADC_CR2_RSTCAL                      ((uint32_t)0x00000008)        /*!< Reset Calibration */\n 2199  #define  ADC_CR2_DMA                         ((uint32_t)0x00000100)        /*!< Direct Memory access mode */\n 2200  #define  ADC_CR2_ALIGN                       ((uint32_t)0x00000800)        /*!< Data Alignment */\n ....\n 3304  /*!< Common registers */\n 3305  /*******************  Bit definition for USB_CNTR register  *******************/\n 3306: #define  USB_CNTR_FRES                       ((uint32_t)0x00000001)        /*!< Force USB Reset */\n 3307  #define  USB_CNTR_PDWN                       ((uint32_t)0x00000002)        /*!< Power down */\n 3308  #define  USB_CNTR_LP_MODE                    ((uint32_t)0x00000004)        /*!< Low-power mode */\n ....\n 3311  #define  USB_CNTR_ESOFM                      ((uint32_t)0x00000100)        /*!< Expected Start Of Frame Interrupt Mask */\n 3312  #define  USB_CNTR_SOFM                       ((uint32_t)0x00000200)        /*!< Start Of Frame Interrupt Mask */\n 3313: #define  USB_CNTR_RESETM                     ((uint32_t)0x00000400)        /*!< RESET Interrupt Mask */\n 3314  #define  USB_CNTR_SUSPM                      ((uint32_t)0x00000800)        /*!< Suspend mode Interrupt Mask */\n 3315  #define  USB_CNTR_WKUPM                      ((uint32_t)0x00001000)        /*!< Wakeup Interrupt Mask */\n ....\n 3323  #define  USB_ISTR_ESOF                       ((uint32_t)0x00000100)        /*!< Expected Start Of Frame */\n 3324  #define  USB_ISTR_SOF                        ((uint32_t)0x00000200)        /*!< Start Of Frame */\n 3325: #define  USB_ISTR_RESET                      ((uint32_t)0x00000400)        /*!< USB RESET request */\n 3326  #define  USB_ISTR_SUSP                       ((uint32_t)0x00000800)        /*!< Suspend mode request */\n 3327  #define  USB_ISTR_WKUP                       ((uint32_t)0x00001000)        /*!< Wake up */\n ....\n 3853  #define  I2C_CR1_PEC                         ((uint32_t)0x00001000)        /*!< Packet Error Checking */\n 3854  #define  I2C_CR1_ALERT                       ((uint32_t)0x00002000)        /*!< SMBus Alert */\n 3855: #define  I2C_CR1_SWRST                       ((uint32_t)0x00008000)        /*!< Software Reset */\n 3856  \n 3857  /*******************  Bit definition for I2C_CR2 register  ********************/\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f102xb.h:\n  359  \n  360  /** \n  361:   * @brief Reset and Clock Control\n  362    */\n  363  \n  ...\n  677  \n  678  /********************  Bit definition for CRC_CR register  ********************/\n  679: #define  CRC_CR_RESET                        ((uint32_t)0x00000001)        /*!< RESET bit */\n  680  \n  681  /******************************************************************************/\n  ...\n  773  /******************************************************************************/\n  774  /*                                                                            */\n  775: /*                         Reset and Clock Control                            */\n  776  /*                                                                            */\n  777  /******************************************************************************/\n  ...\n  924  \n  925  /*****************  Bit definition for RCC_APB2RSTR register  *****************/\n  926: #define  RCC_APB2RSTR_AFIORST                ((uint32_t)0x00000001)        /*!< Alternate Function I/O reset */\n  927: #define  RCC_APB2RSTR_IOPARST                ((uint32_t)0x00000004)        /*!< I/O port A reset */\n  928: #define  RCC_APB2RSTR_IOPBRST                ((uint32_t)0x00000008)        /*!< I/O port B reset */\n  929: #define  RCC_APB2RSTR_IOPCRST                ((uint32_t)0x00000010)        /*!< I/O port C reset */\n  930: #define  RCC_APB2RSTR_IOPDRST                ((uint32_t)0x00000020)        /*!< I/O port D reset */\n  931: #define  RCC_APB2RSTR_ADC1RST                ((uint32_t)0x00000200)        /*!< ADC 1 interface reset */\n  932  \n  933  \n  934: #define  RCC_APB2RSTR_TIM1RST                ((uint32_t)0x00000800)        /*!< TIM1 Timer reset */\n  935: #define  RCC_APB2RSTR_SPI1RST                ((uint32_t)0x00001000)        /*!< SPI 1 reset */\n  936: #define  RCC_APB2RSTR_USART1RST              ((uint32_t)0x00004000)        /*!< USART1 reset */\n  937  \n  938  \n  ...\n  942  \n  943  /*****************  Bit definition for RCC_APB1RSTR register  *****************/\n  944: #define  RCC_APB1RSTR_TIM2RST                ((uint32_t)0x00000001)        /*!< Timer 2 reset */\n  945: #define  RCC_APB1RSTR_TIM3RST                ((uint32_t)0x00000002)        /*!< Timer 3 reset */\n  946: #define  RCC_APB1RSTR_WWDGRST                ((uint32_t)0x00000800)        /*!< Window Watchdog reset */\n  947: #define  RCC_APB1RSTR_USART2RST              ((uint32_t)0x00020000)        /*!< USART 2 reset */\n  948: #define  RCC_APB1RSTR_I2C1RST                ((uint32_t)0x00200000)        /*!< I2C 1 reset */\n  949  \n  950  \n  951: #define  RCC_APB1RSTR_BKPRST                 ((uint32_t)0x08000000)        /*!< Backup interface reset */\n  952: #define  RCC_APB1RSTR_PWRRST                 ((uint32_t)0x10000000)        /*!< Power interface reset */\n  953  \n  954: #define  RCC_APB1RSTR_TIM4RST               ((uint32_t)0x00000004)        /*!< Timer 4 reset */\n  955: #define  RCC_APB1RSTR_SPI2RST               ((uint32_t)0x00004000)        /*!< SPI 2 reset */\n  956: #define  RCC_APB1RSTR_USART3RST             ((uint32_t)0x00040000)        /*!< USART 3 reset */\n  957: #define  RCC_APB1RSTR_I2C2RST               ((uint32_t)0x00400000)        /*!< I2C 2 reset */\n  958  \n  959: #define  RCC_APB1RSTR_USBRST                ((uint32_t)0x00800000)        /*!< USB Device reset */\n  960  \n  961  \n  ...\n 1030  \n 1031  #define  RCC_BDCR_RTCEN                      ((uint32_t)0x00008000)        /*!< RTC clock enable */\n 1032: #define  RCC_BDCR_BDRST                      ((uint32_t)0x00010000)        /*!< Backup domain software reset  */\n 1033  \n 1034  /*******************  Bit definition for RCC_CSR register  ********************/  \n 1035  #define  RCC_CSR_LSION                       ((uint32_t)0x00000001)        /*!< Internal Low Speed oscillator enable */\n 1036  #define  RCC_CSR_LSIRDY                      ((uint32_t)0x00000002)        /*!< Internal Low Speed oscillator Ready */\n 1037: #define  RCC_CSR_RMVF                        ((uint32_t)0x01000000)        /*!< Remove reset flag */\n 1038: #define  RCC_CSR_PINRSTF                     ((uint32_t)0x04000000)        /*!< PIN reset flag */\n 1039: #define  RCC_CSR_PORRSTF                     ((uint32_t)0x08000000)        /*!< POR/PDR reset flag */\n 1040: #define  RCC_CSR_SFTRSTF                     ((uint32_t)0x10000000)        /*!< Software Reset flag */\n 1041: #define  RCC_CSR_IWDGRSTF                    ((uint32_t)0x20000000)        /*!< Independent Watchdog reset flag */\n 1042: #define  RCC_CSR_WWDGRSTF                    ((uint32_t)0x40000000)        /*!< Window watchdog reset flag */\n 1043: #define  RCC_CSR_LPWRRSTF                    ((uint32_t)0x80000000)        /*!< Low-Power reset flag */\n 1044  \n 1045  \n ....\n 1243  #define GPIO_BSRR_BS15                       ((uint32_t)0x00008000)        /*!< Port x Set bit 15 */\n 1244  \n 1245: #define GPIO_BSRR_BR0                        ((uint32_t)0x00010000)        /*!< Port x Reset bit 0 */\n 1246: #define GPIO_BSRR_BR1                        ((uint32_t)0x00020000)        /*!< Port x Reset bit 1 */\n 1247: #define GPIO_BSRR_BR2                        ((uint32_t)0x00040000)        /*!< Port x Reset bit 2 */\n 1248: #define GPIO_BSRR_BR3                        ((uint32_t)0x00080000)        /*!< Port x Reset bit 3 */\n 1249: #define GPIO_BSRR_BR4                        ((uint32_t)0x00100000)        /*!< Port x Reset bit 4 */\n 1250: #define GPIO_BSRR_BR5                        ((uint32_t)0x00200000)        /*!< Port x Reset bit 5 */\n 1251: #define GPIO_BSRR_BR6                        ((uint32_t)0x00400000)        /*!< Port x Reset bit 6 */\n 1252: #define GPIO_BSRR_BR7                        ((uint32_t)0x00800000)        /*!< Port x Reset bit 7 */\n 1253: #define GPIO_BSRR_BR8                        ((uint32_t)0x01000000)        /*!< Port x Reset bit 8 */\n 1254: #define GPIO_BSRR_BR9                        ((uint32_t)0x02000000)        /*!< Port x Reset bit 9 */\n 1255: #define GPIO_BSRR_BR10                       ((uint32_t)0x04000000)        /*!< Port x Reset bit 10 */\n 1256: #define GPIO_BSRR_BR11                       ((uint32_t)0x08000000)        /*!< Port x Reset bit 11 */\n 1257: #define GPIO_BSRR_BR12                       ((uint32_t)0x10000000)        /*!< Port x Reset bit 12 */\n 1258: #define GPIO_BSRR_BR13                       ((uint32_t)0x20000000)        /*!< Port x Reset bit 13 */\n 1259: #define GPIO_BSRR_BR14                       ((uint32_t)0x40000000)        /*!< Port x Reset bit 14 */\n 1260: #define GPIO_BSRR_BR15                       ((uint32_t)0x80000000)        /*!< Port x Reset bit 15 */\n 1261  \n 1262  /*******************  Bit definition for GPIO_BRR register  *******************/\n 1263: #define GPIO_BRR_BR0                         ((uint32_t)0x0001)            /*!< Port x Reset bit 0 */\n 1264: #define GPIO_BRR_BR1                         ((uint32_t)0x0002)            /*!< Port x Reset bit 1 */\n 1265: #define GPIO_BRR_BR2                         ((uint32_t)0x0004)            /*!< Port x Reset bit 2 */\n 1266: #define GPIO_BRR_BR3                         ((uint32_t)0x0008)            /*!< Port x Reset bit 3 */\n 1267: #define GPIO_BRR_BR4                         ((uint32_t)0x0010)            /*!< Port x Reset bit 4 */\n 1268: #define GPIO_BRR_BR5                         ((uint32_t)0x0020)            /*!< Port x Reset bit 5 */\n 1269: #define GPIO_BRR_BR6                         ((uint32_t)0x0040)            /*!< Port x Reset bit 6 */\n 1270: #define GPIO_BRR_BR7                         ((uint32_t)0x0080)            /*!< Port x Reset bit 7 */\n 1271: #define GPIO_BRR_BR8                         ((uint32_t)0x0100)            /*!< Port x Reset bit 8 */\n 1272: #define GPIO_BRR_BR9                         ((uint32_t)0x0200)            /*!< Port x Reset bit 9 */\n 1273: #define GPIO_BRR_BR10                        ((uint32_t)0x0400)            /*!< Port x Reset bit 10 */\n 1274: #define GPIO_BRR_BR11                        ((uint32_t)0x0800)            /*!< Port x Reset bit 11 */\n 1275: #define GPIO_BRR_BR12                        ((uint32_t)0x1000)            /*!< Port x Reset bit 12 */\n 1276: #define GPIO_BRR_BR13                        ((uint32_t)0x2000)            /*!< Port x Reset bit 13 */\n 1277: #define GPIO_BRR_BR14                        ((uint32_t)0x4000)            /*!< Port x Reset bit 14 */\n 1278: #define GPIO_BRR_BR15                        ((uint32_t)0x8000)            /*!< Port x Reset bit 15 */\n 1279  \n 1280  /******************  Bit definition for GPIO_LCKR register  *******************/\n ....\n 1392  #define AFIO_MAPR_SWJ_CFG_2                  ((uint32_t)0x04000000)        /*!< Bit 2 */\n 1393  \n 1394: #define AFIO_MAPR_SWJ_CFG_RESET              ((uint32_t)0x00000000)        /*!< Full SWJ (JTAG-DP + SW-DP) : Reset State */\n 1395  #define AFIO_MAPR_SWJ_CFG_NOJNTRST           ((uint32_t)0x01000000)        /*!< Full SWJ (JTAG-DP + SW-DP) but without JNTRST */\n 1396  #define AFIO_MAPR_SWJ_CFG_JTAGDISABLE        ((uint32_t)0x02000000)        /*!< JTAG-DP Disabled and SW-DP Enabled */\n ....\n 1846  \n 1847  /*!<*****************  Bit definition for SCB_AIRCR register  *******************/\n 1848: #define  SCB_AIRCR_VECTRESET                 ((uint32_t)0x00000001)        /*!< System Reset bit */\n 1849  #define  SCB_AIRCR_VECTCLRACTIVE             ((uint32_t)0x00000002)        /*!< Clear active vector bit */\n 1850: #define  SCB_AIRCR_SYSRESETREQ               ((uint32_t)0x00000004)        /*!< Requests chip control logic to generate a reset */\n 1851  \n 1852  #define  SCB_AIRCR_PRIGROUP                  ((uint32_t)0x00000700)        /*!< PRIGROUP[2:0] bits (Priority group) */\n ....\n 2226  #define  ADC_CR2_CONT                        ((uint32_t)0x00000002)        /*!< Continuous Conversion */\n 2227  #define  ADC_CR2_CAL                         ((uint32_t)0x00000004)        /*!< A/D Calibration */\n 2228: #define  ADC_CR2_RSTCAL                      ((uint32_t)0x00000008)        /*!< Reset Calibration */\n 2229  #define  ADC_CR2_DMA                         ((uint32_t)0x00000100)        /*!< Direct Memory access mode */\n 2230  #define  ADC_CR2_ALIGN                       ((uint32_t)0x00000800)        /*!< Data Alignment */\n ....\n 3334  /*!< Common registers */\n 3335  /*******************  Bit definition for USB_CNTR register  *******************/\n 3336: #define  USB_CNTR_FRES                       ((uint32_t)0x00000001)        /*!< Force USB Reset */\n 3337  #define  USB_CNTR_PDWN                       ((uint32_t)0x00000002)        /*!< Power down */\n 3338  #define  USB_CNTR_LP_MODE                    ((uint32_t)0x00000004)        /*!< Low-power mode */\n ....\n 3341  #define  USB_CNTR_ESOFM                      ((uint32_t)0x00000100)        /*!< Expected Start Of Frame Interrupt Mask */\n 3342  #define  USB_CNTR_SOFM                       ((uint32_t)0x00000200)        /*!< Start Of Frame Interrupt Mask */\n 3343: #define  USB_CNTR_RESETM                     ((uint32_t)0x00000400)        /*!< RESET Interrupt Mask */\n 3344  #define  USB_CNTR_SUSPM                      ((uint32_t)0x00000800)        /*!< Suspend mode Interrupt Mask */\n 3345  #define  USB_CNTR_WKUPM                      ((uint32_t)0x00001000)        /*!< Wakeup Interrupt Mask */\n ....\n 3353  #define  USB_ISTR_ESOF                       ((uint32_t)0x00000100)        /*!< Expected Start Of Frame */\n 3354  #define  USB_ISTR_SOF                        ((uint32_t)0x00000200)        /*!< Start Of Frame */\n 3355: #define  USB_ISTR_RESET                      ((uint32_t)0x00000400)        /*!< USB RESET request */\n 3356  #define  USB_ISTR_SUSP                       ((uint32_t)0x00000800)        /*!< Suspend mode request */\n 3357  #define  USB_ISTR_WKUP                       ((uint32_t)0x00001000)        /*!< Wake up */\n ....\n 3883  #define  I2C_CR1_PEC                         ((uint32_t)0x00001000)        /*!< Packet Error Checking */\n 3884  #define  I2C_CR1_ALERT                       ((uint32_t)0x00002000)        /*!< SMBus Alert */\n 3885: #define  I2C_CR1_SWRST                       ((uint32_t)0x00008000)        /*!< Software Reset */\n 3886  \n 3887  /*******************  Bit definition for I2C_CR2 register  ********************/\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f103x6.h:\n  423  \n  424  /** \n  425:   * @brief Reset and Clock Control\n  426    */\n  427  \n  ...\n  739  \n  740  /********************  Bit definition for CRC_CR register  ********************/\n  741: #define  CRC_CR_RESET                        ((uint32_t)0x00000001)        /*!< RESET bit */\n  742  \n  743  /******************************************************************************/\n  ...\n  835  /******************************************************************************/\n  836  /*                                                                            */\n  837: /*                         Reset and Clock Control                            */\n  838  /*                                                                            */\n  839  /******************************************************************************/\n  ...\n  986  \n  987  /*****************  Bit definition for RCC_APB2RSTR register  *****************/\n  988: #define  RCC_APB2RSTR_AFIORST                ((uint32_t)0x00000001)        /*!< Alternate Function I/O reset */\n  989: #define  RCC_APB2RSTR_IOPARST                ((uint32_t)0x00000004)        /*!< I/O port A reset */\n  990: #define  RCC_APB2RSTR_IOPBRST                ((uint32_t)0x00000008)        /*!< I/O port B reset */\n  991: #define  RCC_APB2RSTR_IOPCRST                ((uint32_t)0x00000010)        /*!< I/O port C reset */\n  992: #define  RCC_APB2RSTR_IOPDRST                ((uint32_t)0x00000020)        /*!< I/O port D reset */\n  993: #define  RCC_APB2RSTR_ADC1RST                ((uint32_t)0x00000200)        /*!< ADC 1 interface reset */\n  994  \n  995: #define  RCC_APB2RSTR_ADC2RST                ((uint32_t)0x00000400)        /*!< ADC 2 interface reset */\n  996  \n  997: #define  RCC_APB2RSTR_TIM1RST                ((uint32_t)0x00000800)        /*!< TIM1 Timer reset */\n  998: #define  RCC_APB2RSTR_SPI1RST                ((uint32_t)0x00001000)        /*!< SPI 1 reset */\n  999: #define  RCC_APB2RSTR_USART1RST              ((uint32_t)0x00004000)        /*!< USART1 reset */\n 1000  \n 1001  \n ....\n 1005  \n 1006  /*****************  Bit definition for RCC_APB1RSTR register  *****************/\n 1007: #define  RCC_APB1RSTR_TIM2RST                ((uint32_t)0x00000001)        /*!< Timer 2 reset */\n 1008: #define  RCC_APB1RSTR_TIM3RST                ((uint32_t)0x00000002)        /*!< Timer 3 reset */\n 1009: #define  RCC_APB1RSTR_WWDGRST                ((uint32_t)0x00000800)        /*!< Window Watchdog reset */\n 1010: #define  RCC_APB1RSTR_USART2RST              ((uint32_t)0x00020000)        /*!< USART 2 reset */\n 1011: #define  RCC_APB1RSTR_I2C1RST                ((uint32_t)0x00200000)        /*!< I2C 1 reset */\n 1012  \n 1013: #define  RCC_APB1RSTR_CAN1RST                ((uint32_t)0x02000000)        /*!< CAN1 reset */\n 1014  \n 1015: #define  RCC_APB1RSTR_BKPRST                 ((uint32_t)0x08000000)        /*!< Backup interface reset */\n 1016: #define  RCC_APB1RSTR_PWRRST                 ((uint32_t)0x10000000)        /*!< Power interface reset */\n 1017  \n 1018  \n 1019: #define  RCC_APB1RSTR_USBRST                ((uint32_t)0x00800000)        /*!< USB Device reset */\n 1020  \n 1021  \n ....\n 1088  \n 1089  #define  RCC_BDCR_RTCEN                      ((uint32_t)0x00008000)        /*!< RTC clock enable */\n 1090: #define  RCC_BDCR_BDRST                      ((uint32_t)0x00010000)        /*!< Backup domain software reset  */\n 1091  \n 1092  /*******************  Bit definition for RCC_CSR register  ********************/  \n 1093  #define  RCC_CSR_LSION                       ((uint32_t)0x00000001)        /*!< Internal Low Speed oscillator enable */\n 1094  #define  RCC_CSR_LSIRDY                      ((uint32_t)0x00000002)        /*!< Internal Low Speed oscillator Ready */\n 1095: #define  RCC_CSR_RMVF                        ((uint32_t)0x01000000)        /*!< Remove reset flag */\n 1096: #define  RCC_CSR_PINRSTF                     ((uint32_t)0x04000000)        /*!< PIN reset flag */\n 1097: #define  RCC_CSR_PORRSTF                     ((uint32_t)0x08000000)        /*!< POR/PDR reset flag */\n 1098: #define  RCC_CSR_SFTRSTF                     ((uint32_t)0x10000000)        /*!< Software Reset flag */\n 1099: #define  RCC_CSR_IWDGRSTF                    ((uint32_t)0x20000000)        /*!< Independent Watchdog reset flag */\n 1100: #define  RCC_CSR_WWDGRSTF                    ((uint32_t)0x40000000)        /*!< Window watchdog reset flag */\n 1101: #define  RCC_CSR_LPWRRSTF                    ((uint32_t)0x80000000)        /*!< Low-Power reset flag */\n 1102  \n 1103  \n ....\n 1301  #define GPIO_BSRR_BS15                       ((uint32_t)0x00008000)        /*!< Port x Set bit 15 */\n 1302  \n 1303: #define GPIO_BSRR_BR0                        ((uint32_t)0x00010000)        /*!< Port x Reset bit 0 */\n 1304: #define GPIO_BSRR_BR1                        ((uint32_t)0x00020000)        /*!< Port x Reset bit 1 */\n 1305: #define GPIO_BSRR_BR2                        ((uint32_t)0x00040000)        /*!< Port x Reset bit 2 */\n 1306: #define GPIO_BSRR_BR3                        ((uint32_t)0x00080000)        /*!< Port x Reset bit 3 */\n 1307: #define GPIO_BSRR_BR4                        ((uint32_t)0x00100000)        /*!< Port x Reset bit 4 */\n 1308: #define GPIO_BSRR_BR5                        ((uint32_t)0x00200000)        /*!< Port x Reset bit 5 */\n 1309: #define GPIO_BSRR_BR6                        ((uint32_t)0x00400000)        /*!< Port x Reset bit 6 */\n 1310: #define GPIO_BSRR_BR7                        ((uint32_t)0x00800000)        /*!< Port x Reset bit 7 */\n 1311: #define GPIO_BSRR_BR8                        ((uint32_t)0x01000000)        /*!< Port x Reset bit 8 */\n 1312: #define GPIO_BSRR_BR9                        ((uint32_t)0x02000000)        /*!< Port x Reset bit 9 */\n 1313: #define GPIO_BSRR_BR10                       ((uint32_t)0x04000000)        /*!< Port x Reset bit 10 */\n 1314: #define GPIO_BSRR_BR11                       ((uint32_t)0x08000000)        /*!< Port x Reset bit 11 */\n 1315: #define GPIO_BSRR_BR12                       ((uint32_t)0x10000000)        /*!< Port x Reset bit 12 */\n 1316: #define GPIO_BSRR_BR13                       ((uint32_t)0x20000000)        /*!< Port x Reset bit 13 */\n 1317: #define GPIO_BSRR_BR14                       ((uint32_t)0x40000000)        /*!< Port x Reset bit 14 */\n 1318: #define GPIO_BSRR_BR15                       ((uint32_t)0x80000000)        /*!< Port x Reset bit 15 */\n 1319  \n 1320  /*******************  Bit definition for GPIO_BRR register  *******************/\n 1321: #define GPIO_BRR_BR0                         ((uint32_t)0x0001)            /*!< Port x Reset bit 0 */\n 1322: #define GPIO_BRR_BR1                         ((uint32_t)0x0002)            /*!< Port x Reset bit 1 */\n 1323: #define GPIO_BRR_BR2                         ((uint32_t)0x0004)            /*!< Port x Reset bit 2 */\n 1324: #define GPIO_BRR_BR3                         ((uint32_t)0x0008)            /*!< Port x Reset bit 3 */\n 1325: #define GPIO_BRR_BR4                         ((uint32_t)0x0010)            /*!< Port x Reset bit 4 */\n 1326: #define GPIO_BRR_BR5                         ((uint32_t)0x0020)            /*!< Port x Reset bit 5 */\n 1327: #define GPIO_BRR_BR6                         ((uint32_t)0x0040)            /*!< Port x Reset bit 6 */\n 1328: #define GPIO_BRR_BR7                         ((uint32_t)0x0080)            /*!< Port x Reset bit 7 */\n 1329: #define GPIO_BRR_BR8                         ((uint32_t)0x0100)            /*!< Port x Reset bit 8 */\n 1330: #define GPIO_BRR_BR9                         ((uint32_t)0x0200)            /*!< Port x Reset bit 9 */\n 1331: #define GPIO_BRR_BR10                        ((uint32_t)0x0400)            /*!< Port x Reset bit 10 */\n 1332: #define GPIO_BRR_BR11                        ((uint32_t)0x0800)            /*!< Port x Reset bit 11 */\n 1333: #define GPIO_BRR_BR12                        ((uint32_t)0x1000)            /*!< Port x Reset bit 12 */\n 1334: #define GPIO_BRR_BR13                        ((uint32_t)0x2000)            /*!< Port x Reset bit 13 */\n 1335: #define GPIO_BRR_BR14                        ((uint32_t)0x4000)            /*!< Port x Reset bit 14 */\n 1336: #define GPIO_BRR_BR15                        ((uint32_t)0x8000)            /*!< Port x Reset bit 15 */\n 1337  \n 1338  /******************  Bit definition for GPIO_LCKR register  *******************/\n ....\n 1449  #define AFIO_MAPR_SWJ_CFG_2                  ((uint32_t)0x04000000)        /*!< Bit 2 */\n 1450  \n 1451: #define AFIO_MAPR_SWJ_CFG_RESET              ((uint32_t)0x00000000)        /*!< Full SWJ (JTAG-DP + SW-DP) : Reset State */\n 1452  #define AFIO_MAPR_SWJ_CFG_NOJNTRST           ((uint32_t)0x01000000)        /*!< Full SWJ (JTAG-DP + SW-DP) but without JNTRST */\n 1453  #define AFIO_MAPR_SWJ_CFG_JTAGDISABLE        ((uint32_t)0x02000000)        /*!< JTAG-DP Disabled and SW-DP Enabled */\n ....\n 1903  \n 1904  /*!<*****************  Bit definition for SCB_AIRCR register  *******************/\n 1905: #define  SCB_AIRCR_VECTRESET                 ((uint32_t)0x00000001)        /*!< System Reset bit */\n 1906  #define  SCB_AIRCR_VECTCLRACTIVE             ((uint32_t)0x00000002)        /*!< Clear active vector bit */\n 1907: #define  SCB_AIRCR_SYSRESETREQ               ((uint32_t)0x00000004)        /*!< Requests chip control logic to generate a reset */\n 1908  \n 1909  #define  SCB_AIRCR_PRIGROUP                  ((uint32_t)0x00000700)        /*!< PRIGROUP[2:0] bits (Priority group) */\n ....\n 2289  #define  ADC_CR2_CONT                        ((uint32_t)0x00000002)        /*!< Continuous Conversion */\n 2290  #define  ADC_CR2_CAL                         ((uint32_t)0x00000004)        /*!< A/D Calibration */\n 2291: #define  ADC_CR2_RSTCAL                      ((uint32_t)0x00000008)        /*!< Reset Calibration */\n 2292  #define  ADC_CR2_DMA                         ((uint32_t)0x00000100)        /*!< Direct Memory access mode */\n 2293  #define  ADC_CR2_ALIGN                       ((uint32_t)0x00000800)        /*!< Data Alignment */\n ....\n 3398  /*!< Common registers */\n 3399  /*******************  Bit definition for USB_CNTR register  *******************/\n 3400: #define  USB_CNTR_FRES                       ((uint32_t)0x00000001)        /*!< Force USB Reset */\n 3401  #define  USB_CNTR_PDWN                       ((uint32_t)0x00000002)        /*!< Power down */\n 3402  #define  USB_CNTR_LP_MODE                    ((uint32_t)0x00000004)        /*!< Low-power mode */\n ....\n 3405  #define  USB_CNTR_ESOFM                      ((uint32_t)0x00000100)        /*!< Expected Start Of Frame Interrupt Mask */\n 3406  #define  USB_CNTR_SOFM                       ((uint32_t)0x00000200)        /*!< Start Of Frame Interrupt Mask */\n 3407: #define  USB_CNTR_RESETM                     ((uint32_t)0x00000400)        /*!< RESET Interrupt Mask */\n 3408  #define  USB_CNTR_SUSPM                      ((uint32_t)0x00000800)        /*!< Suspend mode Interrupt Mask */\n 3409  #define  USB_CNTR_WKUPM                      ((uint32_t)0x00001000)        /*!< Wakeup Interrupt Mask */\n ....\n 3417  #define  USB_ISTR_ESOF                       ((uint32_t)0x00000100)        /*!< Expected Start Of Frame */\n 3418  #define  USB_ISTR_SOF                        ((uint32_t)0x00000200)        /*!< Start Of Frame */\n 3419: #define  USB_ISTR_RESET                      ((uint32_t)0x00000400)        /*!< USB RESET request */\n 3420  #define  USB_ISTR_SUSP                       ((uint32_t)0x00000800)        /*!< Suspend mode request */\n 3421  #define  USB_ISTR_WKUP                       ((uint32_t)0x00001000)        /*!< Wake up */\n ....\n 3881  #define  CAN_MCR_ABOM                        ((uint32_t)0x00000040)        /*!< Automatic Bus-Off Management */\n 3882  #define  CAN_MCR_TTCM                        ((uint32_t)0x00000080)        /*!< Time Triggered Communication Mode */\n 3883: #define  CAN_MCR_RESET                       ((uint32_t)0x00008000)        /*!< CAN software master reset */\n 3884  #define  CAN_MCR_DBF                         ((uint32_t)0x00010000)        /*!< CAN Debug freeze */\n 3885  \n ....\n 5206  #define  I2C_CR1_PEC                         ((uint32_t)0x00001000)        /*!< Packet Error Checking */\n 5207  #define  I2C_CR1_ALERT                       ((uint32_t)0x00002000)        /*!< SMBus Alert */\n 5208: #define  I2C_CR1_SWRST                       ((uint32_t)0x00008000)        /*!< Software Reset */\n 5209  \n 5210  /*******************  Bit definition for I2C_CR2 register  ********************/\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f103xb.h:\n  428  \n  429  /** \n  430:   * @brief Reset and Clock Control\n  431    */\n  432  \n  ...\n  754  \n  755  /********************  Bit definition for CRC_CR register  ********************/\n  756: #define  CRC_CR_RESET                        ((uint32_t)0x00000001)        /*!< RESET bit */\n  757  \n  758  /******************************************************************************/\n  ...\n  850  /******************************************************************************/\n  851  /*                                                                            */\n  852: /*                         Reset and Clock Control                            */\n  853  /*                                                                            */\n  854  /******************************************************************************/\n  ...\n 1001  \n 1002  /*****************  Bit definition for RCC_APB2RSTR register  *****************/\n 1003: #define  RCC_APB2RSTR_AFIORST                ((uint32_t)0x00000001)        /*!< Alternate Function I/O reset */\n 1004: #define  RCC_APB2RSTR_IOPARST                ((uint32_t)0x00000004)        /*!< I/O port A reset */\n 1005: #define  RCC_APB2RSTR_IOPBRST                ((uint32_t)0x00000008)        /*!< I/O port B reset */\n 1006: #define  RCC_APB2RSTR_IOPCRST                ((uint32_t)0x00000010)        /*!< I/O port C reset */\n 1007: #define  RCC_APB2RSTR_IOPDRST                ((uint32_t)0x00000020)        /*!< I/O port D reset */\n 1008: #define  RCC_APB2RSTR_ADC1RST                ((uint32_t)0x00000200)        /*!< ADC 1 interface reset */\n 1009  \n 1010: #define  RCC_APB2RSTR_ADC2RST                ((uint32_t)0x00000400)        /*!< ADC 2 interface reset */\n 1011  \n 1012: #define  RCC_APB2RSTR_TIM1RST                ((uint32_t)0x00000800)        /*!< TIM1 Timer reset */\n 1013: #define  RCC_APB2RSTR_SPI1RST                ((uint32_t)0x00001000)        /*!< SPI 1 reset */\n 1014: #define  RCC_APB2RSTR_USART1RST              ((uint32_t)0x00004000)        /*!< USART1 reset */\n 1015  \n 1016  \n 1017: #define  RCC_APB2RSTR_IOPERST               ((uint32_t)0x00000040)        /*!< I/O port E reset */\n 1018  \n 1019  \n ....\n 1021  \n 1022  /*****************  Bit definition for RCC_APB1RSTR register  *****************/\n 1023: #define  RCC_APB1RSTR_TIM2RST                ((uint32_t)0x00000001)        /*!< Timer 2 reset */\n 1024: #define  RCC_APB1RSTR_TIM3RST                ((uint32_t)0x00000002)        /*!< Timer 3 reset */\n 1025: #define  RCC_APB1RSTR_WWDGRST                ((uint32_t)0x00000800)        /*!< Window Watchdog reset */\n 1026: #define  RCC_APB1RSTR_USART2RST              ((uint32_t)0x00020000)        /*!< USART 2 reset */\n 1027: #define  RCC_APB1RSTR_I2C1RST                ((uint32_t)0x00200000)        /*!< I2C 1 reset */\n 1028  \n 1029: #define  RCC_APB1RSTR_CAN1RST                ((uint32_t)0x02000000)        /*!< CAN1 reset */\n 1030  \n 1031: #define  RCC_APB1RSTR_BKPRST                 ((uint32_t)0x08000000)        /*!< Backup interface reset */\n 1032: #define  RCC_APB1RSTR_PWRRST                 ((uint32_t)0x10000000)        /*!< Power interface reset */\n 1033  \n 1034: #define  RCC_APB1RSTR_TIM4RST               ((uint32_t)0x00000004)        /*!< Timer 4 reset */\n 1035: #define  RCC_APB1RSTR_SPI2RST               ((uint32_t)0x00004000)        /*!< SPI 2 reset */\n 1036: #define  RCC_APB1RSTR_USART3RST             ((uint32_t)0x00040000)        /*!< USART 3 reset */\n 1037: #define  RCC_APB1RSTR_I2C2RST               ((uint32_t)0x00400000)        /*!< I2C 2 reset */\n 1038  \n 1039: #define  RCC_APB1RSTR_USBRST                ((uint32_t)0x00800000)        /*!< USB Device reset */\n 1040  \n 1041  \n ....\n 1113  \n 1114  #define  RCC_BDCR_RTCEN                      ((uint32_t)0x00008000)        /*!< RTC clock enable */\n 1115: #define  RCC_BDCR_BDRST                      ((uint32_t)0x00010000)        /*!< Backup domain software reset  */\n 1116  \n 1117  /*******************  Bit definition for RCC_CSR register  ********************/  \n 1118  #define  RCC_CSR_LSION                       ((uint32_t)0x00000001)        /*!< Internal Low Speed oscillator enable */\n 1119  #define  RCC_CSR_LSIRDY                      ((uint32_t)0x00000002)        /*!< Internal Low Speed oscillator Ready */\n 1120: #define  RCC_CSR_RMVF                        ((uint32_t)0x01000000)        /*!< Remove reset flag */\n 1121: #define  RCC_CSR_PINRSTF                     ((uint32_t)0x04000000)        /*!< PIN reset flag */\n 1122: #define  RCC_CSR_PORRSTF                     ((uint32_t)0x08000000)        /*!< POR/PDR reset flag */\n 1123: #define  RCC_CSR_SFTRSTF                     ((uint32_t)0x10000000)        /*!< Software Reset flag */\n 1124: #define  RCC_CSR_IWDGRSTF                    ((uint32_t)0x20000000)        /*!< Independent Watchdog reset flag */\n 1125: #define  RCC_CSR_WWDGRSTF                    ((uint32_t)0x40000000)        /*!< Window watchdog reset flag */\n 1126: #define  RCC_CSR_LPWRRSTF                    ((uint32_t)0x80000000)        /*!< Low-Power reset flag */\n 1127  \n 1128  \n ....\n 1326  #define GPIO_BSRR_BS15                       ((uint32_t)0x00008000)        /*!< Port x Set bit 15 */\n 1327  \n 1328: #define GPIO_BSRR_BR0                        ((uint32_t)0x00010000)        /*!< Port x Reset bit 0 */\n 1329: #define GPIO_BSRR_BR1                        ((uint32_t)0x00020000)        /*!< Port x Reset bit 1 */\n 1330: #define GPIO_BSRR_BR2                        ((uint32_t)0x00040000)        /*!< Port x Reset bit 2 */\n 1331: #define GPIO_BSRR_BR3                        ((uint32_t)0x00080000)        /*!< Port x Reset bit 3 */\n 1332: #define GPIO_BSRR_BR4                        ((uint32_t)0x00100000)        /*!< Port x Reset bit 4 */\n 1333: #define GPIO_BSRR_BR5                        ((uint32_t)0x00200000)        /*!< Port x Reset bit 5 */\n 1334: #define GPIO_BSRR_BR6                        ((uint32_t)0x00400000)        /*!< Port x Reset bit 6 */\n 1335: #define GPIO_BSRR_BR7                        ((uint32_t)0x00800000)        /*!< Port x Reset bit 7 */\n 1336: #define GPIO_BSRR_BR8                        ((uint32_t)0x01000000)        /*!< Port x Reset bit 8 */\n 1337: #define GPIO_BSRR_BR9                        ((uint32_t)0x02000000)        /*!< Port x Reset bit 9 */\n 1338: #define GPIO_BSRR_BR10                       ((uint32_t)0x04000000)        /*!< Port x Reset bit 10 */\n 1339: #define GPIO_BSRR_BR11                       ((uint32_t)0x08000000)        /*!< Port x Reset bit 11 */\n 1340: #define GPIO_BSRR_BR12                       ((uint32_t)0x10000000)        /*!< Port x Reset bit 12 */\n 1341: #define GPIO_BSRR_BR13                       ((uint32_t)0x20000000)        /*!< Port x Reset bit 13 */\n 1342: #define GPIO_BSRR_BR14                       ((uint32_t)0x40000000)        /*!< Port x Reset bit 14 */\n 1343: #define GPIO_BSRR_BR15                       ((uint32_t)0x80000000)        /*!< Port x Reset bit 15 */\n 1344  \n 1345  /*******************  Bit definition for GPIO_BRR register  *******************/\n 1346: #define GPIO_BRR_BR0                         ((uint32_t)0x0001)            /*!< Port x Reset bit 0 */\n 1347: #define GPIO_BRR_BR1                         ((uint32_t)0x0002)            /*!< Port x Reset bit 1 */\n 1348: #define GPIO_BRR_BR2                         ((uint32_t)0x0004)            /*!< Port x Reset bit 2 */\n 1349: #define GPIO_BRR_BR3                         ((uint32_t)0x0008)            /*!< Port x Reset bit 3 */\n 1350: #define GPIO_BRR_BR4                         ((uint32_t)0x0010)            /*!< Port x Reset bit 4 */\n 1351: #define GPIO_BRR_BR5                         ((uint32_t)0x0020)            /*!< Port x Reset bit 5 */\n 1352: #define GPIO_BRR_BR6                         ((uint32_t)0x0040)            /*!< Port x Reset bit 6 */\n 1353: #define GPIO_BRR_BR7                         ((uint32_t)0x0080)            /*!< Port x Reset bit 7 */\n 1354: #define GPIO_BRR_BR8                         ((uint32_t)0x0100)            /*!< Port x Reset bit 8 */\n 1355: #define GPIO_BRR_BR9                         ((uint32_t)0x0200)            /*!< Port x Reset bit 9 */\n 1356: #define GPIO_BRR_BR10                        ((uint32_t)0x0400)            /*!< Port x Reset bit 10 */\n 1357: #define GPIO_BRR_BR11                        ((uint32_t)0x0800)            /*!< Port x Reset bit 11 */\n 1358: #define GPIO_BRR_BR12                        ((uint32_t)0x1000)            /*!< Port x Reset bit 12 */\n 1359: #define GPIO_BRR_BR13                        ((uint32_t)0x2000)            /*!< Port x Reset bit 13 */\n 1360: #define GPIO_BRR_BR14                        ((uint32_t)0x4000)            /*!< Port x Reset bit 14 */\n 1361: #define GPIO_BRR_BR15                        ((uint32_t)0x8000)            /*!< Port x Reset bit 15 */\n 1362  \n 1363  /******************  Bit definition for GPIO_LCKR register  *******************/\n ....\n 1483  #define AFIO_MAPR_SWJ_CFG_2                  ((uint32_t)0x04000000)        /*!< Bit 2 */\n 1484  \n 1485: #define AFIO_MAPR_SWJ_CFG_RESET              ((uint32_t)0x00000000)        /*!< Full SWJ (JTAG-DP + SW-DP) : Reset State */\n 1486  #define AFIO_MAPR_SWJ_CFG_NOJNTRST           ((uint32_t)0x01000000)        /*!< Full SWJ (JTAG-DP + SW-DP) but without JNTRST */\n 1487  #define AFIO_MAPR_SWJ_CFG_JTAGDISABLE        ((uint32_t)0x02000000)        /*!< JTAG-DP Disabled and SW-DP Enabled */\n ....\n 1937  \n 1938  /*!<*****************  Bit definition for SCB_AIRCR register  *******************/\n 1939: #define  SCB_AIRCR_VECTRESET                 ((uint32_t)0x00000001)        /*!< System Reset bit */\n 1940  #define  SCB_AIRCR_VECTCLRACTIVE             ((uint32_t)0x00000002)        /*!< Clear active vector bit */\n 1941: #define  SCB_AIRCR_SYSRESETREQ               ((uint32_t)0x00000004)        /*!< Requests chip control logic to generate a reset */\n 1942  \n 1943  #define  SCB_AIRCR_PRIGROUP                  ((uint32_t)0x00000700)        /*!< PRIGROUP[2:0] bits (Priority group) */\n ....\n 2323  #define  ADC_CR2_CONT                        ((uint32_t)0x00000002)        /*!< Continuous Conversion */\n 2324  #define  ADC_CR2_CAL                         ((uint32_t)0x00000004)        /*!< A/D Calibration */\n 2325: #define  ADC_CR2_RSTCAL                      ((uint32_t)0x00000008)        /*!< Reset Calibration */\n 2326  #define  ADC_CR2_DMA                         ((uint32_t)0x00000100)        /*!< Direct Memory access mode */\n 2327  #define  ADC_CR2_ALIGN                       ((uint32_t)0x00000800)        /*!< Data Alignment */\n ....\n 3432  /*!< Common registers */\n 3433  /*******************  Bit definition for USB_CNTR register  *******************/\n 3434: #define  USB_CNTR_FRES                       ((uint32_t)0x00000001)        /*!< Force USB Reset */\n 3435  #define  USB_CNTR_PDWN                       ((uint32_t)0x00000002)        /*!< Power down */\n 3436  #define  USB_CNTR_LP_MODE                    ((uint32_t)0x00000004)        /*!< Low-power mode */\n ....\n 3439  #define  USB_CNTR_ESOFM                      ((uint32_t)0x00000100)        /*!< Expected Start Of Frame Interrupt Mask */\n 3440  #define  USB_CNTR_SOFM                       ((uint32_t)0x00000200)        /*!< Start Of Frame Interrupt Mask */\n 3441: #define  USB_CNTR_RESETM                     ((uint32_t)0x00000400)        /*!< RESET Interrupt Mask */\n 3442  #define  USB_CNTR_SUSPM                      ((uint32_t)0x00000800)        /*!< Suspend mode Interrupt Mask */\n 3443  #define  USB_CNTR_WKUPM                      ((uint32_t)0x00001000)        /*!< Wakeup Interrupt Mask */\n ....\n 3451  #define  USB_ISTR_ESOF                       ((uint32_t)0x00000100)        /*!< Expected Start Of Frame */\n 3452  #define  USB_ISTR_SOF                        ((uint32_t)0x00000200)        /*!< Start Of Frame */\n 3453: #define  USB_ISTR_RESET                      ((uint32_t)0x00000400)        /*!< USB RESET request */\n 3454  #define  USB_ISTR_SUSP                       ((uint32_t)0x00000800)        /*!< Suspend mode request */\n 3455  #define  USB_ISTR_WKUP                       ((uint32_t)0x00001000)        /*!< Wake up */\n ....\n 3915  #define  CAN_MCR_ABOM                        ((uint32_t)0x00000040)        /*!< Automatic Bus-Off Management */\n 3916  #define  CAN_MCR_TTCM                        ((uint32_t)0x00000080)        /*!< Time Triggered Communication Mode */\n 3917: #define  CAN_MCR_RESET                       ((uint32_t)0x00008000)        /*!< CAN software master reset */\n 3918  #define  CAN_MCR_DBF                         ((uint32_t)0x00010000)        /*!< CAN Debug freeze */\n 3919  \n ....\n 5240  #define  I2C_CR1_PEC                         ((uint32_t)0x00001000)        /*!< Packet Error Checking */\n 5241  #define  I2C_CR1_ALERT                       ((uint32_t)0x00002000)        /*!< SMBus Alert */\n 5242: #define  I2C_CR1_SWRST                       ((uint32_t)0x00008000)        /*!< Software Reset */\n 5243  \n 5244  /*******************  Bit definition for I2C_CR2 register  ********************/\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f103xe.h:\n  551  \n  552  /** \n  553:   * @brief Reset and Clock Control\n  554    */\n  555  \n  ...\n  932  \n  933  /********************  Bit definition for CRC_CR register  ********************/\n  934: #define  CRC_CR_RESET                        ((uint32_t)0x00000001)        /*!< RESET bit */\n  935  \n  936  /******************************************************************************/\n  ...\n 1124  /******************************************************************************/\n 1125  /*                                                                            */\n 1126: /*                         Reset and Clock Control                            */\n 1127  /*                                                                            */\n 1128  /******************************************************************************/\n ....\n 1275  \n 1276  /*****************  Bit definition for RCC_APB2RSTR register  *****************/\n 1277: #define  RCC_APB2RSTR_AFIORST                ((uint32_t)0x00000001)        /*!< Alternate Function I/O reset */\n 1278: #define  RCC_APB2RSTR_IOPARST                ((uint32_t)0x00000004)        /*!< I/O port A reset */\n 1279: #define  RCC_APB2RSTR_IOPBRST                ((uint32_t)0x00000008)        /*!< I/O port B reset */\n 1280: #define  RCC_APB2RSTR_IOPCRST                ((uint32_t)0x00000010)        /*!< I/O port C reset */\n 1281: #define  RCC_APB2RSTR_IOPDRST                ((uint32_t)0x00000020)        /*!< I/O port D reset */\n 1282: #define  RCC_APB2RSTR_ADC1RST                ((uint32_t)0x00000200)        /*!< ADC 1 interface reset */\n 1283  \n 1284: #define  RCC_APB2RSTR_ADC2RST                ((uint32_t)0x00000400)        /*!< ADC 2 interface reset */\n 1285  \n 1286: #define  RCC_APB2RSTR_TIM1RST                ((uint32_t)0x00000800)        /*!< TIM1 Timer reset */\n 1287: #define  RCC_APB2RSTR_SPI1RST                ((uint32_t)0x00001000)        /*!< SPI 1 reset */\n 1288: #define  RCC_APB2RSTR_USART1RST              ((uint32_t)0x00004000)        /*!< USART1 reset */\n 1289  \n 1290  \n 1291: #define  RCC_APB2RSTR_IOPERST               ((uint32_t)0x00000040)        /*!< I/O port E reset */\n 1292  \n 1293: #define  RCC_APB2RSTR_IOPFRST               ((uint32_t)0x00000080)        /*!< I/O port F reset */\n 1294: #define  RCC_APB2RSTR_IOPGRST               ((uint32_t)0x00000100)        /*!< I/O port G reset */\n 1295: #define  RCC_APB2RSTR_TIM8RST               ((uint32_t)0x00002000)        /*!< TIM8 Timer reset */\n 1296: #define  RCC_APB2RSTR_ADC3RST               ((uint32_t)0x00008000)        /*!< ADC3 interface reset */\n 1297  \n 1298  \n 1299  \n 1300  /*****************  Bit definition for RCC_APB1RSTR register  *****************/\n 1301: #define  RCC_APB1RSTR_TIM2RST                ((uint32_t)0x00000001)        /*!< Timer 2 reset */\n 1302: #define  RCC_APB1RSTR_TIM3RST                ((uint32_t)0x00000002)        /*!< Timer 3 reset */\n 1303: #define  RCC_APB1RSTR_WWDGRST                ((uint32_t)0x00000800)        /*!< Window Watchdog reset */\n 1304: #define  RCC_APB1RSTR_USART2RST              ((uint32_t)0x00020000)        /*!< USART 2 reset */\n 1305: #define  RCC_APB1RSTR_I2C1RST                ((uint32_t)0x00200000)        /*!< I2C 1 reset */\n 1306  \n 1307: #define  RCC_APB1RSTR_CAN1RST                ((uint32_t)0x02000000)        /*!< CAN1 reset */\n 1308  \n 1309: #define  RCC_APB1RSTR_BKPRST                 ((uint32_t)0x08000000)        /*!< Backup interface reset */\n 1310: #define  RCC_APB1RSTR_PWRRST                 ((uint32_t)0x10000000)        /*!< Power interface reset */\n 1311  \n 1312: #define  RCC_APB1RSTR_TIM4RST               ((uint32_t)0x00000004)        /*!< Timer 4 reset */\n 1313: #define  RCC_APB1RSTR_SPI2RST               ((uint32_t)0x00004000)        /*!< SPI 2 reset */\n 1314: #define  RCC_APB1RSTR_USART3RST             ((uint32_t)0x00040000)        /*!< USART 3 reset */\n 1315: #define  RCC_APB1RSTR_I2C2RST               ((uint32_t)0x00400000)        /*!< I2C 2 reset */\n 1316  \n 1317: #define  RCC_APB1RSTR_USBRST                ((uint32_t)0x00800000)        /*!< USB Device reset */\n 1318  \n 1319: #define  RCC_APB1RSTR_TIM5RST                ((uint32_t)0x00000008)        /*!< Timer 5 reset */\n 1320: #define  RCC_APB1RSTR_TIM6RST                ((uint32_t)0x00000010)        /*!< Timer 6 reset */\n 1321: #define  RCC_APB1RSTR_TIM7RST                ((uint32_t)0x00000020)        /*!< Timer 7 reset */\n 1322: #define  RCC_APB1RSTR_SPI3RST                ((uint32_t)0x00008000)        /*!< SPI 3 reset */\n 1323: #define  RCC_APB1RSTR_UART4RST               ((uint32_t)0x00080000)        /*!< UART 4 reset */\n 1324: #define  RCC_APB1RSTR_UART5RST               ((uint32_t)0x00100000)        /*!< UART 5 reset */\n 1325  \n 1326  \n 1327  \n 1328  \n 1329: #define  RCC_APB1RSTR_DACRST                 ((uint32_t)0x20000000)        /*!< DAC interface reset */\n 1330  \n 1331  /******************  Bit definition for RCC_AHBENR register  ******************/\n ....\n 1412  \n 1413  #define  RCC_BDCR_RTCEN                      ((uint32_t)0x00008000)        /*!< RTC clock enable */\n 1414: #define  RCC_BDCR_BDRST                      ((uint32_t)0x00010000)        /*!< Backup domain software reset  */\n 1415  \n 1416  /*******************  Bit definition for RCC_CSR register  ********************/  \n 1417  #define  RCC_CSR_LSION                       ((uint32_t)0x00000001)        /*!< Internal Low Speed oscillator enable */\n 1418  #define  RCC_CSR_LSIRDY                      ((uint32_t)0x00000002)        /*!< Internal Low Speed oscillator Ready */\n 1419: #define  RCC_CSR_RMVF                        ((uint32_t)0x01000000)        /*!< Remove reset flag */\n 1420: #define  RCC_CSR_PINRSTF                     ((uint32_t)0x04000000)        /*!< PIN reset flag */\n 1421: #define  RCC_CSR_PORRSTF                     ((uint32_t)0x08000000)        /*!< POR/PDR reset flag */\n 1422: #define  RCC_CSR_SFTRSTF                     ((uint32_t)0x10000000)        /*!< Software Reset flag */\n 1423: #define  RCC_CSR_IWDGRSTF                    ((uint32_t)0x20000000)        /*!< Independent Watchdog reset flag */\n 1424: #define  RCC_CSR_WWDGRSTF                    ((uint32_t)0x40000000)        /*!< Window watchdog reset flag */\n 1425: #define  RCC_CSR_LPWRRSTF                    ((uint32_t)0x80000000)        /*!< Low-Power reset flag */\n 1426  \n 1427  \n ....\n 1625  #define GPIO_BSRR_BS15                       ((uint32_t)0x00008000)        /*!< Port x Set bit 15 */\n 1626  \n 1627: #define GPIO_BSRR_BR0                        ((uint32_t)0x00010000)        /*!< Port x Reset bit 0 */\n 1628: #define GPIO_BSRR_BR1                        ((uint32_t)0x00020000)        /*!< Port x Reset bit 1 */\n 1629: #define GPIO_BSRR_BR2                        ((uint32_t)0x00040000)        /*!< Port x Reset bit 2 */\n 1630: #define GPIO_BSRR_BR3                        ((uint32_t)0x00080000)        /*!< Port x Reset bit 3 */\n 1631: #define GPIO_BSRR_BR4                        ((uint32_t)0x00100000)        /*!< Port x Reset bit 4 */\n 1632: #define GPIO_BSRR_BR5                        ((uint32_t)0x00200000)        /*!< Port x Reset bit 5 */\n 1633: #define GPIO_BSRR_BR6                        ((uint32_t)0x00400000)        /*!< Port x Reset bit 6 */\n 1634: #define GPIO_BSRR_BR7                        ((uint32_t)0x00800000)        /*!< Port x Reset bit 7 */\n 1635: #define GPIO_BSRR_BR8                        ((uint32_t)0x01000000)        /*!< Port x Reset bit 8 */\n 1636: #define GPIO_BSRR_BR9                        ((uint32_t)0x02000000)        /*!< Port x Reset bit 9 */\n 1637: #define GPIO_BSRR_BR10                       ((uint32_t)0x04000000)        /*!< Port x Reset bit 10 */\n 1638: #define GPIO_BSRR_BR11                       ((uint32_t)0x08000000)        /*!< Port x Reset bit 11 */\n 1639: #define GPIO_BSRR_BR12                       ((uint32_t)0x10000000)        /*!< Port x Reset bit 12 */\n 1640: #define GPIO_BSRR_BR13                       ((uint32_t)0x20000000)        /*!< Port x Reset bit 13 */\n 1641: #define GPIO_BSRR_BR14                       ((uint32_t)0x40000000)        /*!< Port x Reset bit 14 */\n 1642: #define GPIO_BSRR_BR15                       ((uint32_t)0x80000000)        /*!< Port x Reset bit 15 */\n 1643  \n 1644  /*******************  Bit definition for GPIO_BRR register  *******************/\n 1645: #define GPIO_BRR_BR0                         ((uint32_t)0x0001)            /*!< Port x Reset bit 0 */\n 1646: #define GPIO_BRR_BR1                         ((uint32_t)0x0002)            /*!< Port x Reset bit 1 */\n 1647: #define GPIO_BRR_BR2                         ((uint32_t)0x0004)            /*!< Port x Reset bit 2 */\n 1648: #define GPIO_BRR_BR3                         ((uint32_t)0x0008)            /*!< Port x Reset bit 3 */\n 1649: #define GPIO_BRR_BR4                         ((uint32_t)0x0010)            /*!< Port x Reset bit 4 */\n 1650: #define GPIO_BRR_BR5                         ((uint32_t)0x0020)            /*!< Port x Reset bit 5 */\n 1651: #define GPIO_BRR_BR6                         ((uint32_t)0x0040)            /*!< Port x Reset bit 6 */\n 1652: #define GPIO_BRR_BR7                         ((uint32_t)0x0080)            /*!< Port x Reset bit 7 */\n 1653: #define GPIO_BRR_BR8                         ((uint32_t)0x0100)            /*!< Port x Reset bit 8 */\n 1654: #define GPIO_BRR_BR9                         ((uint32_t)0x0200)            /*!< Port x Reset bit 9 */\n 1655: #define GPIO_BRR_BR10                        ((uint32_t)0x0400)            /*!< Port x Reset bit 10 */\n 1656: #define GPIO_BRR_BR11                        ((uint32_t)0x0800)            /*!< Port x Reset bit 11 */\n 1657: #define GPIO_BRR_BR12                        ((uint32_t)0x1000)            /*!< Port x Reset bit 12 */\n 1658: #define GPIO_BRR_BR13                        ((uint32_t)0x2000)            /*!< Port x Reset bit 13 */\n 1659: #define GPIO_BRR_BR14                        ((uint32_t)0x4000)            /*!< Port x Reset bit 14 */\n 1660: #define GPIO_BRR_BR15                        ((uint32_t)0x8000)            /*!< Port x Reset bit 15 */\n 1661  \n 1662  /******************  Bit definition for GPIO_LCKR register  *******************/\n ....\n 1787  #define AFIO_MAPR_SWJ_CFG_2                  ((uint32_t)0x04000000)        /*!< Bit 2 */\n 1788  \n 1789: #define AFIO_MAPR_SWJ_CFG_RESET              ((uint32_t)0x00000000)        /*!< Full SWJ (JTAG-DP + SW-DP) : Reset State */\n 1790  #define AFIO_MAPR_SWJ_CFG_NOJNTRST           ((uint32_t)0x01000000)        /*!< Full SWJ (JTAG-DP + SW-DP) but without JNTRST */\n 1791  #define AFIO_MAPR_SWJ_CFG_JTAGDISABLE        ((uint32_t)0x02000000)        /*!< JTAG-DP Disabled and SW-DP Enabled */\n ....\n 2242  \n 2243  /*!<*****************  Bit definition for SCB_AIRCR register  *******************/\n 2244: #define  SCB_AIRCR_VECTRESET                 ((uint32_t)0x00000001)        /*!< System Reset bit */\n 2245  #define  SCB_AIRCR_VECTCLRACTIVE             ((uint32_t)0x00000002)        /*!< Clear active vector bit */\n 2246: #define  SCB_AIRCR_SYSRESETREQ               ((uint32_t)0x00000004)        /*!< Requests chip control logic to generate a reset */\n 2247  \n 2248  #define  SCB_AIRCR_PRIGROUP                  ((uint32_t)0x00000700)        /*!< PRIGROUP[2:0] bits (Priority group) */\n ....\n 2628  #define  ADC_CR2_CONT                        ((uint32_t)0x00000002)        /*!< Continuous Conversion */\n 2629  #define  ADC_CR2_CAL                         ((uint32_t)0x00000004)        /*!< A/D Calibration */\n 2630: #define  ADC_CR2_RSTCAL                      ((uint32_t)0x00000008)        /*!< Reset Calibration */\n 2631  #define  ADC_CR2_DMA                         ((uint32_t)0x00000100)        /*!< Direct Memory access mode */\n 2632  #define  ADC_CR2_ALIGN                       ((uint32_t)0x00000800)        /*!< Data Alignment */\n ....\n 4098  /*!< Common registers */\n 4099  /*******************  Bit definition for USB_CNTR register  *******************/\n 4100: #define  USB_CNTR_FRES                       ((uint32_t)0x00000001)        /*!< Force USB Reset */\n 4101  #define  USB_CNTR_PDWN                       ((uint32_t)0x00000002)        /*!< Power down */\n 4102  #define  USB_CNTR_LP_MODE                    ((uint32_t)0x00000004)        /*!< Low-power mode */\n ....\n 4105  #define  USB_CNTR_ESOFM                      ((uint32_t)0x00000100)        /*!< Expected Start Of Frame Interrupt Mask */\n 4106  #define  USB_CNTR_SOFM                       ((uint32_t)0x00000200)        /*!< Start Of Frame Interrupt Mask */\n 4107: #define  USB_CNTR_RESETM                     ((uint32_t)0x00000400)        /*!< RESET Interrupt Mask */\n 4108  #define  USB_CNTR_SUSPM                      ((uint32_t)0x00000800)        /*!< Suspend mode Interrupt Mask */\n 4109  #define  USB_CNTR_WKUPM                      ((uint32_t)0x00001000)        /*!< Wakeup Interrupt Mask */\n ....\n 4117  #define  USB_ISTR_ESOF                       ((uint32_t)0x00000100)        /*!< Expected Start Of Frame */\n 4118  #define  USB_ISTR_SOF                        ((uint32_t)0x00000200)        /*!< Start Of Frame */\n 4119: #define  USB_ISTR_RESET                      ((uint32_t)0x00000400)        /*!< USB RESET request */\n 4120  #define  USB_ISTR_SUSP                       ((uint32_t)0x00000800)        /*!< Suspend mode request */\n 4121  #define  USB_ISTR_WKUP                       ((uint32_t)0x00001000)        /*!< Wake up */\n ....\n 4581  #define  CAN_MCR_ABOM                        ((uint32_t)0x00000040)        /*!< Automatic Bus-Off Management */\n 4582  #define  CAN_MCR_TTCM                        ((uint32_t)0x00000080)        /*!< Time Triggered Communication Mode */\n 4583: #define  CAN_MCR_RESET                       ((uint32_t)0x00008000)        /*!< CAN software master reset */\n 4584  #define  CAN_MCR_DBF                         ((uint32_t)0x00010000)        /*!< CAN Debug freeze */\n 4585  \n ....\n 5929  #define  I2C_CR1_PEC                         ((uint32_t)0x00001000)        /*!< Packet Error Checking */\n 5930  #define  I2C_CR1_ALERT                       ((uint32_t)0x00002000)        /*!< SMBus Alert */\n 5931: #define  I2C_CR1_SWRST                       ((uint32_t)0x00008000)        /*!< Software Reset */\n 5932  \n 5933  /*******************  Bit definition for I2C_CR2 register  ********************/\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f103xg.h:\n  557  \n  558  /** \n  559:   * @brief Reset and Clock Control\n  560    */\n  561  \n  ...\n  951  \n  952  /********************  Bit definition for CRC_CR register  ********************/\n  953: #define  CRC_CR_RESET                        ((uint32_t)0x00000001)        /*!< RESET bit */\n  954  \n  955  /******************************************************************************/\n  ...\n 1143  /******************************************************************************/\n 1144  /*                                                                            */\n 1145: /*                         Reset and Clock Control                            */\n 1146  /*                                                                            */\n 1147  /******************************************************************************/\n ....\n 1294  \n 1295  /*****************  Bit definition for RCC_APB2RSTR register  *****************/\n 1296: #define  RCC_APB2RSTR_AFIORST                ((uint32_t)0x00000001)        /*!< Alternate Function I/O reset */\n 1297: #define  RCC_APB2RSTR_IOPARST                ((uint32_t)0x00000004)        /*!< I/O port A reset */\n 1298: #define  RCC_APB2RSTR_IOPBRST                ((uint32_t)0x00000008)        /*!< I/O port B reset */\n 1299: #define  RCC_APB2RSTR_IOPCRST                ((uint32_t)0x00000010)        /*!< I/O port C reset */\n 1300: #define  RCC_APB2RSTR_IOPDRST                ((uint32_t)0x00000020)        /*!< I/O port D reset */\n 1301: #define  RCC_APB2RSTR_ADC1RST                ((uint32_t)0x00000200)        /*!< ADC 1 interface reset */\n 1302  \n 1303: #define  RCC_APB2RSTR_ADC2RST                ((uint32_t)0x00000400)        /*!< ADC 2 interface reset */\n 1304  \n 1305: #define  RCC_APB2RSTR_TIM1RST                ((uint32_t)0x00000800)        /*!< TIM1 Timer reset */\n 1306: #define  RCC_APB2RSTR_SPI1RST                ((uint32_t)0x00001000)        /*!< SPI 1 reset */\n 1307: #define  RCC_APB2RSTR_USART1RST              ((uint32_t)0x00004000)        /*!< USART1 reset */\n 1308  \n 1309  \n 1310: #define  RCC_APB2RSTR_IOPERST               ((uint32_t)0x00000040)        /*!< I/O port E reset */\n 1311  \n 1312: #define  RCC_APB2RSTR_IOPFRST               ((uint32_t)0x00000080)        /*!< I/O port F reset */\n 1313: #define  RCC_APB2RSTR_IOPGRST               ((uint32_t)0x00000100)        /*!< I/O port G reset */\n 1314: #define  RCC_APB2RSTR_TIM8RST               ((uint32_t)0x00002000)        /*!< TIM8 Timer reset */\n 1315: #define  RCC_APB2RSTR_ADC3RST               ((uint32_t)0x00008000)        /*!< ADC3 interface reset */\n 1316  \n 1317  \n 1318: #define  RCC_APB2RSTR_TIM9RST               ((uint32_t)0x00080000)         /*!< TIM9 Timer reset */\n 1319: #define  RCC_APB2RSTR_TIM10RST              ((uint32_t)0x00100000)         /*!< TIM10 Timer reset */\n 1320: #define  RCC_APB2RSTR_TIM11RST              ((uint32_t)0x00200000)         /*!< TIM11 Timer reset */\n 1321  \n 1322  /*****************  Bit definition for RCC_APB1RSTR register  *****************/\n 1323: #define  RCC_APB1RSTR_TIM2RST                ((uint32_t)0x00000001)        /*!< Timer 2 reset */\n 1324: #define  RCC_APB1RSTR_TIM3RST                ((uint32_t)0x00000002)        /*!< Timer 3 reset */\n 1325: #define  RCC_APB1RSTR_WWDGRST                ((uint32_t)0x00000800)        /*!< Window Watchdog reset */\n 1326: #define  RCC_APB1RSTR_USART2RST              ((uint32_t)0x00020000)        /*!< USART 2 reset */\n 1327: #define  RCC_APB1RSTR_I2C1RST                ((uint32_t)0x00200000)        /*!< I2C 1 reset */\n 1328  \n 1329: #define  RCC_APB1RSTR_CAN1RST                ((uint32_t)0x02000000)        /*!< CAN1 reset */\n 1330  \n 1331: #define  RCC_APB1RSTR_BKPRST                 ((uint32_t)0x08000000)        /*!< Backup interface reset */\n 1332: #define  RCC_APB1RSTR_PWRRST                 ((uint32_t)0x10000000)        /*!< Power interface reset */\n 1333  \n 1334: #define  RCC_APB1RSTR_TIM4RST               ((uint32_t)0x00000004)        /*!< Timer 4 reset */\n 1335: #define  RCC_APB1RSTR_SPI2RST               ((uint32_t)0x00004000)        /*!< SPI 2 reset */\n 1336: #define  RCC_APB1RSTR_USART3RST             ((uint32_t)0x00040000)        /*!< USART 3 reset */\n 1337: #define  RCC_APB1RSTR_I2C2RST               ((uint32_t)0x00400000)        /*!< I2C 2 reset */\n 1338  \n 1339: #define  RCC_APB1RSTR_USBRST                ((uint32_t)0x00800000)        /*!< USB Device reset */\n 1340  \n 1341: #define  RCC_APB1RSTR_TIM5RST                ((uint32_t)0x00000008)        /*!< Timer 5 reset */\n 1342: #define  RCC_APB1RSTR_TIM6RST                ((uint32_t)0x00000010)        /*!< Timer 6 reset */\n 1343: #define  RCC_APB1RSTR_TIM7RST                ((uint32_t)0x00000020)        /*!< Timer 7 reset */\n 1344: #define  RCC_APB1RSTR_SPI3RST                ((uint32_t)0x00008000)        /*!< SPI 3 reset */\n 1345: #define  RCC_APB1RSTR_UART4RST               ((uint32_t)0x00080000)        /*!< UART 4 reset */\n 1346: #define  RCC_APB1RSTR_UART5RST               ((uint32_t)0x00100000)        /*!< UART 5 reset */\n 1347  \n 1348  \n 1349  \n 1350  \n 1351: #define  RCC_APB1RSTR_TIM12RST               ((uint32_t)0x00000040)         /*!< TIM12 Timer reset */\n 1352: #define  RCC_APB1RSTR_TIM13RST               ((uint32_t)0x00000080)         /*!< TIM13 Timer reset */\n 1353: #define  RCC_APB1RSTR_TIM14RST               ((uint32_t)0x00000100)         /*!< TIM14 Timer reset */\n 1354: #define  RCC_APB1RSTR_DACRST                 ((uint32_t)0x20000000)        /*!< DAC interface reset */\n 1355  \n 1356  /******************  Bit definition for RCC_AHBENR register  ******************/\n ....\n 1443  \n 1444  #define  RCC_BDCR_RTCEN                      ((uint32_t)0x00008000)        /*!< RTC clock enable */\n 1445: #define  RCC_BDCR_BDRST                      ((uint32_t)0x00010000)        /*!< Backup domain software reset  */\n 1446  \n 1447  /*******************  Bit definition for RCC_CSR register  ********************/  \n 1448  #define  RCC_CSR_LSION                       ((uint32_t)0x00000001)        /*!< Internal Low Speed oscillator enable */\n 1449  #define  RCC_CSR_LSIRDY                      ((uint32_t)0x00000002)        /*!< Internal Low Speed oscillator Ready */\n 1450: #define  RCC_CSR_RMVF                        ((uint32_t)0x01000000)        /*!< Remove reset flag */\n 1451: #define  RCC_CSR_PINRSTF                     ((uint32_t)0x04000000)        /*!< PIN reset flag */\n 1452: #define  RCC_CSR_PORRSTF                     ((uint32_t)0x08000000)        /*!< POR/PDR reset flag */\n 1453: #define  RCC_CSR_SFTRSTF                     ((uint32_t)0x10000000)        /*!< Software Reset flag */\n 1454: #define  RCC_CSR_IWDGRSTF                    ((uint32_t)0x20000000)        /*!< Independent Watchdog reset flag */\n 1455: #define  RCC_CSR_WWDGRSTF                    ((uint32_t)0x40000000)        /*!< Window watchdog reset flag */\n 1456: #define  RCC_CSR_LPWRRSTF                    ((uint32_t)0x80000000)        /*!< Low-Power reset flag */\n 1457  \n 1458  \n ....\n 1656  #define GPIO_BSRR_BS15                       ((uint32_t)0x00008000)        /*!< Port x Set bit 15 */\n 1657  \n 1658: #define GPIO_BSRR_BR0                        ((uint32_t)0x00010000)        /*!< Port x Reset bit 0 */\n 1659: #define GPIO_BSRR_BR1                        ((uint32_t)0x00020000)        /*!< Port x Reset bit 1 */\n 1660: #define GPIO_BSRR_BR2                        ((uint32_t)0x00040000)        /*!< Port x Reset bit 2 */\n 1661: #define GPIO_BSRR_BR3                        ((uint32_t)0x00080000)        /*!< Port x Reset bit 3 */\n 1662: #define GPIO_BSRR_BR4                        ((uint32_t)0x00100000)        /*!< Port x Reset bit 4 */\n 1663: #define GPIO_BSRR_BR5                        ((uint32_t)0x00200000)        /*!< Port x Reset bit 5 */\n 1664: #define GPIO_BSRR_BR6                        ((uint32_t)0x00400000)        /*!< Port x Reset bit 6 */\n 1665: #define GPIO_BSRR_BR7                        ((uint32_t)0x00800000)        /*!< Port x Reset bit 7 */\n 1666: #define GPIO_BSRR_BR8                        ((uint32_t)0x01000000)        /*!< Port x Reset bit 8 */\n 1667: #define GPIO_BSRR_BR9                        ((uint32_t)0x02000000)        /*!< Port x Reset bit 9 */\n 1668: #define GPIO_BSRR_BR10                       ((uint32_t)0x04000000)        /*!< Port x Reset bit 10 */\n 1669: #define GPIO_BSRR_BR11                       ((uint32_t)0x08000000)        /*!< Port x Reset bit 11 */\n 1670: #define GPIO_BSRR_BR12                       ((uint32_t)0x10000000)        /*!< Port x Reset bit 12 */\n 1671: #define GPIO_BSRR_BR13                       ((uint32_t)0x20000000)        /*!< Port x Reset bit 13 */\n 1672: #define GPIO_BSRR_BR14                       ((uint32_t)0x40000000)        /*!< Port x Reset bit 14 */\n 1673: #define GPIO_BSRR_BR15                       ((uint32_t)0x80000000)        /*!< Port x Reset bit 15 */\n 1674  \n 1675  /*******************  Bit definition for GPIO_BRR register  *******************/\n 1676: #define GPIO_BRR_BR0                         ((uint32_t)0x0001)            /*!< Port x Reset bit 0 */\n 1677: #define GPIO_BRR_BR1                         ((uint32_t)0x0002)            /*!< Port x Reset bit 1 */\n 1678: #define GPIO_BRR_BR2                         ((uint32_t)0x0004)            /*!< Port x Reset bit 2 */\n 1679: #define GPIO_BRR_BR3                         ((uint32_t)0x0008)            /*!< Port x Reset bit 3 */\n 1680: #define GPIO_BRR_BR4                         ((uint32_t)0x0010)            /*!< Port x Reset bit 4 */\n 1681: #define GPIO_BRR_BR5                         ((uint32_t)0x0020)            /*!< Port x Reset bit 5 */\n 1682: #define GPIO_BRR_BR6                         ((uint32_t)0x0040)            /*!< Port x Reset bit 6 */\n 1683: #define GPIO_BRR_BR7                         ((uint32_t)0x0080)            /*!< Port x Reset bit 7 */\n 1684: #define GPIO_BRR_BR8                         ((uint32_t)0x0100)            /*!< Port x Reset bit 8 */\n 1685: #define GPIO_BRR_BR9                         ((uint32_t)0x0200)            /*!< Port x Reset bit 9 */\n 1686: #define GPIO_BRR_BR10                        ((uint32_t)0x0400)            /*!< Port x Reset bit 10 */\n 1687: #define GPIO_BRR_BR11                        ((uint32_t)0x0800)            /*!< Port x Reset bit 11 */\n 1688: #define GPIO_BRR_BR12                        ((uint32_t)0x1000)            /*!< Port x Reset bit 12 */\n 1689: #define GPIO_BRR_BR13                        ((uint32_t)0x2000)            /*!< Port x Reset bit 13 */\n 1690: #define GPIO_BRR_BR14                        ((uint32_t)0x4000)            /*!< Port x Reset bit 14 */\n 1691: #define GPIO_BRR_BR15                        ((uint32_t)0x8000)            /*!< Port x Reset bit 15 */\n 1692  \n 1693  /******************  Bit definition for GPIO_LCKR register  *******************/\n ....\n 1818  #define AFIO_MAPR_SWJ_CFG_2                  ((uint32_t)0x04000000)        /*!< Bit 2 */\n 1819  \n 1820: #define AFIO_MAPR_SWJ_CFG_RESET              ((uint32_t)0x00000000)        /*!< Full SWJ (JTAG-DP + SW-DP) : Reset State */\n 1821  #define AFIO_MAPR_SWJ_CFG_NOJNTRST           ((uint32_t)0x01000000)        /*!< Full SWJ (JTAG-DP + SW-DP) but without JNTRST */\n 1822  #define AFIO_MAPR_SWJ_CFG_JTAGDISABLE        ((uint32_t)0x02000000)        /*!< JTAG-DP Disabled and SW-DP Enabled */\n ....\n 2278  \n 2279  /*!<*****************  Bit definition for SCB_AIRCR register  *******************/\n 2280: #define  SCB_AIRCR_VECTRESET                 ((uint32_t)0x00000001)        /*!< System Reset bit */\n 2281  #define  SCB_AIRCR_VECTCLRACTIVE             ((uint32_t)0x00000002)        /*!< Clear active vector bit */\n 2282: #define  SCB_AIRCR_SYSRESETREQ               ((uint32_t)0x00000004)        /*!< Requests chip control logic to generate a reset */\n 2283  \n 2284  #define  SCB_AIRCR_PRIGROUP                  ((uint32_t)0x00000700)        /*!< PRIGROUP[2:0] bits (Priority group) */\n ....\n 2664  #define  ADC_CR2_CONT                        ((uint32_t)0x00000002)        /*!< Continuous Conversion */\n 2665  #define  ADC_CR2_CAL                         ((uint32_t)0x00000004)        /*!< A/D Calibration */\n 2666: #define  ADC_CR2_RSTCAL                      ((uint32_t)0x00000008)        /*!< Reset Calibration */\n 2667  #define  ADC_CR2_DMA                         ((uint32_t)0x00000100)        /*!< Direct Memory access mode */\n 2668  #define  ADC_CR2_ALIGN                       ((uint32_t)0x00000800)        /*!< Data Alignment */\n ....\n 4134  /*!< Common registers */\n 4135  /*******************  Bit definition for USB_CNTR register  *******************/\n 4136: #define  USB_CNTR_FRES                       ((uint32_t)0x00000001)        /*!< Force USB Reset */\n 4137  #define  USB_CNTR_PDWN                       ((uint32_t)0x00000002)        /*!< Power down */\n 4138  #define  USB_CNTR_LP_MODE                    ((uint32_t)0x00000004)        /*!< Low-power mode */\n ....\n 4141  #define  USB_CNTR_ESOFM                      ((uint32_t)0x00000100)        /*!< Expected Start Of Frame Interrupt Mask */\n 4142  #define  USB_CNTR_SOFM                       ((uint32_t)0x00000200)        /*!< Start Of Frame Interrupt Mask */\n 4143: #define  USB_CNTR_RESETM                     ((uint32_t)0x00000400)        /*!< RESET Interrupt Mask */\n 4144  #define  USB_CNTR_SUSPM                      ((uint32_t)0x00000800)        /*!< Suspend mode Interrupt Mask */\n 4145  #define  USB_CNTR_WKUPM                      ((uint32_t)0x00001000)        /*!< Wakeup Interrupt Mask */\n ....\n 4153  #define  USB_ISTR_ESOF                       ((uint32_t)0x00000100)        /*!< Expected Start Of Frame */\n 4154  #define  USB_ISTR_SOF                        ((uint32_t)0x00000200)        /*!< Start Of Frame */\n 4155: #define  USB_ISTR_RESET                      ((uint32_t)0x00000400)        /*!< USB RESET request */\n 4156  #define  USB_ISTR_SUSP                       ((uint32_t)0x00000800)        /*!< Suspend mode request */\n 4157  #define  USB_ISTR_WKUP                       ((uint32_t)0x00001000)        /*!< Wake up */\n ....\n 4617  #define  CAN_MCR_ABOM                        ((uint32_t)0x00000040)        /*!< Automatic Bus-Off Management */\n 4618  #define  CAN_MCR_TTCM                        ((uint32_t)0x00000080)        /*!< Time Triggered Communication Mode */\n 4619: #define  CAN_MCR_RESET                       ((uint32_t)0x00008000)        /*!< CAN software master reset */\n 4620  #define  CAN_MCR_DBF                         ((uint32_t)0x00010000)        /*!< CAN Debug freeze */\n 4621  \n ....\n 5965  #define  I2C_CR1_PEC                         ((uint32_t)0x00001000)        /*!< Packet Error Checking */\n 5966  #define  I2C_CR1_ALERT                       ((uint32_t)0x00002000)        /*!< SMBus Alert */\n 5967: #define  I2C_CR1_SWRST                       ((uint32_t)0x00008000)        /*!< Software Reset */\n 5968  \n 5969  /*******************  Bit definition for I2C_CR2 register  ********************/\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f105xc.h:\n  497  \n  498  /** \n  499:   * @brief Reset and Clock Control\n  500    */\n  501  \n  ...\n  636    __IO uint32_t GAHBCFG;              /*!<  Core AHB Configuration Register           Address offset: 008h */\n  637    __IO uint32_t GUSBCFG;              /*!<  Core USB Configuration Register           Address offset: 00Ch */\n  638:   __IO uint32_t GRSTCTL;              /*!<  Core Reset Register                       Address offset: 010h */\n  639    __IO uint32_t GINTSTS;              /*!<  Core Interrupt Register                   Address offset: 014h */\n  640    __IO uint32_t GINTMSK;              /*!<  Core Interrupt Mask Register              Address offset: 018h */\n  ...\n  947  \n  948  /********************  Bit definition for CRC_CR register  ********************/\n  949: #define  CRC_CR_RESET                        ((uint32_t)0x00000001)        /*!< RESET bit */\n  950  \n  951  /******************************************************************************/\n  ...\n 1139  /******************************************************************************/\n 1140  /*                                                                            */\n 1141: /*                         Reset and Clock Control                            */\n 1142  /*                                                                            */\n 1143  /******************************************************************************/\n ....\n 1298  \n 1299  /*****************  Bit definition for RCC_APB2RSTR register  *****************/\n 1300: #define  RCC_APB2RSTR_AFIORST                ((uint32_t)0x00000001)        /*!< Alternate Function I/O reset */\n 1301: #define  RCC_APB2RSTR_IOPARST                ((uint32_t)0x00000004)        /*!< I/O port A reset */\n 1302: #define  RCC_APB2RSTR_IOPBRST                ((uint32_t)0x00000008)        /*!< I/O port B reset */\n 1303: #define  RCC_APB2RSTR_IOPCRST                ((uint32_t)0x00000010)        /*!< I/O port C reset */\n 1304: #define  RCC_APB2RSTR_IOPDRST                ((uint32_t)0x00000020)        /*!< I/O port D reset */\n 1305: #define  RCC_APB2RSTR_ADC1RST                ((uint32_t)0x00000200)        /*!< ADC 1 interface reset */\n 1306  \n 1307: #define  RCC_APB2RSTR_ADC2RST                ((uint32_t)0x00000400)        /*!< ADC 2 interface reset */\n 1308  \n 1309: #define  RCC_APB2RSTR_TIM1RST                ((uint32_t)0x00000800)        /*!< TIM1 Timer reset */\n 1310: #define  RCC_APB2RSTR_SPI1RST                ((uint32_t)0x00001000)        /*!< SPI 1 reset */\n 1311: #define  RCC_APB2RSTR_USART1RST              ((uint32_t)0x00004000)        /*!< USART1 reset */\n 1312  \n 1313  \n 1314: #define  RCC_APB2RSTR_IOPERST               ((uint32_t)0x00000040)        /*!< I/O port E reset */\n 1315  \n 1316  \n ....\n 1318  \n 1319  /*****************  Bit definition for RCC_APB1RSTR register  *****************/\n 1320: #define  RCC_APB1RSTR_TIM2RST                ((uint32_t)0x00000001)        /*!< Timer 2 reset */\n 1321: #define  RCC_APB1RSTR_TIM3RST                ((uint32_t)0x00000002)        /*!< Timer 3 reset */\n 1322: #define  RCC_APB1RSTR_WWDGRST                ((uint32_t)0x00000800)        /*!< Window Watchdog reset */\n 1323: #define  RCC_APB1RSTR_USART2RST              ((uint32_t)0x00020000)        /*!< USART 2 reset */\n 1324: #define  RCC_APB1RSTR_I2C1RST                ((uint32_t)0x00200000)        /*!< I2C 1 reset */\n 1325  \n 1326: #define  RCC_APB1RSTR_CAN1RST                ((uint32_t)0x02000000)        /*!< CAN1 reset */\n 1327  \n 1328: #define  RCC_APB1RSTR_BKPRST                 ((uint32_t)0x08000000)        /*!< Backup interface reset */\n 1329: #define  RCC_APB1RSTR_PWRRST                 ((uint32_t)0x10000000)        /*!< Power interface reset */\n 1330  \n 1331: #define  RCC_APB1RSTR_TIM4RST               ((uint32_t)0x00000004)        /*!< Timer 4 reset */\n 1332: #define  RCC_APB1RSTR_SPI2RST               ((uint32_t)0x00004000)        /*!< SPI 2 reset */\n 1333: #define  RCC_APB1RSTR_USART3RST             ((uint32_t)0x00040000)        /*!< USART 3 reset */\n 1334: #define  RCC_APB1RSTR_I2C2RST               ((uint32_t)0x00400000)        /*!< I2C 2 reset */\n 1335  \n 1336  \n 1337: #define  RCC_APB1RSTR_TIM5RST                ((uint32_t)0x00000008)        /*!< Timer 5 reset */\n 1338: #define  RCC_APB1RSTR_TIM6RST                ((uint32_t)0x00000010)        /*!< Timer 6 reset */\n 1339: #define  RCC_APB1RSTR_TIM7RST                ((uint32_t)0x00000020)        /*!< Timer 7 reset */\n 1340: #define  RCC_APB1RSTR_SPI3RST                ((uint32_t)0x00008000)        /*!< SPI 3 reset */\n 1341: #define  RCC_APB1RSTR_UART4RST               ((uint32_t)0x00080000)        /*!< UART 4 reset */\n 1342: #define  RCC_APB1RSTR_UART5RST               ((uint32_t)0x00100000)        /*!< UART 5 reset */\n 1343  \n 1344  \n 1345  \n 1346: #define  RCC_APB1RSTR_CAN2RST                ((uint32_t)0x04000000)        /*!< CAN2 reset */\n 1347  \n 1348: #define  RCC_APB1RSTR_DACRST                 ((uint32_t)0x20000000)        /*!< DAC interface reset */\n 1349  \n 1350  /******************  Bit definition for RCC_AHBENR register  ******************/\n ....\n 1426  \n 1427  #define  RCC_BDCR_RTCEN                      ((uint32_t)0x00008000)        /*!< RTC clock enable */\n 1428: #define  RCC_BDCR_BDRST                      ((uint32_t)0x00010000)        /*!< Backup domain software reset  */\n 1429  \n 1430  /*******************  Bit definition for RCC_CSR register  ********************/  \n 1431  #define  RCC_CSR_LSION                       ((uint32_t)0x00000001)        /*!< Internal Low Speed oscillator enable */\n 1432  #define  RCC_CSR_LSIRDY                      ((uint32_t)0x00000002)        /*!< Internal Low Speed oscillator Ready */\n 1433: #define  RCC_CSR_RMVF                        ((uint32_t)0x01000000)        /*!< Remove reset flag */\n 1434: #define  RCC_CSR_PINRSTF                     ((uint32_t)0x04000000)        /*!< PIN reset flag */\n 1435: #define  RCC_CSR_PORRSTF                     ((uint32_t)0x08000000)        /*!< POR/PDR reset flag */\n 1436: #define  RCC_CSR_SFTRSTF                     ((uint32_t)0x10000000)        /*!< Software Reset flag */\n 1437: #define  RCC_CSR_IWDGRSTF                    ((uint32_t)0x20000000)        /*!< Independent Watchdog reset flag */\n 1438: #define  RCC_CSR_WWDGRSTF                    ((uint32_t)0x40000000)        /*!< Window watchdog reset flag */\n 1439: #define  RCC_CSR_LPWRRSTF                    ((uint32_t)0x80000000)        /*!< Low-Power reset flag */\n 1440  \n 1441  /*******************  Bit definition for RCC_AHBRSTR register  ****************/\n 1442: #define  RCC_AHBRSTR_OTGFSRST               ((uint32_t)0x00001000)         /*!< USB OTG FS reset */\n 1443  \n 1444  /*******************  Bit definition for RCC_CFGR2 register  ******************/\n ....\n 1730  #define GPIO_BSRR_BS15                       ((uint32_t)0x00008000)        /*!< Port x Set bit 15 */\n 1731  \n 1732: #define GPIO_BSRR_BR0                        ((uint32_t)0x00010000)        /*!< Port x Reset bit 0 */\n 1733: #define GPIO_BSRR_BR1                        ((uint32_t)0x00020000)        /*!< Port x Reset bit 1 */\n 1734: #define GPIO_BSRR_BR2                        ((uint32_t)0x00040000)        /*!< Port x Reset bit 2 */\n 1735: #define GPIO_BSRR_BR3                        ((uint32_t)0x00080000)        /*!< Port x Reset bit 3 */\n 1736: #define GPIO_BSRR_BR4                        ((uint32_t)0x00100000)        /*!< Port x Reset bit 4 */\n 1737: #define GPIO_BSRR_BR5                        ((uint32_t)0x00200000)        /*!< Port x Reset bit 5 */\n 1738: #define GPIO_BSRR_BR6                        ((uint32_t)0x00400000)        /*!< Port x Reset bit 6 */\n 1739: #define GPIO_BSRR_BR7                        ((uint32_t)0x00800000)        /*!< Port x Reset bit 7 */\n 1740: #define GPIO_BSRR_BR8                        ((uint32_t)0x01000000)        /*!< Port x Reset bit 8 */\n 1741: #define GPIO_BSRR_BR9                        ((uint32_t)0x02000000)        /*!< Port x Reset bit 9 */\n 1742: #define GPIO_BSRR_BR10                       ((uint32_t)0x04000000)        /*!< Port x Reset bit 10 */\n 1743: #define GPIO_BSRR_BR11                       ((uint32_t)0x08000000)        /*!< Port x Reset bit 11 */\n 1744: #define GPIO_BSRR_BR12                       ((uint32_t)0x10000000)        /*!< Port x Reset bit 12 */\n 1745: #define GPIO_BSRR_BR13                       ((uint32_t)0x20000000)        /*!< Port x Reset bit 13 */\n 1746: #define GPIO_BSRR_BR14                       ((uint32_t)0x40000000)        /*!< Port x Reset bit 14 */\n 1747: #define GPIO_BSRR_BR15                       ((uint32_t)0x80000000)        /*!< Port x Reset bit 15 */\n 1748  \n 1749  /*******************  Bit definition for GPIO_BRR register  *******************/\n 1750: #define GPIO_BRR_BR0                         ((uint32_t)0x0001)            /*!< Port x Reset bit 0 */\n 1751: #define GPIO_BRR_BR1                         ((uint32_t)0x0002)            /*!< Port x Reset bit 1 */\n 1752: #define GPIO_BRR_BR2                         ((uint32_t)0x0004)            /*!< Port x Reset bit 2 */\n 1753: #define GPIO_BRR_BR3                         ((uint32_t)0x0008)            /*!< Port x Reset bit 3 */\n 1754: #define GPIO_BRR_BR4                         ((uint32_t)0x0010)            /*!< Port x Reset bit 4 */\n 1755: #define GPIO_BRR_BR5                         ((uint32_t)0x0020)            /*!< Port x Reset bit 5 */\n 1756: #define GPIO_BRR_BR6                         ((uint32_t)0x0040)            /*!< Port x Reset bit 6 */\n 1757: #define GPIO_BRR_BR7                         ((uint32_t)0x0080)            /*!< Port x Reset bit 7 */\n 1758: #define GPIO_BRR_BR8                         ((uint32_t)0x0100)            /*!< Port x Reset bit 8 */\n 1759: #define GPIO_BRR_BR9                         ((uint32_t)0x0200)            /*!< Port x Reset bit 9 */\n 1760: #define GPIO_BRR_BR10                        ((uint32_t)0x0400)            /*!< Port x Reset bit 10 */\n 1761: #define GPIO_BRR_BR11                        ((uint32_t)0x0800)            /*!< Port x Reset bit 11 */\n 1762: #define GPIO_BRR_BR12                        ((uint32_t)0x1000)            /*!< Port x Reset bit 12 */\n 1763: #define GPIO_BRR_BR13                        ((uint32_t)0x2000)            /*!< Port x Reset bit 13 */\n 1764: #define GPIO_BRR_BR14                        ((uint32_t)0x4000)            /*!< Port x Reset bit 14 */\n 1765: #define GPIO_BRR_BR15                        ((uint32_t)0x8000)            /*!< Port x Reset bit 15 */\n 1766  \n 1767  /******************  Bit definition for GPIO_LCKR register  *******************/\n ....\n 1888  #define AFIO_MAPR_SWJ_CFG_2                  ((uint32_t)0x04000000)        /*!< Bit 2 */\n 1889  \n 1890: #define AFIO_MAPR_SWJ_CFG_RESET              ((uint32_t)0x00000000)        /*!< Full SWJ (JTAG-DP + SW-DP) : Reset State */\n 1891  #define AFIO_MAPR_SWJ_CFG_NOJNTRST           ((uint32_t)0x01000000)        /*!< Full SWJ (JTAG-DP + SW-DP) but without JNTRST */\n 1892  #define AFIO_MAPR_SWJ_CFG_JTAGDISABLE        ((uint32_t)0x02000000)        /*!< JTAG-DP Disabled and SW-DP Enabled */\n ....\n 2359  \n 2360  /*!<*****************  Bit definition for SCB_AIRCR register  *******************/\n 2361: #define  SCB_AIRCR_VECTRESET                 ((uint32_t)0x00000001)        /*!< System Reset bit */\n 2362  #define  SCB_AIRCR_VECTCLRACTIVE             ((uint32_t)0x00000002)        /*!< Clear active vector bit */\n 2363: #define  SCB_AIRCR_SYSRESETREQ               ((uint32_t)0x00000004)        /*!< Requests chip control logic to generate a reset */\n 2364  \n 2365  #define  SCB_AIRCR_PRIGROUP                  ((uint32_t)0x00000700)        /*!< PRIGROUP[2:0] bits (Priority group) */\n ....\n 2745  #define  ADC_CR2_CONT                        ((uint32_t)0x00000002)        /*!< Continuous Conversion */\n 2746  #define  ADC_CR2_CAL                         ((uint32_t)0x00000004)        /*!< A/D Calibration */\n 2747: #define  ADC_CR2_RSTCAL                      ((uint32_t)0x00000008)        /*!< Reset Calibration */\n 2748  #define  ADC_CR2_DMA                         ((uint32_t)0x00000100)        /*!< Direct Memory access mode */\n 2749  #define  ADC_CR2_ALIGN                       ((uint32_t)0x00000800)        /*!< Data Alignment */\n ....\n 3710  #define  CAN_MCR_ABOM                        ((uint32_t)0x00000040)        /*!< Automatic Bus-Off Management */\n 3711  #define  CAN_MCR_TTCM                        ((uint32_t)0x00000080)        /*!< Time Triggered Communication Mode */\n 3712: #define  CAN_MCR_RESET                       ((uint32_t)0x00008000)        /*!< CAN software master reset */\n 3713  #define  CAN_MCR_DBF                         ((uint32_t)0x00010000)        /*!< CAN Debug freeze */\n 3714  \n ....\n 6066  #define  I2C_CR1_PEC                         ((uint32_t)0x00001000)        /*!< Packet Error Checking */\n 6067  #define  I2C_CR1_ALERT                       ((uint32_t)0x00002000)        /*!< SMBus Alert */\n 6068: #define  I2C_CR1_SWRST                       ((uint32_t)0x00008000)        /*!< Software Reset */\n 6069  \n 6070  /*******************  Bit definition for I2C_CR2 register  ********************/\n ....\n 6506  \n 6507  /********************  Bit definition forUSB_OTG_GRSTCTL register  *****************/\n 6508: #define USB_OTG_GRSTCTL_CSRST                ((uint32_t)0x00000001)        /*!< Core soft reset */\n 6509: #define USB_OTG_GRSTCTL_HSRST                ((uint32_t)0x00000002)        /*!< HCLK soft reset */\n 6510: #define USB_OTG_GRSTCTL_FCRST                ((uint32_t)0x00000004)        /*!< Host frame counter reset */\n 6511  #define USB_OTG_GRSTCTL_RXFFLSH              ((uint32_t)0x00000010)        /*!< RxFIFO flush */\n 6512  #define USB_OTG_GRSTCTL_TXFFLSH              ((uint32_t)0x00000020)        /*!< TxFIFO flush */\n ....\n 6577  #define USB_OTG_GINTSTS_ESUSP                ((uint32_t)0x00000400)        /*!< Early suspend */\n 6578  #define USB_OTG_GINTSTS_USBSUSP              ((uint32_t)0x00000800)        /*!< USB suspend */\n 6579: #define USB_OTG_GINTSTS_USBRST               ((uint32_t)0x00001000)        /*!< USB reset */\n 6580  #define USB_OTG_GINTSTS_ENUMDNE              ((uint32_t)0x00002000)        /*!< Enumeration done */\n 6581  #define USB_OTG_GINTSTS_ISOODRP              ((uint32_t)0x00004000)        /*!< Isochronous OUT packet dropped interrupt */\n ....\n 6604  #define USB_OTG_GINTMSK_ESUSPM               ((uint32_t)0x00000400)        /*!< Early suspend mask */\n 6605  #define USB_OTG_GINTMSK_USBSUSPM             ((uint32_t)0x00000800)        /*!< USB suspend mask */\n 6606: #define USB_OTG_GINTMSK_USBRST               ((uint32_t)0x00001000)        /*!< USB reset mask */\n 6607  #define USB_OTG_GINTMSK_ENUMDNEM             ((uint32_t)0x00002000)        /*!< Enumeration done mask */\n 6608  #define USB_OTG_GINTMSK_ISOODRPM             ((uint32_t)0x00004000)        /*!< Isochronous OUT packet dropped interrupt mask */\n ....\n 6806  #define USB_OTG_HPRT_PRES                    ((uint32_t)0x00000040)        /*!< Port resume */\n 6807  #define USB_OTG_HPRT_PSUSP                   ((uint32_t)0x00000080)        /*!< Port suspend */\n 6808: #define USB_OTG_HPRT_PRST                    ((uint32_t)0x00000100)        /*!< Port reset */\n 6809  \n 6810  #define USB_OTG_HPRT_PLSTS                   ((uint32_t)0x00000C00)        /*!< Port line status */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f107xc.h:\n  571  \n  572  /** \n  573:   * @brief Reset and Clock Control\n  574    */\n  575  \n  ...\n  710    __IO uint32_t GAHBCFG;              /*!<  Core AHB Configuration Register           Address offset: 008h */\n  711    __IO uint32_t GUSBCFG;              /*!<  Core USB Configuration Register           Address offset: 00Ch */\n  712:   __IO uint32_t GRSTCTL;              /*!<  Core Reset Register                       Address offset: 010h */\n  713    __IO uint32_t GINTSTS;              /*!<  Core Interrupt Register                   Address offset: 014h */\n  714    __IO uint32_t GINTMSK;              /*!<  Core Interrupt Mask Register              Address offset: 018h */\n  ...\n 1027  \n 1028  /********************  Bit definition for CRC_CR register  ********************/\n 1029: #define  CRC_CR_RESET                        ((uint32_t)0x00000001)        /*!< RESET bit */\n 1030  \n 1031  /******************************************************************************/\n ....\n 1219  /******************************************************************************/\n 1220  /*                                                                            */\n 1221: /*                         Reset and Clock Control                            */\n 1222  /*                                                                            */\n 1223  /******************************************************************************/\n ....\n 1378  \n 1379  /*****************  Bit definition for RCC_APB2RSTR register  *****************/\n 1380: #define  RCC_APB2RSTR_AFIORST                ((uint32_t)0x00000001)        /*!< Alternate Function I/O reset */\n 1381: #define  RCC_APB2RSTR_IOPARST                ((uint32_t)0x00000004)        /*!< I/O port A reset */\n 1382: #define  RCC_APB2RSTR_IOPBRST                ((uint32_t)0x00000008)        /*!< I/O port B reset */\n 1383: #define  RCC_APB2RSTR_IOPCRST                ((uint32_t)0x00000010)        /*!< I/O port C reset */\n 1384: #define  RCC_APB2RSTR_IOPDRST                ((uint32_t)0x00000020)        /*!< I/O port D reset */\n 1385: #define  RCC_APB2RSTR_ADC1RST                ((uint32_t)0x00000200)        /*!< ADC 1 interface reset */\n 1386  \n 1387: #define  RCC_APB2RSTR_ADC2RST                ((uint32_t)0x00000400)        /*!< ADC 2 interface reset */\n 1388  \n 1389: #define  RCC_APB2RSTR_TIM1RST                ((uint32_t)0x00000800)        /*!< TIM1 Timer reset */\n 1390: #define  RCC_APB2RSTR_SPI1RST                ((uint32_t)0x00001000)        /*!< SPI 1 reset */\n 1391: #define  RCC_APB2RSTR_USART1RST              ((uint32_t)0x00004000)        /*!< USART1 reset */\n 1392  \n 1393  \n 1394: #define  RCC_APB2RSTR_IOPERST               ((uint32_t)0x00000040)        /*!< I/O port E reset */\n 1395  \n 1396  \n ....\n 1398  \n 1399  /*****************  Bit definition for RCC_APB1RSTR register  *****************/\n 1400: #define  RCC_APB1RSTR_TIM2RST                ((uint32_t)0x00000001)        /*!< Timer 2 reset */\n 1401: #define  RCC_APB1RSTR_TIM3RST                ((uint32_t)0x00000002)        /*!< Timer 3 reset */\n 1402: #define  RCC_APB1RSTR_WWDGRST                ((uint32_t)0x00000800)        /*!< Window Watchdog reset */\n 1403: #define  RCC_APB1RSTR_USART2RST              ((uint32_t)0x00020000)        /*!< USART 2 reset */\n 1404: #define  RCC_APB1RSTR_I2C1RST                ((uint32_t)0x00200000)        /*!< I2C 1 reset */\n 1405  \n 1406: #define  RCC_APB1RSTR_CAN1RST                ((uint32_t)0x02000000)        /*!< CAN1 reset */\n 1407  \n 1408: #define  RCC_APB1RSTR_BKPRST                 ((uint32_t)0x08000000)        /*!< Backup interface reset */\n 1409: #define  RCC_APB1RSTR_PWRRST                 ((uint32_t)0x10000000)        /*!< Power interface reset */\n 1410  \n 1411: #define  RCC_APB1RSTR_TIM4RST               ((uint32_t)0x00000004)        /*!< Timer 4 reset */\n 1412: #define  RCC_APB1RSTR_SPI2RST               ((uint32_t)0x00004000)        /*!< SPI 2 reset */\n 1413: #define  RCC_APB1RSTR_USART3RST             ((uint32_t)0x00040000)        /*!< USART 3 reset */\n 1414: #define  RCC_APB1RSTR_I2C2RST               ((uint32_t)0x00400000)        /*!< I2C 2 reset */\n 1415  \n 1416  \n 1417: #define  RCC_APB1RSTR_TIM5RST                ((uint32_t)0x00000008)        /*!< Timer 5 reset */\n 1418: #define  RCC_APB1RSTR_TIM6RST                ((uint32_t)0x00000010)        /*!< Timer 6 reset */\n 1419: #define  RCC_APB1RSTR_TIM7RST                ((uint32_t)0x00000020)        /*!< Timer 7 reset */\n 1420: #define  RCC_APB1RSTR_SPI3RST                ((uint32_t)0x00008000)        /*!< SPI 3 reset */\n 1421: #define  RCC_APB1RSTR_UART4RST               ((uint32_t)0x00080000)        /*!< UART 4 reset */\n 1422: #define  RCC_APB1RSTR_UART5RST               ((uint32_t)0x00100000)        /*!< UART 5 reset */\n 1423  \n 1424  \n 1425  \n 1426: #define  RCC_APB1RSTR_CAN2RST                ((uint32_t)0x04000000)        /*!< CAN2 reset */\n 1427  \n 1428: #define  RCC_APB1RSTR_DACRST                 ((uint32_t)0x20000000)        /*!< DAC interface reset */\n 1429  \n 1430  /******************  Bit definition for RCC_AHBENR register  ******************/\n ....\n 1509  \n 1510  #define  RCC_BDCR_RTCEN                      ((uint32_t)0x00008000)        /*!< RTC clock enable */\n 1511: #define  RCC_BDCR_BDRST                      ((uint32_t)0x00010000)        /*!< Backup domain software reset  */\n 1512  \n 1513  /*******************  Bit definition for RCC_CSR register  ********************/  \n 1514  #define  RCC_CSR_LSION                       ((uint32_t)0x00000001)        /*!< Internal Low Speed oscillator enable */\n 1515  #define  RCC_CSR_LSIRDY                      ((uint32_t)0x00000002)        /*!< Internal Low Speed oscillator Ready */\n 1516: #define  RCC_CSR_RMVF                        ((uint32_t)0x01000000)        /*!< Remove reset flag */\n 1517: #define  RCC_CSR_PINRSTF                     ((uint32_t)0x04000000)        /*!< PIN reset flag */\n 1518: #define  RCC_CSR_PORRSTF                     ((uint32_t)0x08000000)        /*!< POR/PDR reset flag */\n 1519: #define  RCC_CSR_SFTRSTF                     ((uint32_t)0x10000000)        /*!< Software Reset flag */\n 1520: #define  RCC_CSR_IWDGRSTF                    ((uint32_t)0x20000000)        /*!< Independent Watchdog reset flag */\n 1521: #define  RCC_CSR_WWDGRSTF                    ((uint32_t)0x40000000)        /*!< Window watchdog reset flag */\n 1522: #define  RCC_CSR_LPWRRSTF                    ((uint32_t)0x80000000)        /*!< Low-Power reset flag */\n 1523  \n 1524  /*******************  Bit definition for RCC_AHBRSTR register  ****************/\n 1525: #define  RCC_AHBRSTR_OTGFSRST               ((uint32_t)0x00001000)         /*!< USB OTG FS reset */\n 1526: #define  RCC_AHBRSTR_ETHMACRST              ((uint32_t)0x00004000)         /*!< ETHERNET MAC reset */\n 1527  \n 1528  /*******************  Bit definition for RCC_CFGR2 register  ******************/\n ....\n 1814  #define GPIO_BSRR_BS15                       ((uint32_t)0x00008000)        /*!< Port x Set bit 15 */\n 1815  \n 1816: #define GPIO_BSRR_BR0                        ((uint32_t)0x00010000)        /*!< Port x Reset bit 0 */\n 1817: #define GPIO_BSRR_BR1                        ((uint32_t)0x00020000)        /*!< Port x Reset bit 1 */\n 1818: #define GPIO_BSRR_BR2                        ((uint32_t)0x00040000)        /*!< Port x Reset bit 2 */\n 1819: #define GPIO_BSRR_BR3                        ((uint32_t)0x00080000)        /*!< Port x Reset bit 3 */\n 1820: #define GPIO_BSRR_BR4                        ((uint32_t)0x00100000)        /*!< Port x Reset bit 4 */\n 1821: #define GPIO_BSRR_BR5                        ((uint32_t)0x00200000)        /*!< Port x Reset bit 5 */\n 1822: #define GPIO_BSRR_BR6                        ((uint32_t)0x00400000)        /*!< Port x Reset bit 6 */\n 1823: #define GPIO_BSRR_BR7                        ((uint32_t)0x00800000)        /*!< Port x Reset bit 7 */\n 1824: #define GPIO_BSRR_BR8                        ((uint32_t)0x01000000)        /*!< Port x Reset bit 8 */\n 1825: #define GPIO_BSRR_BR9                        ((uint32_t)0x02000000)        /*!< Port x Reset bit 9 */\n 1826: #define GPIO_BSRR_BR10                       ((uint32_t)0x04000000)        /*!< Port x Reset bit 10 */\n 1827: #define GPIO_BSRR_BR11                       ((uint32_t)0x08000000)        /*!< Port x Reset bit 11 */\n 1828: #define GPIO_BSRR_BR12                       ((uint32_t)0x10000000)        /*!< Port x Reset bit 12 */\n 1829: #define GPIO_BSRR_BR13                       ((uint32_t)0x20000000)        /*!< Port x Reset bit 13 */\n 1830: #define GPIO_BSRR_BR14                       ((uint32_t)0x40000000)        /*!< Port x Reset bit 14 */\n 1831: #define GPIO_BSRR_BR15                       ((uint32_t)0x80000000)        /*!< Port x Reset bit 15 */\n 1832  \n 1833  /*******************  Bit definition for GPIO_BRR register  *******************/\n 1834: #define GPIO_BRR_BR0                         ((uint32_t)0x0001)            /*!< Port x Reset bit 0 */\n 1835: #define GPIO_BRR_BR1                         ((uint32_t)0x0002)            /*!< Port x Reset bit 1 */\n 1836: #define GPIO_BRR_BR2                         ((uint32_t)0x0004)            /*!< Port x Reset bit 2 */\n 1837: #define GPIO_BRR_BR3                         ((uint32_t)0x0008)            /*!< Port x Reset bit 3 */\n 1838: #define GPIO_BRR_BR4                         ((uint32_t)0x0010)            /*!< Port x Reset bit 4 */\n 1839: #define GPIO_BRR_BR5                         ((uint32_t)0x0020)            /*!< Port x Reset bit 5 */\n 1840: #define GPIO_BRR_BR6                         ((uint32_t)0x0040)            /*!< Port x Reset bit 6 */\n 1841: #define GPIO_BRR_BR7                         ((uint32_t)0x0080)            /*!< Port x Reset bit 7 */\n 1842: #define GPIO_BRR_BR8                         ((uint32_t)0x0100)            /*!< Port x Reset bit 8 */\n 1843: #define GPIO_BRR_BR9                         ((uint32_t)0x0200)            /*!< Port x Reset bit 9 */\n 1844: #define GPIO_BRR_BR10                        ((uint32_t)0x0400)            /*!< Port x Reset bit 10 */\n 1845: #define GPIO_BRR_BR11                        ((uint32_t)0x0800)            /*!< Port x Reset bit 11 */\n 1846: #define GPIO_BRR_BR12                        ((uint32_t)0x1000)            /*!< Port x Reset bit 12 */\n 1847: #define GPIO_BRR_BR13                        ((uint32_t)0x2000)            /*!< Port x Reset bit 13 */\n 1848: #define GPIO_BRR_BR14                        ((uint32_t)0x4000)            /*!< Port x Reset bit 14 */\n 1849: #define GPIO_BRR_BR15                        ((uint32_t)0x8000)            /*!< Port x Reset bit 15 */\n 1850  \n 1851  /******************  Bit definition for GPIO_LCKR register  *******************/\n ....\n 1972  #define AFIO_MAPR_SWJ_CFG_2                  ((uint32_t)0x04000000)        /*!< Bit 2 */\n 1973  \n 1974: #define AFIO_MAPR_SWJ_CFG_RESET              ((uint32_t)0x00000000)        /*!< Full SWJ (JTAG-DP + SW-DP) : Reset State */\n 1975  #define AFIO_MAPR_SWJ_CFG_NOJNTRST           ((uint32_t)0x01000000)        /*!< Full SWJ (JTAG-DP + SW-DP) but without JNTRST */\n 1976  #define AFIO_MAPR_SWJ_CFG_JTAGDISABLE        ((uint32_t)0x02000000)        /*!< JTAG-DP Disabled and SW-DP Enabled */\n ....\n 2443  \n 2444  /*!<*****************  Bit definition for SCB_AIRCR register  *******************/\n 2445: #define  SCB_AIRCR_VECTRESET                 ((uint32_t)0x00000001)        /*!< System Reset bit */\n 2446  #define  SCB_AIRCR_VECTCLRACTIVE             ((uint32_t)0x00000002)        /*!< Clear active vector bit */\n 2447: #define  SCB_AIRCR_SYSRESETREQ               ((uint32_t)0x00000004)        /*!< Requests chip control logic to generate a reset */\n 2448  \n 2449  #define  SCB_AIRCR_PRIGROUP                  ((uint32_t)0x00000700)        /*!< PRIGROUP[2:0] bits (Priority group) */\n ....\n 2829  #define  ADC_CR2_CONT                        ((uint32_t)0x00000002)        /*!< Continuous Conversion */\n 2830  #define  ADC_CR2_CAL                         ((uint32_t)0x00000004)        /*!< A/D Calibration */\n 2831: #define  ADC_CR2_RSTCAL                      ((uint32_t)0x00000008)        /*!< Reset Calibration */\n 2832  #define  ADC_CR2_DMA                         ((uint32_t)0x00000100)        /*!< Direct Memory access mode */\n 2833  #define  ADC_CR2_ALIGN                       ((uint32_t)0x00000800)        /*!< Data Alignment */\n ....\n 3794  #define  CAN_MCR_ABOM                        ((uint32_t)0x00000040)        /*!< Automatic Bus-Off Management */\n 3795  #define  CAN_MCR_TTCM                        ((uint32_t)0x00000080)        /*!< Time Triggered Communication Mode */\n 3796: #define  CAN_MCR_RESET                       ((uint32_t)0x00008000)        /*!< CAN software master reset */\n 3797  #define  CAN_MCR_DBF                         ((uint32_t)0x00010000)        /*!< CAN Debug freeze */\n 3798  \n ....\n 6150  #define  I2C_CR1_PEC                         ((uint32_t)0x00001000)        /*!< Packet Error Checking */\n 6151  #define  I2C_CR1_ALERT                       ((uint32_t)0x00002000)        /*!< SMBus Alert */\n 6152: #define  I2C_CR1_SWRST                       ((uint32_t)0x00008000)        /*!< Software Reset */\n 6153  \n 6154  /*******************  Bit definition for I2C_CR2 register  ********************/\n ....\n 6553  \n 6554  /* Bit definition for Ethernet MAC PMT Control and Status Register */ \n 6555: #define ETH_MACPMTCSR_WFFRPR ((uint32_t)0x80000000)  /* Wake-Up Frame Filter Register Pointer Reset */\n 6556  #define ETH_MACPMTCSR_GU     ((uint32_t)0x00000200)  /* Global Unicast */\n 6557  #define ETH_MACPMTCSR_WFR    ((uint32_t)0x00000040)  /* Wake-Up Frame Received */\n ....\n 6629  /* Bit definition for Ethernet MMC Contol Register */\n 6630  #define ETH_MMCCR_MCF        ((uint32_t)0x00000008)  /* MMC Counter Freeze */\n 6631: #define ETH_MMCCR_ROR        ((uint32_t)0x00000004)  /* Reset on Read */\n 6632  #define ETH_MMCCR_CSR        ((uint32_t)0x00000002)  /* Counter Stop Rollover */\n 6633: #define ETH_MMCCR_CR         ((uint32_t)0x00000001)  /* Counters Reset */\n 6634  \n 6635  /* Bit definition for Ethernet MMC Receive Interrupt Register */\n ....\n 6751  #define ETH_DMABMR_DSL       ((uint32_t)0x0000007C)  /* Descriptor Skip Length */\n 6752  #define ETH_DMABMR_DA        ((uint32_t)0x00000002)  /* DMA arbitration scheme */\n 6753: #define ETH_DMABMR_SR        ((uint32_t)0x00000001)  /* Software reset */\n 6754  \n 6755  /* Bit definition for Ethernet DMA Transmit Poll Demand Register */\n ....\n 6775  #define ETH_DMASR_EBS_DataTransfTx    ((uint32_t)0x00800000)  /* Error bits 0-Rx DMA, 1-Tx DMA */\n 6776  #define ETH_DMASR_TPS         ((uint32_t)0x00700000)  /* Transmit process state */\n 6777: #define ETH_DMASR_TPS_Stopped         ((uint32_t)0x00000000)  /* Stopped - Reset or Stop Tx Command issued  */\n 6778  #define ETH_DMASR_TPS_Fetching        ((uint32_t)0x00100000)  /* Running - fetching the Tx descriptor */\n 6779  #define ETH_DMASR_TPS_Waiting         ((uint32_t)0x00200000)  /* Running - waiting for status */\n ....\n 6782  #define ETH_DMASR_TPS_Closing         ((uint32_t)0x00700000)  /* Running - closing Rx descriptor */\n 6783  #define ETH_DMASR_RPS         ((uint32_t)0x000E0000)  /* Receive process state */\n 6784: #define ETH_DMASR_RPS_Stopped         ((uint32_t)0x00000000)  /* Stopped - Reset or Stop Rx Command issued */\n 6785  #define ETH_DMASR_RPS_Fetching        ((uint32_t)0x00020000)  /* Running - fetching the Rx descriptor */\n 6786  #define ETH_DMASR_RPS_Waiting         ((uint32_t)0x00060000)  /* Running - waiting for packet */\n ....\n 7001  \n 7002  /********************  Bit definition forUSB_OTG_GRSTCTL register  *****************/\n 7003: #define USB_OTG_GRSTCTL_CSRST                ((uint32_t)0x00000001)        /*!< Core soft reset */\n 7004: #define USB_OTG_GRSTCTL_HSRST                ((uint32_t)0x00000002)        /*!< HCLK soft reset */\n 7005: #define USB_OTG_GRSTCTL_FCRST                ((uint32_t)0x00000004)        /*!< Host frame counter reset */\n 7006  #define USB_OTG_GRSTCTL_RXFFLSH              ((uint32_t)0x00000010)        /*!< RxFIFO flush */\n 7007  #define USB_OTG_GRSTCTL_TXFFLSH              ((uint32_t)0x00000020)        /*!< TxFIFO flush */\n ....\n 7072  #define USB_OTG_GINTSTS_ESUSP                ((uint32_t)0x00000400)        /*!< Early suspend */\n 7073  #define USB_OTG_GINTSTS_USBSUSP              ((uint32_t)0x00000800)        /*!< USB suspend */\n 7074: #define USB_OTG_GINTSTS_USBRST               ((uint32_t)0x00001000)        /*!< USB reset */\n 7075  #define USB_OTG_GINTSTS_ENUMDNE              ((uint32_t)0x00002000)        /*!< Enumeration done */\n 7076  #define USB_OTG_GINTSTS_ISOODRP              ((uint32_t)0x00004000)        /*!< Isochronous OUT packet dropped interrupt */\n ....\n 7099  #define USB_OTG_GINTMSK_ESUSPM               ((uint32_t)0x00000400)        /*!< Early suspend mask */\n 7100  #define USB_OTG_GINTMSK_USBSUSPM             ((uint32_t)0x00000800)        /*!< USB suspend mask */\n 7101: #define USB_OTG_GINTMSK_USBRST               ((uint32_t)0x00001000)        /*!< USB reset mask */\n 7102  #define USB_OTG_GINTMSK_ENUMDNEM             ((uint32_t)0x00002000)        /*!< Enumeration done mask */\n 7103  #define USB_OTG_GINTMSK_ISOODRPM             ((uint32_t)0x00004000)        /*!< Isochronous OUT packet dropped interrupt mask */\n ....\n 7301  #define USB_OTG_HPRT_PRES                    ((uint32_t)0x00000040)        /*!< Port resume */\n 7302  #define USB_OTG_HPRT_PSUSP                   ((uint32_t)0x00000080)        /*!< Port suspend */\n 7303: #define USB_OTG_HPRT_PRST                    ((uint32_t)0x00000100)        /*!< Port reset */\n 7304  \n 7305  #define USB_OTG_HPRT_PLSTS                   ((uint32_t)0x00000C00)        /*!< Port line status */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f1xx.h:\n  169  typedef enum \n  170  {\n  171:   RESET = 0, \n  172:   SET = !RESET\n  173  } FlagStatus, ITStatus;\n  174  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Source\\Templates\\gcc\\startup_stm32f103xb.s:\n    8    *            This module performs:\n    9    *                - Set the initial SP\n   10:   *                - Set the initial PC == Reset_Handler,\n   11    *                - Set the vector table entries with the exceptions ISR address\n   12    *                - Configure the clock system   \n   13    *                - Branches to main in the C library (which eventually\n   14    *                  calls main()).\n   15:   *            After Reset the Cortex-M3 processor is in Thread mode,\n   16    *            priority is Privileged, and the Stack is set to Main.\n   17    ******************************************************************************\n   ..\n   67  /**\n   68   * @brief  This is the code that gets called when the processor first\n   69:  *          starts execution following a reset event. Only the absolutely\n   70   *          necessary set is performed, after which the application\n   71   *          supplied main() routine is called.\n   ..\n   74  */\n   75  \n   76:   .section .text.Reset_Handler\n   77:   .weak Reset_Handler\n   78:   .type Reset_Handler, %function\n   79: Reset_Handler:\n   80  \n   81  /* Copy the data segment initializers from flash to SRAM */\n   ..\n  114    bl main\n  115    bx lr\n  116: .size Reset_Handler, .-Reset_Handler\n  117  \n  118  /**\n  ...\n  144  \n  145    .word _estack\n  146:   .word Reset_Handler\n  147    .word NMI_Handler\n  148    .word HardFault_Handler\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Source\\Templates\\system_stm32f1xx.c:\n   11    *      - SystemInit(): Setups the system clock (System clock source, PLL Multiplier\n   12    *                      factors, AHB/APBx prescalers and Flash settings). \n   13:   *                      This function is called at startup just after reset and \n   14    *                      before branch to main program. This call is made inside\n   15    *                      the \"startup_stm32f1xx_xx.s\" file.\n   ..\n   23    *                                 during program execution.\n   24    *\n   25:   * 2. After each device reset the HSI (8 MHz) is used as system clock source.\n   26    *    Then SystemInit() function is called, in \"startup_stm32f1xx_xx.s\" file, to\n   27    *    configure the system clock before to branch to main program.\n   ..\n  167    *         Initialize the Embedded Flash Interface, the PLL and update the \n  168    *         SystemCoreClock variable.\n  169:   * @note   This function should be used only after reset.\n  170    * @param  None\n  171    * @retval None\n  ...\n  173  void SystemInit (void)\n  174  {\n  175:   /* Reset the RCC clock configuration to the default reset state(for debug purpose) */\n  176    /* Set HSION bit */\n  177    RCC->CR |= (uint32_t)0x00000001;\n  178  \n  179:   /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */\n  180  #if !defined(STM32F105xC) && !defined(STM32F107xC)\n  181    RCC->CFGR &= (uint32_t)0xF8FF0000;\n  ...\n  184  #endif /* STM32F105xC */   \n  185    \n  186:   /* Reset HSEON, CSSON and PLLON bits */\n  187    RCC->CR &= (uint32_t)0xFEF6FFFF;\n  188  \n  189:   /* Reset HSEBYP bit */\n  190    RCC->CR &= (uint32_t)0xFFFBFFFF;\n  191  \n  192:   /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */\n  193    RCC->CFGR &= (uint32_t)0xFF80FFFF;\n  194  \n  195  #if defined(STM32F105xC) || defined(STM32F107xC)\n  196:   /* Reset PLL2ON and PLL3ON bits */\n  197    RCC->CR &= (uint32_t)0xEBFFFFFF;\n  198  \n  ...\n  200    RCC->CIR = 0x00FF0000;\n  201  \n  202:   /* Reset CFGR2 register */\n  203    RCC->CFGR2 = 0x00000000;\n  204  #elif defined(STM32F100xB) || defined(STM32F100xE)\n  ...\n  206    RCC->CIR = 0x009F0000;\n  207  \n  208:   /* Reset CFGR2 register */\n  209    RCC->CFGR2 = 0x00000000;      \n  210  #else\n  ...\n  306   #else\n  307          /* HSE selected as PLL clock entry */\n  308:         if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)\n  309          {/* HSE oscillator clock divided by 2 */\n  310            SystemCoreClock = (HSE_VALUE >> 1) * pllmull;\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Include\\arm_math.h:\n 1872     * @brief  Initialization function for the floating-point PID Control.\n 1873     * @param[in,out] *S      points to an instance of the PID structure.\n 1874:    * @param[in]     resetStateFlag  flag to reset the state. 0 = no change in state 1 = reset the state.\n 1875     * @return none.\n 1876     */\n 1877    void arm_pid_init_f32(\n 1878    arm_pid_instance_f32 * S,\n 1879:   int32_t resetStateFlag);\n 1880  \n 1881    /**\n 1882:    * @brief  Reset function for the floating-point PID Control.\n 1883     * @param[in,out] *S is an instance of the floating-point PID Control structure\n 1884     * @return none\n 1885     */\n 1886:   void arm_pid_reset_f32(\n 1887    arm_pid_instance_f32 * S);\n 1888  \n ....\n 1891     * @brief  Initialization function for the Q31 PID Control.\n 1892     * @param[in,out] *S points to an instance of the Q15 PID structure.\n 1893:    * @param[in]     resetStateFlag  flag to reset the state. 0 = no change in state 1 = reset the state.\n 1894     * @return none.\n 1895     */\n 1896    void arm_pid_init_q31(\n 1897    arm_pid_instance_q31 * S,\n 1898:   int32_t resetStateFlag);\n 1899  \n 1900  \n 1901    /**\n 1902:    * @brief  Reset function for the Q31 PID Control.\n 1903     * @param[in,out] *S points to an instance of the Q31 PID Control structure\n 1904     * @return none\n 1905     */\n 1906  \n 1907:   void arm_pid_reset_q31(\n 1908    arm_pid_instance_q31 * S);\n 1909  \n ....\n 1911     * @brief  Initialization function for the Q15 PID Control.\n 1912     * @param[in,out] *S points to an instance of the Q15 PID structure.\n 1913:    * @param[in] resetStateFlag  flag to reset the state. 0 = no change in state 1 = reset the state.\n 1914     * @return none.\n 1915     */\n 1916    void arm_pid_init_q15(\n 1917    arm_pid_instance_q15 * S,\n 1918:   int32_t resetStateFlag);\n 1919  \n 1920    /**\n 1921:    * @brief  Reset function for the Q15 PID Control.\n 1922     * @param[in,out] *S points to an instance of the q15 PID Control structure\n 1923     * @return none\n 1924     */\n 1925:   void arm_pid_reset_q15(\n 1926    arm_pid_instance_q15 * S);\n 1927  \n ....\n 5066     * There are separate instance structure declarations for each of the 3 supported data types.\n 5067     *\n 5068:    * \\par Reset Functions\n 5069:    * There is also an associated reset function for each data type which clears the state array.\n 5070     *\n 5071     * \\par Initialization Functions\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Include\\core_cm0.h:\n  362    __IO uint32_t ICSR;                    /*!< Offset: 0x004 (R/W)  Interrupt Control and State Register                  */\n  363         uint32_t RESERVED0;\n  364:   __IO uint32_t AIRCR;                   /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset Control Register      */\n  365    __IO uint32_t SCR;                     /*!< Offset: 0x010 (R/W)  System Control Register                               */\n  366    __IO uint32_t CCR;                     /*!< Offset: 0x014 (R/W)  Configuration Control Register                        */\n  ...\n  414  #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB ICSR: VECTACTIVE Mask */\n  415  \n  416: /* SCB Application Interrupt and Reset Control Register Definitions */\n  417  #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB AIRCR: VECTKEY Position */\n  418  #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB AIRCR: VECTKEY Mask */\n  ...\n  424  #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB AIRCR: ENDIANESS Mask */\n  425  \n  426: #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB AIRCR: SYSRESETREQ Position */\n  427: #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB AIRCR: SYSRESETREQ Mask */\n  428  \n  429  #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB AIRCR: VECTCLRACTIVE Position */\n  ...\n  670  \n  671  \n  672: /** \\brief  System Reset\n  673  \n  674:     The function initiates a system reset request to reset the MCU.\n  675   */\n  676: __STATIC_INLINE void NVIC_SystemReset(void)\n  677  {\n  678    __DSB();                                                     /* Ensure all outstanding memory accesses included\n  679:                                                                   buffered write are completed before reset */\n  680    SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |\n  681:                  SCB_AIRCR_SYSRESETREQ_Msk);\n  682    __DSB();                                                     /* Ensure completion of memory access */\n  683:   while(1) { __NOP(); }                                        /* wait until reset */\n  684  }\n  685  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Include\\core_cm0plus.h:\n  380         uint32_t RESERVED0;\n  381  #endif\n  382:   __IO uint32_t AIRCR;                   /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset Control Register      */\n  383    __IO uint32_t SCR;                     /*!< Offset: 0x010 (R/W)  System Control Register                               */\n  384    __IO uint32_t CCR;                     /*!< Offset: 0x014 (R/W)  Configuration Control Register                        */\n  ...\n  438  #endif\n  439  \n  440: /* SCB Application Interrupt and Reset Control Register Definitions */\n  441  #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB AIRCR: VECTKEY Position */\n  442  #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB AIRCR: VECTKEY Mask */\n  ...\n  448  #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB AIRCR: ENDIANESS Mask */\n  449  \n  450: #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB AIRCR: SYSRESETREQ Position */\n  451: #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB AIRCR: SYSRESETREQ Mask */\n  452  \n  453  #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB AIRCR: VECTCLRACTIVE Position */\n  ...\n  784  \n  785  \n  786: /** \\brief  System Reset\n  787  \n  788:     The function initiates a system reset request to reset the MCU.\n  789   */\n  790: __STATIC_INLINE void NVIC_SystemReset(void)\n  791  {\n  792    __DSB();                                                     /* Ensure all outstanding memory accesses included\n  793:                                                                   buffered write are completed before reset */\n  794    SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |\n  795:                  SCB_AIRCR_SYSRESETREQ_Msk);\n  796    __DSB();                                                     /* Ensure completion of memory access */\n  797:   while(1) { __NOP(); }                                        /* wait until reset */\n  798  }\n  799  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Include\\core_cm3.h:\n  390    __IO uint32_t ICSR;                    /*!< Offset: 0x004 (R/W)  Interrupt Control and State Register                  */\n  391    __IO uint32_t VTOR;                    /*!< Offset: 0x008 (R/W)  Vector Table Offset Register                          */\n  392:   __IO uint32_t AIRCR;                   /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset Control Register      */\n  393    __IO uint32_t SCR;                     /*!< Offset: 0x010 (R/W)  System Control Register                               */\n  394    __IO uint32_t CCR;                     /*!< Offset: 0x014 (R/W)  Configuration Control Register                        */\n  ...\n  469  #endif\n  470  \n  471: /* SCB Application Interrupt and Reset Control Register Definitions */\n  472  #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB AIRCR: VECTKEY Position */\n  473  #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB AIRCR: VECTKEY Mask */\n  ...\n  482  #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB AIRCR: PRIGROUP Mask */\n  483  \n  484: #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB AIRCR: SYSRESETREQ Position */\n  485: #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB AIRCR: SYSRESETREQ Mask */\n  486  \n  487  #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB AIRCR: VECTCLRACTIVE Position */\n  488  #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB AIRCR: VECTCLRACTIVE Mask */\n  489  \n  490: #define SCB_AIRCR_VECTRESET_Pos             0                                             /*!< SCB AIRCR: VECTRESET Position */\n  491: #define SCB_AIRCR_VECTRESET_Msk            (1UL /*<< SCB_AIRCR_VECTRESET_Pos*/)           /*!< SCB AIRCR: VECTRESET Mask */\n  492  \n  493  /* SCB System Control Register Definitions */\n  ...\n  874  #define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTRL: POSTINIT Mask */\n  875  \n  876: #define DWT_CTRL_POSTPRESET_Pos             1                                          /*!< DWT CTRL: POSTPRESET Position */\n  877: #define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTRL: POSTPRESET Mask */\n  878  \n  879  #define DWT_CTRL_CYCCNTENA_Pos              0                                          /*!< DWT CTRL: CYCCNTENA Position */\n  ...\n 1201  #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< CoreDebug DHCSR: DBGKEY Mask */\n 1202  \n 1203: #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< CoreDebug DHCSR: S_RESET_ST Position */\n 1204: #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< CoreDebug DHCSR: S_RESET_ST Mask */\n 1205  \n 1206  #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< CoreDebug DHCSR: S_RETIRE_ST Position */\n ....\n 1278  #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< CoreDebug DEMCR: VC_MMERR Mask */\n 1279  \n 1280: #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< CoreDebug DEMCR: VC_CORERESET Position */\n 1281: #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL /*<< CoreDebug_DEMCR_VC_CORERESET_Pos*/)  /*!< CoreDebug DEMCR: VC_CORERESET Mask */\n 1282  \n 1283  /*@} end of group CMSIS_CoreDebug */\n ....\n 1550  \n 1551  \n 1552: /** \\brief  System Reset\n 1553  \n 1554:     The function initiates a system reset request to reset the MCU.\n 1555   */\n 1556: __STATIC_INLINE void NVIC_SystemReset(void)\n 1557  {\n 1558    __DSB();                                                          /* Ensure all outstanding memory accesses included\n 1559:                                                                        buffered write are completed before reset */\n 1560    SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |\n 1561                             (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |\n 1562:                             SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */\n 1563    __DSB();                                                          /* Ensure completion of memory access */\n 1564:   while(1) { __NOP(); }                                             /* wait until reset */\n 1565  }\n 1566  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Include\\core_cm4.h:\n  451    __IO uint32_t ICSR;                    /*!< Offset: 0x004 (R/W)  Interrupt Control and State Register                  */\n  452    __IO uint32_t VTOR;                    /*!< Offset: 0x008 (R/W)  Vector Table Offset Register                          */\n  453:   __IO uint32_t AIRCR;                   /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset Control Register      */\n  454    __IO uint32_t SCR;                     /*!< Offset: 0x010 (R/W)  System Control Register                               */\n  455    __IO uint32_t CCR;                     /*!< Offset: 0x014 (R/W)  Configuration Control Register                        */\n  ...\n  522  #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB VTOR: TBLOFF Mask */\n  523  \n  524: /* SCB Application Interrupt and Reset Control Register Definitions */\n  525  #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB AIRCR: VECTKEY Position */\n  526  #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB AIRCR: VECTKEY Mask */\n  ...\n  535  #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB AIRCR: PRIGROUP Mask */\n  536  \n  537: #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB AIRCR: SYSRESETREQ Position */\n  538: #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB AIRCR: SYSRESETREQ Mask */\n  539  \n  540  #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB AIRCR: VECTCLRACTIVE Position */\n  541  #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB AIRCR: VECTCLRACTIVE Mask */\n  542  \n  543: #define SCB_AIRCR_VECTRESET_Pos             0                                             /*!< SCB AIRCR: VECTRESET Position */\n  544: #define SCB_AIRCR_VECTRESET_Msk            (1UL /*<< SCB_AIRCR_VECTRESET_Pos*/)           /*!< SCB AIRCR: VECTRESET Mask */\n  545  \n  546  /* SCB System Control Register Definitions */\n  ...\n  928  #define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTRL: POSTINIT Mask */\n  929  \n  930: #define DWT_CTRL_POSTPRESET_Pos             1                                          /*!< DWT CTRL: POSTPRESET Position */\n  931: #define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTRL: POSTPRESET Mask */\n  932  \n  933  #define DWT_CTRL_CYCCNTENA_Pos              0                                          /*!< DWT CTRL: CYCCNTENA Position */\n  ...\n 1361  #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< CoreDebug DHCSR: DBGKEY Mask */\n 1362  \n 1363: #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< CoreDebug DHCSR: S_RESET_ST Position */\n 1364: #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< CoreDebug DHCSR: S_RESET_ST Mask */\n 1365  \n 1366  #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< CoreDebug DHCSR: S_RETIRE_ST Position */\n ....\n 1438  #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< CoreDebug DEMCR: VC_MMERR Mask */\n 1439  \n 1440: #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< CoreDebug DEMCR: VC_CORERESET Position */\n 1441: #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL /*<< CoreDebug_DEMCR_VC_CORERESET_Pos*/)  /*!< CoreDebug DEMCR: VC_CORERESET Mask */\n 1442  \n 1443  /*@} end of group CMSIS_CoreDebug */\n ....\n 1715  \n 1716  \n 1717: /** \\brief  System Reset\n 1718  \n 1719:     The function initiates a system reset request to reset the MCU.\n 1720   */\n 1721: __STATIC_INLINE void NVIC_SystemReset(void)\n 1722  {\n 1723    __DSB();                                                          /* Ensure all outstanding memory accesses included\n 1724:                                                                        buffered write are completed before reset */\n 1725    SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |\n 1726                             (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |\n 1727:                             SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */\n 1728    __DSB();                                                          /* Ensure completion of memory access */\n 1729:   while(1) { __NOP(); }                                             /* wait until reset */\n 1730  }\n 1731  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Include\\core_cm7.h:\n  466    __IO uint32_t ICSR;                    /*!< Offset: 0x004 (R/W)  Interrupt Control and State Register                  */\n  467    __IO uint32_t VTOR;                    /*!< Offset: 0x008 (R/W)  Vector Table Offset Register                          */\n  468:   __IO uint32_t AIRCR;                   /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset Control Register      */\n  469    __IO uint32_t SCR;                     /*!< Offset: 0x010 (R/W)  System Control Register                               */\n  470    __IO uint32_t CCR;                     /*!< Offset: 0x014 (R/W)  Configuration Control Register                        */\n  ...\n  566  #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB VTOR: TBLOFF Mask */\n  567  \n  568: /* SCB Application Interrupt and Reset Control Register Definitions */\n  569  #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB AIRCR: VECTKEY Position */\n  570  #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB AIRCR: VECTKEY Mask */\n  ...\n  579  #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB AIRCR: PRIGROUP Mask */\n  580  \n  581: #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB AIRCR: SYSRESETREQ Position */\n  582: #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB AIRCR: SYSRESETREQ Mask */\n  583  \n  584  #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB AIRCR: VECTCLRACTIVE Position */\n  585  #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB AIRCR: VECTCLRACTIVE Mask */\n  586  \n  587: #define SCB_AIRCR_VECTRESET_Pos             0                                             /*!< SCB AIRCR: VECTRESET Position */\n  588: #define SCB_AIRCR_VECTRESET_Msk            (1UL /*<< SCB_AIRCR_VECTRESET_Pos*/)           /*!< SCB AIRCR: VECTRESET Mask */\n  589  \n  590  /* SCB System Control Register Definitions */\n  ...\n 1112  #define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTRL: POSTINIT Mask */\n 1113  \n 1114: #define DWT_CTRL_POSTPRESET_Pos             1                                          /*!< DWT CTRL: POSTPRESET Position */\n 1115: #define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTRL: POSTPRESET Mask */\n 1116  \n 1117  #define DWT_CTRL_CYCCNTENA_Pos              0                                          /*!< DWT CTRL: CYCCNTENA Position */\n ....\n 1548  #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< CoreDebug DHCSR: DBGKEY Mask */\n 1549  \n 1550: #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< CoreDebug DHCSR: S_RESET_ST Position */\n 1551: #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< CoreDebug DHCSR: S_RESET_ST Mask */\n 1552  \n 1553  #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< CoreDebug DHCSR: S_RETIRE_ST Position */\n ....\n 1625  #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< CoreDebug DEMCR: VC_MMERR Mask */\n 1626  \n 1627: #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< CoreDebug DEMCR: VC_CORERESET Position */\n 1628: #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL /*<< CoreDebug_DEMCR_VC_CORERESET_Pos*/)  /*!< CoreDebug DEMCR: VC_CORERESET Mask */\n 1629  \n 1630  /*@} end of group CMSIS_CoreDebug */\n ....\n 1902  \n 1903  \n 1904: /** \\brief  System Reset\n 1905  \n 1906:     The function initiates a system reset request to reset the MCU.\n 1907   */\n 1908: __STATIC_INLINE void NVIC_SystemReset(void)\n 1909  {\n 1910    __DSB();                                                          /* Ensure all outstanding memory accesses included\n 1911:                                                                        buffered write are completed before reset */\n 1912    SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |\n 1913                             (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |\n 1914:                             SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */\n 1915    __DSB();                                                          /* Ensure completion of memory access */\n 1916:   while(1) { __NOP(); }                                             /* wait until reset */\n 1917  }\n 1918  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Include\\core_sc000.h:\n  368    __IO uint32_t ICSR;                    /*!< Offset: 0x004 (R/W)  Interrupt Control and State Register                  */\n  369    __IO uint32_t VTOR;                    /*!< Offset: 0x008 (R/W)  Vector Table Offset Register                          */\n  370:   __IO uint32_t AIRCR;                   /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset Control Register      */\n  371    __IO uint32_t SCR;                     /*!< Offset: 0x010 (R/W)  System Control Register                               */\n  372    __IO uint32_t CCR;                     /*!< Offset: 0x014 (R/W)  Configuration Control Register                        */\n  ...\n  426  #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB VTOR: TBLOFF Mask */\n  427  \n  428: /* SCB Application Interrupt and Reset Control Register Definitions */\n  429  #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB AIRCR: VECTKEY Position */\n  430  #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB AIRCR: VECTKEY Mask */\n  ...\n  436  #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB AIRCR: ENDIANESS Mask */\n  437  \n  438: #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB AIRCR: SYSRESETREQ Position */\n  439: #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB AIRCR: SYSRESETREQ Mask */\n  440  \n  441  #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB AIRCR: VECTCLRACTIVE Position */\n  ...\n  794  \n  795  \n  796: /** \\brief  System Reset\n  797  \n  798:     The function initiates a system reset request to reset the MCU.\n  799   */\n  800: __STATIC_INLINE void NVIC_SystemReset(void)\n  801  {\n  802    __DSB();                                                     /* Ensure all outstanding memory accesses included\n  803:                                                                   buffered write are completed before reset */\n  804    SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |\n  805:                  SCB_AIRCR_SYSRESETREQ_Msk);\n  806    __DSB();                                                     /* Ensure completion of memory access */\n  807:   while(1) { __NOP(); }                                        /* wait until reset */\n  808  }\n  809  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Include\\core_sc300.h:\n  390    __IO uint32_t ICSR;                    /*!< Offset: 0x004 (R/W)  Interrupt Control and State Register                  */\n  391    __IO uint32_t VTOR;                    /*!< Offset: 0x008 (R/W)  Vector Table Offset Register                          */\n  392:   __IO uint32_t AIRCR;                   /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset Control Register      */\n  393    __IO uint32_t SCR;                     /*!< Offset: 0x010 (R/W)  System Control Register                               */\n  394    __IO uint32_t CCR;                     /*!< Offset: 0x014 (R/W)  Configuration Control Register                        */\n  ...\n  466  #define SCB_VTOR_TBLOFF_Msk                (0x3FFFFFUL << SCB_VTOR_TBLOFF_Pos)            /*!< SCB VTOR: TBLOFF Mask */\n  467  \n  468: /* SCB Application Interrupt and Reset Control Register Definitions */\n  469  #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB AIRCR: VECTKEY Position */\n  470  #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB AIRCR: VECTKEY Mask */\n  ...\n  479  #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB AIRCR: PRIGROUP Mask */\n  480  \n  481: #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB AIRCR: SYSRESETREQ Position */\n  482: #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB AIRCR: SYSRESETREQ Mask */\n  483  \n  484  #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB AIRCR: VECTCLRACTIVE Position */\n  485  #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB AIRCR: VECTCLRACTIVE Mask */\n  486  \n  487: #define SCB_AIRCR_VECTRESET_Pos             0                                             /*!< SCB AIRCR: VECTRESET Position */\n  488: #define SCB_AIRCR_VECTRESET_Msk            (1UL /*<< SCB_AIRCR_VECTRESET_Pos*/)           /*!< SCB AIRCR: VECTRESET Mask */\n  489  \n  490  /* SCB System Control Register Definitions */\n  ...\n  856  #define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTRL: POSTINIT Mask */\n  857  \n  858: #define DWT_CTRL_POSTPRESET_Pos             1                                          /*!< DWT CTRL: POSTPRESET Position */\n  859: #define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTRL: POSTPRESET Mask */\n  860  \n  861  #define DWT_CTRL_CYCCNTENA_Pos              0                                          /*!< DWT CTRL: CYCCNTENA Position */\n  ...\n 1183  #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< CoreDebug DHCSR: DBGKEY Mask */\n 1184  \n 1185: #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< CoreDebug DHCSR: S_RESET_ST Position */\n 1186: #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< CoreDebug DHCSR: S_RESET_ST Mask */\n 1187  \n 1188  #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< CoreDebug DHCSR: S_RETIRE_ST Position */\n ....\n 1260  #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< CoreDebug DEMCR: VC_MMERR Mask */\n 1261  \n 1262: #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< CoreDebug DEMCR: VC_CORERESET Position */\n 1263: #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL /*<< CoreDebug_DEMCR_VC_CORERESET_Pos*/)  /*!< CoreDebug DEMCR: VC_CORERESET Mask */\n 1264  \n 1265  /*@} end of group CMSIS_CoreDebug */\n ....\n 1532  \n 1533  \n 1534: /** \\brief  System Reset\n 1535  \n 1536:     The function initiates a system reset request to reset the MCU.\n 1537   */\n 1538: __STATIC_INLINE void NVIC_SystemReset(void)\n 1539  {\n 1540    __DSB();                                                          /* Ensure all outstanding memory accesses included\n 1541:                                                                        buffered write are completed before reset */\n 1542    SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |\n 1543                             (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |\n 1544:                             SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */\n 1545    __DSB();                                                          /* Ensure completion of memory access */\n 1546:   while(1) { __NOP(); }                                             /* wait until reset */\n 1547  }\n 1548  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\Legacy\\stm32_hal_legacy.h:\n  257  #define OB_WDG_HW                     OB_IWDG_HW\n  258  #define OB_SDADC12_VDD_MONITOR_SET    OB_SDACD_VDD_MONITOR_SET\n  259: #define OB_SDADC12_VDD_MONITOR_RESET  OB_SDACD_VDD_MONITOR_RESET\n  260  #define IS_OB_SDADC12_VDD_MONITOR     IS_OB_SDACD_VDD_MONITOR\n  261  /**\n  ...\n 1236    */\n 1237    \n 1238: #define __HAL_I2C_RESET_CR2             I2C_RESET_CR2\n 1239  #define __HAL_I2C_GENERATE_START        I2C_GENERATE_START\n 1240  #define __HAL_I2C_FREQ_RANGE            I2C_FREQ_RANGE\n ....\n 1402  #define __ADC_CLK_SLEEP_DISABLE __HAL_RCC_ADC_CLK_SLEEP_DISABLE\n 1403  #define __ADC_CLK_SLEEP_ENABLE __HAL_RCC_ADC_CLK_SLEEP_ENABLE\n 1404: #define __ADC_FORCE_RESET __HAL_RCC_ADC_FORCE_RESET\n 1405: #define __ADC_RELEASE_RESET __HAL_RCC_ADC_RELEASE_RESET\n 1406  #define __ADC1_CLK_DISABLE        __HAL_RCC_ADC1_CLK_DISABLE\n 1407  #define __ADC1_CLK_ENABLE         __HAL_RCC_ADC1_CLK_ENABLE\n 1408: #define __ADC1_FORCE_RESET        __HAL_RCC_ADC1_FORCE_RESET\n 1409: #define __ADC1_RELEASE_RESET      __HAL_RCC_ADC1_RELEASE_RESET\n 1410  #define __ADC1_CLK_SLEEP_ENABLE   __HAL_RCC_ADC1_CLK_SLEEP_ENABLE  \n 1411  #define __ADC1_CLK_SLEEP_DISABLE  __HAL_RCC_ADC1_CLK_SLEEP_DISABLE  \n 1412  #define __ADC2_CLK_DISABLE __HAL_RCC_ADC2_CLK_DISABLE\n 1413  #define __ADC2_CLK_ENABLE __HAL_RCC_ADC2_CLK_ENABLE\n 1414: #define __ADC2_FORCE_RESET __HAL_RCC_ADC2_FORCE_RESET\n 1415: #define __ADC2_RELEASE_RESET __HAL_RCC_ADC2_RELEASE_RESET\n 1416  #define __ADC3_CLK_DISABLE __HAL_RCC_ADC3_CLK_DISABLE\n 1417  #define __ADC3_CLK_ENABLE __HAL_RCC_ADC3_CLK_ENABLE\n 1418: #define __ADC3_FORCE_RESET __HAL_RCC_ADC3_FORCE_RESET\n 1419: #define __ADC3_RELEASE_RESET __HAL_RCC_ADC3_RELEASE_RESET\n 1420  #define __AES_CLK_DISABLE __HAL_RCC_AES_CLK_DISABLE\n 1421  #define __AES_CLK_ENABLE __HAL_RCC_AES_CLK_ENABLE\n 1422  #define __AES_CLK_SLEEP_DISABLE __HAL_RCC_AES_CLK_SLEEP_DISABLE\n 1423  #define __AES_CLK_SLEEP_ENABLE __HAL_RCC_AES_CLK_SLEEP_ENABLE\n 1424: #define __AES_FORCE_RESET __HAL_RCC_AES_FORCE_RESET\n 1425: #define __AES_RELEASE_RESET __HAL_RCC_AES_RELEASE_RESET\n 1426  #define __CRYP_CLK_SLEEP_ENABLE      __HAL_RCC_CRYP_CLK_SLEEP_ENABLE\n 1427  #define __CRYP_CLK_SLEEP_DISABLE  __HAL_RCC_CRYP_CLK_SLEEP_DISABLE\n 1428  #define __CRYP_CLK_ENABLE  __HAL_RCC_CRYP_CLK_ENABLE\n 1429  #define __CRYP_CLK_DISABLE  __HAL_RCC_CRYP_CLK_DISABLE\n 1430: #define __CRYP_FORCE_RESET  __HAL_RCC_CRYP_FORCE_RESET\n 1431: #define __CRYP_RELEASE_RESET  __HAL_RCC_CRYP_RELEASE_RESET\n 1432  #define __AFIO_CLK_DISABLE __HAL_RCC_AFIO_CLK_DISABLE\n 1433  #define __AFIO_CLK_ENABLE __HAL_RCC_AFIO_CLK_ENABLE\n 1434: #define __AFIO_FORCE_RESET __HAL_RCC_AFIO_FORCE_RESET\n 1435: #define __AFIO_RELEASE_RESET __HAL_RCC_AFIO_RELEASE_RESET\n 1436: #define __AHB_FORCE_RESET __HAL_RCC_AHB_FORCE_RESET\n 1437: #define __AHB_RELEASE_RESET __HAL_RCC_AHB_RELEASE_RESET\n 1438: #define __AHB1_FORCE_RESET __HAL_RCC_AHB1_FORCE_RESET\n 1439: #define __AHB1_RELEASE_RESET __HAL_RCC_AHB1_RELEASE_RESET\n 1440: #define __AHB2_FORCE_RESET __HAL_RCC_AHB2_FORCE_RESET\n 1441: #define __AHB2_RELEASE_RESET __HAL_RCC_AHB2_RELEASE_RESET\n 1442: #define __AHB3_FORCE_RESET __HAL_RCC_AHB3_FORCE_RESET\n 1443: #define __AHB3_RELEASE_RESET __HAL_RCC_AHB3_RELEASE_RESET\n 1444: #define __APB1_FORCE_RESET __HAL_RCC_APB1_FORCE_RESET\n 1445: #define __APB1_RELEASE_RESET __HAL_RCC_APB1_RELEASE_RESET\n 1446: #define __APB2_FORCE_RESET __HAL_RCC_APB2_FORCE_RESET\n 1447: #define __APB2_RELEASE_RESET __HAL_RCC_APB2_RELEASE_RESET\n 1448  #define __BKP_CLK_DISABLE __HAL_RCC_BKP_CLK_DISABLE\n 1449  #define __BKP_CLK_ENABLE __HAL_RCC_BKP_CLK_ENABLE\n 1450: #define __BKP_FORCE_RESET __HAL_RCC_BKP_FORCE_RESET\n 1451: #define __BKP_RELEASE_RESET __HAL_RCC_BKP_RELEASE_RESET\n 1452  #define __CAN1_CLK_DISABLE __HAL_RCC_CAN1_CLK_DISABLE\n 1453  #define __CAN1_CLK_ENABLE __HAL_RCC_CAN1_CLK_ENABLE\n 1454  #define __CAN1_CLK_SLEEP_DISABLE __HAL_RCC_CAN1_CLK_SLEEP_DISABLE\n 1455  #define __CAN1_CLK_SLEEP_ENABLE __HAL_RCC_CAN1_CLK_SLEEP_ENABLE\n 1456: #define __CAN1_FORCE_RESET __HAL_RCC_CAN1_FORCE_RESET\n 1457: #define __CAN1_RELEASE_RESET __HAL_RCC_CAN1_RELEASE_RESET\n 1458  #define __CAN_CLK_DISABLE         __HAL_RCC_CAN1_CLK_DISABLE\n 1459  #define __CAN_CLK_ENABLE          __HAL_RCC_CAN1_CLK_ENABLE\n 1460: #define __CAN_FORCE_RESET         __HAL_RCC_CAN1_FORCE_RESET\n 1461: #define __CAN_RELEASE_RESET       __HAL_RCC_CAN1_RELEASE_RESET\n 1462  #define __CAN2_CLK_DISABLE __HAL_RCC_CAN2_CLK_DISABLE\n 1463  #define __CAN2_CLK_ENABLE __HAL_RCC_CAN2_CLK_ENABLE\n 1464: #define __CAN2_FORCE_RESET __HAL_RCC_CAN2_FORCE_RESET\n 1465: #define __CAN2_RELEASE_RESET __HAL_RCC_CAN2_RELEASE_RESET\n 1466  #define __CEC_CLK_DISABLE __HAL_RCC_CEC_CLK_DISABLE\n 1467  #define __CEC_CLK_ENABLE __HAL_RCC_CEC_CLK_ENABLE\n 1468  #define __COMP_CLK_DISABLE        __HAL_RCC_COMP_CLK_DISABLE\n 1469  #define __COMP_CLK_ENABLE         __HAL_RCC_COMP_CLK_ENABLE\n 1470: #define __COMP_FORCE_RESET        __HAL_RCC_COMP_FORCE_RESET\n 1471: #define __COMP_RELEASE_RESET      __HAL_RCC_COMP_RELEASE_RESET\n 1472  #define __COMP_CLK_SLEEP_ENABLE   __HAL_RCC_COMP_CLK_SLEEP_ENABLE\n 1473  #define __COMP_CLK_SLEEP_DISABLE  __HAL_RCC_COMP_CLK_SLEEP_DISABLE\n 1474: #define __CEC_FORCE_RESET __HAL_RCC_CEC_FORCE_RESET\n 1475: #define __CEC_RELEASE_RESET __HAL_RCC_CEC_RELEASE_RESET\n 1476  #define __CRC_CLK_DISABLE __HAL_RCC_CRC_CLK_DISABLE\n 1477  #define __CRC_CLK_ENABLE __HAL_RCC_CRC_CLK_ENABLE\n 1478  #define __CRC_CLK_SLEEP_DISABLE __HAL_RCC_CRC_CLK_SLEEP_DISABLE\n 1479  #define __CRC_CLK_SLEEP_ENABLE __HAL_RCC_CRC_CLK_SLEEP_ENABLE\n 1480: #define __CRC_FORCE_RESET __HAL_RCC_CRC_FORCE_RESET\n 1481: #define __CRC_RELEASE_RESET __HAL_RCC_CRC_RELEASE_RESET\n 1482  #define __DAC_CLK_DISABLE __HAL_RCC_DAC_CLK_DISABLE\n 1483  #define __DAC_CLK_ENABLE __HAL_RCC_DAC_CLK_ENABLE\n 1484: #define __DAC_FORCE_RESET __HAL_RCC_DAC_FORCE_RESET\n 1485: #define __DAC_RELEASE_RESET __HAL_RCC_DAC_RELEASE_RESET\n 1486  #define __DAC1_CLK_DISABLE __HAL_RCC_DAC1_CLK_DISABLE\n 1487  #define __DAC1_CLK_ENABLE __HAL_RCC_DAC1_CLK_ENABLE\n 1488  #define __DAC1_CLK_SLEEP_DISABLE __HAL_RCC_DAC1_CLK_SLEEP_DISABLE\n 1489  #define __DAC1_CLK_SLEEP_ENABLE __HAL_RCC_DAC1_CLK_SLEEP_ENABLE\n 1490: #define __DAC1_FORCE_RESET __HAL_RCC_DAC1_FORCE_RESET\n 1491: #define __DAC1_RELEASE_RESET __HAL_RCC_DAC1_RELEASE_RESET\n 1492  #define __DBGMCU_CLK_ENABLE     __HAL_RCC_DBGMCU_CLK_ENABLE\n 1493  #define __DBGMCU_CLK_DISABLE     __HAL_RCC_DBGMCU_CLK_DISABLE\n 1494: #define __DBGMCU_FORCE_RESET    __HAL_RCC_DBGMCU_FORCE_RESET\n 1495: #define __DBGMCU_RELEASE_RESET  __HAL_RCC_DBGMCU_RELEASE_RESET\n 1496  #define __DFSDM_CLK_DISABLE __HAL_RCC_DFSDM_CLK_DISABLE\n 1497  #define __DFSDM_CLK_ENABLE __HAL_RCC_DFSDM_CLK_ENABLE\n 1498  #define __DFSDM_CLK_SLEEP_DISABLE __HAL_RCC_DFSDM_CLK_SLEEP_DISABLE\n 1499  #define __DFSDM_CLK_SLEEP_ENABLE __HAL_RCC_DFSDM_CLK_SLEEP_ENABLE\n 1500: #define __DFSDM_FORCE_RESET __HAL_RCC_DFSDM_FORCE_RESET\n 1501: #define __DFSDM_RELEASE_RESET __HAL_RCC_DFSDM_RELEASE_RESET\n 1502  #define __DMA1_CLK_DISABLE __HAL_RCC_DMA1_CLK_DISABLE\n 1503  #define __DMA1_CLK_ENABLE __HAL_RCC_DMA1_CLK_ENABLE\n 1504  #define __DMA1_CLK_SLEEP_DISABLE __HAL_RCC_DMA1_CLK_SLEEP_DISABLE\n 1505  #define __DMA1_CLK_SLEEP_ENABLE __HAL_RCC_DMA1_CLK_SLEEP_ENABLE\n 1506: #define __DMA1_FORCE_RESET __HAL_RCC_DMA1_FORCE_RESET\n 1507: #define __DMA1_RELEASE_RESET __HAL_RCC_DMA1_RELEASE_RESET\n 1508  #define __DMA2_CLK_DISABLE __HAL_RCC_DMA2_CLK_DISABLE\n 1509  #define __DMA2_CLK_ENABLE __HAL_RCC_DMA2_CLK_ENABLE\n 1510  #define __DMA2_CLK_SLEEP_DISABLE __HAL_RCC_DMA2_CLK_SLEEP_DISABLE\n 1511  #define __DMA2_CLK_SLEEP_ENABLE __HAL_RCC_DMA2_CLK_SLEEP_ENABLE\n 1512: #define __DMA2_FORCE_RESET __HAL_RCC_DMA2_FORCE_RESET\n 1513: #define __DMA2_RELEASE_RESET __HAL_RCC_DMA2_RELEASE_RESET\n 1514  #define __ETHMAC_CLK_DISABLE __HAL_RCC_ETHMAC_CLK_DISABLE\n 1515  #define __ETHMAC_CLK_ENABLE __HAL_RCC_ETHMAC_CLK_ENABLE\n 1516: #define __ETHMAC_FORCE_RESET __HAL_RCC_ETHMAC_FORCE_RESET\n 1517: #define __ETHMAC_RELEASE_RESET __HAL_RCC_ETHMAC_RELEASE_RESET\n 1518  #define __ETHMACRX_CLK_DISABLE __HAL_RCC_ETHMACRX_CLK_DISABLE\n 1519  #define __ETHMACRX_CLK_ENABLE __HAL_RCC_ETHMACRX_CLK_ENABLE\n ....\n 1526  #define __FLASH_CLK_SLEEP_DISABLE __HAL_RCC_FLASH_CLK_SLEEP_DISABLE\n 1527  #define __FLASH_CLK_SLEEP_ENABLE __HAL_RCC_FLASH_CLK_SLEEP_ENABLE\n 1528: #define __FLASH_FORCE_RESET __HAL_RCC_FLASH_FORCE_RESET\n 1529: #define __FLASH_RELEASE_RESET __HAL_RCC_FLASH_RELEASE_RESET\n 1530  #define __FLITF_CLK_DISABLE       __HAL_RCC_FLITF_CLK_DISABLE\n 1531  #define __FLITF_CLK_ENABLE        __HAL_RCC_FLITF_CLK_ENABLE\n 1532: #define __FLITF_FORCE_RESET       __HAL_RCC_FLITF_FORCE_RESET\n 1533: #define __FLITF_RELEASE_RESET     __HAL_RCC_FLITF_RELEASE_RESET\n 1534  #define __FLITF_CLK_SLEEP_ENABLE  __HAL_RCC_FLITF_CLK_SLEEP_ENABLE\n 1535  #define __FLITF_CLK_SLEEP_DISABLE __HAL_RCC_FLITF_CLK_SLEEP_DISABLE\n ....\n 1538  #define __FMC_CLK_SLEEP_DISABLE __HAL_RCC_FMC_CLK_SLEEP_DISABLE\n 1539  #define __FMC_CLK_SLEEP_ENABLE __HAL_RCC_FMC_CLK_SLEEP_ENABLE\n 1540: #define __FMC_FORCE_RESET __HAL_RCC_FMC_FORCE_RESET\n 1541: #define __FMC_RELEASE_RESET __HAL_RCC_FMC_RELEASE_RESET\n 1542  #define __FSMC_CLK_DISABLE __HAL_RCC_FSMC_CLK_DISABLE\n 1543  #define __FSMC_CLK_ENABLE __HAL_RCC_FSMC_CLK_ENABLE\n ....\n 1546  #define __GPIOA_CLK_SLEEP_DISABLE __HAL_RCC_GPIOA_CLK_SLEEP_DISABLE\n 1547  #define __GPIOA_CLK_SLEEP_ENABLE __HAL_RCC_GPIOA_CLK_SLEEP_ENABLE\n 1548: #define __GPIOA_FORCE_RESET __HAL_RCC_GPIOA_FORCE_RESET\n 1549: #define __GPIOA_RELEASE_RESET __HAL_RCC_GPIOA_RELEASE_RESET\n 1550  #define __GPIOB_CLK_DISABLE __HAL_RCC_GPIOB_CLK_DISABLE\n 1551  #define __GPIOB_CLK_ENABLE __HAL_RCC_GPIOB_CLK_ENABLE\n 1552  #define __GPIOB_CLK_SLEEP_DISABLE __HAL_RCC_GPIOB_CLK_SLEEP_DISABLE\n 1553  #define __GPIOB_CLK_SLEEP_ENABLE __HAL_RCC_GPIOB_CLK_SLEEP_ENABLE\n 1554: #define __GPIOB_FORCE_RESET __HAL_RCC_GPIOB_FORCE_RESET\n 1555: #define __GPIOB_RELEASE_RESET __HAL_RCC_GPIOB_RELEASE_RESET\n 1556  #define __GPIOC_CLK_DISABLE __HAL_RCC_GPIOC_CLK_DISABLE\n 1557  #define __GPIOC_CLK_ENABLE __HAL_RCC_GPIOC_CLK_ENABLE\n 1558  #define __GPIOC_CLK_SLEEP_DISABLE __HAL_RCC_GPIOC_CLK_SLEEP_DISABLE\n 1559  #define __GPIOC_CLK_SLEEP_ENABLE __HAL_RCC_GPIOC_CLK_SLEEP_ENABLE\n 1560: #define __GPIOC_FORCE_RESET __HAL_RCC_GPIOC_FORCE_RESET\n 1561: #define __GPIOC_RELEASE_RESET __HAL_RCC_GPIOC_RELEASE_RESET\n 1562  #define __GPIOD_CLK_DISABLE __HAL_RCC_GPIOD_CLK_DISABLE\n 1563  #define __GPIOD_CLK_ENABLE __HAL_RCC_GPIOD_CLK_ENABLE\n 1564  #define __GPIOD_CLK_SLEEP_DISABLE __HAL_RCC_GPIOD_CLK_SLEEP_DISABLE\n 1565  #define __GPIOD_CLK_SLEEP_ENABLE __HAL_RCC_GPIOD_CLK_SLEEP_ENABLE\n 1566: #define __GPIOD_FORCE_RESET __HAL_RCC_GPIOD_FORCE_RESET\n 1567: #define __GPIOD_RELEASE_RESET __HAL_RCC_GPIOD_RELEASE_RESET\n 1568  #define __GPIOE_CLK_DISABLE __HAL_RCC_GPIOE_CLK_DISABLE\n 1569  #define __GPIOE_CLK_ENABLE __HAL_RCC_GPIOE_CLK_ENABLE\n 1570  #define __GPIOE_CLK_SLEEP_DISABLE __HAL_RCC_GPIOE_CLK_SLEEP_DISABLE\n 1571  #define __GPIOE_CLK_SLEEP_ENABLE __HAL_RCC_GPIOE_CLK_SLEEP_ENABLE\n 1572: #define __GPIOE_FORCE_RESET __HAL_RCC_GPIOE_FORCE_RESET\n 1573: #define __GPIOE_RELEASE_RESET __HAL_RCC_GPIOE_RELEASE_RESET\n 1574  #define __GPIOF_CLK_DISABLE __HAL_RCC_GPIOF_CLK_DISABLE\n 1575  #define __GPIOF_CLK_ENABLE __HAL_RCC_GPIOF_CLK_ENABLE\n 1576  #define __GPIOF_CLK_SLEEP_DISABLE __HAL_RCC_GPIOF_CLK_SLEEP_DISABLE\n 1577  #define __GPIOF_CLK_SLEEP_ENABLE __HAL_RCC_GPIOF_CLK_SLEEP_ENABLE\n 1578: #define __GPIOF_FORCE_RESET __HAL_RCC_GPIOF_FORCE_RESET\n 1579: #define __GPIOF_RELEASE_RESET __HAL_RCC_GPIOF_RELEASE_RESET\n 1580  #define __GPIOG_CLK_DISABLE __HAL_RCC_GPIOG_CLK_DISABLE\n 1581  #define __GPIOG_CLK_ENABLE __HAL_RCC_GPIOG_CLK_ENABLE\n 1582  #define __GPIOG_CLK_SLEEP_DISABLE __HAL_RCC_GPIOG_CLK_SLEEP_DISABLE\n 1583  #define __GPIOG_CLK_SLEEP_ENABLE __HAL_RCC_GPIOG_CLK_SLEEP_ENABLE\n 1584: #define __GPIOG_FORCE_RESET __HAL_RCC_GPIOG_FORCE_RESET\n 1585: #define __GPIOG_RELEASE_RESET __HAL_RCC_GPIOG_RELEASE_RESET\n 1586  #define __GPIOH_CLK_DISABLE __HAL_RCC_GPIOH_CLK_DISABLE\n 1587  #define __GPIOH_CLK_ENABLE __HAL_RCC_GPIOH_CLK_ENABLE\n 1588  #define __GPIOH_CLK_SLEEP_DISABLE __HAL_RCC_GPIOH_CLK_SLEEP_DISABLE\n 1589  #define __GPIOH_CLK_SLEEP_ENABLE __HAL_RCC_GPIOH_CLK_SLEEP_ENABLE\n 1590: #define __GPIOH_FORCE_RESET __HAL_RCC_GPIOH_FORCE_RESET\n 1591: #define __GPIOH_RELEASE_RESET __HAL_RCC_GPIOH_RELEASE_RESET\n 1592  #define __I2C1_CLK_DISABLE __HAL_RCC_I2C1_CLK_DISABLE\n 1593  #define __I2C1_CLK_ENABLE __HAL_RCC_I2C1_CLK_ENABLE\n 1594  #define __I2C1_CLK_SLEEP_DISABLE __HAL_RCC_I2C1_CLK_SLEEP_DISABLE\n 1595  #define __I2C1_CLK_SLEEP_ENABLE __HAL_RCC_I2C1_CLK_SLEEP_ENABLE\n 1596: #define __I2C1_FORCE_RESET __HAL_RCC_I2C1_FORCE_RESET\n 1597: #define __I2C1_RELEASE_RESET __HAL_RCC_I2C1_RELEASE_RESET\n 1598  #define __I2C2_CLK_DISABLE __HAL_RCC_I2C2_CLK_DISABLE\n 1599  #define __I2C2_CLK_ENABLE __HAL_RCC_I2C2_CLK_ENABLE\n 1600  #define __I2C2_CLK_SLEEP_DISABLE __HAL_RCC_I2C2_CLK_SLEEP_DISABLE\n 1601  #define __I2C2_CLK_SLEEP_ENABLE __HAL_RCC_I2C2_CLK_SLEEP_ENABLE\n 1602: #define __I2C2_FORCE_RESET __HAL_RCC_I2C2_FORCE_RESET\n 1603: #define __I2C2_RELEASE_RESET __HAL_RCC_I2C2_RELEASE_RESET\n 1604  #define __I2C3_CLK_DISABLE __HAL_RCC_I2C3_CLK_DISABLE\n 1605  #define __I2C3_CLK_ENABLE __HAL_RCC_I2C3_CLK_ENABLE\n 1606  #define __I2C3_CLK_SLEEP_DISABLE __HAL_RCC_I2C3_CLK_SLEEP_DISABLE\n 1607  #define __I2C3_CLK_SLEEP_ENABLE __HAL_RCC_I2C3_CLK_SLEEP_ENABLE\n 1608: #define __I2C3_FORCE_RESET __HAL_RCC_I2C3_FORCE_RESET\n 1609: #define __I2C3_RELEASE_RESET __HAL_RCC_I2C3_RELEASE_RESET\n 1610  #define __LCD_CLK_DISABLE __HAL_RCC_LCD_CLK_DISABLE\n 1611  #define __LCD_CLK_ENABLE __HAL_RCC_LCD_CLK_ENABLE\n 1612  #define __LCD_CLK_SLEEP_DISABLE __HAL_RCC_LCD_CLK_SLEEP_DISABLE\n 1613  #define __LCD_CLK_SLEEP_ENABLE __HAL_RCC_LCD_CLK_SLEEP_ENABLE\n 1614: #define __LCD_FORCE_RESET __HAL_RCC_LCD_FORCE_RESET\n 1615: #define __LCD_RELEASE_RESET __HAL_RCC_LCD_RELEASE_RESET\n 1616  #define __LPTIM1_CLK_DISABLE __HAL_RCC_LPTIM1_CLK_DISABLE\n 1617  #define __LPTIM1_CLK_ENABLE __HAL_RCC_LPTIM1_CLK_ENABLE\n 1618  #define __LPTIM1_CLK_SLEEP_DISABLE __HAL_RCC_LPTIM1_CLK_SLEEP_DISABLE\n 1619  #define __LPTIM1_CLK_SLEEP_ENABLE __HAL_RCC_LPTIM1_CLK_SLEEP_ENABLE\n 1620: #define __LPTIM1_FORCE_RESET __HAL_RCC_LPTIM1_FORCE_RESET\n 1621: #define __LPTIM1_RELEASE_RESET __HAL_RCC_LPTIM1_RELEASE_RESET\n 1622  #define __LPTIM2_CLK_DISABLE __HAL_RCC_LPTIM2_CLK_DISABLE\n 1623  #define __LPTIM2_CLK_ENABLE __HAL_RCC_LPTIM2_CLK_ENABLE\n 1624  #define __LPTIM2_CLK_SLEEP_DISABLE __HAL_RCC_LPTIM2_CLK_SLEEP_DISABLE\n 1625  #define __LPTIM2_CLK_SLEEP_ENABLE __HAL_RCC_LPTIM2_CLK_SLEEP_ENABLE\n 1626: #define __LPTIM2_FORCE_RESET __HAL_RCC_LPTIM2_FORCE_RESET\n 1627: #define __LPTIM2_RELEASE_RESET __HAL_RCC_LPTIM2_RELEASE_RESET\n 1628  #define __LPUART1_CLK_DISABLE __HAL_RCC_LPUART1_CLK_DISABLE\n 1629  #define __LPUART1_CLK_ENABLE __HAL_RCC_LPUART1_CLK_ENABLE\n 1630  #define __LPUART1_CLK_SLEEP_DISABLE __HAL_RCC_LPUART1_CLK_SLEEP_DISABLE\n 1631  #define __LPUART1_CLK_SLEEP_ENABLE __HAL_RCC_LPUART1_CLK_SLEEP_ENABLE\n 1632: #define __LPUART1_FORCE_RESET __HAL_RCC_LPUART1_FORCE_RESET\n 1633: #define __LPUART1_RELEASE_RESET __HAL_RCC_LPUART1_RELEASE_RESET\n 1634  #define __OPAMP_CLK_DISABLE __HAL_RCC_OPAMP_CLK_DISABLE\n 1635  #define __OPAMP_CLK_ENABLE __HAL_RCC_OPAMP_CLK_ENABLE\n 1636  #define __OPAMP_CLK_SLEEP_DISABLE __HAL_RCC_OPAMP_CLK_SLEEP_DISABLE\n 1637  #define __OPAMP_CLK_SLEEP_ENABLE __HAL_RCC_OPAMP_CLK_SLEEP_ENABLE\n 1638: #define __OPAMP_FORCE_RESET __HAL_RCC_OPAMP_FORCE_RESET\n 1639: #define __OPAMP_RELEASE_RESET __HAL_RCC_OPAMP_RELEASE_RESET\n 1640  #define __OTGFS_CLK_DISABLE __HAL_RCC_OTGFS_CLK_DISABLE\n 1641  #define __OTGFS_CLK_ENABLE __HAL_RCC_OTGFS_CLK_ENABLE\n 1642  #define __OTGFS_CLK_SLEEP_DISABLE __HAL_RCC_OTGFS_CLK_SLEEP_DISABLE\n 1643  #define __OTGFS_CLK_SLEEP_ENABLE __HAL_RCC_OTGFS_CLK_SLEEP_ENABLE\n 1644: #define __OTGFS_FORCE_RESET __HAL_RCC_OTGFS_FORCE_RESET\n 1645: #define __OTGFS_RELEASE_RESET __HAL_RCC_OTGFS_RELEASE_RESET\n 1646  #define __PWR_CLK_DISABLE __HAL_RCC_PWR_CLK_DISABLE\n 1647  #define __PWR_CLK_ENABLE __HAL_RCC_PWR_CLK_ENABLE\n 1648  #define __PWR_CLK_SLEEP_DISABLE __HAL_RCC_PWR_CLK_SLEEP_DISABLE\n 1649  #define __PWR_CLK_SLEEP_ENABLE __HAL_RCC_PWR_CLK_SLEEP_ENABLE\n 1650: #define __PWR_FORCE_RESET __HAL_RCC_PWR_FORCE_RESET\n 1651: #define __PWR_RELEASE_RESET __HAL_RCC_PWR_RELEASE_RESET\n 1652  #define __QSPI_CLK_DISABLE __HAL_RCC_QSPI_CLK_DISABLE\n 1653  #define __QSPI_CLK_ENABLE __HAL_RCC_QSPI_CLK_ENABLE\n 1654  #define __QSPI_CLK_SLEEP_DISABLE __HAL_RCC_QSPI_CLK_SLEEP_DISABLE\n 1655  #define __QSPI_CLK_SLEEP_ENABLE __HAL_RCC_QSPI_CLK_SLEEP_ENABLE\n 1656: #define __QSPI_FORCE_RESET __HAL_RCC_QSPI_FORCE_RESET\n 1657: #define __QSPI_RELEASE_RESET __HAL_RCC_QSPI_RELEASE_RESET\n 1658  #define __RNG_CLK_DISABLE __HAL_RCC_RNG_CLK_DISABLE\n 1659  #define __RNG_CLK_ENABLE __HAL_RCC_RNG_CLK_ENABLE\n 1660  #define __RNG_CLK_SLEEP_DISABLE __HAL_RCC_RNG_CLK_SLEEP_DISABLE\n 1661  #define __RNG_CLK_SLEEP_ENABLE __HAL_RCC_RNG_CLK_SLEEP_ENABLE\n 1662: #define __RNG_FORCE_RESET __HAL_RCC_RNG_FORCE_RESET\n 1663: #define __RNG_RELEASE_RESET __HAL_RCC_RNG_RELEASE_RESET\n 1664  #define __SAI1_CLK_DISABLE __HAL_RCC_SAI1_CLK_DISABLE\n 1665  #define __SAI1_CLK_ENABLE __HAL_RCC_SAI1_CLK_ENABLE\n 1666  #define __SAI1_CLK_SLEEP_DISABLE __HAL_RCC_SAI1_CLK_SLEEP_DISABLE\n 1667  #define __SAI1_CLK_SLEEP_ENABLE __HAL_RCC_SAI1_CLK_SLEEP_ENABLE\n 1668: #define __SAI1_FORCE_RESET __HAL_RCC_SAI1_FORCE_RESET\n 1669: #define __SAI1_RELEASE_RESET __HAL_RCC_SAI1_RELEASE_RESET\n 1670  #define __SAI2_CLK_DISABLE __HAL_RCC_SAI2_CLK_DISABLE\n 1671  #define __SAI2_CLK_ENABLE __HAL_RCC_SAI2_CLK_ENABLE\n 1672  #define __SAI2_CLK_SLEEP_DISABLE __HAL_RCC_SAI2_CLK_SLEEP_DISABLE\n 1673  #define __SAI2_CLK_SLEEP_ENABLE __HAL_RCC_SAI2_CLK_SLEEP_ENABLE\n 1674: #define __SAI2_FORCE_RESET __HAL_RCC_SAI2_FORCE_RESET\n 1675: #define __SAI2_RELEASE_RESET __HAL_RCC_SAI2_RELEASE_RESET\n 1676  #define __SDIO_CLK_DISABLE __HAL_RCC_SDIO_CLK_DISABLE\n 1677  #define __SDIO_CLK_ENABLE __HAL_RCC_SDIO_CLK_ENABLE\n ....\n 1680  #define __SDMMC_CLK_SLEEP_DISABLE __HAL_RCC_SDMMC_CLK_SLEEP_DISABLE\n 1681  #define __SDMMC_CLK_SLEEP_ENABLE __HAL_RCC_SDMMC_CLK_SLEEP_ENABLE\n 1682: #define __SDMMC_FORCE_RESET __HAL_RCC_SDMMC_FORCE_RESET\n 1683: #define __SDMMC_RELEASE_RESET __HAL_RCC_SDMMC_RELEASE_RESET\n 1684  #define __SPI1_CLK_DISABLE __HAL_RCC_SPI1_CLK_DISABLE\n 1685  #define __SPI1_CLK_ENABLE __HAL_RCC_SPI1_CLK_ENABLE\n 1686  #define __SPI1_CLK_SLEEP_DISABLE __HAL_RCC_SPI1_CLK_SLEEP_DISABLE\n 1687  #define __SPI1_CLK_SLEEP_ENABLE __HAL_RCC_SPI1_CLK_SLEEP_ENABLE\n 1688: #define __SPI1_FORCE_RESET __HAL_RCC_SPI1_FORCE_RESET\n 1689: #define __SPI1_RELEASE_RESET __HAL_RCC_SPI1_RELEASE_RESET\n 1690  #define __SPI2_CLK_DISABLE __HAL_RCC_SPI2_CLK_DISABLE\n 1691  #define __SPI2_CLK_ENABLE __HAL_RCC_SPI2_CLK_ENABLE\n 1692  #define __SPI2_CLK_SLEEP_DISABLE __HAL_RCC_SPI2_CLK_SLEEP_DISABLE\n 1693  #define __SPI2_CLK_SLEEP_ENABLE __HAL_RCC_SPI2_CLK_SLEEP_ENABLE\n 1694: #define __SPI2_FORCE_RESET __HAL_RCC_SPI2_FORCE_RESET\n 1695: #define __SPI2_RELEASE_RESET __HAL_RCC_SPI2_RELEASE_RESET\n 1696  #define __SPI3_CLK_DISABLE __HAL_RCC_SPI3_CLK_DISABLE\n 1697  #define __SPI3_CLK_ENABLE __HAL_RCC_SPI3_CLK_ENABLE\n 1698  #define __SPI3_CLK_SLEEP_DISABLE __HAL_RCC_SPI3_CLK_SLEEP_DISABLE\n 1699  #define __SPI3_CLK_SLEEP_ENABLE __HAL_RCC_SPI3_CLK_SLEEP_ENABLE\n 1700: #define __SPI3_FORCE_RESET __HAL_RCC_SPI3_FORCE_RESET\n 1701: #define __SPI3_RELEASE_RESET __HAL_RCC_SPI3_RELEASE_RESET\n 1702  #define __SRAM_CLK_DISABLE __HAL_RCC_SRAM_CLK_DISABLE\n 1703  #define __SRAM_CLK_ENABLE __HAL_RCC_SRAM_CLK_ENABLE\n ....\n 1710  #define __SWPMI1_CLK_SLEEP_DISABLE __HAL_RCC_SWPMI1_CLK_SLEEP_DISABLE\n 1711  #define __SWPMI1_CLK_SLEEP_ENABLE __HAL_RCC_SWPMI1_CLK_SLEEP_ENABLE\n 1712: #define __SWPMI1_FORCE_RESET __HAL_RCC_SWPMI1_FORCE_RESET\n 1713: #define __SWPMI1_RELEASE_RESET __HAL_RCC_SWPMI1_RELEASE_RESET\n 1714  #define __SYSCFG_CLK_DISABLE __HAL_RCC_SYSCFG_CLK_DISABLE\n 1715  #define __SYSCFG_CLK_ENABLE __HAL_RCC_SYSCFG_CLK_ENABLE\n 1716  #define __SYSCFG_CLK_SLEEP_DISABLE __HAL_RCC_SYSCFG_CLK_SLEEP_DISABLE\n 1717  #define __SYSCFG_CLK_SLEEP_ENABLE __HAL_RCC_SYSCFG_CLK_SLEEP_ENABLE\n 1718: #define __SYSCFG_FORCE_RESET __HAL_RCC_SYSCFG_FORCE_RESET\n 1719: #define __SYSCFG_RELEASE_RESET __HAL_RCC_SYSCFG_RELEASE_RESET\n 1720  #define __TIM1_CLK_DISABLE __HAL_RCC_TIM1_CLK_DISABLE\n 1721  #define __TIM1_CLK_ENABLE __HAL_RCC_TIM1_CLK_ENABLE\n 1722  #define __TIM1_CLK_SLEEP_DISABLE __HAL_RCC_TIM1_CLK_SLEEP_DISABLE\n 1723  #define __TIM1_CLK_SLEEP_ENABLE __HAL_RCC_TIM1_CLK_SLEEP_ENABLE\n 1724: #define __TIM1_FORCE_RESET __HAL_RCC_TIM1_FORCE_RESET\n 1725: #define __TIM1_RELEASE_RESET __HAL_RCC_TIM1_RELEASE_RESET\n 1726  #define __TIM10_CLK_DISABLE __HAL_RCC_TIM10_CLK_DISABLE\n 1727  #define __TIM10_CLK_ENABLE __HAL_RCC_TIM10_CLK_ENABLE\n 1728: #define __TIM10_FORCE_RESET __HAL_RCC_TIM10_FORCE_RESET\n 1729: #define __TIM10_RELEASE_RESET __HAL_RCC_TIM10_RELEASE_RESET\n 1730  #define __TIM11_CLK_DISABLE __HAL_RCC_TIM11_CLK_DISABLE\n 1731  #define __TIM11_CLK_ENABLE __HAL_RCC_TIM11_CLK_ENABLE\n 1732: #define __TIM11_FORCE_RESET __HAL_RCC_TIM11_FORCE_RESET\n 1733: #define __TIM11_RELEASE_RESET __HAL_RCC_TIM11_RELEASE_RESET\n 1734  #define __TIM12_CLK_DISABLE __HAL_RCC_TIM12_CLK_DISABLE\n 1735  #define __TIM12_CLK_ENABLE __HAL_RCC_TIM12_CLK_ENABLE\n 1736: #define __TIM12_FORCE_RESET __HAL_RCC_TIM12_FORCE_RESET\n 1737: #define __TIM12_RELEASE_RESET __HAL_RCC_TIM12_RELEASE_RESET\n 1738  #define __TIM13_CLK_DISABLE __HAL_RCC_TIM13_CLK_DISABLE\n 1739  #define __TIM13_CLK_ENABLE __HAL_RCC_TIM13_CLK_ENABLE\n 1740: #define __TIM13_FORCE_RESET __HAL_RCC_TIM13_FORCE_RESET\n 1741: #define __TIM13_RELEASE_RESET __HAL_RCC_TIM13_RELEASE_RESET\n 1742  #define __TIM14_CLK_DISABLE __HAL_RCC_TIM14_CLK_DISABLE\n 1743  #define __TIM14_CLK_ENABLE __HAL_RCC_TIM14_CLK_ENABLE\n 1744: #define __TIM14_FORCE_RESET __HAL_RCC_TIM14_FORCE_RESET\n 1745: #define __TIM14_RELEASE_RESET __HAL_RCC_TIM14_RELEASE_RESET\n 1746  #define __TIM15_CLK_DISABLE __HAL_RCC_TIM15_CLK_DISABLE\n 1747  #define __TIM15_CLK_ENABLE __HAL_RCC_TIM15_CLK_ENABLE\n 1748  #define __TIM15_CLK_SLEEP_DISABLE __HAL_RCC_TIM15_CLK_SLEEP_DISABLE\n 1749  #define __TIM15_CLK_SLEEP_ENABLE __HAL_RCC_TIM15_CLK_SLEEP_ENABLE\n 1750: #define __TIM15_FORCE_RESET __HAL_RCC_TIM15_FORCE_RESET\n 1751: #define __TIM15_RELEASE_RESET __HAL_RCC_TIM15_RELEASE_RESET\n 1752  #define __TIM16_CLK_DISABLE __HAL_RCC_TIM16_CLK_DISABLE\n 1753  #define __TIM16_CLK_ENABLE __HAL_RCC_TIM16_CLK_ENABLE\n 1754  #define __TIM16_CLK_SLEEP_DISABLE __HAL_RCC_TIM16_CLK_SLEEP_DISABLE\n 1755  #define __TIM16_CLK_SLEEP_ENABLE __HAL_RCC_TIM16_CLK_SLEEP_ENABLE\n 1756: #define __TIM16_FORCE_RESET __HAL_RCC_TIM16_FORCE_RESET\n 1757: #define __TIM16_RELEASE_RESET __HAL_RCC_TIM16_RELEASE_RESET\n 1758  #define __TIM17_CLK_DISABLE __HAL_RCC_TIM17_CLK_DISABLE\n 1759  #define __TIM17_CLK_ENABLE __HAL_RCC_TIM17_CLK_ENABLE\n 1760  #define __TIM17_CLK_SLEEP_DISABLE __HAL_RCC_TIM17_CLK_SLEEP_DISABLE\n 1761  #define __TIM17_CLK_SLEEP_ENABLE __HAL_RCC_TIM17_CLK_SLEEP_ENABLE\n 1762: #define __TIM17_FORCE_RESET __HAL_RCC_TIM17_FORCE_RESET\n 1763: #define __TIM17_RELEASE_RESET __HAL_RCC_TIM17_RELEASE_RESET\n 1764  #define __TIM2_CLK_DISABLE __HAL_RCC_TIM2_CLK_DISABLE\n 1765  #define __TIM2_CLK_ENABLE __HAL_RCC_TIM2_CLK_ENABLE\n 1766  #define __TIM2_CLK_SLEEP_DISABLE __HAL_RCC_TIM2_CLK_SLEEP_DISABLE\n 1767  #define __TIM2_CLK_SLEEP_ENABLE __HAL_RCC_TIM2_CLK_SLEEP_ENABLE\n 1768: #define __TIM2_FORCE_RESET __HAL_RCC_TIM2_FORCE_RESET\n 1769: #define __TIM2_RELEASE_RESET __HAL_RCC_TIM2_RELEASE_RESET\n 1770  #define __TIM3_CLK_DISABLE __HAL_RCC_TIM3_CLK_DISABLE\n 1771  #define __TIM3_CLK_ENABLE __HAL_RCC_TIM3_CLK_ENABLE\n 1772  #define __TIM3_CLK_SLEEP_DISABLE __HAL_RCC_TIM3_CLK_SLEEP_DISABLE\n 1773  #define __TIM3_CLK_SLEEP_ENABLE __HAL_RCC_TIM3_CLK_SLEEP_ENABLE\n 1774: #define __TIM3_FORCE_RESET __HAL_RCC_TIM3_FORCE_RESET\n 1775: #define __TIM3_RELEASE_RESET __HAL_RCC_TIM3_RELEASE_RESET\n 1776  #define __TIM4_CLK_DISABLE __HAL_RCC_TIM4_CLK_DISABLE\n 1777  #define __TIM4_CLK_ENABLE __HAL_RCC_TIM4_CLK_ENABLE\n 1778  #define __TIM4_CLK_SLEEP_DISABLE __HAL_RCC_TIM4_CLK_SLEEP_DISABLE\n 1779  #define __TIM4_CLK_SLEEP_ENABLE __HAL_RCC_TIM4_CLK_SLEEP_ENABLE\n 1780: #define __TIM4_FORCE_RESET __HAL_RCC_TIM4_FORCE_RESET\n 1781: #define __TIM4_RELEASE_RESET __HAL_RCC_TIM4_RELEASE_RESET\n 1782  #define __TIM5_CLK_DISABLE __HAL_RCC_TIM5_CLK_DISABLE\n 1783  #define __TIM5_CLK_ENABLE __HAL_RCC_TIM5_CLK_ENABLE\n 1784  #define __TIM5_CLK_SLEEP_DISABLE __HAL_RCC_TIM5_CLK_SLEEP_DISABLE\n 1785  #define __TIM5_CLK_SLEEP_ENABLE __HAL_RCC_TIM5_CLK_SLEEP_ENABLE\n 1786: #define __TIM5_FORCE_RESET __HAL_RCC_TIM5_FORCE_RESET\n 1787: #define __TIM5_RELEASE_RESET __HAL_RCC_TIM5_RELEASE_RESET\n 1788  #define __TIM6_CLK_DISABLE __HAL_RCC_TIM6_CLK_DISABLE\n 1789  #define __TIM6_CLK_ENABLE __HAL_RCC_TIM6_CLK_ENABLE\n 1790  #define __TIM6_CLK_SLEEP_DISABLE __HAL_RCC_TIM6_CLK_SLEEP_DISABLE\n 1791  #define __TIM6_CLK_SLEEP_ENABLE __HAL_RCC_TIM6_CLK_SLEEP_ENABLE\n 1792: #define __TIM6_FORCE_RESET __HAL_RCC_TIM6_FORCE_RESET\n 1793: #define __TIM6_RELEASE_RESET __HAL_RCC_TIM6_RELEASE_RESET\n 1794  #define __TIM7_CLK_DISABLE __HAL_RCC_TIM7_CLK_DISABLE\n 1795  #define __TIM7_CLK_ENABLE __HAL_RCC_TIM7_CLK_ENABLE\n 1796  #define __TIM7_CLK_SLEEP_DISABLE __HAL_RCC_TIM7_CLK_SLEEP_DISABLE\n 1797  #define __TIM7_CLK_SLEEP_ENABLE __HAL_RCC_TIM7_CLK_SLEEP_ENABLE\n 1798: #define __TIM7_FORCE_RESET __HAL_RCC_TIM7_FORCE_RESET\n 1799: #define __TIM7_RELEASE_RESET __HAL_RCC_TIM7_RELEASE_RESET\n 1800  #define __TIM8_CLK_DISABLE __HAL_RCC_TIM8_CLK_DISABLE\n 1801  #define __TIM8_CLK_ENABLE __HAL_RCC_TIM8_CLK_ENABLE\n 1802  #define __TIM8_CLK_SLEEP_DISABLE __HAL_RCC_TIM8_CLK_SLEEP_DISABLE\n 1803  #define __TIM8_CLK_SLEEP_ENABLE __HAL_RCC_TIM8_CLK_SLEEP_ENABLE\n 1804: #define __TIM8_FORCE_RESET __HAL_RCC_TIM8_FORCE_RESET\n 1805: #define __TIM8_RELEASE_RESET __HAL_RCC_TIM8_RELEASE_RESET\n 1806  #define __TIM9_CLK_DISABLE __HAL_RCC_TIM9_CLK_DISABLE\n 1807  #define __TIM9_CLK_ENABLE __HAL_RCC_TIM9_CLK_ENABLE\n 1808: #define __TIM9_FORCE_RESET __HAL_RCC_TIM9_FORCE_RESET\n 1809: #define __TIM9_RELEASE_RESET __HAL_RCC_TIM9_RELEASE_RESET\n 1810  #define __TSC_CLK_DISABLE __HAL_RCC_TSC_CLK_DISABLE\n 1811  #define __TSC_CLK_ENABLE __HAL_RCC_TSC_CLK_ENABLE\n 1812  #define __TSC_CLK_SLEEP_DISABLE __HAL_RCC_TSC_CLK_SLEEP_DISABLE\n 1813  #define __TSC_CLK_SLEEP_ENABLE __HAL_RCC_TSC_CLK_SLEEP_ENABLE\n 1814: #define __TSC_FORCE_RESET __HAL_RCC_TSC_FORCE_RESET\n 1815: #define __TSC_RELEASE_RESET __HAL_RCC_TSC_RELEASE_RESET\n 1816  #define __UART4_CLK_DISABLE __HAL_RCC_UART4_CLK_DISABLE\n 1817  #define __UART4_CLK_ENABLE __HAL_RCC_UART4_CLK_ENABLE\n 1818  #define __UART4_CLK_SLEEP_DISABLE __HAL_RCC_UART4_CLK_SLEEP_DISABLE\n 1819  #define __UART4_CLK_SLEEP_ENABLE __HAL_RCC_UART4_CLK_SLEEP_ENABLE\n 1820: #define __UART4_FORCE_RESET __HAL_RCC_UART4_FORCE_RESET\n 1821: #define __UART4_RELEASE_RESET __HAL_RCC_UART4_RELEASE_RESET\n 1822  #define __UART5_CLK_DISABLE __HAL_RCC_UART5_CLK_DISABLE\n 1823  #define __UART5_CLK_ENABLE __HAL_RCC_UART5_CLK_ENABLE\n 1824  #define __UART5_CLK_SLEEP_DISABLE __HAL_RCC_UART5_CLK_SLEEP_DISABLE\n 1825  #define __UART5_CLK_SLEEP_ENABLE __HAL_RCC_UART5_CLK_SLEEP_ENABLE\n 1826: #define __UART5_FORCE_RESET __HAL_RCC_UART5_FORCE_RESET\n 1827: #define __UART5_RELEASE_RESET __HAL_RCC_UART5_RELEASE_RESET\n 1828  #define __USART1_CLK_DISABLE __HAL_RCC_USART1_CLK_DISABLE\n 1829  #define __USART1_CLK_ENABLE __HAL_RCC_USART1_CLK_ENABLE\n 1830  #define __USART1_CLK_SLEEP_DISABLE __HAL_RCC_USART1_CLK_SLEEP_DISABLE\n 1831  #define __USART1_CLK_SLEEP_ENABLE __HAL_RCC_USART1_CLK_SLEEP_ENABLE\n 1832: #define __USART1_FORCE_RESET __HAL_RCC_USART1_FORCE_RESET\n 1833: #define __USART1_RELEASE_RESET __HAL_RCC_USART1_RELEASE_RESET\n 1834  #define __USART2_CLK_DISABLE __HAL_RCC_USART2_CLK_DISABLE\n 1835  #define __USART2_CLK_ENABLE __HAL_RCC_USART2_CLK_ENABLE\n 1836  #define __USART2_CLK_SLEEP_DISABLE __HAL_RCC_USART2_CLK_SLEEP_DISABLE\n 1837  #define __USART2_CLK_SLEEP_ENABLE __HAL_RCC_USART2_CLK_SLEEP_ENABLE\n 1838: #define __USART2_FORCE_RESET __HAL_RCC_USART2_FORCE_RESET\n 1839: #define __USART2_RELEASE_RESET __HAL_RCC_USART2_RELEASE_RESET\n 1840  #define __USART3_CLK_DISABLE __HAL_RCC_USART3_CLK_DISABLE\n 1841  #define __USART3_CLK_ENABLE __HAL_RCC_USART3_CLK_ENABLE\n 1842  #define __USART3_CLK_SLEEP_DISABLE __HAL_RCC_USART3_CLK_SLEEP_DISABLE\n 1843  #define __USART3_CLK_SLEEP_ENABLE __HAL_RCC_USART3_CLK_SLEEP_ENABLE\n 1844: #define __USART3_FORCE_RESET __HAL_RCC_USART3_FORCE_RESET\n 1845: #define __USART3_RELEASE_RESET __HAL_RCC_USART3_RELEASE_RESET\n 1846  #define __USART4_CLK_DISABLE        __HAL_RCC_USART4_CLK_DISABLE\n 1847  #define __USART4_CLK_ENABLE         __HAL_RCC_USART4_CLK_ENABLE\n 1848  #define __USART4_CLK_SLEEP_ENABLE   __HAL_RCC_USART4_CLK_SLEEP_ENABLE\n 1849  #define __USART4_CLK_SLEEP_DISABLE  __HAL_RCC_USART4_CLK_SLEEP_DISABLE \n 1850: #define __USART4_FORCE_RESET        __HAL_RCC_USART4_FORCE_RESET\n 1851: #define __USART4_RELEASE_RESET      __HAL_RCC_USART4_RELEASE_RESET\n 1852  #define __USART5_CLK_DISABLE        __HAL_RCC_USART5_CLK_DISABLE\n 1853  #define __USART5_CLK_ENABLE         __HAL_RCC_USART5_CLK_ENABLE\n 1854  #define __USART5_CLK_SLEEP_ENABLE   __HAL_RCC_USART5_CLK_SLEEP_ENABLE\n 1855  #define __USART5_CLK_SLEEP_DISABLE  __HAL_RCC_USART5_CLK_SLEEP_DISABLE \n 1856: #define __USART5_FORCE_RESET        __HAL_RCC_USART5_FORCE_RESET\n 1857: #define __USART5_RELEASE_RESET      __HAL_RCC_USART5_RELEASE_RESET\n 1858  #define __USART7_CLK_DISABLE        __HAL_RCC_USART7_CLK_DISABLE\n 1859  #define __USART7_CLK_ENABLE         __HAL_RCC_USART7_CLK_ENABLE\n 1860: #define __USART7_FORCE_RESET        __HAL_RCC_USART7_FORCE_RESET\n 1861: #define __USART7_RELEASE_RESET      __HAL_RCC_USART7_RELEASE_RESET\n 1862  #define __USART8_CLK_DISABLE        __HAL_RCC_USART8_CLK_DISABLE\n 1863  #define __USART8_CLK_ENABLE         __HAL_RCC_USART8_CLK_ENABLE\n 1864: #define __USART8_FORCE_RESET        __HAL_RCC_USART8_FORCE_RESET\n 1865: #define __USART8_RELEASE_RESET      __HAL_RCC_USART8_RELEASE_RESET\n 1866  #define __USB_CLK_DISABLE         __HAL_RCC_USB_CLK_DISABLE\n 1867  #define __USB_CLK_ENABLE          __HAL_RCC_USB_CLK_ENABLE\n 1868: #define __USB_FORCE_RESET         __HAL_RCC_USB_FORCE_RESET\n 1869  #define __USB_CLK_SLEEP_ENABLE    __HAL_RCC_USB_CLK_SLEEP_ENABLE\n 1870  #define __USB_CLK_SLEEP_DISABLE   __HAL_RCC_USB_CLK_SLEEP_DISABLE\n 1871  #define __USB_OTG_FS_CLK_DISABLE __HAL_RCC_USB_OTG_FS_CLK_DISABLE\n 1872  #define __USB_OTG_FS_CLK_ENABLE __HAL_RCC_USB_OTG_FS_CLK_ENABLE\n 1873: #define __USB_RELEASE_RESET __HAL_RCC_USB_RELEASE_RESET\n 1874  #define __WWDG_CLK_DISABLE __HAL_RCC_WWDG_CLK_DISABLE\n 1875  #define __WWDG_CLK_ENABLE __HAL_RCC_WWDG_CLK_ENABLE\n 1876  #define __WWDG_CLK_SLEEP_DISABLE __HAL_RCC_WWDG_CLK_SLEEP_DISABLE\n 1877  #define __WWDG_CLK_SLEEP_ENABLE __HAL_RCC_WWDG_CLK_SLEEP_ENABLE\n 1878: #define __WWDG_FORCE_RESET __HAL_RCC_WWDG_FORCE_RESET\n 1879: #define __WWDG_RELEASE_RESET __HAL_RCC_WWDG_RELEASE_RESET\n 1880  #define __TIM21_CLK_ENABLE   __HAL_RCC_TIM21_CLK_ENABLE\n 1881  #define __TIM21_CLK_DISABLE   __HAL_RCC_TIM21_CLK_DISABLE\n 1882: #define __TIM21_FORCE_RESET   __HAL_RCC_TIM21_FORCE_RESET\n 1883: #define __TIM21_RELEASE_RESET  __HAL_RCC_TIM21_RELEASE_RESET\n 1884  #define __TIM21_CLK_SLEEP_ENABLE   __HAL_RCC_TIM21_CLK_SLEEP_ENABLE\n 1885  #define __TIM21_CLK_SLEEP_DISABLE   __HAL_RCC_TIM21_CLK_SLEEP_DISABLE\n 1886  #define __TIM22_CLK_ENABLE   __HAL_RCC_TIM22_CLK_ENABLE\n 1887  #define __TIM22_CLK_DISABLE   __HAL_RCC_TIM22_CLK_DISABLE\n 1888: #define __TIM22_FORCE_RESET   __HAL_RCC_TIM22_FORCE_RESET\n 1889: #define __TIM22_RELEASE_RESET  __HAL_RCC_TIM22_RELEASE_RESET\n 1890  #define __TIM22_CLK_SLEEP_ENABLE   __HAL_RCC_TIM22_CLK_SLEEP_ENABLE\n 1891  #define __TIM22_CLK_SLEEP_DISABLE   __HAL_RCC_TIM22_CLK_SLEEP_DISABLE\n ....\n 1894  #define __CRS_CLK_SLEEP_DISABLE __HAL_RCC_CRS_CLK_SLEEP_DISABLE\n 1895  #define __CRS_CLK_SLEEP_ENABLE __HAL_RCC_CRS_CLK_SLEEP_ENABLE\n 1896: #define __CRS_FORCE_RESET __HAL_RCC_CRS_FORCE_RESET\n 1897: #define __CRS_RELEASE_RESET __HAL_RCC_CRS_RELEASE_RESET\n 1898: #define __RCC_BACKUPRESET_FORCE __HAL_RCC_BACKUPRESET_FORCE\n 1899: #define __RCC_BACKUPRESET_RELEASE __HAL_RCC_BACKUPRESET_RELEASE\n 1900  \n 1901: #define __USB_OTG_FS_FORCE_RESET  __HAL_RCC_USB_OTG_FS_FORCE_RESET\n 1902: #define __USB_OTG_FS_RELEASE_RESET  __HAL_RCC_USB_OTG_FS_RELEASE_RESET\n 1903  #define __USB_OTG_FS_CLK_SLEEP_ENABLE  __HAL_RCC_USB_OTG_FS_CLK_SLEEP_ENABLE\n 1904  #define __USB_OTG_FS_CLK_SLEEP_DISABLE  __HAL_RCC_USB_OTG_FS_CLK_SLEEP_DISABLE\n ....\n 1918  #define __ETHMACPTP_CLK_DISABLE          __HAL_RCC_ETHMACPTP_CLK_DISABLE  \n 1919  #define __HASH_CLK_ENABLE          __HAL_RCC_HASH_CLK_ENABLE\n 1920: #define __HASH_FORCE_RESET          __HAL_RCC_HASH_FORCE_RESET\n 1921: #define __HASH_RELEASE_RESET          __HAL_RCC_HASH_RELEASE_RESET\n 1922  #define __HASH_CLK_SLEEP_ENABLE          __HAL_RCC_HASH_CLK_SLEEP_ENABLE\n 1923  #define __HASH_CLK_SLEEP_DISABLE  __HAL_RCC_HASH_CLK_SLEEP_DISABLE\n ....\n 1925  #define __SPI5_CLK_ENABLE          __HAL_RCC_SPI5_CLK_ENABLE\n 1926  #define __SPI5_CLK_DISABLE              __HAL_RCC_SPI5_CLK_DISABLE\n 1927: #define __SPI5_FORCE_RESET          __HAL_RCC_SPI5_FORCE_RESET\n 1928: #define __SPI5_RELEASE_RESET          __HAL_RCC_SPI5_RELEASE_RESET\n 1929  #define __SPI5_CLK_SLEEP_ENABLE          __HAL_RCC_SPI5_CLK_SLEEP_ENABLE\n 1930  #define __SPI5_CLK_SLEEP_DISABLE  __HAL_RCC_SPI5_CLK_SLEEP_DISABLE  \n 1931  #define __SPI6_CLK_ENABLE          __HAL_RCC_SPI6_CLK_ENABLE\n 1932  #define __SPI6_CLK_DISABLE          __HAL_RCC_SPI6_CLK_DISABLE\n 1933: #define __SPI6_FORCE_RESET          __HAL_RCC_SPI6_FORCE_RESET\n 1934: #define __SPI6_RELEASE_RESET         __HAL_RCC_SPI6_RELEASE_RESET\n 1935  #define __SPI6_CLK_SLEEP_ENABLE          __HAL_RCC_SPI6_CLK_SLEEP_ENABLE\n 1936  #define __SPI6_CLK_SLEEP_DISABLE  __HAL_RCC_SPI6_CLK_SLEEP_DISABLE  \n 1937  #define __LTDC_CLK_ENABLE          __HAL_RCC_LTDC_CLK_ENABLE\n 1938  #define __LTDC_CLK_DISABLE          __HAL_RCC_LTDC_CLK_DISABLE\n 1939: #define __LTDC_FORCE_RESET          __HAL_RCC_LTDC_FORCE_RESET\n 1940: #define __LTDC_RELEASE_RESET          __HAL_RCC_LTDC_RELEASE_RESET\n 1941  #define __LTDC_CLK_SLEEP_ENABLE          __HAL_RCC_LTDC_CLK_SLEEP_ENABLE  \n 1942  #define __ETHMAC_CLK_SLEEP_ENABLE  __HAL_RCC_ETHMAC_CLK_SLEEP_ENABLE\n ....\n 1960  #define __USART6_CLK_ENABLE          __HAL_RCC_USART6_CLK_ENABLE\n 1961  #define __USART6_CLK_DISABLE          __HAL_RCC_USART6_CLK_DISABLE\n 1962: #define __USART6_FORCE_RESET        __HAL_RCC_USART6_FORCE_RESET\n 1963: #define __USART6_RELEASE_RESET        __HAL_RCC_USART6_RELEASE_RESET\n 1964  #define __USART6_CLK_SLEEP_ENABLE  __HAL_RCC_USART6_CLK_SLEEP_ENABLE\n 1965  #define __USART6_CLK_SLEEP_DISABLE  __HAL_RCC_USART6_CLK_SLEEP_DISABLE  \n 1966  #define __SPI4_CLK_ENABLE          __HAL_RCC_SPI4_CLK_ENABLE\n 1967  #define __SPI4_CLK_DISABLE          __HAL_RCC_SPI4_CLK_DISABLE\n 1968: #define __SPI4_FORCE_RESET          __HAL_RCC_SPI4_FORCE_RESET\n 1969: #define __SPI4_RELEASE_RESET        __HAL_RCC_SPI4_RELEASE_RESET\n 1970  #define __SPI4_CLK_SLEEP_ENABLE   __HAL_RCC_SPI4_CLK_SLEEP_ENABLE\n 1971  #define __SPI4_CLK_SLEEP_DISABLE  __HAL_RCC_SPI4_CLK_SLEEP_DISABLE  \n 1972  #define __GPIOI_CLK_ENABLE          __HAL_RCC_GPIOI_CLK_ENABLE\n 1973  #define __GPIOI_CLK_DISABLE          __HAL_RCC_GPIOI_CLK_DISABLE\n 1974: #define __GPIOI_FORCE_RESET          __HAL_RCC_GPIOI_FORCE_RESET\n 1975: #define __GPIOI_RELEASE_RESET          __HAL_RCC_GPIOI_RELEASE_RESET\n 1976  #define __GPIOI_CLK_SLEEP_ENABLE  __HAL_RCC_GPIOI_CLK_SLEEP_ENABLE\n 1977  #define __GPIOI_CLK_SLEEP_DISABLE  __HAL_RCC_GPIOI_CLK_SLEEP_DISABLE  \n 1978  #define __GPIOJ_CLK_ENABLE          __HAL_RCC_GPIOJ_CLK_ENABLE\n 1979  #define __GPIOJ_CLK_DISABLE          __HAL_RCC_GPIOJ_CLK_DISABLE\n 1980: #define __GPIOJ_FORCE_RESET         __HAL_RCC_GPIOJ_FORCE_RESET\n 1981: #define __GPIOJ_RELEASE_RESET          __HAL_RCC_GPIOJ_RELEASE_RESET\n 1982  #define __GPIOJ_CLK_SLEEP_ENABLE  __HAL_RCC_GPIOJ_CLK_SLEEP_ENABLE\n 1983  #define __GPIOJ_CLK_SLEEP_DISABLE  __HAL_RCC_GPIOJ_CLK_SLEEP_DISABLE  \n 1984  #define __GPIOK_CLK_ENABLE          __HAL_RCC_GPIOK_CLK_ENABLE\n 1985  #define __GPIOK_CLK_DISABLE          __HAL_RCC_GPIOK_CLK_DISABLE\n 1986: #define __GPIOK_RELEASE_RESET          __HAL_RCC_GPIOK_RELEASE_RESET\n 1987  #define __GPIOK_CLK_SLEEP_ENABLE  __HAL_RCC_GPIOK_CLK_SLEEP_ENABLE\n 1988  #define __GPIOK_CLK_SLEEP_DISABLE  __HAL_RCC_GPIOK_CLK_SLEEP_DISABLE  \n ....\n 1991  #define __DCMI_CLK_ENABLE          __HAL_RCC_DCMI_CLK_ENABLE\n 1992  #define __DCMI_CLK_DISABLE          __HAL_RCC_DCMI_CLK_DISABLE\n 1993: #define __DCMI_FORCE_RESET          __HAL_RCC_DCMI_FORCE_RESET\n 1994: #define __DCMI_RELEASE_RESET          __HAL_RCC_DCMI_RELEASE_RESET\n 1995  #define __DCMI_CLK_SLEEP_ENABLE   __HAL_RCC_DCMI_CLK_SLEEP_ENABLE\n 1996  #define __DCMI_CLK_SLEEP_DISABLE  __HAL_RCC_DCMI_CLK_SLEEP_DISABLE  \n 1997  #define __UART7_CLK_ENABLE          __HAL_RCC_UART7_CLK_ENABLE\n 1998  #define __UART7_CLK_DISABLE          __HAL_RCC_UART7_CLK_DISABLE\n 1999: #define __UART7_RELEASE_RESET       __HAL_RCC_UART7_RELEASE_RESET\n 2000: #define __UART7_FORCE_RESET       __HAL_RCC_UART7_FORCE_RESET\n 2001  #define __UART7_CLK_SLEEP_ENABLE  __HAL_RCC_UART7_CLK_SLEEP_ENABLE\n 2002  #define __UART7_CLK_SLEEP_DISABLE  __HAL_RCC_UART7_CLK_SLEEP_DISABLE  \n 2003  #define __UART8_CLK_ENABLE          __HAL_RCC_UART8_CLK_ENABLE\n 2004  #define __UART8_CLK_DISABLE          __HAL_RCC_UART8_CLK_DISABLE\n 2005: #define __UART8_FORCE_RESET          __HAL_RCC_UART8_FORCE_RESET\n 2006: #define __UART8_RELEASE_RESET          __HAL_RCC_UART8_RELEASE_RESET\n 2007  #define __UART8_CLK_SLEEP_ENABLE  __HAL_RCC_UART8_CLK_SLEEP_ENABLE\n 2008  #define __UART8_CLK_SLEEP_DISABLE  __HAL_RCC_UART8_CLK_SLEEP_DISABLE  \n 2009  #define __OTGHS_CLK_SLEEP_ENABLE  __HAL_RCC_USB_OTG_HS_CLK_SLEEP_ENABLE\n 2010  #define __OTGHS_CLK_SLEEP_DISABLE  __HAL_RCC_USB_OTG_HS_CLK_SLEEP_DISABLE\n 2011: #define __OTGHS_FORCE_RESET          __HAL_RCC_USB_OTG_HS_FORCE_RESET\n 2012: #define __OTGHS_RELEASE_RESET          __HAL_RCC_USB_OTG_HS_RELEASE_RESET  \n 2013  #define __OTGHSULPI_CLK_SLEEP_ENABLE  __HAL_RCC_USB_OTG_HS_ULPI_CLK_SLEEP_ENABLE\n 2014  #define __OTGHSULPI_CLK_SLEEP_DISABLE  __HAL_RCC_USB_OTG_HS_ULPI_CLK_SLEEP_DISABLE\n ....\n 2017  #define __HAL_RCC_OTGHS_IS_CLK_SLEEP_ENABLED __HAL_RCC_USB_OTG_HS_IS_CLK_SLEEP_ENABLED\n 2018  #define __HAL_RCC_OTGHS_IS_CLK_SLEEP_DISABLED __HAL_RCC_USB_OTG_HS_IS_CLK_SLEEP_DISABLED\n 2019: #define __HAL_RCC_OTGHS_FORCE_RESET          __HAL_RCC_USB_OTG_HS_FORCE_RESET\n 2020: #define __HAL_RCC_OTGHS_RELEASE_RESET          __HAL_RCC_USB_OTG_HS_RELEASE_RESET  \n 2021  #define __HAL_RCC_OTGHSULPI_CLK_SLEEP_ENABLE      __HAL_RCC_USB_OTG_HS_ULPI_CLK_SLEEP_ENABLE\n 2022  #define __HAL_RCC_OTGHSULPI_CLK_SLEEP_DISABLE     __HAL_RCC_USB_OTG_HS_ULPI_CLK_SLEEP_DISABLE \n 2023  #define __HAL_RCC_OTGHSULPI_IS_CLK_SLEEP_ENABLED  __HAL_RCC_USB_OTG_HS_ULPI_IS_CLK_SLEEP_ENABLED\n 2024  #define __HAL_RCC_OTGHSULPI_IS_CLK_SLEEP_DISABLED __HAL_RCC_USB_OTG_HS_ULPI_IS_CLK_SLEEP_DISABLED   \n 2025: #define __CRYP_FORCE_RESET             __HAL_RCC_CRYP_FORCE_RESET  \n 2026  #define __SRAM3_CLK_SLEEP_ENABLE       __HAL_RCC_SRAM3_CLK_SLEEP_ENABLE  \n 2027  #define __CAN2_CLK_SLEEP_ENABLE        __HAL_RCC_CAN2_CLK_SLEEP_ENABLE\n ....\n 2033  #define __ADC3_CLK_SLEEP_ENABLE        __HAL_RCC_ADC3_CLK_SLEEP_ENABLE\n 2034  #define __ADC3_CLK_SLEEP_DISABLE       __HAL_RCC_ADC3_CLK_SLEEP_DISABLE  \n 2035: #define __FSMC_FORCE_RESET             __HAL_RCC_FSMC_FORCE_RESET\n 2036: #define __FSMC_RELEASE_RESET           __HAL_RCC_FSMC_RELEASE_RESET\n 2037  #define __FSMC_CLK_SLEEP_ENABLE        __HAL_RCC_FSMC_CLK_SLEEP_ENABLE\n 2038  #define __FSMC_CLK_SLEEP_DISABLE       __HAL_RCC_FSMC_CLK_SLEEP_DISABLE  \n 2039: #define __SDIO_FORCE_RESET             __HAL_RCC_SDIO_FORCE_RESET\n 2040: #define __SDIO_RELEASE_RESET           __HAL_RCC_SDIO_RELEASE_RESET\n 2041  #define __SDIO_CLK_SLEEP_DISABLE       __HAL_RCC_SDIO_CLK_SLEEP_DISABLE\n 2042  #define __SDIO_CLK_SLEEP_ENABLE        __HAL_RCC_SDIO_CLK_SLEEP_ENABLE  \n 2043  #define __DMA2D_CLK_ENABLE             __HAL_RCC_DMA2D_CLK_ENABLE\n 2044  #define __DMA2D_CLK_DISABLE            __HAL_RCC_DMA2D_CLK_DISABLE\n 2045: #define __DMA2D_FORCE_RESET            __HAL_RCC_DMA2D_FORCE_RESET\n 2046: #define __DMA2D_RELEASE_RESET          __HAL_RCC_DMA2D_RELEASE_RESET\n 2047  #define __DMA2D_CLK_SLEEP_ENABLE       __HAL_RCC_DMA2D_CLK_SLEEP_ENABLE\n 2048  #define __DMA2D_CLK_SLEEP_DISABLE      __HAL_RCC_DMA2D_CLK_SLEEP_DISABLE\n 2049  \n 2050  /* alias define maintained for legacy */\n 2051: #define __HAL_RCC_OTGFS_FORCE_RESET    __HAL_RCC_USB_OTG_FS_FORCE_RESET\n 2052: #define __HAL_RCC_OTGFS_RELEASE_RESET  __HAL_RCC_USB_OTG_FS_RELEASE_RESET\n 2053  \n 2054  #define __ADC12_CLK_ENABLE          __HAL_RCC_ADC12_CLK_ENABLE\n ....\n 2075  #define __SDADC3_CLK_DISABLE        __HAL_RCC_SDADC3_CLK_DISABLE\n 2076  \n 2077: #define __ADC12_FORCE_RESET         __HAL_RCC_ADC12_FORCE_RESET\n 2078: #define __ADC12_RELEASE_RESET       __HAL_RCC_ADC12_RELEASE_RESET\n 2079: #define __ADC34_FORCE_RESET         __HAL_RCC_ADC34_FORCE_RESET\n 2080: #define __ADC34_RELEASE_RESET       __HAL_RCC_ADC34_RELEASE_RESET\n 2081: #define __ADC12_FORCE_RESET         __HAL_RCC_ADC12_FORCE_RESET\n 2082: #define __ADC12_RELEASE_RESET       __HAL_RCC_ADC12_RELEASE_RESET\n 2083: #define __DAC2_FORCE_RESET          __HAL_RCC_DAC2_FORCE_RESET\n 2084: #define __DAC2_RELEASE_RESET        __HAL_RCC_DAC2_RELEASE_RESET\n 2085: #define __TIM18_FORCE_RESET         __HAL_RCC_TIM18_FORCE_RESET\n 2086: #define __TIM18_RELEASE_RESET       __HAL_RCC_TIM18_RELEASE_RESET\n 2087: #define __TIM19_FORCE_RESET         __HAL_RCC_TIM19_FORCE_RESET\n 2088: #define __TIM19_RELEASE_RESET       __HAL_RCC_TIM19_RELEASE_RESET\n 2089: #define __TIM20_FORCE_RESET         __HAL_RCC_TIM20_FORCE_RESET\n 2090: #define __TIM20_RELEASE_RESET       __HAL_RCC_TIM20_RELEASE_RESET\n 2091: #define __HRTIM1_FORCE_RESET        __HAL_RCC_HRTIM1_FORCE_RESET\n 2092: #define __HRTIM1_RELEASE_RESET      __HAL_RCC_HRTIM1_RELEASE_RESET\n 2093: #define __SDADC1_FORCE_RESET        __HAL_RCC_SDADC1_FORCE_RESET\n 2094: #define __SDADC2_FORCE_RESET        __HAL_RCC_SDADC2_FORCE_RESET\n 2095: #define __SDADC3_FORCE_RESET        __HAL_RCC_SDADC3_FORCE_RESET\n 2096: #define __SDADC1_RELEASE_RESET      __HAL_RCC_SDADC1_RELEASE_RESET\n 2097: #define __SDADC2_RELEASE_RESET      __HAL_RCC_SDADC2_RELEASE_RESET\n 2098: #define __SDADC3_RELEASE_RESET      __HAL_RCC_SDADC3_RELEASE_RESET\n 2099  \n 2100  #define __ADC1_IS_CLK_ENABLED       __HAL_RCC_ADC1_IS_CLK_ENABLED\n ....\n 2217  #if defined(STM32F4)\n 2218  #define __HAL_RCC_SDMMC1_CLK_ENABLE        __HAL_RCC_SDIO_CLK_ENABLE\n 2219: #define __HAL_RCC_SDMMC1_FORCE_RESET       __HAL_RCC_SDIO_FORCE_RESET\n 2220: #define __HAL_RCC_SDMMC1_RELEASE_RESET     __HAL_RCC_SDIO_RELEASE_RESET\n 2221  #define __HAL_RCC_SDMMC1_CLK_SLEEP_ENABLE  __HAL_RCC_SDIO_CLK_SLEEP_ENABLE\n 2222  #define __HAL_RCC_SDMMC1_CLK_SLEEP_DISABLE __HAL_RCC_SDIO_CLK_SLEEP_DISABLE\n ....\n 2233  #if defined(STM32F7) || defined(STM32L4)\n 2234  #define __HAL_RCC_SDIO_CLK_ENABLE          __HAL_RCC_SDMMC1_CLK_ENABLE\n 2235: #define __HAL_RCC_SDIO_FORCE_RESET         __HAL_RCC_SDMMC1_FORCE_RESET\n 2236: #define __HAL_RCC_SDIO_RELEASE_RESET       __HAL_RCC_SDMMC1_RELEASE_RESET\n 2237  #define __HAL_RCC_SDIO_CLK_SLEEP_ENABLE    __HAL_RCC_SDMMC1_CLK_SLEEP_ENABLE\n 2238  #define __HAL_RCC_SDIO_CLK_SLEEP_DISABLE   __HAL_RCC_SDMMC1_CLK_SLEEP_DISABLE\n ....\n 2500    * @{\n 2501    */\n 2502: #define __HAL_SMBUS_RESET_CR1           SMBUS_RESET_CR1\n 2503: #define __HAL_SMBUS_RESET_CR2           SMBUS_RESET_CR2\n 2504  #define __HAL_SMBUS_GENERATE_START      SMBUS_GENERATE_START\n 2505  #define __HAL_SMBUS_GET_ADDR_MATCH      SMBUS_GET_ADDR_MATCH\n ....\n 2518  #define __HAL_SPI_1LINE_TX              SPI_1LINE_TX\n 2519  #define __HAL_SPI_1LINE_RX              SPI_1LINE_RX\n 2520: #define __HAL_SPI_RESET_CRC             SPI_RESET_CRC\n 2521  \n 2522  /**\n ....\n 2613    */\n 2614  #define __HAL_TIM_SetICPrescalerValue   TIM_SET_ICPRESCALERVALUE\n 2615: #define __HAL_TIM_ResetICPrescalerValue TIM_RESET_ICPRESCALERVALUE\n 2616  \n 2617  #define TIM_GET_ITSTATUS                __HAL_TIM_GET_IT_SOURCE\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal_cortex.h:\n  416  void     HAL_NVIC_EnableIRQ(IRQn_Type IRQn);\n  417  void     HAL_NVIC_DisableIRQ(IRQn_Type IRQn);\n  418: void     HAL_NVIC_SystemReset(void);\n  419  uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb);\n  420  /**\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal_def.h:\n   76  #define HAL_MAX_DELAY      0xFFFFFFFF\n   77  \n   78: #define HAL_IS_BIT_SET(REG, BIT)         (((REG) & (BIT)) != RESET)\n   79: #define HAL_IS_BIT_CLR(REG, BIT)         (((REG) & (BIT)) == RESET)\n   80  \n   81  #define __HAL_LINKDMA(__HANDLE__, __PPP_DMA_FIELD_, __DMA_HANDLE_)           \\\n   ..\n   87  #define UNUSED(x) ((void)(x))\n   88  \n   89: /** @brief Reset the Handle's State field.\n   90    * @param __HANDLE__: specifies the Peripheral Handle.\n   91    * @note  This macro can be used for the following purpose: \n   ..\n  102    * @retval None\n  103    */\n  104: #define __HAL_RESET_HANDLE_STATE(__HANDLE__) ((__HANDLE__)->State = 0)\n  105  \n  106  #if (USE_RTOS == 1)\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal_dma.h:\n  106  typedef enum\n  107  {\n  108:   HAL_DMA_STATE_RESET             = 0x00,  /*!< DMA not yet initialized or disabled */\n  109    HAL_DMA_STATE_READY             = 0x01,  /*!< DMA initialized and ready for use   */\n  110    HAL_DMA_STATE_READY_HALF        = 0x11,  /*!< DMA Half process success            */\n  ...\n  292    */\n  293  \n  294: /** @brief  Reset DMA handle state\n  295    * @param  __HANDLE__: DMA handle.\n  296    * @retval None\n  297    */\n  298: #define __HAL_DMA_RESET_HANDLE_STATE(__HANDLE__) ((__HANDLE__)->State = HAL_DMA_STATE_RESET)\n  299  \n  300  /**\n  ...\n  347    *            @arg DMA_IT_HT:  Half transfer complete interrupt mask\n  348    *            @arg DMA_IT_TE:  Transfer error interrupt mask\n  349:   * @retval The state of DMA_IT (SET or RESET).\n  350    */\n  351: #define __HAL_DMA_GET_IT_SOURCE(__HANDLE__, __INTERRUPT__)  ((((__HANDLE__)->Instance->CCR & (__INTERRUPT__)) == (__INTERRUPT__)) ? SET : RESET)\n  352  \n  353  /**\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal_dma_ex.h:\n  134    *            @arg DMA_FLAG_TEx:  Transfer error flag\n  135    *         Where x can be 1_7 or 1_5 (depending on DMA1 or DMA2) to select the DMA Channel flag.   \n  136:   * @retval The state of FLAG (SET or RESET).\n  137    */\n  138  #define __HAL_DMA_GET_FLAG(__HANDLE__, __FLAG__)\\\n  ...\n  215    *            @arg DMA_FLAG_TEx:  Transfer error flag\n  216    *         Where x can be 1_7 to select the DMA Channel flag.   \n  217:   * @retval The state of FLAG (SET or RESET).\n  218    */\n  219  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal_flash_ex.h:\n   88  \n   89  #if defined(FLASH_BANK2_END)\n   90: #define IS_OB_BOOT1(BOOT1)         (((BOOT1) == OB_BOOT1_RESET) || ((BOOT1) == OB_BOOT1_SET))\n   91  #endif /* FLASH_BANK2_END */\n   92  \n   ..\n  342    * @{\n  343    */ \n  344: #define OB_STOP_NO_RST            ((uint16_t)0x0002) /*!< No reset generated when entering in STOP */\n  345: #define OB_STOP_RST               ((uint16_t)0x0000) /*!< Reset generated when entering in STOP */\n  346  /**\n  347    * @}\n  ...\n  351    * @{\n  352    */ \n  353: #define OB_STDBY_NO_RST           ((uint16_t)0x0004) /*!< No reset generated when entering in STANDBY */\n  354: #define OB_STDBY_RST              ((uint16_t)0x0000) /*!< Reset generated when entering in STANDBY */\n  355  /**\n  356    * @}\n  ...\n  370    * @{\n  371    */\n  372: #define OB_BOOT1_RESET            ((uint16_t)0x0000) /*!< BOOT1 Reset */\n  373  #define OB_BOOT1_SET              ((uint16_t)0x0008) /*!< BOOT1 Set */\n  374  /**\n  ...\n  651    *            @arg FLASH_FLAG_BSY_BANK2   : FLASH Busy flag on bank2\n  652    *            @arg FLASH_FLAG_OPTVERR : Loaded OB and its complement do not match\n  653:   * @retval The new state of __FLAG__ (SET or RESET).\n  654    */\n  655  #define __HAL_FLASH_GET_FLAG(__FLAG__) (((__FLAG__) == FLASH_FLAG_OPTVERR) ? \\\n  656                                              (FLASH->OBR & FLASH_OBR_OPTERR) : \\\n  657:                                         ((((__FLAG__) & SR_FLAG_MASK) != RESET)? \\\n  658                                              (FLASH->SR & ((__FLAG__) & SR_FLAG_MASK)) : \\\n  659                                              (FLASH->SR2 & ((__FLAG__) >> 16))))\n  ...\n  682                            else { \\\n  683                            /* Clear Flag in Bank1 */ \\\n  684:                           if (((__FLAG__) & SR_FLAG_MASK) != RESET) \\\n  685                            { \\\n  686                              FLASH->SR  = ((__FLAG__) & SR_FLAG_MASK); \\\n  687                            } \\\n  688                            /* Clear Flag in Bank2 */ \\\n  689:                           if (((__FLAG__) >> 16) != RESET) \\\n  690                            { \\\n  691                              FLASH->SR2 = ((__FLAG__) >> 16); \\\n  ...\n  723    *            @arg FLASH_FLAG_BSY   : FLASH Busy flag\n  724    *            @arg FLASH_FLAG_OPTVERR : Loaded OB and its complement do not match\n  725:   * @retval The new state of __FLAG__ (SET or RESET).\n  726    */\n  727  #define __HAL_FLASH_GET_FLAG(__FLAG__)  (((__FLAG__) == FLASH_FLAG_OPTVERR) ? \\\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal_gpio.h:\n   79   \n   80  /** \n   81:   * @brief  GPIO Bit SET and Bit RESET enumeration \n   82    */\n   83  typedef enum\n   84  { \n   85:   GPIO_PIN_RESET = 0,\n   86    GPIO_PIN_SET\n   87  }GPIO_PinState;\n   ..\n  192    */\n  193  \n  194: #define IS_GPIO_PIN_ACTION(ACTION) (((ACTION) == GPIO_PIN_RESET) || ((ACTION) == GPIO_PIN_SET))\n  195  \n  196  #define IS_GPIO_PIN(PIN)           (((PIN) & GPIO_PIN_MASK ) != (uint32_t)0x00)\n  ...\n  229    * @param  __EXTI_LINE__: specifies the EXTI line flag to check.\n  230    *         This parameter can be GPIO_PIN_x where x can be(0..15)\n  231:   * @retval The new state of __EXTI_LINE__ (SET or RESET).\n  232    */\n  233  #define __HAL_GPIO_EXTI_GET_FLAG(__EXTI_LINE__) (EXTI->PR & (__EXTI_LINE__))   \n  ...\n  245    * @param  __EXTI_LINE__: specifies the EXTI line to check.\n  246    *          This parameter can be GPIO_PIN_x where x can be(0..15)\n  247:   * @retval The new state of __EXTI_LINE__ (SET or RESET).\n  248    */\n  249  #define __HAL_GPIO_EXTI_GET_IT(__EXTI_LINE__) (EXTI->PR & (__EXTI_LINE__))   \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal_gpio_ex.h:\n  484  /**\n  485    * @brief Enable the Serial wire JTAG configuration\n  486:   * @note  ENABLE: Full SWJ (JTAG-DP + SW-DP): Reset State\n  487    * @retval None\n  488    */\n  489: #define __HAL_AFIO_REMAP_SWJ_ENABLE()   MODIFY_REG(AFIO->MAPR, AFIO_MAPR_SWJ_CFG, AFIO_MAPR_SWJ_CFG_RESET)\n  490  \n  491  /**\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal_pcd.h:\n   70  typedef enum\n   71  {\n   72:   HAL_PCD_STATE_RESET   = 0x00,\n   73    HAL_PCD_STATE_READY   = 0x01,\n   74    HAL_PCD_STATE_ERROR   = 0x02,\n   ..\n  268  void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd);\n  269  void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd);\n  270: void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd);\n  271  void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd);\n  272  void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd);\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal_pwr.h:\n  202    *            @arg PWR_FLAG_PVDO: PVD Output. This flag is valid only if PVD is enabled\n  203    *                  by the HAL_PWR_EnablePVD() function. The PVD is stopped by Standby mode\n  204:   *                  For this reason, this bit is equal to 0 after Standby or reset\n  205    *                  until the PVDE bit is set.\n  206    * @retval The new state of __FLAG__ (TRUE or FALSE).\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal_rcc.h:\n  174  #define __HAL_RCC_SYSCFG_CLK_DISABLE    __HAL_RCC_AFIO_CLK_DISABLE\n  175  #define __HAL_RCC_SYSCFG_CLK_ENABLE     __HAL_RCC_AFIO_CLK_ENABLE\n  176: #define __HAL_RCC_SYSCFG_FORCE_RESET    __HAL_RCC_AFIO_FORCE_RESET\n  177: #define __HAL_RCC_SYSCFG_RELEASE_RESET  __HAL_RCC_AFIO_RELEASE_RESET\n  178  /**\n  179    * @}\n  ...\n  478  /* Flags in the CSR register */\n  479  #define RCC_FLAG_LSIRDY                  ((uint8_t)((CSR_REG_INDEX << 5) | POSITION_VAL(RCC_CSR_LSIRDY)))   /*!< Internal Low Speed oscillator Ready */\n  480: #define RCC_FLAG_RMV                     ((uint8_t)((CSR_REG_INDEX << 5) | RCC_RMVF_BIT_NUMBER))     /*!< Remove reset flag */\n  481: #define RCC_FLAG_PINRST                  ((uint8_t)((CSR_REG_INDEX << 5) | POSITION_VAL(RCC_CSR_PINRSTF)))  /*!< PIN reset flag */\n  482: #define RCC_FLAG_PORRST                  ((uint8_t)((CSR_REG_INDEX << 5) | POSITION_VAL(RCC_CSR_PORRSTF)))  /*!< POR/PDR reset flag */\n  483: #define RCC_FLAG_SFTRST                  ((uint8_t)((CSR_REG_INDEX << 5) | POSITION_VAL(RCC_CSR_SFTRSTF)))  /*!< Software Reset flag */\n  484: #define RCC_FLAG_IWDGRST                 ((uint8_t)((CSR_REG_INDEX << 5) | POSITION_VAL(RCC_CSR_IWDGRSTF))) /*!< Independent Watchdog reset flag */\n  485: #define RCC_FLAG_WWDGRST                 ((uint8_t)((CSR_REG_INDEX << 5) | POSITION_VAL(RCC_CSR_WWDGRSTF))) /*!< Window watchdog reset flag */\n  486: #define RCC_FLAG_LPWRRST                 ((uint8_t)((CSR_REG_INDEX << 5) | POSITION_VAL(RCC_CSR_LPWRRSTF))) /*!< Low-Power reset flag */\n  487  \n  488  /* Flags in the BDCR register */\n  ...\n  505  /** @defgroup RCC_Peripheral_Clock_Enable_Disable Peripheral Clock Enable Disable\n  506    * @brief  Enable or disable the AHB1 peripheral clock.\n  507:   * @note   After reset, the peripheral clock (used for registers read/write access)\n  508    *         is disabled and the application software has to enable this clock before \n  509    *         using it.   \n  ...\n  553  /** @defgroup RCC_AHB_Peripheral_Clock_Enable_Disable_Status AHB Peripheral Clock Enable Disable Status\n  554    * @brief  Get the enable or disable status of the AHB peripheral clock.\n  555:   * @note   After reset, the peripheral clock (used for registers read/write access)\n  556    *         is disabled and the application software has to enable this clock before\n  557    *         using it.\n  ...\n  559    */\n  560  \n  561: #define __HAL_RCC_DMA1_IS_CLK_ENABLED()       ((RCC->AHBENR & (RCC_AHBENR_DMA1EN)) != RESET)\n  562: #define __HAL_RCC_DMA1_IS_CLK_DISABLED()      ((RCC->AHBENR & (RCC_AHBENR_DMA1EN)) == RESET)\n  563: #define __HAL_RCC_SRAM_IS_CLK_ENABLED()       ((RCC->AHBENR & (RCC_AHBENR_SRAMEN)) != RESET)\n  564: #define __HAL_RCC_SRAM_IS_CLK_DISABLED()      ((RCC->AHBENR & (RCC_AHBENR_SRAMEN)) == RESET)\n  565: #define __HAL_RCC_FLITF_IS_CLK_ENABLED()       ((RCC->AHBENR & (RCC_AHBENR_FLITFEN)) != RESET)\n  566: #define __HAL_RCC_FLITF_IS_CLK_DISABLED()      ((RCC->AHBENR & (RCC_AHBENR_FLITFEN)) == RESET)\n  567: #define __HAL_RCC_CRC_IS_CLK_ENABLED()       ((RCC->AHBENR & (RCC_AHBENR_CRCEN)) != RESET)\n  568: #define __HAL_RCC_CRC_IS_CLK_DISABLED()      ((RCC->AHBENR & (RCC_AHBENR_CRCEN)) == RESET)\n  569  \n  570  /**\n  ...\n  574  /** @defgroup RCC_APB1_Clock_Enable_Disable APB1 Clock Enable Disable\n  575    * @brief  Enable or disable the Low Speed APB (APB1) peripheral clock.\n  576:   * @note   After reset, the peripheral clock (used for registers read/write access)\n  577    *         is disabled and the application software has to enable this clock before \n  578    *         using it. \n  ...\n  650  /** @defgroup RCC_APB1_Peripheral_Clock_Enable_Disable_Status APB1 Peripheral Clock Enable Disable Status\n  651    * @brief  Get the enable or disable status of the APB1 peripheral clock.\n  652:   * @note   After reset, the peripheral clock (used for registers read/write access)\n  653    *         is disabled and the application software has to enable this clock before\n  654    *         using it.\n  ...\n  656    */\n  657  \n  658: #define __HAL_RCC_TIM2_IS_CLK_ENABLED()       ((RCC->APB1ENR & (RCC_APB1ENR_TIM2EN)) != RESET)\n  659: #define __HAL_RCC_TIM2_IS_CLK_DISABLED()      ((RCC->APB1ENR & (RCC_APB1ENR_TIM2EN)) == RESET)\n  660: #define __HAL_RCC_TIM3_IS_CLK_ENABLED()       ((RCC->APB1ENR & (RCC_APB1ENR_TIM3EN)) != RESET)\n  661: #define __HAL_RCC_TIM3_IS_CLK_DISABLED()      ((RCC->APB1ENR & (RCC_APB1ENR_TIM3EN)) == RESET)\n  662: #define __HAL_RCC_WWDG_IS_CLK_ENABLED()       ((RCC->APB1ENR & (RCC_APB1ENR_WWDGEN)) != RESET)\n  663: #define __HAL_RCC_WWDG_IS_CLK_DISABLED()      ((RCC->APB1ENR & (RCC_APB1ENR_WWDGEN)) == RESET)\n  664: #define __HAL_RCC_USART2_IS_CLK_ENABLED()       ((RCC->APB1ENR & (RCC_APB1ENR_USART2EN)) != RESET)\n  665: #define __HAL_RCC_USART2_IS_CLK_DISABLED()      ((RCC->APB1ENR & (RCC_APB1ENR_USART2EN)) == RESET)\n  666: #define __HAL_RCC_I2C1_IS_CLK_ENABLED()       ((RCC->APB1ENR & (RCC_APB1ENR_I2C1EN)) != RESET)\n  667: #define __HAL_RCC_I2C1_IS_CLK_DISABLED()      ((RCC->APB1ENR & (RCC_APB1ENR_I2C1EN)) == RESET)\n  668: #define __HAL_RCC_BKP_IS_CLK_ENABLED()       ((RCC->APB1ENR & (RCC_APB1ENR_BKPEN)) != RESET)\n  669: #define __HAL_RCC_BKP_IS_CLK_DISABLED()      ((RCC->APB1ENR & (RCC_APB1ENR_BKPEN)) == RESET)\n  670: #define __HAL_RCC_PWR_IS_CLK_ENABLED()       ((RCC->APB1ENR & (RCC_APB1ENR_PWREN)) != RESET)\n  671: #define __HAL_RCC_PWR_IS_CLK_DISABLED()      ((RCC->APB1ENR & (RCC_APB1ENR_PWREN)) == RESET)\n  672  \n  673  /**\n  ...\n  677  /** @defgroup RCC_APB2_Clock_Enable_Disable APB2 Clock Enable Disable\n  678    * @brief  Enable or disable the High Speed APB (APB2) peripheral clock.\n  679:   * @note   After reset, the peripheral clock (used for registers read/write access)\n  680    *         is disabled and the application software has to enable this clock before \n  681    *         using it.\n  ...\n  771  /** @defgroup RCC_APB2_Peripheral_Clock_Enable_Disable_Status APB2 Peripheral Clock Enable Disable Status\n  772    * @brief  Get the enable or disable status of the APB2 peripheral clock.\n  773:   * @note   After reset, the peripheral clock (used for registers read/write access)\n  774    *         is disabled and the application software has to enable this clock before\n  775    *         using it.\n  ...\n  777    */\n  778  \n  779: #define __HAL_RCC_AFIO_IS_CLK_ENABLED()       ((RCC->APB2ENR & (RCC_APB2ENR_AFIOEN)) != RESET)\n  780: #define __HAL_RCC_AFIO_IS_CLK_DISABLED()      ((RCC->APB2ENR & (RCC_APB2ENR_AFIOEN)) == RESET)\n  781: #define __HAL_RCC_GPIOA_IS_CLK_ENABLED()       ((RCC->APB2ENR & (RCC_APB2ENR_IOPAEN)) != RESET)\n  782: #define __HAL_RCC_GPIOA_IS_CLK_DISABLED()      ((RCC->APB2ENR & (RCC_APB2ENR_IOPAEN)) == RESET)\n  783: #define __HAL_RCC_GPIOB_IS_CLK_ENABLED()       ((RCC->APB2ENR & (RCC_APB2ENR_IOPBEN)) != RESET)\n  784: #define __HAL_RCC_GPIOB_IS_CLK_DISABLED()      ((RCC->APB2ENR & (RCC_APB2ENR_IOPBEN)) == RESET)\n  785: #define __HAL_RCC_GPIOC_IS_CLK_ENABLED()       ((RCC->APB2ENR & (RCC_APB2ENR_IOPCEN)) != RESET)\n  786: #define __HAL_RCC_GPIOC_IS_CLK_DISABLED()      ((RCC->APB2ENR & (RCC_APB2ENR_IOPCEN)) == RESET)\n  787: #define __HAL_RCC_GPIOD_IS_CLK_ENABLED()       ((RCC->APB2ENR & (RCC_APB2ENR_IOPDEN)) != RESET)\n  788: #define __HAL_RCC_GPIOD_IS_CLK_DISABLED()      ((RCC->APB2ENR & (RCC_APB2ENR_IOPDEN)) == RESET)\n  789: #define __HAL_RCC_ADC1_IS_CLK_ENABLED()       ((RCC->APB2ENR & (RCC_APB2ENR_ADC1EN)) != RESET)\n  790: #define __HAL_RCC_ADC1_IS_CLK_DISABLED()      ((RCC->APB2ENR & (RCC_APB2ENR_ADC1EN)) == RESET)\n  791: #define __HAL_RCC_TIM1_IS_CLK_ENABLED()       ((RCC->APB2ENR & (RCC_APB2ENR_TIM1EN)) != RESET)\n  792: #define __HAL_RCC_TIM1_IS_CLK_DISABLED()      ((RCC->APB2ENR & (RCC_APB2ENR_TIM1EN)) == RESET)\n  793: #define __HAL_RCC_SPI1_IS_CLK_ENABLED()       ((RCC->APB2ENR & (RCC_APB2ENR_SPI1EN)) != RESET)\n  794: #define __HAL_RCC_SPI1_IS_CLK_DISABLED()      ((RCC->APB2ENR & (RCC_APB2ENR_SPI1EN)) == RESET)\n  795: #define __HAL_RCC_USART1_IS_CLK_ENABLED()       ((RCC->APB2ENR & (RCC_APB2ENR_USART1EN)) != RESET)\n  796: #define __HAL_RCC_USART1_IS_CLK_DISABLED()      ((RCC->APB2ENR & (RCC_APB2ENR_USART1EN)) == RESET)\n  797  \n  798  /**\n  ...\n  800    */\n  801  \n  802: /** @defgroup RCC_APB1_Force_Release_Reset APB1 Force Release Reset\n  803:   * @brief  Force or release APB1 peripheral reset.\n  804    * @{   \n  805    */\n  806: #define __HAL_RCC_APB1_FORCE_RESET()       (RCC->APB2RSTR = 0xFFFFFFFF)  \n  807: #define __HAL_RCC_TIM2_FORCE_RESET()       (RCC->APB1RSTR |= (RCC_APB1RSTR_TIM2RST))\n  808: #define __HAL_RCC_TIM3_FORCE_RESET()       (RCC->APB1RSTR |= (RCC_APB1RSTR_TIM3RST))\n  809: #define __HAL_RCC_WWDG_FORCE_RESET()       (RCC->APB1RSTR |= (RCC_APB1RSTR_WWDGRST))\n  810: #define __HAL_RCC_USART2_FORCE_RESET()     (RCC->APB1RSTR |= (RCC_APB1RSTR_USART2RST))\n  811: #define __HAL_RCC_I2C1_FORCE_RESET()       (RCC->APB1RSTR |= (RCC_APB1RSTR_I2C1RST))\n  812  \n  813: #define __HAL_RCC_BKP_FORCE_RESET()        (RCC->APB1RSTR |= (RCC_APB1RSTR_BKPRST))\n  814: #define __HAL_RCC_PWR_FORCE_RESET()        (RCC->APB1RSTR |= (RCC_APB1RSTR_PWRRST))\n  815  \n  816: #define __HAL_RCC_APB1_RELEASE_RESET()      (RCC->APB1RSTR = 0x00)  \n  817: #define __HAL_RCC_TIM2_RELEASE_RESET()       (RCC->APB1RSTR &= ~(RCC_APB1RSTR_TIM2RST))\n  818: #define __HAL_RCC_TIM3_RELEASE_RESET()       (RCC->APB1RSTR &= ~(RCC_APB1RSTR_TIM3RST))\n  819: #define __HAL_RCC_WWDG_RELEASE_RESET()       (RCC->APB1RSTR &= ~(RCC_APB1RSTR_WWDGRST))\n  820: #define __HAL_RCC_USART2_RELEASE_RESET()     (RCC->APB1RSTR &= ~(RCC_APB1RSTR_USART2RST))\n  821: #define __HAL_RCC_I2C1_RELEASE_RESET()       (RCC->APB1RSTR &= ~(RCC_APB1RSTR_I2C1RST))\n  822  \n  823: #define __HAL_RCC_BKP_RELEASE_RESET()        (RCC->APB1RSTR &= ~(RCC_APB1RSTR_BKPRST))\n  824: #define __HAL_RCC_PWR_RELEASE_RESET()        (RCC->APB1RSTR &= ~(RCC_APB1RSTR_PWRRST))\n  825  \n  826  /**\n  ...\n  828    */\n  829  \n  830: /** @defgroup RCC_APB2_Force_Release_Reset APB2 Force Release Reset\n  831:   * @brief  Force or release APB2 peripheral reset.\n  832    * @{   \n  833    */\n  834: #define __HAL_RCC_APB2_FORCE_RESET()       (RCC->APB2RSTR = 0xFFFFFFFF)  \n  835: #define __HAL_RCC_AFIO_FORCE_RESET()       (RCC->APB2RSTR |= (RCC_APB2RSTR_AFIORST))\n  836: #define __HAL_RCC_GPIOA_FORCE_RESET()      (RCC->APB2RSTR |= (RCC_APB2RSTR_IOPARST))\n  837: #define __HAL_RCC_GPIOB_FORCE_RESET()      (RCC->APB2RSTR |= (RCC_APB2RSTR_IOPBRST))\n  838: #define __HAL_RCC_GPIOC_FORCE_RESET()      (RCC->APB2RSTR |= (RCC_APB2RSTR_IOPCRST))\n  839: #define __HAL_RCC_GPIOD_FORCE_RESET()      (RCC->APB2RSTR |= (RCC_APB2RSTR_IOPDRST))\n  840: #define __HAL_RCC_ADC1_FORCE_RESET()       (RCC->APB2RSTR |= (RCC_APB2RSTR_ADC1RST))\n  841  \n  842: #define __HAL_RCC_TIM1_FORCE_RESET()       (RCC->APB2RSTR |= (RCC_APB2RSTR_TIM1RST))\n  843: #define __HAL_RCC_SPI1_FORCE_RESET()       (RCC->APB2RSTR |= (RCC_APB2RSTR_SPI1RST))\n  844: #define __HAL_RCC_USART1_FORCE_RESET()     (RCC->APB2RSTR |= (RCC_APB2RSTR_USART1RST))\n  845  \n  846: #define __HAL_RCC_APB2_RELEASE_RESET()      (RCC->APB2RSTR = 0x00)  \n  847: #define __HAL_RCC_AFIO_RELEASE_RESET()       (RCC->APB2RSTR &= ~(RCC_APB2RSTR_AFIORST))\n  848: #define __HAL_RCC_GPIOA_RELEASE_RESET()      (RCC->APB2RSTR &= ~(RCC_APB2RSTR_IOPARST))\n  849: #define __HAL_RCC_GPIOB_RELEASE_RESET()      (RCC->APB2RSTR &= ~(RCC_APB2RSTR_IOPBRST))\n  850: #define __HAL_RCC_GPIOC_RELEASE_RESET()      (RCC->APB2RSTR &= ~(RCC_APB2RSTR_IOPCRST))\n  851: #define __HAL_RCC_GPIOD_RELEASE_RESET()      (RCC->APB2RSTR &= ~(RCC_APB2RSTR_IOPDRST))\n  852: #define __HAL_RCC_ADC1_RELEASE_RESET()       (RCC->APB2RSTR &= ~(RCC_APB2RSTR_ADC1RST))\n  853  \n  854: #define __HAL_RCC_TIM1_RELEASE_RESET()       (RCC->APB2RSTR &= ~(RCC_APB2RSTR_TIM1RST))\n  855: #define __HAL_RCC_SPI1_RELEASE_RESET()       (RCC->APB2RSTR &= ~(RCC_APB2RSTR_SPI1RST))\n  856: #define __HAL_RCC_USART1_RELEASE_RESET()     (RCC->APB2RSTR &= ~(RCC_APB2RSTR_USART1RST))\n  857  \n  858  /**\n  ...\n  929    *         of the system clock then change the HSE state (ex. disable it).\n  930    * @note   The HSE is stopped by hardware when entering STOP and STANDBY modes.\n  931:   * @note   This function reset the CSSON bit, so if the Clock security system(CSS)\n  932    *         was previously enabled you have to enable it again after calling this\n  933    *         function.\n  ...\n  974    * @note Transitions LSE Bypass to LSE On and LSE On to LSE Bypass are not supported by this macro. \n  975    * @note   As the LSE is in the Backup domain and write access is denied to\n  976:   *         this domain after reset, you have to enable write access using \n  977    *         @ref HAL_PWR_EnableBkUpAccess() function before to configure the LSE\n  978:   *         (to be done once after reset).  \n  979    * @note   After enabling the LSE (RCC_LSE_ON or RCC_LSE_BYPASS), the application\n  980    *         software should wait on LSERDY flag to be set indicating that LSE clock\n  ...\n 1151  /** @brief Macro to configure the RTC clock (RTCCLK).\n 1152    * @note   As the RTC clock configuration bits are in the Backup domain and write\n 1153:   *         access is denied to this domain after reset, you have to enable write\n 1154    *         access using the Power Backup Access macro before to configure\n 1155:   *         the RTC clock source (to be done once after reset).    \n 1156    * @note   Once the RTC clock is configured it can't be changed unless the  \n 1157:   *         Backup domain is reset using @ref __HAL_RCC_BACKUPRESET_FORCE() macro, or by\n 1158:   *         a Power On Reset (POR).\n 1159    *\n 1160    * @param  __RTC_CLKSOURCE__ specifies the RTC clock source.\n ....\n 1192  #define __HAL_RCC_RTC_DISABLE()         (*(__IO uint32_t *) RCC_BDCR_RTCEN_BB = DISABLE)\n 1193  \n 1194: /** @brief  Macro to force the Backup domain reset.\n 1195:   * @note   This function resets the RTC peripheral (including the backup registers)\n 1196    *         and the RTC clock source selection in RCC_BDCR register.\n 1197    */\n 1198: #define __HAL_RCC_BACKUPRESET_FORCE()   (*(__IO uint32_t *) RCC_BDCR_BDRST_BB = ENABLE)\n 1199  \n 1200: /** @brief  Macros to release the Backup domain reset.\n 1201    */\n 1202: #define __HAL_RCC_BACKUPRESET_RELEASE() (*(__IO uint32_t *) RCC_BDCR_BDRST_BB = DISABLE)\n 1203  \n 1204  /**\n ....\n 1270  #define __HAL_RCC_GET_IT(__INTERRUPT__) ((RCC->CIR & (__INTERRUPT__)) == (__INTERRUPT__))\n 1271  \n 1272: /** @brief Set RMVF bit to clear the reset flags.\n 1273:   *         The reset flags are RCC_FLAG_PINRST, RCC_FLAG_PORRST, RCC_FLAG_SFTRST,\n 1274    *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST\n 1275    */\n 1276: #define __HAL_RCC_CLEAR_RESET_FLAGS() (*(__IO uint32_t *)RCC_CSR_RMVF_BB = ENABLE)\n 1277  \n 1278  /** @brief  Check RCC flag is set or not.\n ....\n 1286    *            @arg RCC_FLAG_LSERDY LSE oscillator clock ready.\n 1287    *            @arg RCC_FLAG_LSIRDY LSI oscillator clock ready.\n 1288:   *            @arg RCC_FLAG_PINRST Pin reset.\n 1289:   *            @arg RCC_FLAG_PORRST POR/PDR reset.\n 1290:   *            @arg RCC_FLAG_SFTRST Software reset.\n 1291:   *            @arg RCC_FLAG_IWDGRST Independent Watchdog reset.\n 1292:   *            @arg RCC_FLAG_WWDGRST Window Watchdog reset.\n 1293:   *            @arg RCC_FLAG_LPWRRST Low Power reset.\n 1294    * @note (*) This bit is available in STM32F105xx & STM32F107xx devices only.\n 1295    * @retval The new state of __FLAG__ (TRUE or FALSE).\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal_rcc_ex.h:\n  636  /** @defgroup RCCEx_Peripheral_Clock_Enable_Disable Peripheral Clock Enable Disable\n  637    * @brief  Enable or disable the AHB1 peripheral clock.\n  638:   * @note   After reset, the peripheral clock (used for registers read/write access)\n  639    *         is disabled and the application software has to enable this clock before \n  640    *         using it.   \n  ...\n  749  /** @defgroup RCCEx_AHB1_Peripheral_Clock_Enable_Disable_Status AHB1 Peripheral Clock Enable Disable Status\n  750    * @brief  Get the enable or disable status of the AHB1 peripheral clock.\n  751:   * @note   After reset, the peripheral clock (used for registers read/write access)\n  752    *         is disabled and the application software has to enable this clock before\n  753    *         using it.\n  ...\n  758   || defined(STM32F103xG) || defined(STM32F105xC) || defined  (STM32F107xC)\\\n  759   || defined  (STM32F100xE)\n  760: #define __HAL_RCC_DMA2_IS_CLK_ENABLED()       ((RCC->AHBENR & (RCC_AHBENR_DMA2EN)) != RESET)\n  761: #define __HAL_RCC_DMA2_IS_CLK_DISABLED()      ((RCC->AHBENR & (RCC_AHBENR_DMA2EN)) == RESET)\n  762  #endif /* STM32F101xE || STM32F103xE || STM32F101xG || STM32F103xG || STM32F105xC || STM32F107xC || STM32F100xE */\n  763  #if defined(STM32F101xE) || defined(STM32F103xE) || defined(STM32F101xG)\\\n  764   || defined(STM32F103xG) || defined  (STM32F100xE)\n  765: #define __HAL_RCC_FSMC_IS_CLK_ENABLED()       ((RCC->AHBENR & (RCC_AHBENR_FSMCEN)) != RESET)\n  766: #define __HAL_RCC_FSMC_IS_CLK_DISABLED()      ((RCC->AHBENR & (RCC_AHBENR_FSMCEN)) == RESET)\n  767  #endif /* STM32F101xE || STM32F103xE || STM32F101xG || STM32F103xG || STM32F100xE */\n  768  #if defined(STM32F103xE) || defined(STM32F103xG)\n  769: #define __HAL_RCC_SDIO_IS_CLK_ENABLED()       ((RCC->AHBENR & (RCC_AHBENR_SDIOEN)) != RESET)\n  770: #define __HAL_RCC_SDIO_IS_CLK_DISABLED()      ((RCC->AHBENR & (RCC_AHBENR_SDIOEN)) == RESET)\n  771  #endif /* STM32F103xE || STM32F103xG */\n  772  #if defined(STM32F105xC) || defined(STM32F107xC)\n  773: #define __HAL_RCC_USB_OTG_FS_IS_CLK_ENABLED()       ((RCC->AHBENR & (RCC_AHBENR_OTGFSEN)) != RESET)\n  774: #define __HAL_RCC_USB_OTG_FS_IS_CLK_DISABLED()      ((RCC->AHBENR & (RCC_AHBENR_OTGFSEN)) == RESET)\n  775  #endif /* STM32F105xC || STM32F107xC*/\n  776  #if defined(STM32F107xC)\n  777: #define __HAL_RCC_ETHMAC_IS_CLK_ENABLED()       ((RCC->AHBENR & (RCC_AHBENR_ETHMACEN)) != RESET)\n  778: #define __HAL_RCC_ETHMAC_IS_CLK_DISABLED()      ((RCC->AHBENR & (RCC_AHBENR_ETHMACEN)) == RESET)\n  779: #define __HAL_RCC_ETHMACTX_IS_CLK_ENABLED()       ((RCC->AHBENR & (RCC_AHBENR_ETHMACTXEN)) != RESET)\n  780: #define __HAL_RCC_ETHMACTX_IS_CLK_DISABLED()      ((RCC->AHBENR & (RCC_AHBENR_ETHMACTXEN)) == RESET)\n  781: #define __HAL_RCC_ETHMACRX_IS_CLK_ENABLED()       ((RCC->AHBENR & (RCC_AHBENR_ETHMACRXEN)) != RESET)\n  782: #define __HAL_RCC_ETHMACRX_IS_CLK_DISABLED()      ((RCC->AHBENR & (RCC_AHBENR_ETHMACRXEN)) == RESET)\n  783  #endif /* STM32F107xC*/\n  784  \n  ...\n  789  /** @defgroup RCCEx_APB1_Clock_Enable_Disable APB1 Clock Enable Disable\n  790    * @brief  Enable or disable the Low Speed APB (APB1) peripheral clock.\n  791:   * @note   After reset, the peripheral clock (used for registers read/write access)\n  792    *         is disabled and the application software has to enable this clock before \n  793    *         using it. \n  ...\n 1083  /** @defgroup RCCEx_APB1_Peripheral_Clock_Enable_Disable_Status APB1 Peripheral Clock Enable Disable Status\n 1084    * @brief  Get the enable or disable status of the APB1 peripheral clock.\n 1085:   * @note   After reset, the peripheral clock (used for registers read/write access)\n 1086    *         is disabled and the application software has to enable this clock before\n 1087    *         using it.\n ....\n 1091  #if defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE)\\\n 1092   || defined(STM32F103xG) || defined(STM32F105xC) ||defined(STM32F107xC)\n 1093: #define __HAL_RCC_CAN1_IS_CLK_ENABLED()       ((RCC->APB1ENR & (RCC_APB1ENR_CAN1EN)) != RESET)\n 1094: #define __HAL_RCC_CAN1_IS_CLK_DISABLED()      ((RCC->APB1ENR & (RCC_APB1ENR_CAN1EN)) == RESET)\n 1095  #endif /* STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */\n 1096  #if defined(STM32F100xB) || defined(STM32F100xE) || defined(STM32F101xB)\\\n ....\n 1098   || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\\\n 1099   || defined(STM32F105xC) || defined(STM32F107xC)\n 1100: #define __HAL_RCC_TIM4_IS_CLK_ENABLED()       ((RCC->APB1ENR & (RCC_APB1ENR_TIM4EN)) != RESET)\n 1101: #define __HAL_RCC_TIM4_IS_CLK_DISABLED()      ((RCC->APB1ENR & (RCC_APB1ENR_TIM4EN)) == RESET)\n 1102: #define __HAL_RCC_SPI2_IS_CLK_ENABLED()       ((RCC->APB1ENR & (RCC_APB1ENR_SPI2EN)) != RESET)\n 1103: #define __HAL_RCC_SPI2_IS_CLK_DISABLED()      ((RCC->APB1ENR & (RCC_APB1ENR_SPI2EN)) == RESET)\n 1104: #define __HAL_RCC_USART3_IS_CLK_ENABLED()       ((RCC->APB1ENR & (RCC_APB1ENR_USART3EN)) != RESET)\n 1105: #define __HAL_RCC_USART3_IS_CLK_DISABLED()      ((RCC->APB1ENR & (RCC_APB1ENR_USART3EN)) == RESET)\n 1106: #define __HAL_RCC_I2C2_IS_CLK_ENABLED()       ((RCC->APB1ENR & (RCC_APB1ENR_I2C2EN)) != RESET)\n 1107: #define __HAL_RCC_I2C2_IS_CLK_DISABLED()      ((RCC->APB1ENR & (RCC_APB1ENR_I2C2EN)) == RESET)\n 1108  #endif /* STM32F100xB || STM32F101xB || STM32F101xE || (...) || STM32F105xC || STM32F107xC */\n 1109  #if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\\\n 1110   || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\n 1111: #define __HAL_RCC_USB_IS_CLK_ENABLED()       ((RCC->APB1ENR & (RCC_APB1ENR_USBEN)) != RESET)\n 1112: #define __HAL_RCC_USB_IS_CLK_DISABLED()      ((RCC->APB1ENR & (RCC_APB1ENR_USBEN)) == RESET)\n 1113  #endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */\n 1114  #if defined(STM32F101xE) || defined(STM32F103xE) || defined(STM32F101xG)\\\n 1115   || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)\n 1116: #define __HAL_RCC_TIM5_IS_CLK_ENABLED()       ((RCC->APB1ENR & (RCC_APB1ENR_TIM5EN)) != RESET)\n 1117: #define __HAL_RCC_TIM5_IS_CLK_DISABLED()      ((RCC->APB1ENR & (RCC_APB1ENR_TIM5EN)) == RESET)\n 1118: #define __HAL_RCC_TIM6_IS_CLK_ENABLED()       ((RCC->APB1ENR & (RCC_APB1ENR_TIM6EN)) != RESET)\n 1119: #define __HAL_RCC_TIM6_IS_CLK_DISABLED()      ((RCC->APB1ENR & (RCC_APB1ENR_TIM6EN)) == RESET)\n 1120: #define __HAL_RCC_TIM7_IS_CLK_ENABLED()       ((RCC->APB1ENR & (RCC_APB1ENR_TIM7EN)) != RESET)\n 1121: #define __HAL_RCC_TIM7_IS_CLK_DISABLED()      ((RCC->APB1ENR & (RCC_APB1ENR_TIM7EN)) == RESET)\n 1122: #define __HAL_RCC_SPI3_IS_CLK_ENABLED()       ((RCC->APB1ENR & (RCC_APB1ENR_SPI3EN)) != RESET)\n 1123: #define __HAL_RCC_SPI3_IS_CLK_DISABLED()      ((RCC->APB1ENR & (RCC_APB1ENR_SPI3EN)) == RESET)\n 1124: #define __HAL_RCC_UART4_IS_CLK_ENABLED()       ((RCC->APB1ENR & (RCC_APB1ENR_UART4EN)) != RESET)\n 1125: #define __HAL_RCC_UART4_IS_CLK_DISABLED()      ((RCC->APB1ENR & (RCC_APB1ENR_UART4EN)) == RESET)\n 1126: #define __HAL_RCC_UART5_IS_CLK_ENABLED()       ((RCC->APB1ENR & (RCC_APB1ENR_UART5EN)) != RESET)\n 1127: #define __HAL_RCC_UART5_IS_CLK_DISABLED()      ((RCC->APB1ENR & (RCC_APB1ENR_UART5EN)) == RESET)\n 1128: #define __HAL_RCC_DAC_IS_CLK_ENABLED()       ((RCC->APB1ENR & (RCC_APB1ENR_DACEN)) != RESET)\n 1129: #define __HAL_RCC_DAC_IS_CLK_DISABLED()      ((RCC->APB1ENR & (RCC_APB1ENR_DACEN)) == RESET)\n 1130  #endif /* STM32F101xE || STM32F103xE || STM32F101xG || (...) || STM32F105xC || STM32F107xC */\n 1131  #if defined(STM32F100xB) || defined  (STM32F100xE)\n 1132: #define __HAL_RCC_TIM6_IS_CLK_ENABLED()       ((RCC->APB1ENR & (RCC_APB1ENR_TIM6EN)) != RESET)\n 1133: #define __HAL_RCC_TIM6_IS_CLK_DISABLED()      ((RCC->APB1ENR & (RCC_APB1ENR_TIM6EN)) == RESET)\n 1134: #define __HAL_RCC_TIM7_IS_CLK_ENABLED()       ((RCC->APB1ENR & (RCC_APB1ENR_TIM7EN)) != RESET)\n 1135: #define __HAL_RCC_TIM7_IS_CLK_DISABLED()      ((RCC->APB1ENR & (RCC_APB1ENR_TIM7EN)) == RESET)\n 1136: #define __HAL_RCC_DAC_IS_CLK_ENABLED()       ((RCC->APB1ENR & (RCC_APB1ENR_DACEN)) != RESET)\n 1137: #define __HAL_RCC_DAC_IS_CLK_DISABLED()      ((RCC->APB1ENR & (RCC_APB1ENR_DACEN)) == RESET)\n 1138: #define __HAL_RCC_CEC_IS_CLK_ENABLED()       ((RCC->APB1ENR & (RCC_APB1ENR_CECEN)) != RESET)\n 1139: #define __HAL_RCC_CEC_IS_CLK_DISABLED()      ((RCC->APB1ENR & (RCC_APB1ENR_CECEN)) == RESET)\n 1140  #endif /* STM32F100xB || STM32F100xE */\n 1141  #ifdef STM32F100xE\n 1142: #define __HAL_RCC_TIM5_IS_CLK_ENABLED()       ((RCC->APB1ENR & (RCC_APB1ENR_TIM5EN)) != RESET)\n 1143: #define __HAL_RCC_TIM5_IS_CLK_DISABLED()      ((RCC->APB1ENR & (RCC_APB1ENR_TIM5EN)) == RESET)\n 1144: #define __HAL_RCC_TIM12_IS_CLK_ENABLED()       ((RCC->APB1ENR & (RCC_APB1ENR_TIM12EN)) != RESET)\n 1145: #define __HAL_RCC_TIM12_IS_CLK_DISABLED()      ((RCC->APB1ENR & (RCC_APB1ENR_TIM12EN)) == RESET)\n 1146: #define __HAL_RCC_TIM13_IS_CLK_ENABLED()       ((RCC->APB1ENR & (RCC_APB1ENR_TIM13EN)) != RESET)\n 1147: #define __HAL_RCC_TIM13_IS_CLK_DISABLED()      ((RCC->APB1ENR & (RCC_APB1ENR_TIM13EN)) == RESET)\n 1148: #define __HAL_RCC_TIM14_IS_CLK_ENABLED()       ((RCC->APB1ENR & (RCC_APB1ENR_TIM14EN)) != RESET)\n 1149: #define __HAL_RCC_TIM14_IS_CLK_DISABLED()      ((RCC->APB1ENR & (RCC_APB1ENR_TIM14EN)) == RESET)\n 1150: #define __HAL_RCC_SPI3_IS_CLK_ENABLED()       ((RCC->APB1ENR & (RCC_APB1ENR_SPI3EN)) != RESET)\n 1151: #define __HAL_RCC_SPI3_IS_CLK_DISABLED()      ((RCC->APB1ENR & (RCC_APB1ENR_SPI3EN)) == RESET)\n 1152: #define __HAL_RCC_UART4_IS_CLK_ENABLED()       ((RCC->APB1ENR & (RCC_APB1ENR_UART4EN)) != RESET)\n 1153: #define __HAL_RCC_UART4_IS_CLK_DISABLED()      ((RCC->APB1ENR & (RCC_APB1ENR_UART4EN)) == RESET)\n 1154: #define __HAL_RCC_UART5_IS_CLK_ENABLED()       ((RCC->APB1ENR & (RCC_APB1ENR_UART5EN)) != RESET)\n 1155: #define __HAL_RCC_UART5_IS_CLK_DISABLED()      ((RCC->APB1ENR & (RCC_APB1ENR_UART5EN)) == RESET)\n 1156: #define __HAL_RCC_CAN2_IS_CLK_ENABLED()       ((RCC->APB1ENR & (RCC_APB1ENR_CAN2EN)) != RESET)\n 1157: #define __HAL_RCC_CAN2_IS_CLK_DISABLED()      ((RCC->APB1ENR & (RCC_APB1ENR_CAN2EN)) == RESET)\n 1158  #endif /* STM32F100xE */\n 1159  #if defined(STM32F105xC) || defined(STM32F107xC)\n 1160: #define __HAL_RCC_TIM12_IS_CLK_ENABLED()       ((RCC->APB1ENR & (RCC_APB1ENR_TIM12EN)) != RESET)\n 1161: #define __HAL_RCC_TIM12_IS_CLK_DISABLED()      ((RCC->APB1ENR & (RCC_APB1ENR_TIM12EN)) == RESET)\n 1162  #endif /* STM32F105xC || STM32F107xC */\n 1163  #if defined(STM32F101xG) || defined(STM32F103xG)\n 1164: #define __HAL_RCC_TIM13_IS_CLK_ENABLED()       ((RCC->APB1ENR & (RCC_APB1ENR_TIM13EN)) != RESET)\n 1165: #define __HAL_RCC_TIM13_IS_CLK_DISABLED()      ((RCC->APB1ENR & (RCC_APB1ENR_TIM13EN)) == RESET)\n 1166: #define __HAL_RCC_TIM14_IS_CLK_ENABLED()       ((RCC->APB1ENR & (RCC_APB1ENR_TIM14EN)) != RESET)\n 1167: #define __HAL_RCC_TIM14_IS_CLK_DISABLED()      ((RCC->APB1ENR & (RCC_APB1ENR_TIM14EN)) == RESET)\n 1168  #endif /* STM32F101xG || STM32F103xG*/\n 1169  \n ....\n 1174  /** @defgroup RCCEx_APB2_Clock_Enable_Disable APB2 Clock Enable Disable\n 1175    * @brief  Enable or disable the High Speed APB (APB2) peripheral clock.\n 1176:   * @note   After reset, the peripheral clock (used for registers read/write access)\n 1177    *         is disabled and the application software has to enable this clock before \n 1178    *         using it.\n ....\n 1339  /** @defgroup RCCEx_APB2_Peripheral_Clock_Enable_Disable_Status APB2 Peripheral Clock Enable Disable Status\n 1340    * @brief  Get the enable or disable status of the APB2 peripheral clock.\n 1341:   * @note   After reset, the peripheral clock (used for registers read/write access)\n 1342    *         is disabled and the application software has to enable this clock before\n 1343    *         using it.\n ....\n 1348   || defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F103xE)\\\n 1349   || defined(STM32F103xG)\n 1350: #define __HAL_RCC_ADC2_IS_CLK_ENABLED()       ((RCC->APB2ENR & (RCC_APB2ENR_ADC2EN)) != RESET)\n 1351: #define __HAL_RCC_ADC2_IS_CLK_DISABLED()      ((RCC->APB2ENR & (RCC_APB2ENR_ADC2EN)) == RESET)\n 1352  #endif /* STM32F101xG || STM32F103x6 || STM32F103xB || STM32F105xC || STM32F107xC || STM32F103xE || STM32F103xG */\n 1353  #if defined(STM32F100xB) || defined(STM32F100xE)\n 1354: #define __HAL_RCC_TIM15_IS_CLK_ENABLED()       ((RCC->APB2ENR & (RCC_APB2ENR_TIM15EN)) != RESET)\n 1355: #define __HAL_RCC_TIM15_IS_CLK_DISABLED()      ((RCC->APB2ENR & (RCC_APB2ENR_TIM15EN)) == RESET)\n 1356: #define __HAL_RCC_TIM16_IS_CLK_ENABLED()       ((RCC->APB2ENR & (RCC_APB2ENR_TIM16EN)) != RESET)\n 1357: #define __HAL_RCC_TIM16_IS_CLK_DISABLED()      ((RCC->APB2ENR & (RCC_APB2ENR_TIM16EN)) == RESET)\n 1358: #define __HAL_RCC_TIM17_IS_CLK_ENABLED()       ((RCC->APB2ENR & (RCC_APB2ENR_TIM17EN)) != RESET)\n 1359: #define __HAL_RCC_TIM17_IS_CLK_DISABLED()      ((RCC->APB2ENR & (RCC_APB2ENR_TIM17EN)) == RESET)\n 1360  #endif /* STM32F100xB || STM32F100xE */\n 1361  #if defined(STM32F100xE) || defined(STM32F101xB) || defined(STM32F101xE)\\\n ....\n 1363   || defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC)\\\n 1364   || defined(STM32F107xC)\n 1365: #define __HAL_RCC_GPIOE_IS_CLK_ENABLED()       ((RCC->APB2ENR & (RCC_APB2ENR_IOPEEN)) != RESET)\n 1366: #define __HAL_RCC_GPIOE_IS_CLK_DISABLED()      ((RCC->APB2ENR & (RCC_APB2ENR_IOPEEN)) == RESET)\n 1367  #endif /* STM32F101x6 || STM32F101xB || STM32F101xE || (...) || STM32F105xC || STM32F107xC */\n 1368  #if defined(STM32F101xE) || defined(STM32F103xE) || defined(STM32F101xG)\\\n 1369   || defined(STM32F103xG)\n 1370: #define __HAL_RCC_GPIOF_IS_CLK_ENABLED()       ((RCC->APB2ENR & (RCC_APB2ENR_IOPFEN)) != RESET)\n 1371: #define __HAL_RCC_GPIOF_IS_CLK_DISABLED()      ((RCC->APB2ENR & (RCC_APB2ENR_IOPFEN)) == RESET)\n 1372: #define __HAL_RCC_GPIOG_IS_CLK_ENABLED()       ((RCC->APB2ENR & (RCC_APB2ENR_IOPGEN)) != RESET)\n 1373: #define __HAL_RCC_GPIOG_IS_CLK_DISABLED()      ((RCC->APB2ENR & (RCC_APB2ENR_IOPGEN)) == RESET)\n 1374  #endif /* STM32F101xE || STM32F103xE || STM32F101xG || STM32F103xG*/\n 1375  #if defined(STM32F103xE) || defined(STM32F103xG)\n 1376: #define __HAL_RCC_TIM8_IS_CLK_ENABLED()       ((RCC->APB2ENR & (RCC_APB2ENR_TIM8EN)) != RESET)\n 1377: #define __HAL_RCC_TIM8_IS_CLK_DISABLED()      ((RCC->APB2ENR & (RCC_APB2ENR_TIM8EN)) == RESET)\n 1378: #define __HAL_RCC_ADC3_IS_CLK_ENABLED()       ((RCC->APB2ENR & (RCC_APB2ENR_ADC3EN)) != RESET)\n 1379: #define __HAL_RCC_ADC3_IS_CLK_DISABLED()      ((RCC->APB2ENR & (RCC_APB2ENR_ADC3EN)) == RESET)\n 1380  #endif /* STM32F103xE || STM32F103xG */\n 1381  #if defined(STM32F100xE)\n 1382: #define __HAL_RCC_GPIOF_IS_CLK_ENABLED()       ((RCC->APB2ENR & (RCC_APB2ENR_IOPFEN)) != RESET)\n 1383: #define __HAL_RCC_GPIOF_IS_CLK_DISABLED()      ((RCC->APB2ENR & (RCC_APB2ENR_IOPFEN)) == RESET)\n 1384: #define __HAL_RCC_GPIOG_IS_CLK_ENABLED()       ((RCC->APB2ENR & (RCC_APB2ENR_IOPGEN)) != RESET)\n 1385: #define __HAL_RCC_GPIOG_IS_CLK_DISABLED()      ((RCC->APB2ENR & (RCC_APB2ENR_IOPGEN)) == RESET)\n 1386  #endif /* STM32F100xE */\n 1387  #if defined(STM32F101xG) || defined(STM32F103xG)\n 1388: #define __HAL_RCC_TIM9_IS_CLK_ENABLED()       ((RCC->APB2ENR & (RCC_APB2ENR_TIM9EN)) != RESET)\n 1389: #define __HAL_RCC_TIM9_IS_CLK_DISABLED()      ((RCC->APB2ENR & (RCC_APB2ENR_TIM9EN)) == RESET)\n 1390: #define __HAL_RCC_TIM10_IS_CLK_ENABLED()       ((RCC->APB2ENR & (RCC_APB2ENR_TIM10EN)) != RESET)\n 1391: #define __HAL_RCC_TIM10_IS_CLK_DISABLED()      ((RCC->APB2ENR & (RCC_APB2ENR_TIM10EN)) == RESET)\n 1392: #define __HAL_RCC_TIM11_IS_CLK_ENABLED()       ((RCC->APB2ENR & (RCC_APB2ENR_TIM11EN)) != RESET)\n 1393: #define __HAL_RCC_TIM11_IS_CLK_DISABLED()      ((RCC->APB2ENR & (RCC_APB2ENR_TIM11EN)) == RESET)\n 1394  #endif /* STM32F101xG || STM32F103xG */\n 1395  \n ....\n 1400  #if defined(STM32F105xC) || defined(STM32F107xC)\n 1401  /** @defgroup RCCEx_Peripheral_Clock_Force_Release Peripheral Clock Force Release\n 1402:   * @brief  Force or release AHB peripheral reset.\n 1403    * @{\n 1404    */  \n 1405: #define __HAL_RCC_AHB_FORCE_RESET()         (RCC->AHBRSTR = 0xFFFFFFFF)\n 1406: #define __HAL_RCC_USB_OTG_FS_FORCE_RESET()       (RCC->AHBRSTR |= (RCC_AHBRSTR_OTGFSRST))\n 1407  #if defined(STM32F107xC)\n 1408: #define __HAL_RCC_ETHMAC_FORCE_RESET()      (RCC->AHBRSTR |= (RCC_AHBRSTR_ETHMACRST))\n 1409  #endif /* STM32F107xC */\n 1410  \n 1411: #define __HAL_RCC_AHB_RELEASE_RESET()       (RCC->AHBRSTR = 0x00)\n 1412: #define __HAL_RCC_USB_OTG_FS_RELEASE_RESET()     (RCC->AHBRSTR &= ~(RCC_AHBRSTR_OTGFSRST))\n 1413  #if defined(STM32F107xC)\n 1414: #define __HAL_RCC_ETHMAC_RELEASE_RESET()    (RCC->AHBRSTR &= ~(RCC_AHBRSTR_ETHMACRST))\n 1415  #endif /* STM32F107xC */\n 1416  \n ....\n 1420  #endif /* STM32F105xC || STM32F107xC */\n 1421  \n 1422: /** @defgroup RCCEx_APB1_Force_Release_Reset APB1 Force Release Reset\n 1423:   * @brief  Force or release APB1 peripheral reset.\n 1424    * @{   \n 1425    */\n ....\n 1427  #if defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE)\\\n 1428   || defined(STM32F103xG) || defined(STM32F105xC) ||defined(STM32F107xC)\n 1429: #define __HAL_RCC_CAN1_FORCE_RESET()        (RCC->APB1RSTR |= (RCC_APB1RSTR_CAN1RST))\n 1430  \n 1431: #define __HAL_RCC_CAN1_RELEASE_RESET()      (RCC->APB1RSTR &= ~(RCC_APB1RSTR_CAN1RST))\n 1432  #endif /* STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */\n 1433  \n ....\n 1436   || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\\\n 1437   || defined(STM32F105xC) || defined(STM32F107xC)\n 1438: #define __HAL_RCC_TIM4_FORCE_RESET()        (RCC->APB1RSTR |= (RCC_APB1RSTR_TIM4RST))\n 1439: #define __HAL_RCC_SPI2_FORCE_RESET()        (RCC->APB1RSTR |= (RCC_APB1RSTR_SPI2RST))\n 1440: #define __HAL_RCC_USART3_FORCE_RESET()      (RCC->APB1RSTR |= (RCC_APB1RSTR_USART3RST))\n 1441: #define __HAL_RCC_I2C2_FORCE_RESET()        (RCC->APB1RSTR |= (RCC_APB1RSTR_I2C2RST))\n 1442  \n 1443: #define __HAL_RCC_TIM4_RELEASE_RESET()      (RCC->APB1RSTR &= ~(RCC_APB1RSTR_TIM4RST))\n 1444: #define __HAL_RCC_SPI2_RELEASE_RESET()      (RCC->APB1RSTR &= ~(RCC_APB1RSTR_SPI2RST))\n 1445: #define __HAL_RCC_USART3_RELEASE_RESET()    (RCC->APB1RSTR &= ~(RCC_APB1RSTR_USART3RST))\n 1446: #define __HAL_RCC_I2C2_RELEASE_RESET()      (RCC->APB1RSTR &= ~(RCC_APB1RSTR_I2C2RST))\n 1447  #endif /* STM32F100xB || STM32F101xB || STM32F101xE || (...) || STM32F105xC || STM32F107xC */\n 1448  \n 1449  #if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\\\n 1450   || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\n 1451: #define __HAL_RCC_USB_FORCE_RESET()         (RCC->APB1RSTR |= (RCC_APB1RSTR_USBRST))\n 1452: #define __HAL_RCC_USB_RELEASE_RESET()       (RCC->APB1RSTR &= ~(RCC_APB1RSTR_USBRST))\n 1453  #endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */\n 1454  \n 1455  #if defined(STM32F101xE) || defined(STM32F103xE) || defined(STM32F101xG)\\\n 1456   || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)\n 1457: #define __HAL_RCC_TIM5_FORCE_RESET()        (RCC->APB1RSTR |= (RCC_APB1RSTR_TIM5RST))\n 1458: #define __HAL_RCC_TIM6_FORCE_RESET()        (RCC->APB1RSTR |= (RCC_APB1RSTR_TIM6RST))\n 1459: #define __HAL_RCC_TIM7_FORCE_RESET()        (RCC->APB1RSTR |= (RCC_APB1RSTR_TIM7RST))\n 1460: #define __HAL_RCC_SPI3_FORCE_RESET()        (RCC->APB1RSTR |= (RCC_APB1RSTR_SPI3RST))\n 1461: #define __HAL_RCC_UART4_FORCE_RESET()       (RCC->APB1RSTR |= (RCC_APB1RSTR_UART4RST))\n 1462: #define __HAL_RCC_UART5_FORCE_RESET()       (RCC->APB1RSTR |= (RCC_APB1RSTR_UART5RST))\n 1463: #define __HAL_RCC_DAC_FORCE_RESET()         (RCC->APB1RSTR |= (RCC_APB1RSTR_DACRST))\n 1464  \n 1465: #define __HAL_RCC_TIM5_RELEASE_RESET()      (RCC->APB1RSTR &= ~(RCC_APB1RSTR_TIM5RST))\n 1466: #define __HAL_RCC_TIM6_RELEASE_RESET()      (RCC->APB1RSTR &= ~(RCC_APB1RSTR_TIM6RST))\n 1467: #define __HAL_RCC_TIM7_RELEASE_RESET()      (RCC->APB1RSTR &= ~(RCC_APB1RSTR_TIM7RST))\n 1468: #define __HAL_RCC_SPI3_RELEASE_RESET()      (RCC->APB1RSTR &= ~(RCC_APB1RSTR_SPI3RST))\n 1469: #define __HAL_RCC_UART4_RELEASE_RESET()     (RCC->APB1RSTR &= ~(RCC_APB1RSTR_UART4RST))\n 1470: #define __HAL_RCC_UART5_RELEASE_RESET()     (RCC->APB1RSTR &= ~(RCC_APB1RSTR_UART5RST))\n 1471: #define __HAL_RCC_DAC_RELEASE_RESET()       (RCC->APB1RSTR &= ~(RCC_APB1RSTR_DACRST))\n 1472  #endif /* STM32F101xE || STM32F103xE || STM32F101xG || (...) || STM32F105xC || STM32F107xC */\n 1473  \n 1474  #if defined(STM32F100xB) || defined  (STM32F100xE)\n 1475: #define __HAL_RCC_TIM6_FORCE_RESET()        (RCC->APB1RSTR |= (RCC_APB1RSTR_TIM6RST))\n 1476: #define __HAL_RCC_TIM7_FORCE_RESET()        (RCC->APB1RSTR |= (RCC_APB1RSTR_TIM7RST))\n 1477: #define __HAL_RCC_DAC_FORCE_RESET()         (RCC->APB1RSTR |= (RCC_APB1RSTR_DACRST))\n 1478: #define __HAL_RCC_CEC_FORCE_RESET()         (RCC->APB1RSTR |= (RCC_APB1RSTR_CECRST))\n 1479  \n 1480: #define __HAL_RCC_TIM6_RELEASE_RESET()      (RCC->APB1RSTR &= ~(RCC_APB1RSTR_TIM6RST))\n 1481: #define __HAL_RCC_TIM7_RELEASE_RESET()      (RCC->APB1RSTR &= ~(RCC_APB1RSTR_TIM7RST))\n 1482: #define __HAL_RCC_DAC_RELEASE_RESET()       (RCC->APB1RSTR &= ~(RCC_APB1RSTR_DACRST))\n 1483: #define __HAL_RCC_CEC_RELEASE_RESET()       (RCC->APB1RSTR &= ~(RCC_APB1RSTR_CECRST))\n 1484  #endif /* STM32F100xB || STM32F100xE */\n 1485  \n 1486  #if defined  (STM32F100xE)\n 1487: #define __HAL_RCC_TIM5_FORCE_RESET()        (RCC->APB1RSTR |= (RCC_APB1RSTR_TIM5RST))\n 1488: #define __HAL_RCC_TIM12_FORCE_RESET()       (RCC->APB1RSTR |= (RCC_APB1RSTR_TIM12RST))\n 1489: #define __HAL_RCC_TIM13_FORCE_RESET()       (RCC->APB1RSTR |= (RCC_APB1RSTR_TIM13RST))\n 1490: #define __HAL_RCC_TIM14_FORCE_RESET()       (RCC->APB1RSTR |= (RCC_APB1RSTR_TIM14RST))\n 1491: #define __HAL_RCC_SPI3_FORCE_RESET()        (RCC->APB1RSTR |= (RCC_APB1RSTR_SPI3RST))\n 1492: #define __HAL_RCC_UART4_FORCE_RESET()       (RCC->APB1RSTR |= (RCC_APB1RSTR_UART4RST))\n 1493: #define __HAL_RCC_UART5_FORCE_RESET()       (RCC->APB1RSTR |= (RCC_APB1RSTR_UART5RST))\n 1494  \n 1495: #define __HAL_RCC_TIM5_RELEASE_RESET()      (RCC->APB1RSTR &= ~(RCC_APB1RSTR_TIM5RST))\n 1496: #define __HAL_RCC_TIM12_RELEASE_RESET()     (RCC->APB1RSTR &= ~(RCC_APB1RSTR_TIM12RST))\n 1497: #define __HAL_RCC_TIM13_RELEASE_RESET()     (RCC->APB1RSTR &= ~(RCC_APB1RSTR_TIM13RST))\n 1498: #define __HAL_RCC_TIM14_RELEASE_RESET()     (RCC->APB1RSTR &= ~(RCC_APB1RSTR_TIM14RST))\n 1499: #define __HAL_RCC_SPI3_RELEASE_RESET()      (RCC->APB1RSTR &= ~(RCC_APB1RSTR_SPI3RST))\n 1500: #define __HAL_RCC_UART4_RELEASE_RESET()     (RCC->APB1RSTR &= ~(RCC_APB1RSTR_UART4RST))\n 1501: #define __HAL_RCC_UART5_RELEASE_RESET()     (RCC->APB1RSTR &= ~(RCC_APB1RSTR_UART5RST))\n 1502  #endif /* STM32F100xE */\n 1503  \n 1504  #if defined(STM32F105xC) || defined(STM32F107xC)\n 1505: #define __HAL_RCC_CAN2_FORCE_RESET()        (RCC->APB1RSTR |= (RCC_APB1RSTR_CAN2RST))\n 1506  \n 1507: #define __HAL_RCC_CAN2_RELEASE_RESET()      (RCC->APB1RSTR &= ~(RCC_APB1RSTR_CAN2RST))\n 1508  #endif /* STM32F105xC || STM32F107xC */\n 1509  \n 1510  #if defined(STM32F101xG) || defined(STM32F103xG)\n 1511: #define __HAL_RCC_TIM12_FORCE_RESET()       (RCC->APB1RSTR |= (RCC_APB1RSTR_TIM12RST))\n 1512: #define __HAL_RCC_TIM13_FORCE_RESET()       (RCC->APB1RSTR |= (RCC_APB1RSTR_TIM13RST))\n 1513: #define __HAL_RCC_TIM14_FORCE_RESET()       (RCC->APB1RSTR |= (RCC_APB1RSTR_TIM14RST))\n 1514  \n 1515: #define __HAL_RCC_TIM12_RELEASE_RESET()     (RCC->APB1RSTR &= ~(RCC_APB1RSTR_TIM12RST))\n 1516: #define __HAL_RCC_TIM13_RELEASE_RESET()     (RCC->APB1RSTR &= ~(RCC_APB1RSTR_TIM13RST))\n 1517: #define __HAL_RCC_TIM14_RELEASE_RESET()     (RCC->APB1RSTR &= ~(RCC_APB1RSTR_TIM14RST))\n 1518  #endif /* STM32F101xG || STM32F103xG */\n 1519  \n ....\n 1522    */\n 1523  \n 1524: /** @defgroup RCCEx_APB2_Force_Release_Reset APB2 Force Release Reset\n 1525:   * @brief  Force or release APB2 peripheral reset.\n 1526    * @{   \n 1527    */\n ....\n 1530   || defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F103xE)\\\n 1531   || defined(STM32F103xG)\n 1532: #define __HAL_RCC_ADC2_FORCE_RESET()        (RCC->APB2RSTR |= (RCC_APB2RSTR_ADC2RST))\n 1533  \n 1534: #define __HAL_RCC_ADC2_RELEASE_RESET()      (RCC->APB2RSTR &= ~(RCC_APB2RSTR_ADC2RST))\n 1535  #endif /* STM32F101xG || STM32F103x6 || STM32F103xB || STM32F105xC || STM32F107xC || STM32F103xE || STM32F103xG */\n 1536  \n 1537  #if defined(STM32F100xB) || defined(STM32F100xE)\n 1538: #define __HAL_RCC_TIM15_FORCE_RESET()       (RCC->APB2RSTR |= (RCC_APB2RSTR_TIM15RST))\n 1539: #define __HAL_RCC_TIM16_FORCE_RESET()       (RCC->APB2RSTR |= (RCC_APB2RSTR_TIM16RST))\n 1540: #define __HAL_RCC_TIM17_FORCE_RESET()       (RCC->APB2RSTR |= (RCC_APB2RSTR_TIM17RST))\n 1541  \n 1542: #define __HAL_RCC_TIM15_RELEASE_RESET()     (RCC->APB2RSTR &= ~(RCC_APB2RSTR_TIM15RST))\n 1543: #define __HAL_RCC_TIM16_RELEASE_RESET()     (RCC->APB2RSTR &= ~(RCC_APB2RSTR_TIM16RST))\n 1544: #define __HAL_RCC_TIM17_RELEASE_RESET()     (RCC->APB2RSTR &= ~(RCC_APB2RSTR_TIM17RST))\n 1545  #endif /* STM32F100xB || STM32F100xE */\n 1546  \n ....\n 1549   || defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC)\\\n 1550   || defined(STM32F107xC)\n 1551: #define __HAL_RCC_GPIOE_FORCE_RESET()       (RCC->APB2RSTR |= (RCC_APB2RSTR_IOPERST))\n 1552  \n 1553: #define __HAL_RCC_GPIOE_RELEASE_RESET()     (RCC->APB2RSTR &= ~(RCC_APB2RSTR_IOPERST))\n 1554  #endif /* STM32F101x6 || STM32F101xB || STM32F101xE || (...) || STM32F105xC || STM32F107xC */\n 1555  \n 1556  #if defined(STM32F101xE) || defined(STM32F103xE) || defined(STM32F101xG)\\\n 1557   || defined(STM32F103xG)\n 1558: #define __HAL_RCC_GPIOF_FORCE_RESET()       (RCC->APB2RSTR |= (RCC_APB2RSTR_IOPFRST))\n 1559: #define __HAL_RCC_GPIOG_FORCE_RESET()       (RCC->APB2RSTR |= (RCC_APB2RSTR_IOPGRST))\n 1560  \n 1561: #define __HAL_RCC_GPIOF_RELEASE_RESET()     (RCC->APB2RSTR &= ~(RCC_APB2RSTR_IOPFRST))\n 1562: #define __HAL_RCC_GPIOG_RELEASE_RESET()     (RCC->APB2RSTR &= ~(RCC_APB2RSTR_IOPGRST))\n 1563  #endif /* STM32F101xE || STM32F103xE || STM32F101xG || STM32F103xG*/\n 1564  \n 1565  #if defined(STM32F103xE) || defined(STM32F103xG)\n 1566: #define __HAL_RCC_TIM8_FORCE_RESET()        (RCC->APB2RSTR |= (RCC_APB2RSTR_TIM8RST))\n 1567: #define __HAL_RCC_ADC3_FORCE_RESET()        (RCC->APB2RSTR |= (RCC_APB2RSTR_ADC3RST))\n 1568  \n 1569: #define __HAL_RCC_TIM8_RELEASE_RESET()      (RCC->APB2RSTR &= ~(RCC_APB2RSTR_TIM8RST))\n 1570: #define __HAL_RCC_ADC3_RELEASE_RESET()      (RCC->APB2RSTR &= ~(RCC_APB2RSTR_ADC3RST))\n 1571  #endif /* STM32F103xE || STM32F103xG */\n 1572  \n 1573  #if defined(STM32F100xE)\n 1574: #define __HAL_RCC_GPIOF_FORCE_RESET()       (RCC->APB2RSTR |= (RCC_APB2RSTR_IOPFRST))\n 1575: #define __HAL_RCC_GPIOG_FORCE_RESET()       (RCC->APB2RSTR |= (RCC_APB2RSTR_IOPGRST))\n 1576  \n 1577: #define __HAL_RCC_GPIOF_RELEASE_RESET()     (RCC->APB2RSTR &= ~(RCC_APB2RSTR_IOPFRST))\n 1578: #define __HAL_RCC_GPIOG_RELEASE_RESET()     (RCC->APB2RSTR &= ~(RCC_APB2RSTR_IOPGRST))\n 1579  #endif /* STM32F100xE */\n 1580  \n 1581  #if defined(STM32F101xG) || defined(STM32F103xG)\n 1582: #define __HAL_RCC_TIM9_FORCE_RESET()        (RCC->APB2RSTR |= (RCC_APB2RSTR_TIM9RST))\n 1583: #define __HAL_RCC_TIM10_FORCE_RESET()       (RCC->APB2RSTR |= (RCC_APB2RSTR_TIM10RST))\n 1584: #define __HAL_RCC_TIM11_FORCE_RESET()       (RCC->APB2RSTR |= (RCC_APB2RSTR_TIM11RST))\n 1585  \n 1586: #define __HAL_RCC_TIM9_RELEASE_RESET()      (RCC->APB2RSTR &= ~(RCC_APB2RSTR_TIM9RST))\n 1587: #define __HAL_RCC_TIM10_RELEASE_RESET()     (RCC->APB2RSTR &= ~(RCC_APB2RSTR_TIM10RST))\n 1588: #define __HAL_RCC_TIM11_RELEASE_RESET()     (RCC->APB2RSTR &= ~(RCC_APB2RSTR_TIM11RST))\n 1589  #endif /* STM32F101xG || STM32F103xG*/\n 1590  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal_tim.h:\n  262  typedef enum\n  263  {\n  264:   HAL_TIM_STATE_RESET             = 0x00,    /*!< Peripheral not yet initialized or disabled  */\n  265    HAL_TIM_STATE_READY             = 0x01,    /*!< Peripheral Initialized and ready for use    */\n  266    HAL_TIM_STATE_BUSY              = 0x02,    /*!< An internal process is ongoing              */\n  ...\n  420    */\n  421  #define TIM_OCIDLESTATE_SET                (TIM_CR2_OIS1)\n  422: #define TIM_OCIDLESTATE_RESET              ((uint32_t)0x0000)\n  423  /**\n  424    * @}\n  ...\n  429    */\n  430  #define TIM_OCNIDLESTATE_SET               (TIM_CR2_OIS1N)\n  431: #define TIM_OCNIDLESTATE_RESET             ((uint32_t)0x0000)\n  432  /**\n  433    * @}\n  ...\n  687    * @}\n  688    */\n  689: /** @defgroup TIM_AOE_Bit_Set_Reset TIM Automatic Output Enable\n  690    * @{\n  691    */\n  ...\n  699    * @{\n  700    */\n  701: #define	TIM_TRGO_RESET            ((uint32_t)0x0000)\n  702  #define	TIM_TRGO_ENABLE           (TIM_CR2_MMS_0)\n  703  #define	TIM_TRGO_UPDATE           (TIM_CR2_MMS_1)\n  ...\n  715    */\n  716  #define TIM_SLAVEMODE_DISABLE              ((uint32_t)0x0000)\n  717: #define TIM_SLAVEMODE_RESET                ((uint32_t)0x0004)\n  718  #define TIM_SLAVEMODE_GATED                ((uint32_t)0x0005)\n  719  #define TIM_SLAVEMODE_TRIGGER              ((uint32_t)0x0006)\n  ...\n  909  \n  910  #define IS_TIM_OCIDLE_STATE(STATE) (((STATE) == TIM_OCIDLESTATE_SET) || \\\n  911:                                     ((STATE) == TIM_OCIDLESTATE_RESET))\n  912  \n  913  #define IS_TIM_OCNIDLE_STATE(STATE) (((STATE) == TIM_OCNIDLESTATE_SET) || \\\n  914:                                      ((STATE) == TIM_OCNIDLESTATE_RESET))\n  915  \n  916  #define IS_TIM_CHANNELS(CHANNEL) (((CHANNEL) == TIM_CHANNEL_1) || \\\n  ...\n 1009                                                ((STATE) == TIM_AUTOMATICOUTPUT_DISABLE))\n 1010  \n 1011: #define IS_TIM_TRGO_SOURCE(SOURCE) (((SOURCE) == TIM_TRGO_RESET)  || \\\n 1012                                      ((SOURCE) == TIM_TRGO_ENABLE) || \\\n 1013                                      ((SOURCE) == TIM_TRGO_UPDATE) || \\\n ....\n 1020  #define IS_TIM_SLAVE_MODE(MODE) (((MODE) == TIM_SLAVEMODE_DISABLE) || \\\n 1021                                   ((MODE) == TIM_SLAVEMODE_GATED)   || \\\n 1022:                                  ((MODE) == TIM_SLAVEMODE_RESET)   || \\\n 1023                                   ((MODE) == TIM_SLAVEMODE_TRIGGER) || \\\n 1024                                   ((MODE) == TIM_SLAVEMODE_EXTERNAL1))\n ....\n 1111   ((__HANDLE__)->Instance->CCMR2 |= ((__ICPSC__) << 8)))\n 1112  \n 1113: /** @brief Reset TIM IC prescaler\n 1114    * @param  __HANDLE__: TIM handle\n 1115    * @param  __CHANNEL__: specifies TIM Channel\n 1116    * @retval None\n 1117    */\n 1118: #define TIM_RESET_ICPRESCALERVALUE(__HANDLE__, __CHANNEL__) \\\n 1119  (((__CHANNEL__) == TIM_CHANNEL_1) ? ((__HANDLE__)->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC) :\\\n 1120   ((__CHANNEL__) == TIM_CHANNEL_2) ? ((__HANDLE__)->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC) :\\\n ....\n 1135   ((__HANDLE__)->Instance->CCER |= (((__POLARITY__) << 12) & TIM_CCER_CC4P)))\n 1136  \n 1137: /** @brief Reset TIM IC polarity\n 1138    * @param  __HANDLE__: TIM handle\n 1139    * @param  __CHANNEL__: specifies TIM Channel\n 1140    * @retval None\n 1141    */\n 1142: #define TIM_RESET_CAPTUREPOLARITY(__HANDLE__, __CHANNEL__) \\\n 1143  (((__CHANNEL__) == TIM_CHANNEL_1) ? ((__HANDLE__)->Instance->CCER &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP)) :\\\n 1144   ((__CHANNEL__) == TIM_CHANNEL_2) ? ((__HANDLE__)->Instance->CCER &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP)) :\\\n ....\n 1170    */\n 1171  \n 1172: /** @brief  Reset TIM handle state\n 1173    * @param  __HANDLE__: TIM handle.\n 1174    * @retval None\n 1175    */\n 1176: #define __HAL_TIM_RESET_HANDLE_STATE(__HANDLE__) ((__HANDLE__)->State = HAL_TIM_STATE_RESET)\n 1177  \n 1178  /**\n ....\n 1336    * @param  __HANDLE__: TIM handle\n 1337    * @param  __INTERRUPT__: specifies the TIM interrupt source to check.\n 1338:   * @retval The state of TIM_IT (SET or RESET).\n 1339    */\n 1340: #define __HAL_TIM_GET_IT_SOURCE(__HANDLE__, __INTERRUPT__) ((((__HANDLE__)->Instance->DIER & (__INTERRUPT__)) == (__INTERRUPT__)) ? SET : RESET)\n 1341  \n 1342  /**\n ....\n 1478  #define __HAL_TIM_SET_ICPRESCALER(__HANDLE__, __CHANNEL__, __ICPSC__) \\\n 1479                          do{                                                    \\\n 1480:                               TIM_RESET_ICPRESCALERVALUE((__HANDLE__), (__CHANNEL__));  \\\n 1481                                TIM_SET_ICPRESCALERVALUE((__HANDLE__), (__CHANNEL__), (__ICPSC__)); \\\n 1482                            } while(0)\n ....\n 1511  \n 1512  /**\n 1513:   * @brief  Reset the Update Request Source (URS) bit of the TIMx_CR1 register\n 1514    * @param  __HANDLE__: TIM handle.\n 1515:   * @note  When the USR bit of the TIMx_CR1 register is reset, any of the\n 1516    *        following events generate an update interrupt or DMA request (if\n 1517    *        enabled):\n ....\n 1542  #define __HAL_TIM_SET_CAPTUREPOLARITY(__HANDLE__, __CHANNEL__, __POLARITY__)    \\\n 1543          do{                                                                     \\\n 1544:           TIM_RESET_CAPTUREPOLARITY((__HANDLE__), (__CHANNEL__));               \\\n 1545            TIM_SET_CAPTUREPOLARITY((__HANDLE__), (__CHANNEL__), (__POLARITY__)); \\\n 1546          }while(0)\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal_tim_ex.h:\n  103                                       This parameter can be a value of @ref TIM_Break_Polarity */\n  104    uint32_t AutomaticOutput;       /*!< TIM Automatic Output Enable state \n  105:                                      This parameter can be a value of @ref TIM_AOE_Bit_Set_Reset */           \n  106  } TIM_BreakDeadTimeConfigTypeDef;\n  107  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_ll_usb.h:\n  534  HAL_StatusTypeDef USB_HostInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg);\n  535  HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx , uint8_t freq);\n  536: HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx);\n  537  HAL_StatusTypeDef USB_DriveVbus (USB_OTG_GlobalTypeDef *USBx, uint8_t state);\n  538  uint32_t          USB_GetHostSpeed (USB_OTG_GlobalTypeDef *USBx);\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal.c:\n  130               handled in milliseconds basis.\n  131          (++) Time base configuration function (HAL_InitTick ()) is called automatically \n  132:              at the beginning of the program after reset by HAL_Init() or at any time \n  133               when clock is configured, by HAL_RCC_ClockConfig(). \n  134          (++) Source of time base is configured  to generate interrupts at regular \n  ...\n  147    * @brief This function configures the Flash prefetch, \n  148    *        Configures time base source, NVIC and Low level hardware\n  149:   * @note This function is called at the beginning of program after reset and before \n  150    *       the clock configuration\n  151:   * @note The time base configuration is based on MSI clock when exiting from Reset.\n  152    *       Once done, time base tick start incrementing.\n  153    *        In the default implementation,Systick is used as source of time base.\n  ...\n  172    HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);\n  173  \n  174:   /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */\n  175    HAL_InitTick(TICK_INT_PRIORITY);\n  176  \n  ...\n  190  HAL_StatusTypeDef HAL_DeInit(void)\n  191  {\n  192:   /* Reset of all peripherals */\n  193:   __HAL_RCC_APB1_FORCE_RESET();\n  194:   __HAL_RCC_APB1_RELEASE_RESET();\n  195  \n  196:   __HAL_RCC_APB2_FORCE_RESET();\n  197:   __HAL_RCC_APB2_RELEASE_RESET();\n  198  \n  199  #if defined(STM32F105xC) || defined(STM32F107xC)\n  200:   __HAL_RCC_AHB_FORCE_RESET();\n  201:   __HAL_RCC_AHB_RELEASE_RESET();\n  202  #endif\n  203    \n  ...\n  236    *        Tick interrupt priority.\n  237    * @note This function is called  automatically at the beginning of program after\n  238:   *       reset by HAL_Init() or at any time when clock is reconfigured  by HAL_RCC_ClockConfig(). \n  239    * @note In the default implementation, SysTick timer is the source of time base. \n  240    *       It is used to generate interrupts at regular time intervals. \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_cortex.c:\n   70          (++) Configures the SysTick Reload register with value passed as function parameter.\n   71          (++) Configures the SysTick IRQ priority to the lowest value (0x0F).\n   72:         (++) Resets the SysTick Counter register.\n   73          (++) Configures the SysTick Counter clock source to be Core Clock Source (HCLK).\n   74          (++) Enables the SysTick Interrupt.\n   ..\n  253  \n  254  /**\n  255:   * @brief  Initiates a system reset request to reset the MCU.\n  256    * @retval None\n  257    */\n  258: void HAL_NVIC_SystemReset(void)\n  259  {\n  260:   /* System Reset */\n  261:   NVIC_SystemReset();\n  262  }\n  263  \n  ...\n  309    MPU->RNR = MPU_Init->Number;\n  310  \n  311:   if ((MPU_Init->Enable) != RESET)\n  312    {\n  313      /* Check the parameters */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_dma.c:\n  188    assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));\n  189    \n  190:   if(hdma->State == HAL_DMA_STATE_RESET)\n  191    {  \n  192      /* Allocate lock resource and initialize it */\n  ...\n  249    __HAL_DMA_DISABLE(hdma);\n  250    \n  251:   /* Reset DMA Channel control register */\n  252    hdma->Instance->CCR  = 0;\n  253    \n  254:   /* Reset DMA Channel Number of Data to Transfer register */\n  255    hdma->Instance->CNDTR = 0;\n  256    \n  257:   /* Reset DMA Channel peripheral address register */\n  258    hdma->Instance->CPAR  = 0;\n  259    \n  260:   /* Reset DMA Channel memory address register */\n  261    hdma->Instance->CMAR = 0;\n  262  \n  ...\n  270  \n  271    /* Initialize the DMA state */\n  272:   hdma->State = HAL_DMA_STATE_RESET;\n  273  \n  274    /* Release Lock */\n  ...\n  451    tickstart = HAL_GetTick();\n  452  \n  453:   while(__HAL_DMA_GET_FLAG(hdma, temp) == RESET)\n  454    {\n  455:     if((__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET))\n  456      {      \n  457        /* Clear the transfer error flags */\n  ...\n  523  {\n  524    /* Transfer Error Interrupt management ***************************************/\n  525:   if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)\n  526    {\n  527:     if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)\n  528      {\n  529        /* Disable the transfer error interrupt */\n  ...\n  551  \n  552    /* Half Transfer Complete Interrupt management ******************************/\n  553:   if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)\n  554    {\n  555:     if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)\n  556      { \n  557        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */\n  ...\n  576    \n  577    /* Transfer Complete Interrupt management ***********************************/\n  578:   if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)\n  579    {\n  580:     if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)\n  581      {\n  582        if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_flash.c:\n   46            functions to manage the Option Bytes:\n   47          (++) Lock and Unlock the Option Bytes\n   48:         (++) Set/Reset the write protection\n   49          (++) Set the Read protection Level\n   50          (++) Program the user Option Bytes\n   ..\n  366      HAL_FLASH_OperationErrorCallback(pFlash.Address);\n  367  \n  368:     /* Reset address and stop the procedure ongoing*/\n  369      pFlash.Address = 0xFFFFFFFF;\n  370      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;\n  ...\n  411            /*No more pages to Erase*/\n  412  \n  413:           /*Reset Address and stop Erase pages procedure*/\n  414            pFlash.Address = 0xFFFFFFFF;\n  415            pFlash.ProcedureOnGoing = FLASH_PROC_NONE;\n  ...\n  474            }\n  475          \n  476:           /* Reset Address and stop Program procedure*/\n  477            pFlash.Address = 0xFFFFFFFF;\n  478            pFlash.ProcedureOnGoing = FLASH_PROC_NONE;\n  ...\n  516            /*No more pages to Erase*/\n  517            \n  518:           /*Reset Address and stop Erase pages procedure*/\n  519            pFlash.Address = 0xFFFFFFFF;\n  520            pFlash.ProcedureOnGoing = FLASH_PROC_NONE;\n  ...\n  573            }\n  574            \n  575:           /* Reset Address and stop Program procedure*/\n  576            pFlash.Address = 0xFFFFFFFF;\n  577            pFlash.ProcedureOnGoing = FLASH_PROC_NONE;\n  ...\n  739  /**\n  740    * @brief  Launch the option byte loading.\n  741:   * @note   This function will reset automatically the MCU.\n  742    * @retval HAL_StatusTypeDef HAL Status\n  743    */\n  744  HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)\n  745  {\n  746:   /* Initiates a system reset request to launch the option byte loading */\n  747:   HAL_NVIC_SystemReset();\n  748    \n  749    return HAL_OK;  \n  ...\n  825  HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)\n  826  {\n  827:   /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.\n  828:      Even if the FLASH operation fails, the BUSY flag will be reset and an error\n  829       flag will be set */\n  830       \n  ...\n  870  HAL_StatusTypeDef FLASH_WaitForLastOperationBank2(uint32_t Timeout)\n  871  { \n  872:   /* Wait for the FLASH BANK2 operation to complete by polling on BUSY flag to be reset.\n  873:      Even if the FLASH BANK2 operation fails, the BUSY flag will be reset and an error\n  874       flag will be set */\n  875       \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_flash_ex.c:\n   23         of all STM32F1xxx devices. It includes\n   24         \n   25:         (++) Set/Reset the write protection\n   26          (++) Program the user Option Bytes\n   27          (++) Get the Read protection Level\n   ..\n  390    *         The function HAL_FLASH_OB_Unlock() should be called before to unlock the options bytes\n  391    *         The function HAL_FLASH_OB_Launch() should be called after to force the reload of the options bytes\n  392:   *         (system reset will occur)\n  393    * @retval HAL status\n  394    */\n  ...\n  436    *         The function HAL_FLASH_OB_Unlock() should be called before to unlock the options bytes\n  437    *         The function HAL_FLASH_OB_Launch() should be called after to force the reload of the options bytes\n  438:   *         (system reset will occur)\n  439    *\n  440    * @param  pOBInit: pointer to an FLASH_OBInitStruct structure that\n  ...\n  912    *         The function HAL_FLASH_OB_Unlock() should be called before to unlock the options bytes\n  913    *         The function HAL_FLASH_OB_Launch() should be called after to force the reload of the options bytes \n  914:   *         (system reset will occur)\n  915    *         Programming of the OB should be performed only after an erase (otherwise PGERR occurs)\n  916    * @param  Address: specifies the address to be programmed.\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_gpio.c:\n   26  \n   27    [..]  \n   28:   During and just after reset, the alternate functions and external interrupt  \n   29    lines are not active and the I/O ports are configured in input floating mode.\n   30    \n   ..\n   72     (#) To get the level of a pin configured in input mode use HAL_GPIO_ReadPin().\n   73              \n   74:    (#) To set/reset the level of a pin configured in output mode use \n   75         HAL_GPIO_WritePin()/HAL_GPIO_TogglePin().\n   76    \n   77:    (#) To lock pin configuration until next reset use HAL_GPIO_LockPin().\n   78                   \n   79:    (#) During and just after reset, the alternate functions are not \n   80         active and the GPIO pins are configured in input floating mode (except JTAG\n   81         pins).\n   ..\n  150  \n  151  /* Definitions for bit manipulation of CRL and CRH register */\n  152: #define  GPIO_CR_MODE_INPUT         ((uint32_t)0x00000000) /*!< 00: Input mode (reset state)  */\n  153  #define  GPIO_CR_CNF_ANALOG         ((uint32_t)0x00000000) /*!< 00: Analog mode  */\n  154: #define  GPIO_CR_CNF_INPUT_FLOATING ((uint32_t)0x00000004) /*!< 01: Floating input (reset state)  */\n  155  #define  GPIO_CR_CNF_INPUT_PU_PD    ((uint32_t)0x00000008) /*!< 10: Input with pull-up / pull-down  */\n  156  #define  GPIO_CR_CNF_GP_OUTPUT_PP   ((uint32_t)0x00000000) /*!< 00: General purpose output push-pull  */\n  ...\n  280              config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;\n  281              \n  282:             /* Reset the corresponding ODR bit */\n  283              GPIOx->BRR = ioposition;\n  284            }\n  ...\n  360  \n  361  /**\n  362:   * @brief  De-initializes the GPIOx peripheral registers to their default reset values.\n  363    * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral\n  364    * @param  GPIO_Pin: specifies the port bit to be written.\n  ...\n  453    assert_param(IS_GPIO_PIN(GPIO_Pin));\n  454  \n  455:   if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)\n  456    {\n  457      bitstatus = GPIO_PIN_SET;\n  ...\n  459    else\n  460    {\n  461:     bitstatus = GPIO_PIN_RESET;\n  462    }\n  463    return bitstatus;\n  ...\n  476    * @param  PinState: specifies the value to be written to the selected bit.\n  477    *          This parameter can be one of the GPIO_PinState enum values:\n  478:   *            @arg GPIO_BIT_RESET: to clear the port pin\n  479    *            @arg GPIO_BIT_SET: to set the port pin\n  480    * @retval None\n  ...\n  486    assert_param(IS_GPIO_PIN_ACTION(PinState));\n  487  \n  488:   if(PinState != GPIO_PIN_RESET)\n  489    {\n  490      GPIOx->BSRR = GPIO_Pin;\n  ...\n  514  * @note   The locking mechanism allows the IO configuration to be frozen. When the LOCK sequence\n  515  *         has been applied on a port bit, it is no longer possible to modify the value of the port bit until\n  516: *         the next reset.\n  517  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral\n  518  * @param  GPIO_Pin: specifies the port bit to be locked.\n  ...\n  532    /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */\n  533    GPIOx->LCKR = tmp;\n  534:   /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */\n  535    GPIOx->LCKR = GPIO_Pin;\n  536    /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */\n  ...\n  557  {\n  558    /* EXTI line interrupt detected */\n  559:   if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) \n  560    { \n  561      __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_pcd.c:\n  161    assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));\n  162  \n  163:   if(hpcd->State == HAL_PCD_STATE_RESET)\n  164    {  \n  165      /* Allocate lock resource and initialize it */\n  ...\n  238    HAL_PCD_MspDeInit(hpcd);\n  239    \n  240:   hpcd->State = HAL_PCD_STATE_RESET; \n  241    \n  242    return HAL_OK;\n  ...\n  451      }\n  452      \n  453:     /* Handle Reset Interrupt */\n  454      if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))\n  455      {\n  ...\n  487        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_FS_TRDT_VALUE << 10) & USB_OTG_GUSBCFG_TRDT);\n  488        \n  489:       HAL_PCD_ResetCallback(hpcd);\n  490        \n  491        __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);\n  ...\n  576    }\n  577  \n  578:   if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))\n  579    {\n  580:     __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);\n  581:     HAL_PCD_ResetCallback(hpcd);\n  582      HAL_PCD_SetAddress(hpcd, 0);\n  583    }\n  ...\n  598      /*set wInterrupt_Mask global variable*/\n  599      wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \\\n  600:       | USB_CNTR_ESOFM | USB_CNTR_RESETM;\n  601      \n  602      /*Set interrupt mask*/\n  ...\n  686  \n  687  /**\n  688:   * @brief  USB Reset callbacks\n  689    * @param  hpcd: PCD handle\n  690    * @retval None\n  691    */\n  692:  __weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)\n  693  {\n  694    /* NOTE : This function should not be modified, when the callback is needed,\n  695:             the HAL_PCD_ResetCallback could be implemented in the user file\n  696     */\n  697  }\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_pwr.c:\n  156   ===============================================================================\n  157      [..]\n  158:       After reset, the backup domain (RTC registers, RTC backup data\n  159        registers) is protected against possible unwanted\n  160        write accesses.\n  ...\n  169  \n  170  /**\n  171:   * @brief  Deinitializes the PWR peripheral registers to their default reset values.  \n  172    * @retval None\n  173    */\n  174  void HAL_PWR_DeInit(void)\n  175  {\n  176:   __HAL_RCC_PWR_FORCE_RESET();\n  177:   __HAL_RCC_PWR_RELEASE_RESET();\n  178  }\n  179  \n  ...\n  296          (++) The Standby mode is entered using the HAL_PWR_EnterSTANDBYMode() function.\n  297        (+) Exit:\n  298:         (++) WKUP pin rising edge, RTC alarm event rising edge, external Reset in \n  299:              NRSTpin, IWDG Reset\n  300  \n  301     *** Auto-wakeup (AWU) from low-power mode ***\n  ...\n  504      PWR_OverloadWfe(); /* WFE redefine locally */\n  505    }\n  506:   /* Reset SLEEPDEEP bit of Cortex System Control Register */\n  507    CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));\n  508  }\n  ...\n  511    * @brief Enters Standby mode.\n  512    * @note  In Standby mode, all I/O pins are high impedance except for:\n  513:   *          - Reset pad (still available) \n  514    *          - TAMPER pin if configured for tamper or calibration out.\n  515    *          - WKUP pin (PA0) if enabled.\n  ...\n  596  {\n  597    /* Check PWR exti flag */\n  598:   if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)\n  599    {\n  600      /* PWR PVD interrupt user callback */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_rcc.c:\n    7    * @brief   RCC HAL module driver.\n    8    *          This file provides firmware functions to manage the following \n    9:   *          functionalities of the Reset and Clock Control (RCC) peripheral:\n   10    *           + Initialization and de-initialization functions\n   11    *           + Peripheral Control functions\n   ..\n   16    ==============================================================================\n   17      [..]  \n   18:       After reset the device is running from Internal High Speed oscillator\n   19        (HSI 8MHz) with Flash 0 wait state, Flash prefetch buffer is enabled, \n   20        and all peripherals are off except internal SRAM, Flash and JTAG.\n   ..\n   24        (+) All GPIOs are in input floating state, except the JTAG pins which\n   25            are assigned to be used for debug purpose.\n   26:     [..] Once the device started from reset, the user application has to:\n   27        (+) Configure the clock source to be used to drive the System clock\n   28            (if the application needs higher frequency/performance)\n   ..\n  200  \n  201  /**\n  202:   * @brief  Resets the RCC clock configuration to the default reset state.\n  203:   * @note   The default reset state of the clock configuration is given below:\n  204    *            - HSI ON and used as system clock source\n  205    *            - HSE and PLL OFF\n  ...\n  217    CLEAR_BIT(RCC->CFGR, RCC_CFGR_SW);\n  218  \n  219:   /* Reset HSEON, CSSON, & PLLON bits */\n  220    CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLLON);\n  221    \n  222:   /* Reset HSEBYP bit */\n  223    CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);\n  224    \n  225:   /* Reset CFGR register */\n  226    CLEAR_REG(RCC->CFGR);\n  227    \n  228:   /* Set HSITRIM bits to the reset value */\n  229    MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, ((uint32_t)0x10 << POSITION_VAL(RCC_CR_HSITRIM)));\n  230    \n  231  #if (defined(STM32F105xC) || defined(STM32F107xC) || defined (STM32F100xB) || defined (STM32F100xE))\n  232:   /* Reset CFGR2 register */\n  233    CLEAR_REG(RCC->CFGR2);\n  234  \n  ...\n  265         || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))\n  266      {\n  267:       if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))\n  268        {\n  269          return HAL_ERROR;\n  ...\n  272      else\n  273      {\n  274:       /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/\n  275        __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);\n  276        \n  ...\n  279        \n  280        /* Wait till HSE is disabled */  \n  281:       while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)\n  282        {\n  283          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)\n  ...\n  298          \n  299          /* Wait till HSE is ready */\n  300:         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)\n  301          {\n  302            if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)\n  ...\n  312          \n  313          /* Wait till HSE is bypassed or disabled */\n  314:         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)\n  315          {\n  316             if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)\n  ...\n  334      {\n  335        /* When HSI is used as system clock it will not disabled */\n  336:       if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))\n  337        {\n  338          return HAL_ERROR;\n  ...\n  357          \n  358          /* Wait till HSI is ready */\n  359:         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)\n  360          {\n  361            if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)\n  ...\n  377          \n  378          /* Wait till HSI is disabled */\n  379:         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)\n  380          {\n  381            if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)\n  ...\n  403        \n  404        /* Wait till LSI is ready */  \n  405:       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)\n  406        {\n  407          if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)\n  ...\n  423        \n  424        /* Wait till LSI is disabled */  \n  425:       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)\n  426        {\n  427          if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)\n  ...\n  447      tickstart = HAL_GetTick();\n  448      \n  449:     while((PWR->CR & PWR_CR_DBP) == RESET)\n  450      {\n  451        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)\n  ...\n  455      }\n  456      \n  457:     /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/\n  458      __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);\n  459      \n  ...\n  462      \n  463      /* Wait till LSE is disabled */  \n  464:     while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)\n  465      {\n  466        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)\n  ...\n  479        \n  480        /* Wait till LSE is ready */  \n  481:       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)\n  482        {\n  483          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)\n  ...\n  493        \n  494        /* Wait till LSE is disabled */  \n  495:       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)\n  496        {\n  497          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)\n  ...\n  540          \n  541          /* Wait till PLL2 is disabled */\n  542:         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)\n  543          {\n  544            if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)\n  ...\n  561          \n  562          /* Wait till PLL2 is ready */\n  563:         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)\n  564          {\n  565            if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)\n  ...\n  581          \n  582          /* Wait till PLL2 is disabled */  \n  583:         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)\n  584          {\n  585            if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)\n  ...\n  614          \n  615          /* Wait till PLL is disabled */\n  616:         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)\n  617          {\n  618            if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)\n  ...\n  649          \n  650          /* Wait till PLL is ready */\n  651:         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)\n  652          {\n  653            if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)\n  ...\n  666          \n  667          /* Wait till PLL is disabled */  \n  668:         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)\n  669          {\n  670            if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)\n  ...\n  695    *\n  696    * @note   The HSI is used (enabled by hardware) as system clock source after\n  697:   *         startup from Reset, wake-up from STOP and STANDBY mode, or in case\n  698    *         of failure of the HSE used directly or indirectly as system clock\n  699    *         (if the Clock Security System CSS is enabled).\n  ...\n  751        {\n  752          /* Check the HSE ready flag */  \n  753:         if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)\n  754          {\n  755            return HAL_ERROR;\n  ...\n  760        {\n  761          /* Check the PLL ready flag */  \n  762:         if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)\n  763          {\n  764            return HAL_ERROR;\n  ...\n  769        {\n  770          /* Check the HSI ready flag */  \n  771:         if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)\n  772          {\n  773            return HAL_ERROR;\n  ...\n  831        {\n  832          /* Check the HSE ready flag */  \n  833:         if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)\n  834          {\n  835            return HAL_ERROR;\n  ...\n  840        {\n  841          /* Check the PLL ready flag */  \n  842:         if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)\n  843          {\n  844            return HAL_ERROR;\n  ...\n  849        {\n  850          /* Check the HSI ready flag */  \n  851:         if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)\n  852          {\n  853            return HAL_ERROR;\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_rcc_ex.c:\n   91      [..] \n   92      (@) Important note: Care must be taken when HAL_RCCEx_PeriphCLKConfig() is used to\n   93:         select the RTC clock source; in this case the Backup domain will be reset in  \n   94          order to modify the RTC Clock source, as consequence RTC registers (including \n   95:         the backup registers) and RCC_BDCR register are set to their reset values.\n   96        \n   97  @endverbatim\n   ..\n  106    *\n  107    * @note   Care must be taken when HAL_RCCEx_PeriphCLKConfig() is used to select \n  108:   *         the RTC clock source; in this case the Backup domain will be reset in  \n  109    *         order to modify the RTC Clock source, as consequence RTC registers (including \n  110:   *         the backup registers) are set to their reset values.\n  111    *\n  112    * @note   In case of STM32F105xC or STM32F107xC devices, PLLI2S will be enabled if requested on \n  ...\n  141      tickstart = HAL_GetTick();\n  142      \n  143:     while((PWR->CR & PWR_CR_DBP) == RESET)\n  144      {\n  145        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)\n  ...\n  149      }\n  150        \n  151:     /* Reset the Backup domain only if the RTC Clock source selection is modified */ \n  152      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))\n  153      {\n  154:       /* Store the content of BDCR register before the reset of Backup Domain */\n  155        temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));\n  156:       /* RTC Clock selection can be changed only if the Backup Domain is reset */\n  157:       __HAL_RCC_BACKUPRESET_FORCE();\n  158:       __HAL_RCC_BACKUPRESET_RELEASE();\n  159        /* Restore the Content of BDCR register */\n  160        RCC->BDCR = temp_reg;\n  ...\n  167        \n  168          /* Wait till LSE is ready */  \n  169:         while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)\n  170          {\n  171            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)\n  ...\n  249        \n  250        /* Wait till PLLI2S is ready */\n  251:       while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)\n  252        {\n  253          if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)\n  ...\n  609      \n  610      /* Wait till PLLI2S is ready */  \n  611:     while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)\n  612      {\n  613        if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)\n  ...\n  631      \n  632      /* Wait till PLLI2S is ready */\n  633:     while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)\n  634      {\n  635        if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)\n  ...\n  667      \n  668      /* Wait till PLLI2S is ready */  \n  669:     while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)\n  670      {\n  671        if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)\n  ...\n  742      \n  743      /* Wait till PLL2 is disabled */\n  744:     while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)\n  745      {\n  746        if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)\n  ...\n  763      \n  764      /* Wait till PLL2 is ready */\n  765:     while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)\n  766      {\n  767        if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)\n  ...\n  801      \n  802      /* Wait till PLL2 is disabled */  \n  803:     while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)\n  804      {\n  805        if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_tim.c:\n  217    assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));\n  218  \n  219:   if(htim->State == HAL_TIM_STATE_RESET)\n  220    {\n  221      /* Allocate lock resource and initialize it */\n  ...\n  257  \n  258    /* Change TIM state */\n  259:   htim->State = HAL_TIM_STATE_RESET;\n  260  \n  261    /* Release Lock */\n  ...\n  488    assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));\n  489  \n  490:   if(htim->State == HAL_TIM_STATE_RESET)\n  491    {\n  492      /* Allocate lock resource and initialize it */\n  ...\n  528  \n  529    /* Change TIM state */\n  530:   htim->State = HAL_TIM_STATE_RESET;\n  531  \n  532    /* Release Lock */\n  ...\n  579    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);\n  580  \n  581:   if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)\n  582    {\n  583      /* Enable the main output */\n  ...\n  611    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);\n  612  \n  613:   if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)\n  614    {\n  615      /* Disable the Main Ouput */\n  ...\n  677    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);\n  678  \n  679:   if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)\n  680    {\n  681      /* Enable the main output */\n  ...\n  743    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);\n  744  \n  745:   if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)\n  746    {\n  747      /* Disable the Main Ouput */\n  ...\n  862    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);\n  863  \n  864:   if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)\n  865    {\n  866      /* Enable the main output */\n  ...\n  928    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);\n  929  \n  930:   if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)\n  931    {\n  932      /* Disable the Main Ouput */\n  ...\n  988    assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));\n  989  \n  990:   if(htim->State == HAL_TIM_STATE_RESET)\n  991    {\n  992      /* Allocate lock resource and initialize it */\n  ...\n 1028  \n 1029    /* Change TIM state */\n 1030:   htim->State = HAL_TIM_STATE_RESET;\n 1031  \n 1032    /* Release Lock */\n ....\n 1079    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);\n 1080  \n 1081:   if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)\n 1082    {\n 1083      /* Enable the main output */\n ....\n 1111    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);\n 1112  \n 1113:   if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)\n 1114    {\n 1115      /* Disable the Main Ouput */\n ....\n 1180    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);\n 1181  \n 1182:   if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)\n 1183    {\n 1184      /* Enable the main output */\n ....\n 1246    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);\n 1247  \n 1248:   if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)\n 1249    {\n 1250      /* Disable the Main Ouput */\n ....\n 1365    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);\n 1366  \n 1367:   if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)\n 1368    {\n 1369      /* Enable the main output */\n ....\n 1431    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);\n 1432  \n 1433:   if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)\n 1434    {\n 1435      /* Disable the Main Ouput */\n ....\n 1491    assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));\n 1492  \n 1493:   if(htim->State == HAL_TIM_STATE_RESET)\n 1494    {\n 1495      /* Allocate lock resource and initialize it */\n ....\n 1531  \n 1532    /* Change TIM state */\n 1533:   htim->State = HAL_TIM_STATE_RESET;\n 1534  \n 1535    /* Release Lock */\n ....\n 1961    assert_param(IS_TIM_OPM_MODE(OnePulseMode));\n 1962  \n 1963:   if(htim->State == HAL_TIM_STATE_RESET)\n 1964    {\n 1965      /* Allocate lock resource and initialize it */\n ....\n 1976    TIM_Base_SetConfig(htim->Instance, &htim->Init);\n 1977  \n 1978:   /* Reset the OPM Bit */\n 1979    htim->Instance->CR1 &= ~TIM_CR1_OPM;\n 1980  \n ....\n 2007  \n 2008    /* Change TIM state */\n 2009:   htim->State = HAL_TIM_STATE_RESET;\n 2010  \n 2011    /* Release Lock */\n ....\n 2062    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);\n 2063  \n 2064:   if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)\n 2065    {\n 2066      /* Enable the main output */\n ....\n 2092    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);\n 2093  \n 2094:   if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)\n 2095    {\n 2096      /* Disable the Main Ouput */\n ....\n 2134    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);\n 2135  \n 2136:   if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)\n 2137    {\n 2138      /* Enable the main output */\n ....\n 2169    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);\n 2170  \n 2171:   if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)\n 2172    {\n 2173      /* Disable the Main Ouput */\n ....\n 2237    assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));\n 2238  \n 2239:   if(htim->State == HAL_TIM_STATE_RESET)\n 2240    {\n 2241      /* Allocate lock resource and initialize it */\n ....\n 2249    htim->State= HAL_TIM_STATE_BUSY;\n 2250  \n 2251:   /* Reset the SMS bits */\n 2252    htim->Instance->SMCR &= ~TIM_SMCR_SMS;\n 2253  \n ....\n 2317  \n 2318    /* Change TIM state */\n 2319:   htim->State = HAL_TIM_STATE_RESET;\n 2320  \n 2321    /* Release Lock */\n ....\n 2729  {\n 2730    /* Capture compare 1 event */\n 2731:   if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)\n 2732    {\n 2733:     if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)\n 2734      {\n 2735        {\n ....\n 2753    }\n 2754    /* Capture compare 2 event */\n 2755:   if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)\n 2756    {\n 2757:     if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)\n 2758      {\n 2759        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);\n ....\n 2774    }\n 2775    /* Capture compare 3 event */\n 2776:   if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)\n 2777    {\n 2778:     if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)\n 2779      {\n 2780        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);\n ....\n 2795    }\n 2796    /* Capture compare 4 event */\n 2797:   if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)\n 2798    {\n 2799:     if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)\n 2800      {\n 2801        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);\n ....\n 2816    }\n 2817    /* TIM Update event */\n 2818:   if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)\n 2819    {\n 2820:     if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)\n 2821      {\n 2822        __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);\n ....\n 2825    }\n 2826    /* TIM Break input event */\n 2827:   if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)\n 2828    {\n 2829:     if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)\n 2830      {\n 2831        __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);\n ....\n 2834    }\n 2835    /* TIM Trigger detection event */\n 2836:   if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)\n 2837    {\n 2838:     if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)\n 2839      {\n 2840        __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);\n ....\n 2843    }\n 2844    /* TIM commutation event */\n 2845:   if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)\n 2846    {\n 2847:     if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)\n 2848      {\n 2849        __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);\n ....\n 2982                 sConfig->ICFilter);\n 2983  \n 2984:     /* Reset the IC1PSC Bits */\n 2985      htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;\n 2986  \n ....\n 2998                        sConfig->ICFilter);\n 2999  \n 3000:     /* Reset the IC2PSC Bits */\n 3001      htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;\n 3002  \n ....\n 3014                 sConfig->ICFilter);\n 3015  \n 3016:     /* Reset the IC3PSC Bits */\n 3017      htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;\n 3018  \n ....\n 3030                 sConfig->ICFilter);\n 3031  \n 3032:     /* Reset the IC4PSC Bits */\n 3033      htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;\n 3034  \n ....\n 3210                          sConfig->ICSelection, sConfig->ICFilter);\n 3211  \n 3212:       /* Reset the IC1PSC Bits */\n 3213      htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;\n 3214  \n ....\n 3229                   sConfig->ICSelection, sConfig->ICFilter);\n 3230  \n 3231:       /* Reset the IC2PSC Bits */\n 3232          htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;\n 3233  \n ....\n 3810      case TIM_CHANNEL_1:\n 3811        {\n 3812:         if(sClearInputConfig->ClearInputState != RESET)\n 3813          {\n 3814            /* Enable the Ocref clear feature for Channel 1 */\n ....\n 3825        {\n 3826          assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));\n 3827:         if(sClearInputConfig->ClearInputState != RESET)\n 3828          {\n 3829            /* Enable the Ocref clear feature for Channel 2 */\n ....\n 3840        {\n 3841          assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));\n 3842:         if(sClearInputConfig->ClearInputState != RESET)\n 3843          {\n 3844            /* Enable the Ocref clear feature for Channel 3 */\n ....\n 3855        {\n 3856          assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));\n 3857:         if(sClearInputConfig->ClearInputState != RESET)\n 3858          {\n 3859            /* Enable the Ocref clear feature for Channel 4 */\n ....\n 3900    assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));\n 3901  \n 3902:   /* Reset the SMS, TS, ECE, ETPS and ETRF bits */\n 3903    tmpsmcr = htim->Instance->SMCR;\n 3904    tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);\n ....\n 3928        /* Get the TIMx SMCR register value */\n 3929        tmpsmcr = htim->Instance->SMCR;\n 3930:       /* Reset the SMS and TS Bits */\n 3931        tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);\n 3932        /* Select the External clock mode1 and the ETRF trigger */\n ....\n 4051    tmpcr2 = htim->Instance->CR2;\n 4052  \n 4053:   /* Reset the TI1 selection */\n 4054    tmpcr2 &= ~TIM_CR2_TI1S;\n 4055  \n ....\n 4069    *         contains the selected trigger (internal trigger input, filtered\n 4070    *         timer input or external trigger input) and the ) and the Slave \n 4071:   *         mode (Disable, Reset, Gated, Trigger, External clock mode 1).\n 4072    * @retval HAL status\n 4073    */\n ....\n 4104    *         contains the selected trigger (internal trigger input, filtered\n 4105    *         timer input or external trigger input) and the ) and the Slave \n 4106:   *         mode (Disable, Reset, Gated, Trigger, External clock mode 1).\n 4107    * @retval HAL status\n 4108    */\n ....\n 4553    uint32_t tmpcr2 = 0;\n 4554  \n 4555:    /* Disable the Channel 1: Reset the CC1E Bit */\n 4556    TIMx->CCER &= ~TIM_CCER_CC1E;\n 4557  \n ....\n 4564    tmpccmrx = TIMx->CCMR1;\n 4565  \n 4566:   /* Reset the Output Compare Mode Bits */\n 4567    tmpccmrx &= ~TIM_CCMR1_OC1M;\n 4568    tmpccmrx &= ~TIM_CCMR1_CC1S;\n ....\n 4570    tmpccmrx |= OC_Config->OCMode;\n 4571  \n 4572:   /* Reset the Output Polarity level */\n 4573    tmpccer &= ~TIM_CCER_CC1P;\n 4574    /* Set the Output Compare Polarity */\n ....\n 4580      assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));\n 4581  \n 4582:     /* Reset the Output N Polarity level */\n 4583      tmpccer &= ~TIM_CCER_CC1NP;\n 4584      /* Set the Output N Polarity */\n 4585      tmpccer |= OC_Config->OCNPolarity;\n 4586:     /* Reset the Output N State */\n 4587      tmpccer &= ~TIM_CCER_CC1NE;\n 4588    }\n ....\n 4594      assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));\n 4595  \n 4596:     /* Reset the Output Compare and Output Compare N IDLE State */\n 4597      tmpcr2 &= ~TIM_CR2_OIS1;\n 4598      tmpcr2 &= ~TIM_CR2_OIS1N;\n ....\n 4627    uint32_t tmpcr2 = 0;\n 4628  \n 4629:   /* Disable the Channel 2: Reset the CC2E Bit */\n 4630    TIMx->CCER &= ~TIM_CCER_CC2E;\n 4631  \n ....\n 4638    tmpccmrx = TIMx->CCMR1;\n 4639  \n 4640:   /* Reset the Output Compare mode and Capture/Compare selection Bits */\n 4641    tmpccmrx &= ~TIM_CCMR1_OC2M;\n 4642    tmpccmrx &= ~TIM_CCMR1_CC2S;\n ....\n 4645    tmpccmrx |= (OC_Config->OCMode << 8);\n 4646  \n 4647:   /* Reset the Output Polarity level */\n 4648    tmpccer &= ~TIM_CCER_CC2P;\n 4649    /* Set the Output Compare Polarity */\n ....\n 4656      assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));\n 4657  \n 4658:     /* Reset the Output N Polarity level */\n 4659      tmpccer &= ~TIM_CCER_CC2NP;\n 4660      /* Set the Output N Polarity */\n 4661      tmpccer |= (OC_Config->OCNPolarity << 4);\n 4662:     /* Reset the Output N State */\n 4663      tmpccer &= ~TIM_CCER_CC2NE;\n 4664  \n ....\n 4671      assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));\n 4672  \n 4673:     /* Reset the Output Compare and Output Compare N IDLE State */\n 4674      tmpcr2 &= ~TIM_CR2_OIS2;\n 4675      tmpcr2 &= ~TIM_CR2_OIS2N;\n ....\n 4705    uint32_t tmpcr2 = 0;\n 4706  \n 4707:   /* Disable the Channel 3: Reset the CC2E Bit */\n 4708    TIMx->CCER &= ~TIM_CCER_CC3E;\n 4709  \n ....\n 4716    tmpccmrx = TIMx->CCMR2;\n 4717  \n 4718:   /* Reset the Output Compare mode and Capture/Compare selection Bits */\n 4719    tmpccmrx &= ~TIM_CCMR2_OC3M;\n 4720    tmpccmrx &= ~TIM_CCMR2_CC3S;\n ....\n 4722    tmpccmrx |= OC_Config->OCMode;\n 4723  \n 4724:   /* Reset the Output Polarity level */\n 4725    tmpccer &= ~TIM_CCER_CC3P;\n 4726    /* Set the Output Compare Polarity */\n ....\n 4733      assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));\n 4734  \n 4735:     /* Reset the Output N Polarity level */\n 4736      tmpccer &= ~TIM_CCER_CC3NP;\n 4737      /* Set the Output N Polarity */\n 4738      tmpccer |= (OC_Config->OCNPolarity << 8);\n 4739:     /* Reset the Output N State */\n 4740      tmpccer &= ~TIM_CCER_CC3NE;\n 4741    }\n ....\n 4747      assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));\n 4748  \n 4749:     /* Reset the Output Compare and Output Compare N IDLE State */\n 4750      tmpcr2 &= ~TIM_CR2_OIS3;\n 4751      tmpcr2 &= ~TIM_CR2_OIS3N;\n ....\n 4781    uint32_t tmpcr2 = 0;\n 4782  \n 4783:   /* Disable the Channel 4: Reset the CC4E Bit */\n 4784    TIMx->CCER &= ~TIM_CCER_CC4E;\n 4785  \n ....\n 4792    tmpccmrx = TIMx->CCMR2;\n 4793  \n 4794:   /* Reset the Output Compare mode and Capture/Compare selection Bits */\n 4795    tmpccmrx &= ~TIM_CCMR2_OC4M;\n 4796    tmpccmrx &= ~TIM_CCMR2_CC4S;\n ....\n 4799    tmpccmrx |= (OC_Config->OCMode << 8);\n 4800  \n 4801:   /* Reset the Output Polarity level */\n 4802    tmpccer &= ~TIM_CCER_CC4P;\n 4803    /* Set the Output Compare Polarity */\n ....\n 4808      assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));\n 4809  \n 4810:    /* Reset the Output Compare IDLE State */\n 4811      tmpcr2 &= ~TIM_CR2_OIS4;\n 4812      /* Set the Output Idle state */\n ....\n 4845    tmpsmcr = htim->Instance->SMCR;\n 4846  \n 4847:   /* Reset the Trigger Selection Bits */\n 4848    tmpsmcr &= ~TIM_SMCR_TS;\n 4849    /* Set the Input Trigger source */\n 4850    tmpsmcr |= sSlaveConfig->InputTrigger;\n 4851  \n 4852:   /* Reset the slave mode Bits */\n 4853    tmpsmcr &= ~TIM_SMCR_SMS;\n 4854    /* Set the slave mode */\n ....\n 4882        assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));\n 4883  \n 4884:       /* Disable the Channel 1: Reset the CC1E Bit */\n 4885        tmpccer = htim->Instance->CCER;\n 4886        htim->Instance->CCER &= ~TIM_CCER_CC1E;\n ....\n 4985    uint32_t tmpccer = 0;\n 4986  \n 4987:   /* Disable the Channel 1: Reset the CC1E Bit */\n 4988    TIMx->CCER &= ~TIM_CCER_CC1E;\n 4989    tmpccmr1 = TIMx->CCMR1;\n ....\n 4991  \n 4992    /* Select the Input */\n 4993:   if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)\n 4994    {\n 4995      tmpccmr1 &= ~TIM_CCMR1_CC1S;\n ....\n 5031    uint32_t tmpccer = 0;\n 5032  \n 5033:   /* Disable the Channel 1: Reset the CC1E Bit */\n 5034    tmpccer = TIMx->CCER;\n 5035    TIMx->CCER &= ~TIM_CCER_CC1E;\n ....\n 5075    uint32_t tmpccer = 0;\n 5076  \n 5077:   /* Disable the Channel 2: Reset the CC2E Bit */\n 5078    TIMx->CCER &= ~TIM_CCER_CC2E;\n 5079    tmpccmr1 = TIMx->CCMR1;\n ....\n 5114    uint32_t tmpccer = 0;\n 5115  \n 5116:   /* Disable the Channel 2: Reset the CC2E Bit */\n 5117    TIMx->CCER &= ~TIM_CCER_CC2E;\n 5118    tmpccmr1 = TIMx->CCMR1;\n ....\n 5158    uint32_t tmpccer = 0;\n 5159  \n 5160:   /* Disable the Channel 3: Reset the CC3E Bit */\n 5161    TIMx->CCER &= ~TIM_CCER_CC3E;\n 5162    tmpccmr2 = TIMx->CCMR2;\n ....\n 5206    uint32_t tmpccer = 0;\n 5207  \n 5208:   /* Disable the Channel 4: Reset the CC4E Bit */\n 5209    TIMx->CCER &= ~TIM_CCER_CC4E;\n 5210    tmpccmr2 = TIMx->CCMR2;\n ....\n 5249     /* Get the TIMx SMCR register value */\n 5250     tmpsmcr = TIMx->SMCR;\n 5251:    /* Reset the TS Bits */\n 5252     tmpsmcr &= ~TIM_SMCR_TS;\n 5253     /* Set the Input Trigger source and the slave mode*/\n ....\n 5280    tmpsmcr = TIMx->SMCR;\n 5281  \n 5282:   /* Reset the ETR Bits */\n 5283    tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);\n 5284  \n ....\n 5313    tmp = TIM_CCER_CC1E << Channel;\n 5314  \n 5315:   /* Reset the CCxE Bit */\n 5316    TIMx->CCER &= ~tmp;\n 5317  \n 5318:   /* Set or reset the CCxE Bit */\n 5319    TIMx->CCER |=  (uint32_t)(ChannelState << Channel);\n 5320  }\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_tim_ex.c:\n   25      (#) Synchronization circuit to control the timer with external signals and to\n   26          interconnect several timers together.\n   27:     (#) Break input to put the timer output signals in reset state or in a known state.\n   28      (#) Supports incremental (quadrature) encoder and hall-sensor circuitry for\n   29          positioning purposes\n   ..\n  182    assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));\n  183  \n  184:   if(htim->State == HAL_TIM_STATE_RESET)\n  185    {\n  186      /* Allocate lock resource and initialize it */\n  ...\n  200    TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);\n  201  \n  202:   /* Reset the IC1PSC Bits */\n  203    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;\n  204    /* Set the IC1PSC value */\n  ...\n  212    htim->Instance->SMCR |= TIM_TS_TI1F_ED;\n  213  \n  214:   /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */\n  215    htim->Instance->SMCR &= ~TIM_SMCR_SMS;\n  216:   htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;\n  217  \n  218    /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/\n  219    OC_Config.OCFastMode = TIM_OCFAST_DISABLE;\n  220:   OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;\n  221    OC_Config.OCMode = TIM_OCMODE_PWM2;\n  222:   OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;\n  223    OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;\n  224    OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;\n  ...\n  257  \n  258    /* Change TIM state */\n  259:   htim->State = HAL_TIM_STATE_RESET;\n  260  \n  261    /* Release Lock */\n  ...\n  666    /* Disable the TIM Break interrupt (only if no more channel is active) */\n  667    tmpccer = htim->Instance->CCER;\n  668:   if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == RESET)\n  669    {\n  670      __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);\n  ...\n 1082    /* Disable the TIM Break interrupt (only if no more channel is active) */\n 1083    tmpccer = htim->Instance->CCER;\n 1084:   if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == RESET)\n 1085    {\n 1086      __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);\n ....\n 1678    htim->State = HAL_TIM_STATE_BUSY;\n 1679  \n 1680:   /* Reset the MMS Bits */\n 1681    htim->Instance->CR2 &= ~TIM_CR2_MMS;\n 1682    /* Select the TRGO source */\n 1683    htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;\n 1684  \n 1685:   /* Reset the MSM Bit */\n 1686    htim->Instance->SMCR &= ~TIM_SMCR_MSM;\n 1687:   /* Set or Reset the MSM Bit */\n 1688    htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;\n 1689  \n ....\n 1823    tmp = TIM_CCER_CC1NE << Channel;\n 1824  \n 1825:   /* Reset the CCxNE Bit */\n 1826    TIMx->CCER &=  ~tmp;\n 1827  \n 1828:   /* Set or reset the CCxNE Bit */\n 1829    TIMx->CCER |=  (uint32_t)(ChannelNState << Channel);\n 1830  }\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_ll_usb.c:\n   84    * @{\n   85    */\n   86: static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx);\n   87  /**\n   88    * @}\n   ..\n  127    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;\n  128    \n  129:   /* Reset after a PHY select and set Host mode */\n  130:   USB_CoreReset(USBx);\n  131    \n  132    /* Deactivate the power down*/\n  ...\n 1021  \n 1022  /**\n 1023: * @brief  USB_OTG_ResetPort : Reset Host Port\n 1024    * @param  USBx : Selected device\n 1025    * @retval HAL status\n 1026    * @note : (1)The application must wait at least 10 ms\n 1027:   *   before clearing the reset bit.\n 1028    */\n 1029: HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)\n 1030  {\n 1031    __IO uint32_t hprt0 = 0;\n ....\n 1503    /* Set winterruptmask variable */\n 1504    winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \\\n 1505:     | USB_CNTR_ESOFM | USB_CNTR_RESETM;\n 1506    \n 1507    /* Set interrupt mask */\n ....\n 1523    /* Set winterruptmask variable */\n 1524    winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \\\n 1525:     | USB_CNTR_ESOFM | USB_CNTR_RESETM;\n 1526    \n 1527    /* Clear interrupt mask */\n ....\n 1669        PCD_CLEAR_TX_DTOG(USBx, ep->num);\n 1670        \n 1671:       /* Reset value of the data toggle bits for the endpoint out*/\n 1672        PCD_TX_DTOG(USBx, ep->num);\n 1673        \n ....\n 1722        PCD_CLEAR_TX_DTOG(USBx, ep->num);\n 1723        \n 1724:       /* Reset value of the data toggle bits for the endpoint out*/\n 1725        PCD_TX_DTOG(USBx, ep->num);\n 1726        \n ....\n 1918  HAL_StatusTypeDef USB_StopDevice(USB_TypeDef *USBx)\n 1919  {\n 1920:   /* disable all interrupts and force USB reset */\n 1921    USBx->CNTR = USB_CNTR_FRES;\n 1922    \n ....\n 2163    */\n 2164  /**\n 2165:   * @brief  Reset the USB Core (needed after USB clock settings change)\n 2166    * @param  USBx : Selected device\n 2167    * @retval HAL status\n 2168    */\n 2169: static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)\n 2170  {\n 2171    uint32_t count = 0;\n ....\n 2181    while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0);\n 2182    \n 2183:   /* Core Soft Reset */\n 2184    count = 0;\n 2185    USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Inc\\Backup\\stm32f1xx_hal_conf.h.bak:\n  166  /* DP83848 PHY Address*/ \n  167  #define DP83848_PHY_ADDRESS             0x01\n  168: /* PHY Reset delay these values are based on a 1 ms Systick interrupt*/ \n  169: #define PHY_RESET_DELAY                 ((uint32_t)0x000000FF)\n  170  /* PHY Configuration delay */\n  171  #define PHY_CONFIG_DELAY                ((uint32_t)0x00000FFF)\n  ...\n  179  #define PHY_BSR                         ((uint16_t)0x01)    /*!< Transceiver Basic Status Register    */\n  180   \n  181: #define PHY_RESET                       ((uint16_t)0x8000)  /*!< PHY Reset */\n  182  #define PHY_LOOPBACK                    ((uint16_t)0x4000)  /*!< Select loop-back mode */\n  183  #define PHY_FULLDUPLEX_100M             ((uint16_t)0x2100)  /*!< Set the full-duplex mode at 100 Mb/s */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Inc\\stm32f1xx_hal_conf.h:\n  166  /* DP83848 PHY Address*/ \n  167  #define DP83848_PHY_ADDRESS             0x01\n  168: /* PHY Reset delay these values are based on a 1 ms Systick interrupt*/ \n  169: #define PHY_RESET_DELAY                 ((uint32_t)0x000000FF)\n  170  /* PHY Configuration delay */\n  171  #define PHY_CONFIG_DELAY                ((uint32_t)0x00000FFF)\n  ...\n  179  #define PHY_BSR                         ((uint16_t)0x01)    /*!< Transceiver Basic Status Register    */\n  180   \n  181: #define PHY_RESET                       ((uint16_t)0x8000)  /*!< PHY Reset */\n  182  #define PHY_LOOPBACK                    ((uint16_t)0x4000)  /*!< Select loop-back mode */\n  183  #define PHY_FULLDUPLEX_100M             ((uint16_t)0x2100)  /*!< Set the full-duplex mode at 100 Mb/s */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Middlewares\\ST\\STM32_USB_Device_Library\\Core\\Inc\\usbd_core.h:\n  103  USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata);\n  104  \n  105: USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev);\n  106  USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed);\n  107  USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev);\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Middlewares\\ST\\STM32_USB_Device_Library\\Core\\Src\\usbd_core.c:\n  407  \n  408  /**\n  409: * @brief  USBD_LL_Reset \n  410: *         Handle Reset event\n  411  * @param  pdev: device instance\n  412  * @retval status\n  413  */\n  414  \n  415: USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)\n  416  {\n  417    /* Open EP0 OUT */\n  ...\n  430    \n  431    pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;\n  432:   /* Upon Reset call user call back */\n  433    pdev->dev_state = USBD_STATE_DEFAULT;\n  434    \n  ...\n  444  \n  445  /**\n  446: * @brief  USBD_LL_Reset \n  447: *         Handle Reset event\n  448  * @param  pdev: device instance\n  449  * @retval status\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\Backup\\main.c.bak:\n   65  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);\n   66  //	  __nop();__nop();__nop();__nop();__nop();__nop();\n   67: 	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);\n   68  \n   69  	uint8_t i;\n   ..\n  112    /* MCU Configuration----------------------------------------------------------*/\n  113  \n  114:   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */\n  115    HAL_Init();\n  116  \n  ...\n  203    HAL_TIM_IC_Init(&htim1);\n  204  \n  205:   sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;\n  206    sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;\n  207    sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;\n  ...\n  209    HAL_TIM_SlaveConfigSynchronization(&htim1, &sSlaveConfig);\n  210  \n  211:   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;\n  212    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;\n  213    HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig);\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\Backup\\startup_stm32f10x_md.s.bak:\n    8    *            This module performs:\n    9    *                - Set the initial SP\n   10:   *                - Set the initial PC == Reset_Handler,\n   11    *                - Set the vector table entries with the exceptions ISR address\n   12    *                - Configure the clock system \n   13    *                - Branches to main in the C library (which eventually\n   14    *                  calls main()).\n   15:   *            After Reset the Cortex-M3 processor is in Thread mode,\n   16    *            priority is Privileged, and the Stack is set to Main.\n   17    ******************************************************************************\n   ..\n   52  /**\n   53   * @brief  This is the code that gets called when the processor first\n   54:  *          starts execution following a reset event. Only the absolutely\n   55   *          necessary set is performed, after which the application\n   56   *          supplied main() routine is called. \n   ..\n   59  */\n   60  \n   61:     .section	.text.Reset_Handler\n   62: 	.weak	Reset_Handler\n   63: 	.type	Reset_Handler, %function\n   64: Reset_Handler:	\n   65  \n   66  /* Copy the data segment initializers from flash to SRAM */  \n   ..\n   96  	bl	main\n   97  	bx	lr    \n   98: .size	Reset_Handler, .-Reset_Handler\n   99  \n  100  /**\n  ...\n  124  g_pfnVectors:\n  125  	.word	_eram\n  126: 	.word	Reset_Handler\n  127  	.word	NMI_Handler\n  128  	.word	HardFault_Handler\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\Backup\\usbd_conf.c.bak:\n  139  \n  140  /**\n  141:   * @brief  Reset callback.\n  142    * @param  hpcd: PCD handle\n  143    * @retval None\n  144    */\n  145: void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)\n  146  { \n  147    USBD_SpeedTypeDef speed = USBD_SPEED_FULL;\n  ...\n  160    USBD_LL_SetSpeed(hpcd->pData, speed);  \n  161    \n  162:   /*Reset Device*/\n  163:   USBD_LL_Reset(hpcd->pData);\n  164  }\n  165  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\main.c:\n   69  //	asm(\"NOP\");\n   70  //	asm(\"NOP\");\n   71: //	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);\n   72  //}\n   73  \n   ..\n   80  //	asm(\"NOP\");\n   81  //	asm(\"NOP\");\n   82: //	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);\n   83  \n   84  	uint8_t i;\n   ..\n  122  	/* MCU Configuration----------------------------------------------------------*/\n  123  \n  124: 	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */\n  125  	HAL_Init();\n  126  \n  ...\n  212  	HAL_TIM_IC_Init(&htim1);\n  213  \n  214: 	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;\n  215  	sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;\n  216  	sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;\n  ...\n  218  	HAL_TIM_SlaveConfigSynchronization(&htim1, &sSlaveConfig);\n  219  \n  220: 	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;\n  221  	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;\n  222  	HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig);\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\main.c.bak:\n   70    /* MCU Configuration----------------------------------------------------------*/\n   71  \n   72:   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */\n   73    HAL_Init();\n   74  \n   ..\n  156    HAL_TIM_IC_Init(&htim1);\n  157  \n  158:   sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;\n  159    sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;\n  160    sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;\n  ...\n  162    HAL_TIM_SlaveConfigSynchronization(&htim1, &sSlaveConfig);\n  163  \n  164:   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;\n  165    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;\n  166    HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig);\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\startup_stm32f10x_md.s:\n    8    *            This module performs:\n    9    *                - Set the initial SP\n   10:   *                - Set the initial PC == Reset_Handler,\n   11    *                - Set the vector table entries with the exceptions ISR address\n   12    *                - Configure the clock system \n   13    *                - Branches to main in the C library (which eventually\n   14    *                  calls main()).\n   15:   *            After Reset the Cortex-M3 processor is in Thread mode,\n   16    *            priority is Privileged, and the Stack is set to Main.\n   17    ******************************************************************************\n   ..\n   52  /**\n   53   * @brief  This is the code that gets called when the processor first\n   54:  *          starts execution following a reset event. Only the absolutely\n   55   *          necessary set is performed, after which the application\n   56   *          supplied main() routine is called. \n   ..\n   59  */\n   60  \n   61:     .section	.text.Reset_Handler\n   62: 	.weak	Reset_Handler\n   63: 	.type	Reset_Handler, %function\n   64: Reset_Handler:	\n   65  \n   66  /* Copy the data segment initializers from flash to SRAM */  \n   ..\n   96  	bl	main\n   97  	bx	lr    \n   98: .size	Reset_Handler, .-Reset_Handler\n   99  \n  100  /**\n  ...\n  124  g_pfnVectors:\n  125  	.word	_eram\n  126: 	.word	Reset_Handler\n  127  	.word	NMI_Handler\n  128  	.word	HardFault_Handler\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\usbd_conf.c:\n  156  \n  157  /**\n  158:   * @brief  Reset callback.\n  159    * @param  hpcd: PCD handle\n  160    * @retval None\n  161    */\n  162: void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)\n  163  { \n  164    USBD_SpeedTypeDef speed = USBD_SPEED_FULL;\n  ...\n  177    USBD_LL_SetSpeed(hpcd->pData, speed);  \n  178    \n  179:   /*Reset Device*/\n  180:   USBD_LL_Reset(hpcd->pData);\n  181  }\n  182  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\usbd_conf.c.bak:\n  139  \n  140  /**\n  141:   * @brief  Reset callback.\n  142    * @param  hpcd: PCD handle\n  143    * @retval None\n  144    */\n  145: void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)\n  146  { \n  147    USBD_SpeedTypeDef speed = USBD_SPEED_FULL;\n  ...\n  160    USBD_LL_SetSpeed(hpcd->pData, speed);  \n  161    \n  162:   /*Reset Device*/\n  163:   USBD_LL_Reset(hpcd->pData);\n  164  }\n  165  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\stm32_PPM_F103.coproj:\n   58        <Option name=\"org.coocox.codebugger.gdbjtag.core.userDefineGDBScript\" value=\"\"/>\n   59        <Option name=\"org.coocox.codebugger.gdbjtag.core.targetEndianess\" value=\"0\"/>\n   60:       <Option name=\"org.coocox.codebugger.gdbjtag.core.jlinkResetMode\" value=\"Type 0: Normal\"/>\n   61:       <Option name=\"org.coocox.codebugger.gdbjtag.core.resetMode\" value=\"SYSRESETREQ\"/>\n   62        <Option name=\"org.coocox.codebugger.gdbjtag.core.ifSemihost\" value=\"0\"/>\n   63        <Option name=\"org.coocox.codebugger.gdbjtag.core.ifCacheRom\" value=\"1\"/>\n\nD:\\WorkSTM32\\stm32_PPM_F103\\stm32_PPM_F103.ioc:\n   17  Mcu.Pin4=PA12\n   18  Mcu.Pin5=PB6\n   19: Mcu.Pin6=VP_TIM1_VS_ControllerModeReset\n   20  Mcu.Pin7=VP_TIM1_VS_ClockSourceINT\n   21  Mcu.Pin8=VP_USB_DEVICE_VS_USB_DEVICE_HID_FS\n   ..\n  104  VP_TIM1_VS_ClockSourceINT.Mode=Internal\n  105  VP_TIM1_VS_ClockSourceINT.Signal=TIM1_VS_ClockSourceINT\n  106: VP_TIM1_VS_ControllerModeReset.Mode=Reset Mode\n  107: VP_TIM1_VS_ControllerModeReset.Signal=TIM1_VS_ControllerModeReset\n  108  VP_USB_DEVICE_VS_USB_DEVICE_HID_FS.Mode=HID_FS\n  109  VP_USB_DEVICE_VS_USB_DEVICE_HID_FS.Signal=USB_DEVICE_VS_USB_DEVICE_HID_FS\n\nD:\\WorkSTM32\\stm32_PPM_F103\\stm32_PPM_F103.txt:\n    9  RCC	Crystal/Ceramic Resonator	RCC_OSC_IN	PD0-OSC_IN\n   10  RCC	Crystal/Ceramic Resonator	RCC_OSC_OUT	PD1-OSC_OUT\n   11: TIM1	Reset Mode	TIM1_VS_ControllerModeReset	VP_TIM1_VS_ControllerModeReset\n   12  TIM1	TI1FP1	TIM1_CH1	PA8\n   13  TIM1	Internal Clock	TIM1_VS_ClockSourceINT	VP_TIM1_VS_ClockSourceINT\n\nD:\\WorkSTM32\\stm32_PPM_F103\\stm32_PPM_F103\\Debug\\bin\\stm32_PPM_F103.elf:\n    <binary>\n\nD:\\WorkSTM32\\stm32_PPM_F103\\stm32_PPM_F103\\Debug\\bin\\stm32_PPM_F103.map:\n  168   .text.NVIC_DecodePriority\n  169                  0x00000000       0x68 ..\\obj\\stm32f1xx_hal_cortex.o\n  170:  .text.NVIC_SystemReset\n  171                  0x00000000       0x28 ..\\obj\\stm32f1xx_hal_cortex.o\n  172   .text.HAL_NVIC_DisableIRQ\n  173                  0x00000000       0x1c ..\\obj\\stm32f1xx_hal_cortex.o\n  174:  .text.HAL_NVIC_SystemReset\n  175                  0x00000000        0xc ..\\obj\\stm32f1xx_hal_cortex.o\n  176   .text.HAL_NVIC_GetPriorityGrouping\n  ...\n  240   .text.HAL_PCD_SOFCallback\n  241                  0x00000000       0x14 ..\\obj\\stm32f1xx_hal_pcd.o\n  242:  .text.HAL_PCD_ResetCallback\n  243                  0x00000000       0x14 ..\\obj\\stm32f1xx_hal_pcd.o\n  244   .text.HAL_PCD_SuspendCallback\n  ...\n  889   .text.USBD_HID_GetDeviceQualifierDesc\n  890                  0x0800207c       0x20 ..\\obj\\usbd_hid.o\n  891:  .text.Reset_Handler\n  892                  0x0800209c       0x4c ..\\obj\\startup_stm32f10x_md.o\n  893:                 0x0800209c                Reset_Handler\n  894   .text.Default_Handler\n  895                  0x080020e8        0x4 ..\\obj\\startup_stm32f10x_md.o\n  ...\n 1003                  0x08003180      0x120 ..\\obj\\usbd_core.o\n 1004                  0x08003180                USBD_LL_DataInStage\n 1005:  .text.USBD_LL_Reset\n 1006                  0x080032a0       0x60 ..\\obj\\usbd_core.o\n 1007:                 0x080032a0                USBD_LL_Reset\n 1008   .text.USBD_LL_SetSpeed\n 1009                  0x08003300       0x20 ..\\obj\\usbd_core.o\n ....\n 1123                  0x08004e38       0x1c ..\\obj\\usbd_conf.o\n 1124                  0x08004e38                HAL_PCD_SOFCallback\n 1125:  .text.HAL_PCD_ResetCallback\n 1126                  0x08004e54       0x44 ..\\obj\\usbd_conf.o\n 1127:                 0x08004e54                HAL_PCD_ResetCallback\n 1128   .text.HAL_PCD_SuspendCallback\n 1129                  0x08004e98       0x34 ..\\obj\\usbd_conf.o\n\nD:\\WorkSTM32\\stm32_PPM_F103\\TrueSTUDIO\\stm32_PPM_F103 Configuration\\STM32F103C8_FLASH.ld:\n   29  \n   30  /* Entry Point */\n   31: ENTRY(Reset_Handler)\n   32  \n   33  /* Highest address of the user mode stack */\n\n2649 matches across 71 files\n\n\nSearching 130 files for \"reset\" (whole word)\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f100xb.h:\n  398  \n  399  /** \n  400:   * @brief Reset and Clock Control\n  401    */\n  402  \n  ...\n  698  \n  699  /********************  Bit definition for CRC_CR register  ********************/\n  700: #define  CRC_CR_RESET                        ((uint32_t)0x00000001)        /*!< RESET bit */\n  701  \n  702  /******************************************************************************/\n  ...\n  794  /******************************************************************************/\n  795  /*                                                                            */\n  796: /*                         Reset and Clock Control                            */\n  797  /*                                                                            */\n  798  /******************************************************************************/\n  ...\n  944  \n  945  /*****************  Bit definition for RCC_APB2RSTR register  *****************/\n  946: #define  RCC_APB2RSTR_AFIORST                ((uint32_t)0x00000001)        /*!< Alternate Function I/O reset */\n  947: #define  RCC_APB2RSTR_IOPARST                ((uint32_t)0x00000004)        /*!< I/O port A reset */\n  948: #define  RCC_APB2RSTR_IOPBRST                ((uint32_t)0x00000008)        /*!< I/O port B reset */\n  949: #define  RCC_APB2RSTR_IOPCRST                ((uint32_t)0x00000010)        /*!< I/O port C reset */\n  950: #define  RCC_APB2RSTR_IOPDRST                ((uint32_t)0x00000020)        /*!< I/O port D reset */\n  951: #define  RCC_APB2RSTR_ADC1RST                ((uint32_t)0x00000200)        /*!< ADC 1 interface reset */\n  952  \n  953  \n  954: #define  RCC_APB2RSTR_TIM1RST                ((uint32_t)0x00000800)        /*!< TIM1 Timer reset */\n  955: #define  RCC_APB2RSTR_SPI1RST                ((uint32_t)0x00001000)        /*!< SPI 1 reset */\n  956: #define  RCC_APB2RSTR_USART1RST              ((uint32_t)0x00004000)        /*!< USART1 reset */\n  957  \n  958: #define  RCC_APB2RSTR_TIM15RST               ((uint32_t)0x00010000)        /*!< TIM15 Timer reset */\n  959: #define  RCC_APB2RSTR_TIM16RST               ((uint32_t)0x00020000)        /*!< TIM16 Timer reset */\n  960: #define  RCC_APB2RSTR_TIM17RST               ((uint32_t)0x00040000)        /*!< TIM17 Timer reset */\n  961  \n  962: #define  RCC_APB2RSTR_IOPERST               ((uint32_t)0x00000040)        /*!< I/O port E reset */\n  963  \n  964  \n  ...\n  966  \n  967  /*****************  Bit definition for RCC_APB1RSTR register  *****************/\n  968: #define  RCC_APB1RSTR_TIM2RST                ((uint32_t)0x00000001)        /*!< Timer 2 reset */\n  969: #define  RCC_APB1RSTR_TIM3RST                ((uint32_t)0x00000002)        /*!< Timer 3 reset */\n  970: #define  RCC_APB1RSTR_WWDGRST                ((uint32_t)0x00000800)        /*!< Window Watchdog reset */\n  971: #define  RCC_APB1RSTR_USART2RST              ((uint32_t)0x00020000)        /*!< USART 2 reset */\n  972: #define  RCC_APB1RSTR_I2C1RST                ((uint32_t)0x00200000)        /*!< I2C 1 reset */\n  973  \n  974  \n  975: #define  RCC_APB1RSTR_BKPRST                 ((uint32_t)0x08000000)        /*!< Backup interface reset */\n  976: #define  RCC_APB1RSTR_PWRRST                 ((uint32_t)0x10000000)        /*!< Power interface reset */\n  977  \n  978: #define  RCC_APB1RSTR_TIM4RST               ((uint32_t)0x00000004)        /*!< Timer 4 reset */\n  979: #define  RCC_APB1RSTR_SPI2RST               ((uint32_t)0x00004000)        /*!< SPI 2 reset */\n  980: #define  RCC_APB1RSTR_USART3RST             ((uint32_t)0x00040000)        /*!< USART 3 reset */\n  981: #define  RCC_APB1RSTR_I2C2RST               ((uint32_t)0x00400000)        /*!< I2C 2 reset */\n  982  \n  983  \n  984  \n  985: #define  RCC_APB1RSTR_TIM6RST                ((uint32_t)0x00000010)        /*!< Timer 6 reset */\n  986: #define  RCC_APB1RSTR_TIM7RST                ((uint32_t)0x00000020)        /*!< Timer 7 reset */\n  987: #define  RCC_APB1RSTR_CECRST                 ((uint32_t)0x40000000)        /*!< CEC interface reset */ \n  988  \n  989  \n  990  \n  991: #define  RCC_APB1RSTR_DACRST                 ((uint32_t)0x20000000)        /*!< DAC interface reset */\n  992  \n  993  /******************  Bit definition for RCC_AHBENR register  ******************/\n  ...\n 1064  \n 1065  #define  RCC_BDCR_RTCEN                      ((uint32_t)0x00008000)        /*!< RTC clock enable */\n 1066: #define  RCC_BDCR_BDRST                      ((uint32_t)0x00010000)        /*!< Backup domain software reset  */\n 1067  \n 1068  /*******************  Bit definition for RCC_CSR register  ********************/  \n 1069  #define  RCC_CSR_LSION                       ((uint32_t)0x00000001)        /*!< Internal Low Speed oscillator enable */\n 1070  #define  RCC_CSR_LSIRDY                      ((uint32_t)0x00000002)        /*!< Internal Low Speed oscillator Ready */\n 1071: #define  RCC_CSR_RMVF                        ((uint32_t)0x01000000)        /*!< Remove reset flag */\n 1072: #define  RCC_CSR_PINRSTF                     ((uint32_t)0x04000000)        /*!< PIN reset flag */\n 1073: #define  RCC_CSR_PORRSTF                     ((uint32_t)0x08000000)        /*!< POR/PDR reset flag */\n 1074: #define  RCC_CSR_SFTRSTF                     ((uint32_t)0x10000000)        /*!< Software Reset flag */\n 1075: #define  RCC_CSR_IWDGRSTF                    ((uint32_t)0x20000000)        /*!< Independent Watchdog reset flag */\n 1076: #define  RCC_CSR_WWDGRSTF                    ((uint32_t)0x40000000)        /*!< Window watchdog reset flag */\n 1077: #define  RCC_CSR_LPWRRSTF                    ((uint32_t)0x80000000)        /*!< Low-Power reset flag */\n 1078  \n 1079  \n ....\n 1301  #define GPIO_BSRR_BS15                       ((uint32_t)0x00008000)        /*!< Port x Set bit 15 */\n 1302  \n 1303: #define GPIO_BSRR_BR0                        ((uint32_t)0x00010000)        /*!< Port x Reset bit 0 */\n 1304: #define GPIO_BSRR_BR1                        ((uint32_t)0x00020000)        /*!< Port x Reset bit 1 */\n 1305: #define GPIO_BSRR_BR2                        ((uint32_t)0x00040000)        /*!< Port x Reset bit 2 */\n 1306: #define GPIO_BSRR_BR3                        ((uint32_t)0x00080000)        /*!< Port x Reset bit 3 */\n 1307: #define GPIO_BSRR_BR4                        ((uint32_t)0x00100000)        /*!< Port x Reset bit 4 */\n 1308: #define GPIO_BSRR_BR5                        ((uint32_t)0x00200000)        /*!< Port x Reset bit 5 */\n 1309: #define GPIO_BSRR_BR6                        ((uint32_t)0x00400000)        /*!< Port x Reset bit 6 */\n 1310: #define GPIO_BSRR_BR7                        ((uint32_t)0x00800000)        /*!< Port x Reset bit 7 */\n 1311: #define GPIO_BSRR_BR8                        ((uint32_t)0x01000000)        /*!< Port x Reset bit 8 */\n 1312: #define GPIO_BSRR_BR9                        ((uint32_t)0x02000000)        /*!< Port x Reset bit 9 */\n 1313: #define GPIO_BSRR_BR10                       ((uint32_t)0x04000000)        /*!< Port x Reset bit 10 */\n 1314: #define GPIO_BSRR_BR11                       ((uint32_t)0x08000000)        /*!< Port x Reset bit 11 */\n 1315: #define GPIO_BSRR_BR12                       ((uint32_t)0x10000000)        /*!< Port x Reset bit 12 */\n 1316: #define GPIO_BSRR_BR13                       ((uint32_t)0x20000000)        /*!< Port x Reset bit 13 */\n 1317: #define GPIO_BSRR_BR14                       ((uint32_t)0x40000000)        /*!< Port x Reset bit 14 */\n 1318: #define GPIO_BSRR_BR15                       ((uint32_t)0x80000000)        /*!< Port x Reset bit 15 */\n 1319  \n 1320  /*******************  Bit definition for GPIO_BRR register  *******************/\n 1321: #define GPIO_BRR_BR0                         ((uint32_t)0x0001)            /*!< Port x Reset bit 0 */\n 1322: #define GPIO_BRR_BR1                         ((uint32_t)0x0002)            /*!< Port x Reset bit 1 */\n 1323: #define GPIO_BRR_BR2                         ((uint32_t)0x0004)            /*!< Port x Reset bit 2 */\n 1324: #define GPIO_BRR_BR3                         ((uint32_t)0x0008)            /*!< Port x Reset bit 3 */\n 1325: #define GPIO_BRR_BR4                         ((uint32_t)0x0010)            /*!< Port x Reset bit 4 */\n 1326: #define GPIO_BRR_BR5                         ((uint32_t)0x0020)            /*!< Port x Reset bit 5 */\n 1327: #define GPIO_BRR_BR6                         ((uint32_t)0x0040)            /*!< Port x Reset bit 6 */\n 1328: #define GPIO_BRR_BR7                         ((uint32_t)0x0080)            /*!< Port x Reset bit 7 */\n 1329: #define GPIO_BRR_BR8                         ((uint32_t)0x0100)            /*!< Port x Reset bit 8 */\n 1330: #define GPIO_BRR_BR9                         ((uint32_t)0x0200)            /*!< Port x Reset bit 9 */\n 1331: #define GPIO_BRR_BR10                        ((uint32_t)0x0400)            /*!< Port x Reset bit 10 */\n 1332: #define GPIO_BRR_BR11                        ((uint32_t)0x0800)            /*!< Port x Reset bit 11 */\n 1333: #define GPIO_BRR_BR12                        ((uint32_t)0x1000)            /*!< Port x Reset bit 12 */\n 1334: #define GPIO_BRR_BR13                        ((uint32_t)0x2000)            /*!< Port x Reset bit 13 */\n 1335: #define GPIO_BRR_BR14                        ((uint32_t)0x4000)            /*!< Port x Reset bit 14 */\n 1336: #define GPIO_BRR_BR15                        ((uint32_t)0x8000)            /*!< Port x Reset bit 15 */\n 1337  \n 1338  /******************  Bit definition for GPIO_LCKR register  *******************/\n ....\n 1450  #define AFIO_MAPR_SWJ_CFG_2                  ((uint32_t)0x04000000)        /*!< Bit 2 */\n 1451  \n 1452: #define AFIO_MAPR_SWJ_CFG_RESET              ((uint32_t)0x00000000)        /*!< Full SWJ (JTAG-DP + SW-DP) : Reset State */\n 1453  #define AFIO_MAPR_SWJ_CFG_NOJNTRST           ((uint32_t)0x01000000)        /*!< Full SWJ (JTAG-DP + SW-DP) but without JNTRST */\n 1454  #define AFIO_MAPR_SWJ_CFG_JTAGDISABLE        ((uint32_t)0x02000000)        /*!< JTAG-DP Disabled and SW-DP Enabled */\n ....\n 1910  \n 1911  /*!<*****************  Bit definition for SCB_AIRCR register  *******************/\n 1912: #define  SCB_AIRCR_VECTRESET                 ((uint32_t)0x00000001)        /*!< System Reset bit */\n 1913  #define  SCB_AIRCR_VECTCLRACTIVE             ((uint32_t)0x00000002)        /*!< Clear active vector bit */\n 1914: #define  SCB_AIRCR_SYSRESETREQ               ((uint32_t)0x00000004)        /*!< Requests chip control logic to generate a reset */\n 1915  \n 1916  #define  SCB_AIRCR_PRIGROUP                  ((uint32_t)0x00000700)        /*!< PRIGROUP[2:0] bits (Priority group) */\n ....\n 2290  #define  ADC_CR2_CONT                        ((uint32_t)0x00000002)        /*!< Continuous Conversion */\n 2291  #define  ADC_CR2_CAL                         ((uint32_t)0x00000004)        /*!< A/D Calibration */\n 2292: #define  ADC_CR2_RSTCAL                      ((uint32_t)0x00000008)        /*!< Reset Calibration */\n 2293  #define  ADC_CR2_DMA                         ((uint32_t)0x00000100)        /*!< Direct Memory access mode */\n 2294  #define  ADC_CR2_ALIGN                       ((uint32_t)0x00000800)        /*!< Data Alignment */\n ....\n 3368  #define  I2C_CR1_PEC                         ((uint32_t)0x00001000)        /*!< Packet Error Checking */\n 3369  #define  I2C_CR1_ALERT                       ((uint32_t)0x00002000)        /*!< SMBus Alert */\n 3370: #define  I2C_CR1_SWRST                       ((uint32_t)0x00008000)        /*!< Software Reset */\n 3371  \n 3372  /*******************  Bit definition for I2C_CR2 register  ********************/\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f100xe.h:\n  464  \n  465  /** \n  466:   * @brief Reset and Clock Control\n  467    */\n  468  \n  ...\n  807  \n  808  /********************  Bit definition for CRC_CR register  ********************/\n  809: #define  CRC_CR_RESET                        ((uint32_t)0x00000001)        /*!< RESET bit */\n  810  \n  811  /******************************************************************************/\n  ...\n  999  /******************************************************************************/\n 1000  /*                                                                            */\n 1001: /*                         Reset and Clock Control                            */\n 1002  /*                                                                            */\n 1003  /******************************************************************************/\n ....\n 1149  \n 1150  /*****************  Bit definition for RCC_APB2RSTR register  *****************/\n 1151: #define  RCC_APB2RSTR_AFIORST                ((uint32_t)0x00000001)        /*!< Alternate Function I/O reset */\n 1152: #define  RCC_APB2RSTR_IOPARST                ((uint32_t)0x00000004)        /*!< I/O port A reset */\n 1153: #define  RCC_APB2RSTR_IOPBRST                ((uint32_t)0x00000008)        /*!< I/O port B reset */\n 1154: #define  RCC_APB2RSTR_IOPCRST                ((uint32_t)0x00000010)        /*!< I/O port C reset */\n 1155: #define  RCC_APB2RSTR_IOPDRST                ((uint32_t)0x00000020)        /*!< I/O port D reset */\n 1156: #define  RCC_APB2RSTR_ADC1RST                ((uint32_t)0x00000200)        /*!< ADC 1 interface reset */\n 1157  \n 1158  \n 1159: #define  RCC_APB2RSTR_TIM1RST                ((uint32_t)0x00000800)        /*!< TIM1 Timer reset */\n 1160: #define  RCC_APB2RSTR_SPI1RST                ((uint32_t)0x00001000)        /*!< SPI 1 reset */\n 1161: #define  RCC_APB2RSTR_USART1RST              ((uint32_t)0x00004000)        /*!< USART1 reset */\n 1162  \n 1163: #define  RCC_APB2RSTR_TIM15RST               ((uint32_t)0x00010000)        /*!< TIM15 Timer reset */\n 1164: #define  RCC_APB2RSTR_TIM16RST               ((uint32_t)0x00020000)        /*!< TIM16 Timer reset */\n 1165: #define  RCC_APB2RSTR_TIM17RST               ((uint32_t)0x00040000)        /*!< TIM17 Timer reset */\n 1166  \n 1167: #define  RCC_APB2RSTR_IOPERST               ((uint32_t)0x00000040)        /*!< I/O port E reset */\n 1168  \n 1169  \n 1170: #define  RCC_APB2RSTR_IOPFRST               ((uint32_t)0x00000080)        /*!< I/O port F reset */\n 1171: #define  RCC_APB2RSTR_IOPGRST               ((uint32_t)0x00000100)        /*!< I/O port G reset */\n 1172  \n 1173  \n 1174  /*****************  Bit definition for RCC_APB1RSTR register  *****************/\n 1175: #define  RCC_APB1RSTR_TIM2RST                ((uint32_t)0x00000001)        /*!< Timer 2 reset */\n 1176: #define  RCC_APB1RSTR_TIM3RST                ((uint32_t)0x00000002)        /*!< Timer 3 reset */\n 1177: #define  RCC_APB1RSTR_WWDGRST                ((uint32_t)0x00000800)        /*!< Window Watchdog reset */\n 1178: #define  RCC_APB1RSTR_USART2RST              ((uint32_t)0x00020000)        /*!< USART 2 reset */\n 1179: #define  RCC_APB1RSTR_I2C1RST                ((uint32_t)0x00200000)        /*!< I2C 1 reset */\n 1180  \n 1181  \n 1182: #define  RCC_APB1RSTR_BKPRST                 ((uint32_t)0x08000000)        /*!< Backup interface reset */\n 1183: #define  RCC_APB1RSTR_PWRRST                 ((uint32_t)0x10000000)        /*!< Power interface reset */\n 1184  \n 1185: #define  RCC_APB1RSTR_TIM4RST               ((uint32_t)0x00000004)        /*!< Timer 4 reset */\n 1186: #define  RCC_APB1RSTR_SPI2RST               ((uint32_t)0x00004000)        /*!< SPI 2 reset */\n 1187: #define  RCC_APB1RSTR_USART3RST             ((uint32_t)0x00040000)        /*!< USART 3 reset */\n 1188: #define  RCC_APB1RSTR_I2C2RST               ((uint32_t)0x00400000)        /*!< I2C 2 reset */\n 1189  \n 1190  \n 1191  \n 1192: #define  RCC_APB1RSTR_TIM6RST                ((uint32_t)0x00000010)        /*!< Timer 6 reset */\n 1193: #define  RCC_APB1RSTR_TIM7RST                ((uint32_t)0x00000020)        /*!< Timer 7 reset */\n 1194: #define  RCC_APB1RSTR_CECRST                 ((uint32_t)0x40000000)        /*!< CEC interface reset */ \n 1195  \n 1196: #define  RCC_APB1RSTR_TIM5RST                ((uint32_t)0x00000008)        /*!< Timer 5 reset */\n 1197: #define  RCC_APB1RSTR_TIM12RST               ((uint32_t)0x00000040)        /*!< TIM12 Timer reset */\n 1198: #define  RCC_APB1RSTR_TIM13RST               ((uint32_t)0x00000080)        /*!< TIM13 Timer reset */\n 1199: #define  RCC_APB1RSTR_TIM14RST               ((uint32_t)0x00000100)        /*!< TIM14 Timer reset */\n 1200: #define  RCC_APB1RSTR_SPI3RST                ((uint32_t)0x00008000)        /*!< SPI 3 reset */ \n 1201: #define  RCC_APB1RSTR_UART4RST               ((uint32_t)0x00080000)        /*!< UART 4 reset */\n 1202: #define  RCC_APB1RSTR_UART5RST               ((uint32_t)0x00100000)        /*!< UART 5 reset */ \n 1203  \n 1204  \n 1205: #define  RCC_APB1RSTR_DACRST                 ((uint32_t)0x20000000)        /*!< DAC interface reset */\n 1206  \n 1207  /******************  Bit definition for RCC_AHBENR register  ******************/\n ....\n 1289  \n 1290  #define  RCC_BDCR_RTCEN                      ((uint32_t)0x00008000)        /*!< RTC clock enable */\n 1291: #define  RCC_BDCR_BDRST                      ((uint32_t)0x00010000)        /*!< Backup domain software reset  */\n 1292  \n 1293  /*******************  Bit definition for RCC_CSR register  ********************/  \n 1294  #define  RCC_CSR_LSION                       ((uint32_t)0x00000001)        /*!< Internal Low Speed oscillator enable */\n 1295  #define  RCC_CSR_LSIRDY                      ((uint32_t)0x00000002)        /*!< Internal Low Speed oscillator Ready */\n 1296: #define  RCC_CSR_RMVF                        ((uint32_t)0x01000000)        /*!< Remove reset flag */\n 1297: #define  RCC_CSR_PINRSTF                     ((uint32_t)0x04000000)        /*!< PIN reset flag */\n 1298: #define  RCC_CSR_PORRSTF                     ((uint32_t)0x08000000)        /*!< POR/PDR reset flag */\n 1299: #define  RCC_CSR_SFTRSTF                     ((uint32_t)0x10000000)        /*!< Software Reset flag */\n 1300: #define  RCC_CSR_IWDGRSTF                    ((uint32_t)0x20000000)        /*!< Independent Watchdog reset flag */\n 1301: #define  RCC_CSR_WWDGRSTF                    ((uint32_t)0x40000000)        /*!< Window watchdog reset flag */\n 1302: #define  RCC_CSR_LPWRRSTF                    ((uint32_t)0x80000000)        /*!< Low-Power reset flag */\n 1303  \n 1304  \n ....\n 1526  #define GPIO_BSRR_BS15                       ((uint32_t)0x00008000)        /*!< Port x Set bit 15 */\n 1527  \n 1528: #define GPIO_BSRR_BR0                        ((uint32_t)0x00010000)        /*!< Port x Reset bit 0 */\n 1529: #define GPIO_BSRR_BR1                        ((uint32_t)0x00020000)        /*!< Port x Reset bit 1 */\n 1530: #define GPIO_BSRR_BR2                        ((uint32_t)0x00040000)        /*!< Port x Reset bit 2 */\n 1531: #define GPIO_BSRR_BR3                        ((uint32_t)0x00080000)        /*!< Port x Reset bit 3 */\n 1532: #define GPIO_BSRR_BR4                        ((uint32_t)0x00100000)        /*!< Port x Reset bit 4 */\n 1533: #define GPIO_BSRR_BR5                        ((uint32_t)0x00200000)        /*!< Port x Reset bit 5 */\n 1534: #define GPIO_BSRR_BR6                        ((uint32_t)0x00400000)        /*!< Port x Reset bit 6 */\n 1535: #define GPIO_BSRR_BR7                        ((uint32_t)0x00800000)        /*!< Port x Reset bit 7 */\n 1536: #define GPIO_BSRR_BR8                        ((uint32_t)0x01000000)        /*!< Port x Reset bit 8 */\n 1537: #define GPIO_BSRR_BR9                        ((uint32_t)0x02000000)        /*!< Port x Reset bit 9 */\n 1538: #define GPIO_BSRR_BR10                       ((uint32_t)0x04000000)        /*!< Port x Reset bit 10 */\n 1539: #define GPIO_BSRR_BR11                       ((uint32_t)0x08000000)        /*!< Port x Reset bit 11 */\n 1540: #define GPIO_BSRR_BR12                       ((uint32_t)0x10000000)        /*!< Port x Reset bit 12 */\n 1541: #define GPIO_BSRR_BR13                       ((uint32_t)0x20000000)        /*!< Port x Reset bit 13 */\n 1542: #define GPIO_BSRR_BR14                       ((uint32_t)0x40000000)        /*!< Port x Reset bit 14 */\n 1543: #define GPIO_BSRR_BR15                       ((uint32_t)0x80000000)        /*!< Port x Reset bit 15 */\n 1544  \n 1545  /*******************  Bit definition for GPIO_BRR register  *******************/\n 1546: #define GPIO_BRR_BR0                         ((uint32_t)0x0001)            /*!< Port x Reset bit 0 */\n 1547: #define GPIO_BRR_BR1                         ((uint32_t)0x0002)            /*!< Port x Reset bit 1 */\n 1548: #define GPIO_BRR_BR2                         ((uint32_t)0x0004)            /*!< Port x Reset bit 2 */\n 1549: #define GPIO_BRR_BR3                         ((uint32_t)0x0008)            /*!< Port x Reset bit 3 */\n 1550: #define GPIO_BRR_BR4                         ((uint32_t)0x0010)            /*!< Port x Reset bit 4 */\n 1551: #define GPIO_BRR_BR5                         ((uint32_t)0x0020)            /*!< Port x Reset bit 5 */\n 1552: #define GPIO_BRR_BR6                         ((uint32_t)0x0040)            /*!< Port x Reset bit 6 */\n 1553: #define GPIO_BRR_BR7                         ((uint32_t)0x0080)            /*!< Port x Reset bit 7 */\n 1554: #define GPIO_BRR_BR8                         ((uint32_t)0x0100)            /*!< Port x Reset bit 8 */\n 1555: #define GPIO_BRR_BR9                         ((uint32_t)0x0200)            /*!< Port x Reset bit 9 */\n 1556: #define GPIO_BRR_BR10                        ((uint32_t)0x0400)            /*!< Port x Reset bit 10 */\n 1557: #define GPIO_BRR_BR11                        ((uint32_t)0x0800)            /*!< Port x Reset bit 11 */\n 1558: #define GPIO_BRR_BR12                        ((uint32_t)0x1000)            /*!< Port x Reset bit 12 */\n 1559: #define GPIO_BRR_BR13                        ((uint32_t)0x2000)            /*!< Port x Reset bit 13 */\n 1560: #define GPIO_BRR_BR14                        ((uint32_t)0x4000)            /*!< Port x Reset bit 14 */\n 1561: #define GPIO_BRR_BR15                        ((uint32_t)0x8000)            /*!< Port x Reset bit 15 */\n 1562  \n 1563  /******************  Bit definition for GPIO_LCKR register  *******************/\n ....\n 1676  #define AFIO_MAPR_SWJ_CFG_2                  ((uint32_t)0x04000000)        /*!< Bit 2 */\n 1677  \n 1678: #define AFIO_MAPR_SWJ_CFG_RESET              ((uint32_t)0x00000000)        /*!< Full SWJ (JTAG-DP + SW-DP) : Reset State */\n 1679  #define AFIO_MAPR_SWJ_CFG_NOJNTRST           ((uint32_t)0x01000000)        /*!< Full SWJ (JTAG-DP + SW-DP) but without JNTRST */\n 1680  #define AFIO_MAPR_SWJ_CFG_JTAGDISABLE        ((uint32_t)0x02000000)        /*!< JTAG-DP Disabled and SW-DP Enabled */\n ....\n 2141  \n 2142  /*!<*****************  Bit definition for SCB_AIRCR register  *******************/\n 2143: #define  SCB_AIRCR_VECTRESET                 ((uint32_t)0x00000001)        /*!< System Reset bit */\n 2144  #define  SCB_AIRCR_VECTCLRACTIVE             ((uint32_t)0x00000002)        /*!< Clear active vector bit */\n 2145: #define  SCB_AIRCR_SYSRESETREQ               ((uint32_t)0x00000004)        /*!< Requests chip control logic to generate a reset */\n 2146  \n 2147  #define  SCB_AIRCR_PRIGROUP                  ((uint32_t)0x00000700)        /*!< PRIGROUP[2:0] bits (Priority group) */\n ....\n 2521  #define  ADC_CR2_CONT                        ((uint32_t)0x00000002)        /*!< Continuous Conversion */\n 2522  #define  ADC_CR2_CAL                         ((uint32_t)0x00000004)        /*!< A/D Calibration */\n 2523: #define  ADC_CR2_RSTCAL                      ((uint32_t)0x00000008)        /*!< Reset Calibration */\n 2524  #define  ADC_CR2_DMA                         ((uint32_t)0x00000100)        /*!< Direct Memory access mode */\n 2525  #define  ADC_CR2_ALIGN                       ((uint32_t)0x00000800)        /*!< Data Alignment */\n ....\n 3712  #define  I2C_CR1_PEC                         ((uint32_t)0x00001000)        /*!< Packet Error Checking */\n 3713  #define  I2C_CR1_ALERT                       ((uint32_t)0x00002000)        /*!< SMBus Alert */\n 3714: #define  I2C_CR1_SWRST                       ((uint32_t)0x00008000)        /*!< Software Reset */\n 3715  \n 3716  /*******************  Bit definition for I2C_CR2 register  ********************/\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f101x6.h:\n  351  \n  352  /** \n  353:   * @brief Reset and Clock Control\n  354    */\n  355  \n  ...\n  624  \n  625  /********************  Bit definition for CRC_CR register  ********************/\n  626: #define  CRC_CR_RESET                        ((uint32_t)0x00000001)        /*!< RESET bit */\n  627  \n  628  /******************************************************************************/\n  ...\n  720  /******************************************************************************/\n  721  /*                                                                            */\n  722: /*                         Reset and Clock Control                            */\n  723  /*                                                                            */\n  724  /******************************************************************************/\n  ...\n  870  \n  871  /*****************  Bit definition for RCC_APB2RSTR register  *****************/\n  872: #define  RCC_APB2RSTR_AFIORST                ((uint32_t)0x00000001)        /*!< Alternate Function I/O reset */\n  873: #define  RCC_APB2RSTR_IOPARST                ((uint32_t)0x00000004)        /*!< I/O port A reset */\n  874: #define  RCC_APB2RSTR_IOPBRST                ((uint32_t)0x00000008)        /*!< I/O port B reset */\n  875: #define  RCC_APB2RSTR_IOPCRST                ((uint32_t)0x00000010)        /*!< I/O port C reset */\n  876: #define  RCC_APB2RSTR_IOPDRST                ((uint32_t)0x00000020)        /*!< I/O port D reset */\n  877: #define  RCC_APB2RSTR_ADC1RST                ((uint32_t)0x00000200)        /*!< ADC 1 interface reset */\n  878  \n  879  \n  880: #define  RCC_APB2RSTR_TIM1RST                ((uint32_t)0x00000800)        /*!< TIM1 Timer reset */\n  881: #define  RCC_APB2RSTR_SPI1RST                ((uint32_t)0x00001000)        /*!< SPI 1 reset */\n  882: #define  RCC_APB2RSTR_USART1RST              ((uint32_t)0x00004000)        /*!< USART1 reset */\n  883  \n  884  \n  ...\n  888  \n  889  /*****************  Bit definition for RCC_APB1RSTR register  *****************/\n  890: #define  RCC_APB1RSTR_TIM2RST                ((uint32_t)0x00000001)        /*!< Timer 2 reset */\n  891: #define  RCC_APB1RSTR_TIM3RST                ((uint32_t)0x00000002)        /*!< Timer 3 reset */\n  892: #define  RCC_APB1RSTR_WWDGRST                ((uint32_t)0x00000800)        /*!< Window Watchdog reset */\n  893: #define  RCC_APB1RSTR_USART2RST              ((uint32_t)0x00020000)        /*!< USART 2 reset */\n  894: #define  RCC_APB1RSTR_I2C1RST                ((uint32_t)0x00200000)        /*!< I2C 1 reset */\n  895  \n  896  \n  897: #define  RCC_APB1RSTR_BKPRST                 ((uint32_t)0x08000000)        /*!< Backup interface reset */\n  898: #define  RCC_APB1RSTR_PWRRST                 ((uint32_t)0x10000000)        /*!< Power interface reset */\n  899  \n  900  \n  ...\n  966  \n  967  #define  RCC_BDCR_RTCEN                      ((uint32_t)0x00008000)        /*!< RTC clock enable */\n  968: #define  RCC_BDCR_BDRST                      ((uint32_t)0x00010000)        /*!< Backup domain software reset  */\n  969  \n  970  /*******************  Bit definition for RCC_CSR register  ********************/  \n  971  #define  RCC_CSR_LSION                       ((uint32_t)0x00000001)        /*!< Internal Low Speed oscillator enable */\n  972  #define  RCC_CSR_LSIRDY                      ((uint32_t)0x00000002)        /*!< Internal Low Speed oscillator Ready */\n  973: #define  RCC_CSR_RMVF                        ((uint32_t)0x01000000)        /*!< Remove reset flag */\n  974: #define  RCC_CSR_PINRSTF                     ((uint32_t)0x04000000)        /*!< PIN reset flag */\n  975: #define  RCC_CSR_PORRSTF                     ((uint32_t)0x08000000)        /*!< POR/PDR reset flag */\n  976: #define  RCC_CSR_SFTRSTF                     ((uint32_t)0x10000000)        /*!< Software Reset flag */\n  977: #define  RCC_CSR_IWDGRSTF                    ((uint32_t)0x20000000)        /*!< Independent Watchdog reset flag */\n  978: #define  RCC_CSR_WWDGRSTF                    ((uint32_t)0x40000000)        /*!< Window watchdog reset flag */\n  979: #define  RCC_CSR_LPWRRSTF                    ((uint32_t)0x80000000)        /*!< Low-Power reset flag */\n  980  \n  981  \n  ...\n 1179  #define GPIO_BSRR_BS15                       ((uint32_t)0x00008000)        /*!< Port x Set bit 15 */\n 1180  \n 1181: #define GPIO_BSRR_BR0                        ((uint32_t)0x00010000)        /*!< Port x Reset bit 0 */\n 1182: #define GPIO_BSRR_BR1                        ((uint32_t)0x00020000)        /*!< Port x Reset bit 1 */\n 1183: #define GPIO_BSRR_BR2                        ((uint32_t)0x00040000)        /*!< Port x Reset bit 2 */\n 1184: #define GPIO_BSRR_BR3                        ((uint32_t)0x00080000)        /*!< Port x Reset bit 3 */\n 1185: #define GPIO_BSRR_BR4                        ((uint32_t)0x00100000)        /*!< Port x Reset bit 4 */\n 1186: #define GPIO_BSRR_BR5                        ((uint32_t)0x00200000)        /*!< Port x Reset bit 5 */\n 1187: #define GPIO_BSRR_BR6                        ((uint32_t)0x00400000)        /*!< Port x Reset bit 6 */\n 1188: #define GPIO_BSRR_BR7                        ((uint32_t)0x00800000)        /*!< Port x Reset bit 7 */\n 1189: #define GPIO_BSRR_BR8                        ((uint32_t)0x01000000)        /*!< Port x Reset bit 8 */\n 1190: #define GPIO_BSRR_BR9                        ((uint32_t)0x02000000)        /*!< Port x Reset bit 9 */\n 1191: #define GPIO_BSRR_BR10                       ((uint32_t)0x04000000)        /*!< Port x Reset bit 10 */\n 1192: #define GPIO_BSRR_BR11                       ((uint32_t)0x08000000)        /*!< Port x Reset bit 11 */\n 1193: #define GPIO_BSRR_BR12                       ((uint32_t)0x10000000)        /*!< Port x Reset bit 12 */\n 1194: #define GPIO_BSRR_BR13                       ((uint32_t)0x20000000)        /*!< Port x Reset bit 13 */\n 1195: #define GPIO_BSRR_BR14                       ((uint32_t)0x40000000)        /*!< Port x Reset bit 14 */\n 1196: #define GPIO_BSRR_BR15                       ((uint32_t)0x80000000)        /*!< Port x Reset bit 15 */\n 1197  \n 1198  /*******************  Bit definition for GPIO_BRR register  *******************/\n 1199: #define GPIO_BRR_BR0                         ((uint32_t)0x0001)            /*!< Port x Reset bit 0 */\n 1200: #define GPIO_BRR_BR1                         ((uint32_t)0x0002)            /*!< Port x Reset bit 1 */\n 1201: #define GPIO_BRR_BR2                         ((uint32_t)0x0004)            /*!< Port x Reset bit 2 */\n 1202: #define GPIO_BRR_BR3                         ((uint32_t)0x0008)            /*!< Port x Reset bit 3 */\n 1203: #define GPIO_BRR_BR4                         ((uint32_t)0x0010)            /*!< Port x Reset bit 4 */\n 1204: #define GPIO_BRR_BR5                         ((uint32_t)0x0020)            /*!< Port x Reset bit 5 */\n 1205: #define GPIO_BRR_BR6                         ((uint32_t)0x0040)            /*!< Port x Reset bit 6 */\n 1206: #define GPIO_BRR_BR7                         ((uint32_t)0x0080)            /*!< Port x Reset bit 7 */\n 1207: #define GPIO_BRR_BR8                         ((uint32_t)0x0100)            /*!< Port x Reset bit 8 */\n 1208: #define GPIO_BRR_BR9                         ((uint32_t)0x0200)            /*!< Port x Reset bit 9 */\n 1209: #define GPIO_BRR_BR10                        ((uint32_t)0x0400)            /*!< Port x Reset bit 10 */\n 1210: #define GPIO_BRR_BR11                        ((uint32_t)0x0800)            /*!< Port x Reset bit 11 */\n 1211: #define GPIO_BRR_BR12                        ((uint32_t)0x1000)            /*!< Port x Reset bit 12 */\n 1212: #define GPIO_BRR_BR13                        ((uint32_t)0x2000)            /*!< Port x Reset bit 13 */\n 1213: #define GPIO_BRR_BR14                        ((uint32_t)0x4000)            /*!< Port x Reset bit 14 */\n 1214: #define GPIO_BRR_BR15                        ((uint32_t)0x8000)            /*!< Port x Reset bit 15 */\n 1215  \n 1216  /******************  Bit definition for GPIO_LCKR register  *******************/\n ....\n 1319  #define AFIO_MAPR_SWJ_CFG_2                  ((uint32_t)0x04000000)        /*!< Bit 2 */\n 1320  \n 1321: #define AFIO_MAPR_SWJ_CFG_RESET              ((uint32_t)0x00000000)        /*!< Full SWJ (JTAG-DP + SW-DP) : Reset State */\n 1322  #define AFIO_MAPR_SWJ_CFG_NOJNTRST           ((uint32_t)0x01000000)        /*!< Full SWJ (JTAG-DP + SW-DP) but without JNTRST */\n 1323  #define AFIO_MAPR_SWJ_CFG_JTAGDISABLE        ((uint32_t)0x02000000)        /*!< JTAG-DP Disabled and SW-DP Enabled */\n ....\n 1773  \n 1774  /*!<*****************  Bit definition for SCB_AIRCR register  *******************/\n 1775: #define  SCB_AIRCR_VECTRESET                 ((uint32_t)0x00000001)        /*!< System Reset bit */\n 1776  #define  SCB_AIRCR_VECTCLRACTIVE             ((uint32_t)0x00000002)        /*!< Clear active vector bit */\n 1777: #define  SCB_AIRCR_SYSRESETREQ               ((uint32_t)0x00000004)        /*!< Requests chip control logic to generate a reset */\n 1778  \n 1779  #define  SCB_AIRCR_PRIGROUP                  ((uint32_t)0x00000700)        /*!< PRIGROUP[2:0] bits (Priority group) */\n ....\n 2153  #define  ADC_CR2_CONT                        ((uint32_t)0x00000002)        /*!< Continuous Conversion */\n 2154  #define  ADC_CR2_CAL                         ((uint32_t)0x00000004)        /*!< A/D Calibration */\n 2155: #define  ADC_CR2_RSTCAL                      ((uint32_t)0x00000008)        /*!< Reset Calibration */\n 2156  #define  ADC_CR2_DMA                         ((uint32_t)0x00000100)        /*!< Direct Memory access mode */\n 2157  #define  ADC_CR2_ALIGN                       ((uint32_t)0x00000800)        /*!< Data Alignment */\n ....\n 3094  #define  I2C_CR1_PEC                         ((uint32_t)0x00001000)        /*!< Packet Error Checking */\n 3095  #define  I2C_CR1_ALERT                       ((uint32_t)0x00002000)        /*!< SMBus Alert */\n 3096: #define  I2C_CR1_SWRST                       ((uint32_t)0x00008000)        /*!< Software Reset */\n 3097  \n 3098  /*******************  Bit definition for I2C_CR2 register  ********************/\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f101xb.h:\n  356  \n  357  /** \n  358:   * @brief Reset and Clock Control\n  359    */\n  360  \n  ...\n  639  \n  640  /********************  Bit definition for CRC_CR register  ********************/\n  641: #define  CRC_CR_RESET                        ((uint32_t)0x00000001)        /*!< RESET bit */\n  642  \n  643  /******************************************************************************/\n  ...\n  735  /******************************************************************************/\n  736  /*                                                                            */\n  737: /*                         Reset and Clock Control                            */\n  738  /*                                                                            */\n  739  /******************************************************************************/\n  ...\n  885  \n  886  /*****************  Bit definition for RCC_APB2RSTR register  *****************/\n  887: #define  RCC_APB2RSTR_AFIORST                ((uint32_t)0x00000001)        /*!< Alternate Function I/O reset */\n  888: #define  RCC_APB2RSTR_IOPARST                ((uint32_t)0x00000004)        /*!< I/O port A reset */\n  889: #define  RCC_APB2RSTR_IOPBRST                ((uint32_t)0x00000008)        /*!< I/O port B reset */\n  890: #define  RCC_APB2RSTR_IOPCRST                ((uint32_t)0x00000010)        /*!< I/O port C reset */\n  891: #define  RCC_APB2RSTR_IOPDRST                ((uint32_t)0x00000020)        /*!< I/O port D reset */\n  892: #define  RCC_APB2RSTR_ADC1RST                ((uint32_t)0x00000200)        /*!< ADC 1 interface reset */\n  893  \n  894  \n  895: #define  RCC_APB2RSTR_TIM1RST                ((uint32_t)0x00000800)        /*!< TIM1 Timer reset */\n  896: #define  RCC_APB2RSTR_SPI1RST                ((uint32_t)0x00001000)        /*!< SPI 1 reset */\n  897: #define  RCC_APB2RSTR_USART1RST              ((uint32_t)0x00004000)        /*!< USART1 reset */\n  898  \n  899  \n  900: #define  RCC_APB2RSTR_IOPERST               ((uint32_t)0x00000040)        /*!< I/O port E reset */\n  901  \n  902  \n  ...\n  904  \n  905  /*****************  Bit definition for RCC_APB1RSTR register  *****************/\n  906: #define  RCC_APB1RSTR_TIM2RST                ((uint32_t)0x00000001)        /*!< Timer 2 reset */\n  907: #define  RCC_APB1RSTR_TIM3RST                ((uint32_t)0x00000002)        /*!< Timer 3 reset */\n  908: #define  RCC_APB1RSTR_WWDGRST                ((uint32_t)0x00000800)        /*!< Window Watchdog reset */\n  909: #define  RCC_APB1RSTR_USART2RST              ((uint32_t)0x00020000)        /*!< USART 2 reset */\n  910: #define  RCC_APB1RSTR_I2C1RST                ((uint32_t)0x00200000)        /*!< I2C 1 reset */\n  911  \n  912  \n  913: #define  RCC_APB1RSTR_BKPRST                 ((uint32_t)0x08000000)        /*!< Backup interface reset */\n  914: #define  RCC_APB1RSTR_PWRRST                 ((uint32_t)0x10000000)        /*!< Power interface reset */\n  915  \n  916: #define  RCC_APB1RSTR_TIM4RST               ((uint32_t)0x00000004)        /*!< Timer 4 reset */\n  917: #define  RCC_APB1RSTR_SPI2RST               ((uint32_t)0x00004000)        /*!< SPI 2 reset */\n  918: #define  RCC_APB1RSTR_USART3RST             ((uint32_t)0x00040000)        /*!< USART 3 reset */\n  919: #define  RCC_APB1RSTR_I2C2RST               ((uint32_t)0x00400000)        /*!< I2C 2 reset */\n  920  \n  921  \n  ...\n  991  \n  992  #define  RCC_BDCR_RTCEN                      ((uint32_t)0x00008000)        /*!< RTC clock enable */\n  993: #define  RCC_BDCR_BDRST                      ((uint32_t)0x00010000)        /*!< Backup domain software reset  */\n  994  \n  995  /*******************  Bit definition for RCC_CSR register  ********************/  \n  996  #define  RCC_CSR_LSION                       ((uint32_t)0x00000001)        /*!< Internal Low Speed oscillator enable */\n  997  #define  RCC_CSR_LSIRDY                      ((uint32_t)0x00000002)        /*!< Internal Low Speed oscillator Ready */\n  998: #define  RCC_CSR_RMVF                        ((uint32_t)0x01000000)        /*!< Remove reset flag */\n  999: #define  RCC_CSR_PINRSTF                     ((uint32_t)0x04000000)        /*!< PIN reset flag */\n 1000: #define  RCC_CSR_PORRSTF                     ((uint32_t)0x08000000)        /*!< POR/PDR reset flag */\n 1001: #define  RCC_CSR_SFTRSTF                     ((uint32_t)0x10000000)        /*!< Software Reset flag */\n 1002: #define  RCC_CSR_IWDGRSTF                    ((uint32_t)0x20000000)        /*!< Independent Watchdog reset flag */\n 1003: #define  RCC_CSR_WWDGRSTF                    ((uint32_t)0x40000000)        /*!< Window watchdog reset flag */\n 1004: #define  RCC_CSR_LPWRRSTF                    ((uint32_t)0x80000000)        /*!< Low-Power reset flag */\n 1005  \n 1006  \n ....\n 1204  #define GPIO_BSRR_BS15                       ((uint32_t)0x00008000)        /*!< Port x Set bit 15 */\n 1205  \n 1206: #define GPIO_BSRR_BR0                        ((uint32_t)0x00010000)        /*!< Port x Reset bit 0 */\n 1207: #define GPIO_BSRR_BR1                        ((uint32_t)0x00020000)        /*!< Port x Reset bit 1 */\n 1208: #define GPIO_BSRR_BR2                        ((uint32_t)0x00040000)        /*!< Port x Reset bit 2 */\n 1209: #define GPIO_BSRR_BR3                        ((uint32_t)0x00080000)        /*!< Port x Reset bit 3 */\n 1210: #define GPIO_BSRR_BR4                        ((uint32_t)0x00100000)        /*!< Port x Reset bit 4 */\n 1211: #define GPIO_BSRR_BR5                        ((uint32_t)0x00200000)        /*!< Port x Reset bit 5 */\n 1212: #define GPIO_BSRR_BR6                        ((uint32_t)0x00400000)        /*!< Port x Reset bit 6 */\n 1213: #define GPIO_BSRR_BR7                        ((uint32_t)0x00800000)        /*!< Port x Reset bit 7 */\n 1214: #define GPIO_BSRR_BR8                        ((uint32_t)0x01000000)        /*!< Port x Reset bit 8 */\n 1215: #define GPIO_BSRR_BR9                        ((uint32_t)0x02000000)        /*!< Port x Reset bit 9 */\n 1216: #define GPIO_BSRR_BR10                       ((uint32_t)0x04000000)        /*!< Port x Reset bit 10 */\n 1217: #define GPIO_BSRR_BR11                       ((uint32_t)0x08000000)        /*!< Port x Reset bit 11 */\n 1218: #define GPIO_BSRR_BR12                       ((uint32_t)0x10000000)        /*!< Port x Reset bit 12 */\n 1219: #define GPIO_BSRR_BR13                       ((uint32_t)0x20000000)        /*!< Port x Reset bit 13 */\n 1220: #define GPIO_BSRR_BR14                       ((uint32_t)0x40000000)        /*!< Port x Reset bit 14 */\n 1221: #define GPIO_BSRR_BR15                       ((uint32_t)0x80000000)        /*!< Port x Reset bit 15 */\n 1222  \n 1223  /*******************  Bit definition for GPIO_BRR register  *******************/\n 1224: #define GPIO_BRR_BR0                         ((uint32_t)0x0001)            /*!< Port x Reset bit 0 */\n 1225: #define GPIO_BRR_BR1                         ((uint32_t)0x0002)            /*!< Port x Reset bit 1 */\n 1226: #define GPIO_BRR_BR2                         ((uint32_t)0x0004)            /*!< Port x Reset bit 2 */\n 1227: #define GPIO_BRR_BR3                         ((uint32_t)0x0008)            /*!< Port x Reset bit 3 */\n 1228: #define GPIO_BRR_BR4                         ((uint32_t)0x0010)            /*!< Port x Reset bit 4 */\n 1229: #define GPIO_BRR_BR5                         ((uint32_t)0x0020)            /*!< Port x Reset bit 5 */\n 1230: #define GPIO_BRR_BR6                         ((uint32_t)0x0040)            /*!< Port x Reset bit 6 */\n 1231: #define GPIO_BRR_BR7                         ((uint32_t)0x0080)            /*!< Port x Reset bit 7 */\n 1232: #define GPIO_BRR_BR8                         ((uint32_t)0x0100)            /*!< Port x Reset bit 8 */\n 1233: #define GPIO_BRR_BR9                         ((uint32_t)0x0200)            /*!< Port x Reset bit 9 */\n 1234: #define GPIO_BRR_BR10                        ((uint32_t)0x0400)            /*!< Port x Reset bit 10 */\n 1235: #define GPIO_BRR_BR11                        ((uint32_t)0x0800)            /*!< Port x Reset bit 11 */\n 1236: #define GPIO_BRR_BR12                        ((uint32_t)0x1000)            /*!< Port x Reset bit 12 */\n 1237: #define GPIO_BRR_BR13                        ((uint32_t)0x2000)            /*!< Port x Reset bit 13 */\n 1238: #define GPIO_BRR_BR14                        ((uint32_t)0x4000)            /*!< Port x Reset bit 14 */\n 1239: #define GPIO_BRR_BR15                        ((uint32_t)0x8000)            /*!< Port x Reset bit 15 */\n 1240  \n 1241  /******************  Bit definition for GPIO_LCKR register  *******************/\n ....\n 1353  #define AFIO_MAPR_SWJ_CFG_2                  ((uint32_t)0x04000000)        /*!< Bit 2 */\n 1354  \n 1355: #define AFIO_MAPR_SWJ_CFG_RESET              ((uint32_t)0x00000000)        /*!< Full SWJ (JTAG-DP + SW-DP) : Reset State */\n 1356  #define AFIO_MAPR_SWJ_CFG_NOJNTRST           ((uint32_t)0x01000000)        /*!< Full SWJ (JTAG-DP + SW-DP) but without JNTRST */\n 1357  #define AFIO_MAPR_SWJ_CFG_JTAGDISABLE        ((uint32_t)0x02000000)        /*!< JTAG-DP Disabled and SW-DP Enabled */\n ....\n 1807  \n 1808  /*!<*****************  Bit definition for SCB_AIRCR register  *******************/\n 1809: #define  SCB_AIRCR_VECTRESET                 ((uint32_t)0x00000001)        /*!< System Reset bit */\n 1810  #define  SCB_AIRCR_VECTCLRACTIVE             ((uint32_t)0x00000002)        /*!< Clear active vector bit */\n 1811: #define  SCB_AIRCR_SYSRESETREQ               ((uint32_t)0x00000004)        /*!< Requests chip control logic to generate a reset */\n 1812  \n 1813  #define  SCB_AIRCR_PRIGROUP                  ((uint32_t)0x00000700)        /*!< PRIGROUP[2:0] bits (Priority group) */\n ....\n 2187  #define  ADC_CR2_CONT                        ((uint32_t)0x00000002)        /*!< Continuous Conversion */\n 2188  #define  ADC_CR2_CAL                         ((uint32_t)0x00000004)        /*!< A/D Calibration */\n 2189: #define  ADC_CR2_RSTCAL                      ((uint32_t)0x00000008)        /*!< Reset Calibration */\n 2190  #define  ADC_CR2_DMA                         ((uint32_t)0x00000100)        /*!< Direct Memory access mode */\n 2191  #define  ADC_CR2_ALIGN                       ((uint32_t)0x00000800)        /*!< Data Alignment */\n ....\n 3128  #define  I2C_CR1_PEC                         ((uint32_t)0x00001000)        /*!< Packet Error Checking */\n 3129  #define  I2C_CR1_ALERT                       ((uint32_t)0x00002000)        /*!< SMBus Alert */\n 3130: #define  I2C_CR1_SWRST                       ((uint32_t)0x00008000)        /*!< Software Reset */\n 3131  \n 3132  /*******************  Bit definition for I2C_CR2 register  ********************/\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f101xe.h:\n  473  \n  474  /** \n  475:   * @brief Reset and Clock Control\n  476    */\n  477  \n  ...\n  806  \n  807  /********************  Bit definition for CRC_CR register  ********************/\n  808: #define  CRC_CR_RESET                        ((uint32_t)0x00000001)        /*!< RESET bit */\n  809  \n  810  /******************************************************************************/\n  ...\n  998  /******************************************************************************/\n  999  /*                                                                            */\n 1000: /*                         Reset and Clock Control                            */\n 1001  /*                                                                            */\n 1002  /******************************************************************************/\n ....\n 1148  \n 1149  /*****************  Bit definition for RCC_APB2RSTR register  *****************/\n 1150: #define  RCC_APB2RSTR_AFIORST                ((uint32_t)0x00000001)        /*!< Alternate Function I/O reset */\n 1151: #define  RCC_APB2RSTR_IOPARST                ((uint32_t)0x00000004)        /*!< I/O port A reset */\n 1152: #define  RCC_APB2RSTR_IOPBRST                ((uint32_t)0x00000008)        /*!< I/O port B reset */\n 1153: #define  RCC_APB2RSTR_IOPCRST                ((uint32_t)0x00000010)        /*!< I/O port C reset */\n 1154: #define  RCC_APB2RSTR_IOPDRST                ((uint32_t)0x00000020)        /*!< I/O port D reset */\n 1155: #define  RCC_APB2RSTR_ADC1RST                ((uint32_t)0x00000200)        /*!< ADC 1 interface reset */\n 1156  \n 1157  \n 1158: #define  RCC_APB2RSTR_TIM1RST                ((uint32_t)0x00000800)        /*!< TIM1 Timer reset */\n 1159: #define  RCC_APB2RSTR_SPI1RST                ((uint32_t)0x00001000)        /*!< SPI 1 reset */\n 1160: #define  RCC_APB2RSTR_USART1RST              ((uint32_t)0x00004000)        /*!< USART1 reset */\n 1161  \n 1162  \n 1163: #define  RCC_APB2RSTR_IOPERST               ((uint32_t)0x00000040)        /*!< I/O port E reset */\n 1164  \n 1165: #define  RCC_APB2RSTR_IOPFRST               ((uint32_t)0x00000080)        /*!< I/O port F reset */\n 1166: #define  RCC_APB2RSTR_IOPGRST               ((uint32_t)0x00000100)        /*!< I/O port G reset */\n 1167  \n 1168  \n 1169  \n 1170  /*****************  Bit definition for RCC_APB1RSTR register  *****************/\n 1171: #define  RCC_APB1RSTR_TIM2RST                ((uint32_t)0x00000001)        /*!< Timer 2 reset */\n 1172: #define  RCC_APB1RSTR_TIM3RST                ((uint32_t)0x00000002)        /*!< Timer 3 reset */\n 1173: #define  RCC_APB1RSTR_WWDGRST                ((uint32_t)0x00000800)        /*!< Window Watchdog reset */\n 1174: #define  RCC_APB1RSTR_USART2RST              ((uint32_t)0x00020000)        /*!< USART 2 reset */\n 1175: #define  RCC_APB1RSTR_I2C1RST                ((uint32_t)0x00200000)        /*!< I2C 1 reset */\n 1176  \n 1177  \n 1178: #define  RCC_APB1RSTR_BKPRST                 ((uint32_t)0x08000000)        /*!< Backup interface reset */\n 1179: #define  RCC_APB1RSTR_PWRRST                 ((uint32_t)0x10000000)        /*!< Power interface reset */\n 1180  \n 1181: #define  RCC_APB1RSTR_TIM4RST               ((uint32_t)0x00000004)        /*!< Timer 4 reset */\n 1182: #define  RCC_APB1RSTR_SPI2RST               ((uint32_t)0x00004000)        /*!< SPI 2 reset */\n 1183: #define  RCC_APB1RSTR_USART3RST             ((uint32_t)0x00040000)        /*!< USART 3 reset */\n 1184: #define  RCC_APB1RSTR_I2C2RST               ((uint32_t)0x00400000)        /*!< I2C 2 reset */\n 1185  \n 1186  \n 1187: #define  RCC_APB1RSTR_TIM5RST                ((uint32_t)0x00000008)        /*!< Timer 5 reset */\n 1188: #define  RCC_APB1RSTR_TIM6RST                ((uint32_t)0x00000010)        /*!< Timer 6 reset */\n 1189: #define  RCC_APB1RSTR_TIM7RST                ((uint32_t)0x00000020)        /*!< Timer 7 reset */\n 1190: #define  RCC_APB1RSTR_SPI3RST                ((uint32_t)0x00008000)        /*!< SPI 3 reset */\n 1191: #define  RCC_APB1RSTR_UART4RST               ((uint32_t)0x00080000)        /*!< UART 4 reset */\n 1192: #define  RCC_APB1RSTR_UART5RST               ((uint32_t)0x00100000)        /*!< UART 5 reset */\n 1193  \n 1194  \n 1195  \n 1196  \n 1197: #define  RCC_APB1RSTR_DACRST                 ((uint32_t)0x20000000)        /*!< DAC interface reset */\n 1198  \n 1199  /******************  Bit definition for RCC_AHBENR register  ******************/\n ....\n 1274  \n 1275  #define  RCC_BDCR_RTCEN                      ((uint32_t)0x00008000)        /*!< RTC clock enable */\n 1276: #define  RCC_BDCR_BDRST                      ((uint32_t)0x00010000)        /*!< Backup domain software reset  */\n 1277  \n 1278  /*******************  Bit definition for RCC_CSR register  ********************/  \n 1279  #define  RCC_CSR_LSION                       ((uint32_t)0x00000001)        /*!< Internal Low Speed oscillator enable */\n 1280  #define  RCC_CSR_LSIRDY                      ((uint32_t)0x00000002)        /*!< Internal Low Speed oscillator Ready */\n 1281: #define  RCC_CSR_RMVF                        ((uint32_t)0x01000000)        /*!< Remove reset flag */\n 1282: #define  RCC_CSR_PINRSTF                     ((uint32_t)0x04000000)        /*!< PIN reset flag */\n 1283: #define  RCC_CSR_PORRSTF                     ((uint32_t)0x08000000)        /*!< POR/PDR reset flag */\n 1284: #define  RCC_CSR_SFTRSTF                     ((uint32_t)0x10000000)        /*!< Software Reset flag */\n 1285: #define  RCC_CSR_IWDGRSTF                    ((uint32_t)0x20000000)        /*!< Independent Watchdog reset flag */\n 1286: #define  RCC_CSR_WWDGRSTF                    ((uint32_t)0x40000000)        /*!< Window watchdog reset flag */\n 1287: #define  RCC_CSR_LPWRRSTF                    ((uint32_t)0x80000000)        /*!< Low-Power reset flag */\n 1288  \n 1289  \n ....\n 1487  #define GPIO_BSRR_BS15                       ((uint32_t)0x00008000)        /*!< Port x Set bit 15 */\n 1488  \n 1489: #define GPIO_BSRR_BR0                        ((uint32_t)0x00010000)        /*!< Port x Reset bit 0 */\n 1490: #define GPIO_BSRR_BR1                        ((uint32_t)0x00020000)        /*!< Port x Reset bit 1 */\n 1491: #define GPIO_BSRR_BR2                        ((uint32_t)0x00040000)        /*!< Port x Reset bit 2 */\n 1492: #define GPIO_BSRR_BR3                        ((uint32_t)0x00080000)        /*!< Port x Reset bit 3 */\n 1493: #define GPIO_BSRR_BR4                        ((uint32_t)0x00100000)        /*!< Port x Reset bit 4 */\n 1494: #define GPIO_BSRR_BR5                        ((uint32_t)0x00200000)        /*!< Port x Reset bit 5 */\n 1495: #define GPIO_BSRR_BR6                        ((uint32_t)0x00400000)        /*!< Port x Reset bit 6 */\n 1496: #define GPIO_BSRR_BR7                        ((uint32_t)0x00800000)        /*!< Port x Reset bit 7 */\n 1497: #define GPIO_BSRR_BR8                        ((uint32_t)0x01000000)        /*!< Port x Reset bit 8 */\n 1498: #define GPIO_BSRR_BR9                        ((uint32_t)0x02000000)        /*!< Port x Reset bit 9 */\n 1499: #define GPIO_BSRR_BR10                       ((uint32_t)0x04000000)        /*!< Port x Reset bit 10 */\n 1500: #define GPIO_BSRR_BR11                       ((uint32_t)0x08000000)        /*!< Port x Reset bit 11 */\n 1501: #define GPIO_BSRR_BR12                       ((uint32_t)0x10000000)        /*!< Port x Reset bit 12 */\n 1502: #define GPIO_BSRR_BR13                       ((uint32_t)0x20000000)        /*!< Port x Reset bit 13 */\n 1503: #define GPIO_BSRR_BR14                       ((uint32_t)0x40000000)        /*!< Port x Reset bit 14 */\n 1504: #define GPIO_BSRR_BR15                       ((uint32_t)0x80000000)        /*!< Port x Reset bit 15 */\n 1505  \n 1506  /*******************  Bit definition for GPIO_BRR register  *******************/\n 1507: #define GPIO_BRR_BR0                         ((uint32_t)0x0001)            /*!< Port x Reset bit 0 */\n 1508: #define GPIO_BRR_BR1                         ((uint32_t)0x0002)            /*!< Port x Reset bit 1 */\n 1509: #define GPIO_BRR_BR2                         ((uint32_t)0x0004)            /*!< Port x Reset bit 2 */\n 1510: #define GPIO_BRR_BR3                         ((uint32_t)0x0008)            /*!< Port x Reset bit 3 */\n 1511: #define GPIO_BRR_BR4                         ((uint32_t)0x0010)            /*!< Port x Reset bit 4 */\n 1512: #define GPIO_BRR_BR5                         ((uint32_t)0x0020)            /*!< Port x Reset bit 5 */\n 1513: #define GPIO_BRR_BR6                         ((uint32_t)0x0040)            /*!< Port x Reset bit 6 */\n 1514: #define GPIO_BRR_BR7                         ((uint32_t)0x0080)            /*!< Port x Reset bit 7 */\n 1515: #define GPIO_BRR_BR8                         ((uint32_t)0x0100)            /*!< Port x Reset bit 8 */\n 1516: #define GPIO_BRR_BR9                         ((uint32_t)0x0200)            /*!< Port x Reset bit 9 */\n 1517: #define GPIO_BRR_BR10                        ((uint32_t)0x0400)            /*!< Port x Reset bit 10 */\n 1518: #define GPIO_BRR_BR11                        ((uint32_t)0x0800)            /*!< Port x Reset bit 11 */\n 1519: #define GPIO_BRR_BR12                        ((uint32_t)0x1000)            /*!< Port x Reset bit 12 */\n 1520: #define GPIO_BRR_BR13                        ((uint32_t)0x2000)            /*!< Port x Reset bit 13 */\n 1521: #define GPIO_BRR_BR14                        ((uint32_t)0x4000)            /*!< Port x Reset bit 14 */\n 1522: #define GPIO_BRR_BR15                        ((uint32_t)0x8000)            /*!< Port x Reset bit 15 */\n 1523  \n 1524  /******************  Bit definition for GPIO_LCKR register  *******************/\n ....\n 1637  #define AFIO_MAPR_SWJ_CFG_2                  ((uint32_t)0x04000000)        /*!< Bit 2 */\n 1638  \n 1639: #define AFIO_MAPR_SWJ_CFG_RESET              ((uint32_t)0x00000000)        /*!< Full SWJ (JTAG-DP + SW-DP) : Reset State */\n 1640  #define AFIO_MAPR_SWJ_CFG_NOJNTRST           ((uint32_t)0x01000000)        /*!< Full SWJ (JTAG-DP + SW-DP) but without JNTRST */\n 1641  #define AFIO_MAPR_SWJ_CFG_JTAGDISABLE        ((uint32_t)0x02000000)        /*!< JTAG-DP Disabled and SW-DP Enabled */\n ....\n 2092  \n 2093  /*!<*****************  Bit definition for SCB_AIRCR register  *******************/\n 2094: #define  SCB_AIRCR_VECTRESET                 ((uint32_t)0x00000001)        /*!< System Reset bit */\n 2095  #define  SCB_AIRCR_VECTCLRACTIVE             ((uint32_t)0x00000002)        /*!< Clear active vector bit */\n 2096: #define  SCB_AIRCR_SYSRESETREQ               ((uint32_t)0x00000004)        /*!< Requests chip control logic to generate a reset */\n 2097  \n 2098  #define  SCB_AIRCR_PRIGROUP                  ((uint32_t)0x00000700)        /*!< PRIGROUP[2:0] bits (Priority group) */\n ....\n 2472  #define  ADC_CR2_CONT                        ((uint32_t)0x00000002)        /*!< Continuous Conversion */\n 2473  #define  ADC_CR2_CAL                         ((uint32_t)0x00000004)        /*!< A/D Calibration */\n 2474: #define  ADC_CR2_RSTCAL                      ((uint32_t)0x00000008)        /*!< Reset Calibration */\n 2475  #define  ADC_CR2_DMA                         ((uint32_t)0x00000100)        /*!< Direct Memory access mode */\n 2476  #define  ADC_CR2_ALIGN                       ((uint32_t)0x00000800)        /*!< Data Alignment */\n ....\n 3774  #define  I2C_CR1_PEC                         ((uint32_t)0x00001000)        /*!< Packet Error Checking */\n 3775  #define  I2C_CR1_ALERT                       ((uint32_t)0x00002000)        /*!< SMBus Alert */\n 3776: #define  I2C_CR1_SWRST                       ((uint32_t)0x00008000)        /*!< Software Reset */\n 3777  \n 3778  /*******************  Bit definition for I2C_CR2 register  ********************/\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f101xg.h:\n  485  \n  486  /** \n  487:   * @brief Reset and Clock Control\n  488    */\n  489  \n  ...\n  833  \n  834  /********************  Bit definition for CRC_CR register  ********************/\n  835: #define  CRC_CR_RESET                        ((uint32_t)0x00000001)        /*!< RESET bit */\n  836  \n  837  /******************************************************************************/\n  ...\n 1025  /******************************************************************************/\n 1026  /*                                                                            */\n 1027: /*                         Reset and Clock Control                            */\n 1028  /*                                                                            */\n 1029  /******************************************************************************/\n ....\n 1175  \n 1176  /*****************  Bit definition for RCC_APB2RSTR register  *****************/\n 1177: #define  RCC_APB2RSTR_AFIORST                ((uint32_t)0x00000001)        /*!< Alternate Function I/O reset */\n 1178: #define  RCC_APB2RSTR_IOPARST                ((uint32_t)0x00000004)        /*!< I/O port A reset */\n 1179: #define  RCC_APB2RSTR_IOPBRST                ((uint32_t)0x00000008)        /*!< I/O port B reset */\n 1180: #define  RCC_APB2RSTR_IOPCRST                ((uint32_t)0x00000010)        /*!< I/O port C reset */\n 1181: #define  RCC_APB2RSTR_IOPDRST                ((uint32_t)0x00000020)        /*!< I/O port D reset */\n 1182: #define  RCC_APB2RSTR_ADC1RST                ((uint32_t)0x00000200)        /*!< ADC 1 interface reset */\n 1183  \n 1184: #define  RCC_APB2RSTR_ADC2RST                ((uint32_t)0x00000400)        /*!< ADC 2 interface reset */\n 1185  \n 1186: #define  RCC_APB2RSTR_TIM1RST                ((uint32_t)0x00000800)        /*!< TIM1 Timer reset */\n 1187: #define  RCC_APB2RSTR_SPI1RST                ((uint32_t)0x00001000)        /*!< SPI 1 reset */\n 1188: #define  RCC_APB2RSTR_USART1RST              ((uint32_t)0x00004000)        /*!< USART1 reset */\n 1189  \n 1190  \n 1191: #define  RCC_APB2RSTR_IOPERST               ((uint32_t)0x00000040)        /*!< I/O port E reset */\n 1192  \n 1193: #define  RCC_APB2RSTR_IOPFRST               ((uint32_t)0x00000080)        /*!< I/O port F reset */\n 1194: #define  RCC_APB2RSTR_IOPGRST               ((uint32_t)0x00000100)        /*!< I/O port G reset */\n 1195  \n 1196  \n 1197: #define  RCC_APB2RSTR_TIM9RST               ((uint32_t)0x00080000)         /*!< TIM9 Timer reset */\n 1198: #define  RCC_APB2RSTR_TIM10RST              ((uint32_t)0x00100000)         /*!< TIM10 Timer reset */\n 1199: #define  RCC_APB2RSTR_TIM11RST              ((uint32_t)0x00200000)         /*!< TIM11 Timer reset */\n 1200  \n 1201  /*****************  Bit definition for RCC_APB1RSTR register  *****************/\n 1202: #define  RCC_APB1RSTR_TIM2RST                ((uint32_t)0x00000001)        /*!< Timer 2 reset */\n 1203: #define  RCC_APB1RSTR_TIM3RST                ((uint32_t)0x00000002)        /*!< Timer 3 reset */\n 1204: #define  RCC_APB1RSTR_WWDGRST                ((uint32_t)0x00000800)        /*!< Window Watchdog reset */\n 1205: #define  RCC_APB1RSTR_USART2RST              ((uint32_t)0x00020000)        /*!< USART 2 reset */\n 1206: #define  RCC_APB1RSTR_I2C1RST                ((uint32_t)0x00200000)        /*!< I2C 1 reset */\n 1207  \n 1208  \n 1209: #define  RCC_APB1RSTR_BKPRST                 ((uint32_t)0x08000000)        /*!< Backup interface reset */\n 1210: #define  RCC_APB1RSTR_PWRRST                 ((uint32_t)0x10000000)        /*!< Power interface reset */\n 1211  \n 1212: #define  RCC_APB1RSTR_TIM4RST               ((uint32_t)0x00000004)        /*!< Timer 4 reset */\n 1213: #define  RCC_APB1RSTR_SPI2RST               ((uint32_t)0x00004000)        /*!< SPI 2 reset */\n 1214: #define  RCC_APB1RSTR_USART3RST             ((uint32_t)0x00040000)        /*!< USART 3 reset */\n 1215: #define  RCC_APB1RSTR_I2C2RST               ((uint32_t)0x00400000)        /*!< I2C 2 reset */\n 1216  \n 1217  \n 1218: #define  RCC_APB1RSTR_TIM5RST                ((uint32_t)0x00000008)        /*!< Timer 5 reset */\n 1219: #define  RCC_APB1RSTR_TIM6RST                ((uint32_t)0x00000010)        /*!< Timer 6 reset */\n 1220: #define  RCC_APB1RSTR_TIM7RST                ((uint32_t)0x00000020)        /*!< Timer 7 reset */\n 1221: #define  RCC_APB1RSTR_SPI3RST                ((uint32_t)0x00008000)        /*!< SPI 3 reset */\n 1222: #define  RCC_APB1RSTR_UART4RST               ((uint32_t)0x00080000)        /*!< UART 4 reset */\n 1223: #define  RCC_APB1RSTR_UART5RST               ((uint32_t)0x00100000)        /*!< UART 5 reset */\n 1224  \n 1225  \n 1226  \n 1227  \n 1228: #define  RCC_APB1RSTR_TIM12RST               ((uint32_t)0x00000040)         /*!< TIM12 Timer reset */\n 1229: #define  RCC_APB1RSTR_TIM13RST               ((uint32_t)0x00000080)         /*!< TIM13 Timer reset */\n 1230: #define  RCC_APB1RSTR_TIM14RST               ((uint32_t)0x00000100)         /*!< TIM14 Timer reset */\n 1231: #define  RCC_APB1RSTR_DACRST                 ((uint32_t)0x20000000)        /*!< DAC interface reset */\n 1232  \n 1233  /******************  Bit definition for RCC_AHBENR register  ******************/\n ....\n 1315  \n 1316  #define  RCC_BDCR_RTCEN                      ((uint32_t)0x00008000)        /*!< RTC clock enable */\n 1317: #define  RCC_BDCR_BDRST                      ((uint32_t)0x00010000)        /*!< Backup domain software reset  */\n 1318  \n 1319  /*******************  Bit definition for RCC_CSR register  ********************/  \n 1320  #define  RCC_CSR_LSION                       ((uint32_t)0x00000001)        /*!< Internal Low Speed oscillator enable */\n 1321  #define  RCC_CSR_LSIRDY                      ((uint32_t)0x00000002)        /*!< Internal Low Speed oscillator Ready */\n 1322: #define  RCC_CSR_RMVF                        ((uint32_t)0x01000000)        /*!< Remove reset flag */\n 1323: #define  RCC_CSR_PINRSTF                     ((uint32_t)0x04000000)        /*!< PIN reset flag */\n 1324: #define  RCC_CSR_PORRSTF                     ((uint32_t)0x08000000)        /*!< POR/PDR reset flag */\n 1325: #define  RCC_CSR_SFTRSTF                     ((uint32_t)0x10000000)        /*!< Software Reset flag */\n 1326: #define  RCC_CSR_IWDGRSTF                    ((uint32_t)0x20000000)        /*!< Independent Watchdog reset flag */\n 1327: #define  RCC_CSR_WWDGRSTF                    ((uint32_t)0x40000000)        /*!< Window watchdog reset flag */\n 1328: #define  RCC_CSR_LPWRRSTF                    ((uint32_t)0x80000000)        /*!< Low-Power reset flag */\n 1329  \n 1330  \n ....\n 1528  #define GPIO_BSRR_BS15                       ((uint32_t)0x00008000)        /*!< Port x Set bit 15 */\n 1529  \n 1530: #define GPIO_BSRR_BR0                        ((uint32_t)0x00010000)        /*!< Port x Reset bit 0 */\n 1531: #define GPIO_BSRR_BR1                        ((uint32_t)0x00020000)        /*!< Port x Reset bit 1 */\n 1532: #define GPIO_BSRR_BR2                        ((uint32_t)0x00040000)        /*!< Port x Reset bit 2 */\n 1533: #define GPIO_BSRR_BR3                        ((uint32_t)0x00080000)        /*!< Port x Reset bit 3 */\n 1534: #define GPIO_BSRR_BR4                        ((uint32_t)0x00100000)        /*!< Port x Reset bit 4 */\n 1535: #define GPIO_BSRR_BR5                        ((uint32_t)0x00200000)        /*!< Port x Reset bit 5 */\n 1536: #define GPIO_BSRR_BR6                        ((uint32_t)0x00400000)        /*!< Port x Reset bit 6 */\n 1537: #define GPIO_BSRR_BR7                        ((uint32_t)0x00800000)        /*!< Port x Reset bit 7 */\n 1538: #define GPIO_BSRR_BR8                        ((uint32_t)0x01000000)        /*!< Port x Reset bit 8 */\n 1539: #define GPIO_BSRR_BR9                        ((uint32_t)0x02000000)        /*!< Port x Reset bit 9 */\n 1540: #define GPIO_BSRR_BR10                       ((uint32_t)0x04000000)        /*!< Port x Reset bit 10 */\n 1541: #define GPIO_BSRR_BR11                       ((uint32_t)0x08000000)        /*!< Port x Reset bit 11 */\n 1542: #define GPIO_BSRR_BR12                       ((uint32_t)0x10000000)        /*!< Port x Reset bit 12 */\n 1543: #define GPIO_BSRR_BR13                       ((uint32_t)0x20000000)        /*!< Port x Reset bit 13 */\n 1544: #define GPIO_BSRR_BR14                       ((uint32_t)0x40000000)        /*!< Port x Reset bit 14 */\n 1545: #define GPIO_BSRR_BR15                       ((uint32_t)0x80000000)        /*!< Port x Reset bit 15 */\n 1546  \n 1547  /*******************  Bit definition for GPIO_BRR register  *******************/\n 1548: #define GPIO_BRR_BR0                         ((uint32_t)0x0001)            /*!< Port x Reset bit 0 */\n 1549: #define GPIO_BRR_BR1                         ((uint32_t)0x0002)            /*!< Port x Reset bit 1 */\n 1550: #define GPIO_BRR_BR2                         ((uint32_t)0x0004)            /*!< Port x Reset bit 2 */\n 1551: #define GPIO_BRR_BR3                         ((uint32_t)0x0008)            /*!< Port x Reset bit 3 */\n 1552: #define GPIO_BRR_BR4                         ((uint32_t)0x0010)            /*!< Port x Reset bit 4 */\n 1553: #define GPIO_BRR_BR5                         ((uint32_t)0x0020)            /*!< Port x Reset bit 5 */\n 1554: #define GPIO_BRR_BR6                         ((uint32_t)0x0040)            /*!< Port x Reset bit 6 */\n 1555: #define GPIO_BRR_BR7                         ((uint32_t)0x0080)            /*!< Port x Reset bit 7 */\n 1556: #define GPIO_BRR_BR8                         ((uint32_t)0x0100)            /*!< Port x Reset bit 8 */\n 1557: #define GPIO_BRR_BR9                         ((uint32_t)0x0200)            /*!< Port x Reset bit 9 */\n 1558: #define GPIO_BRR_BR10                        ((uint32_t)0x0400)            /*!< Port x Reset bit 10 */\n 1559: #define GPIO_BRR_BR11                        ((uint32_t)0x0800)            /*!< Port x Reset bit 11 */\n 1560: #define GPIO_BRR_BR12                        ((uint32_t)0x1000)            /*!< Port x Reset bit 12 */\n 1561: #define GPIO_BRR_BR13                        ((uint32_t)0x2000)            /*!< Port x Reset bit 13 */\n 1562: #define GPIO_BRR_BR14                        ((uint32_t)0x4000)            /*!< Port x Reset bit 14 */\n 1563: #define GPIO_BRR_BR15                        ((uint32_t)0x8000)            /*!< Port x Reset bit 15 */\n 1564  \n 1565  /******************  Bit definition for GPIO_LCKR register  *******************/\n ....\n 1678  #define AFIO_MAPR_SWJ_CFG_2                  ((uint32_t)0x04000000)        /*!< Bit 2 */\n 1679  \n 1680: #define AFIO_MAPR_SWJ_CFG_RESET              ((uint32_t)0x00000000)        /*!< Full SWJ (JTAG-DP + SW-DP) : Reset State */\n 1681  #define AFIO_MAPR_SWJ_CFG_NOJNTRST           ((uint32_t)0x01000000)        /*!< Full SWJ (JTAG-DP + SW-DP) but without JNTRST */\n 1682  #define AFIO_MAPR_SWJ_CFG_JTAGDISABLE        ((uint32_t)0x02000000)        /*!< JTAG-DP Disabled and SW-DP Enabled */\n ....\n 2138  \n 2139  /*!<*****************  Bit definition for SCB_AIRCR register  *******************/\n 2140: #define  SCB_AIRCR_VECTRESET                 ((uint32_t)0x00000001)        /*!< System Reset bit */\n 2141  #define  SCB_AIRCR_VECTCLRACTIVE             ((uint32_t)0x00000002)        /*!< Clear active vector bit */\n 2142: #define  SCB_AIRCR_SYSRESETREQ               ((uint32_t)0x00000004)        /*!< Requests chip control logic to generate a reset */\n 2143  \n 2144  #define  SCB_AIRCR_PRIGROUP                  ((uint32_t)0x00000700)        /*!< PRIGROUP[2:0] bits (Priority group) */\n ....\n 2524  #define  ADC_CR2_CONT                        ((uint32_t)0x00000002)        /*!< Continuous Conversion */\n 2525  #define  ADC_CR2_CAL                         ((uint32_t)0x00000004)        /*!< A/D Calibration */\n 2526: #define  ADC_CR2_RSTCAL                      ((uint32_t)0x00000008)        /*!< Reset Calibration */\n 2527  #define  ADC_CR2_DMA                         ((uint32_t)0x00000100)        /*!< Direct Memory access mode */\n 2528  #define  ADC_CR2_ALIGN                       ((uint32_t)0x00000800)        /*!< Data Alignment */\n ....\n 3827  #define  I2C_CR1_PEC                         ((uint32_t)0x00001000)        /*!< Packet Error Checking */\n 3828  #define  I2C_CR1_ALERT                       ((uint32_t)0x00002000)        /*!< SMBus Alert */\n 3829: #define  I2C_CR1_SWRST                       ((uint32_t)0x00008000)        /*!< Software Reset */\n 3830  \n 3831  /*******************  Bit definition for I2C_CR2 register  ********************/\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f102x6.h:\n  354  \n  355  /** \n  356:   * @brief Reset and Clock Control\n  357    */\n  358  \n  ...\n  664  \n  665  /********************  Bit definition for CRC_CR register  ********************/\n  666: #define  CRC_CR_RESET                        ((uint32_t)0x00000001)        /*!< RESET bit */\n  667  \n  668  /******************************************************************************/\n  ...\n  760  /******************************************************************************/\n  761  /*                                                                            */\n  762: /*                         Reset and Clock Control                            */\n  763  /*                                                                            */\n  764  /******************************************************************************/\n  ...\n  911  \n  912  /*****************  Bit definition for RCC_APB2RSTR register  *****************/\n  913: #define  RCC_APB2RSTR_AFIORST                ((uint32_t)0x00000001)        /*!< Alternate Function I/O reset */\n  914: #define  RCC_APB2RSTR_IOPARST                ((uint32_t)0x00000004)        /*!< I/O port A reset */\n  915: #define  RCC_APB2RSTR_IOPBRST                ((uint32_t)0x00000008)        /*!< I/O port B reset */\n  916: #define  RCC_APB2RSTR_IOPCRST                ((uint32_t)0x00000010)        /*!< I/O port C reset */\n  917: #define  RCC_APB2RSTR_IOPDRST                ((uint32_t)0x00000020)        /*!< I/O port D reset */\n  918: #define  RCC_APB2RSTR_ADC1RST                ((uint32_t)0x00000200)        /*!< ADC 1 interface reset */\n  919  \n  920  \n  921: #define  RCC_APB2RSTR_TIM1RST                ((uint32_t)0x00000800)        /*!< TIM1 Timer reset */\n  922: #define  RCC_APB2RSTR_SPI1RST                ((uint32_t)0x00001000)        /*!< SPI 1 reset */\n  923: #define  RCC_APB2RSTR_USART1RST              ((uint32_t)0x00004000)        /*!< USART1 reset */\n  924  \n  925  \n  ...\n  929  \n  930  /*****************  Bit definition for RCC_APB1RSTR register  *****************/\n  931: #define  RCC_APB1RSTR_TIM2RST                ((uint32_t)0x00000001)        /*!< Timer 2 reset */\n  932: #define  RCC_APB1RSTR_TIM3RST                ((uint32_t)0x00000002)        /*!< Timer 3 reset */\n  933: #define  RCC_APB1RSTR_WWDGRST                ((uint32_t)0x00000800)        /*!< Window Watchdog reset */\n  934: #define  RCC_APB1RSTR_USART2RST              ((uint32_t)0x00020000)        /*!< USART 2 reset */\n  935: #define  RCC_APB1RSTR_I2C1RST                ((uint32_t)0x00200000)        /*!< I2C 1 reset */\n  936  \n  937  \n  938: #define  RCC_APB1RSTR_BKPRST                 ((uint32_t)0x08000000)        /*!< Backup interface reset */\n  939: #define  RCC_APB1RSTR_PWRRST                 ((uint32_t)0x10000000)        /*!< Power interface reset */\n  940  \n  941  \n  942: #define  RCC_APB1RSTR_USBRST                ((uint32_t)0x00800000)        /*!< USB Device reset */\n  943  \n  944  \n  ...\n 1009  \n 1010  #define  RCC_BDCR_RTCEN                      ((uint32_t)0x00008000)        /*!< RTC clock enable */\n 1011: #define  RCC_BDCR_BDRST                      ((uint32_t)0x00010000)        /*!< Backup domain software reset  */\n 1012  \n 1013  /*******************  Bit definition for RCC_CSR register  ********************/  \n 1014  #define  RCC_CSR_LSION                       ((uint32_t)0x00000001)        /*!< Internal Low Speed oscillator enable */\n 1015  #define  RCC_CSR_LSIRDY                      ((uint32_t)0x00000002)        /*!< Internal Low Speed oscillator Ready */\n 1016: #define  RCC_CSR_RMVF                        ((uint32_t)0x01000000)        /*!< Remove reset flag */\n 1017: #define  RCC_CSR_PINRSTF                     ((uint32_t)0x04000000)        /*!< PIN reset flag */\n 1018: #define  RCC_CSR_PORRSTF                     ((uint32_t)0x08000000)        /*!< POR/PDR reset flag */\n 1019: #define  RCC_CSR_SFTRSTF                     ((uint32_t)0x10000000)        /*!< Software Reset flag */\n 1020: #define  RCC_CSR_IWDGRSTF                    ((uint32_t)0x20000000)        /*!< Independent Watchdog reset flag */\n 1021: #define  RCC_CSR_WWDGRSTF                    ((uint32_t)0x40000000)        /*!< Window watchdog reset flag */\n 1022: #define  RCC_CSR_LPWRRSTF                    ((uint32_t)0x80000000)        /*!< Low-Power reset flag */\n 1023  \n 1024  \n ....\n 1222  #define GPIO_BSRR_BS15                       ((uint32_t)0x00008000)        /*!< Port x Set bit 15 */\n 1223  \n 1224: #define GPIO_BSRR_BR0                        ((uint32_t)0x00010000)        /*!< Port x Reset bit 0 */\n 1225: #define GPIO_BSRR_BR1                        ((uint32_t)0x00020000)        /*!< Port x Reset bit 1 */\n 1226: #define GPIO_BSRR_BR2                        ((uint32_t)0x00040000)        /*!< Port x Reset bit 2 */\n 1227: #define GPIO_BSRR_BR3                        ((uint32_t)0x00080000)        /*!< Port x Reset bit 3 */\n 1228: #define GPIO_BSRR_BR4                        ((uint32_t)0x00100000)        /*!< Port x Reset bit 4 */\n 1229: #define GPIO_BSRR_BR5                        ((uint32_t)0x00200000)        /*!< Port x Reset bit 5 */\n 1230: #define GPIO_BSRR_BR6                        ((uint32_t)0x00400000)        /*!< Port x Reset bit 6 */\n 1231: #define GPIO_BSRR_BR7                        ((uint32_t)0x00800000)        /*!< Port x Reset bit 7 */\n 1232: #define GPIO_BSRR_BR8                        ((uint32_t)0x01000000)        /*!< Port x Reset bit 8 */\n 1233: #define GPIO_BSRR_BR9                        ((uint32_t)0x02000000)        /*!< Port x Reset bit 9 */\n 1234: #define GPIO_BSRR_BR10                       ((uint32_t)0x04000000)        /*!< Port x Reset bit 10 */\n 1235: #define GPIO_BSRR_BR11                       ((uint32_t)0x08000000)        /*!< Port x Reset bit 11 */\n 1236: #define GPIO_BSRR_BR12                       ((uint32_t)0x10000000)        /*!< Port x Reset bit 12 */\n 1237: #define GPIO_BSRR_BR13                       ((uint32_t)0x20000000)        /*!< Port x Reset bit 13 */\n 1238: #define GPIO_BSRR_BR14                       ((uint32_t)0x40000000)        /*!< Port x Reset bit 14 */\n 1239: #define GPIO_BSRR_BR15                       ((uint32_t)0x80000000)        /*!< Port x Reset bit 15 */\n 1240  \n 1241  /*******************  Bit definition for GPIO_BRR register  *******************/\n 1242: #define GPIO_BRR_BR0                         ((uint32_t)0x0001)            /*!< Port x Reset bit 0 */\n 1243: #define GPIO_BRR_BR1                         ((uint32_t)0x0002)            /*!< Port x Reset bit 1 */\n 1244: #define GPIO_BRR_BR2                         ((uint32_t)0x0004)            /*!< Port x Reset bit 2 */\n 1245: #define GPIO_BRR_BR3                         ((uint32_t)0x0008)            /*!< Port x Reset bit 3 */\n 1246: #define GPIO_BRR_BR4                         ((uint32_t)0x0010)            /*!< Port x Reset bit 4 */\n 1247: #define GPIO_BRR_BR5                         ((uint32_t)0x0020)            /*!< Port x Reset bit 5 */\n 1248: #define GPIO_BRR_BR6                         ((uint32_t)0x0040)            /*!< Port x Reset bit 6 */\n 1249: #define GPIO_BRR_BR7                         ((uint32_t)0x0080)            /*!< Port x Reset bit 7 */\n 1250: #define GPIO_BRR_BR8                         ((uint32_t)0x0100)            /*!< Port x Reset bit 8 */\n 1251: #define GPIO_BRR_BR9                         ((uint32_t)0x0200)            /*!< Port x Reset bit 9 */\n 1252: #define GPIO_BRR_BR10                        ((uint32_t)0x0400)            /*!< Port x Reset bit 10 */\n 1253: #define GPIO_BRR_BR11                        ((uint32_t)0x0800)            /*!< Port x Reset bit 11 */\n 1254: #define GPIO_BRR_BR12                        ((uint32_t)0x1000)            /*!< Port x Reset bit 12 */\n 1255: #define GPIO_BRR_BR13                        ((uint32_t)0x2000)            /*!< Port x Reset bit 13 */\n 1256: #define GPIO_BRR_BR14                        ((uint32_t)0x4000)            /*!< Port x Reset bit 14 */\n 1257: #define GPIO_BRR_BR15                        ((uint32_t)0x8000)            /*!< Port x Reset bit 15 */\n 1258  \n 1259  /******************  Bit definition for GPIO_LCKR register  *******************/\n ....\n 1362  #define AFIO_MAPR_SWJ_CFG_2                  ((uint32_t)0x04000000)        /*!< Bit 2 */\n 1363  \n 1364: #define AFIO_MAPR_SWJ_CFG_RESET              ((uint32_t)0x00000000)        /*!< Full SWJ (JTAG-DP + SW-DP) : Reset State */\n 1365  #define AFIO_MAPR_SWJ_CFG_NOJNTRST           ((uint32_t)0x01000000)        /*!< Full SWJ (JTAG-DP + SW-DP) but without JNTRST */\n 1366  #define AFIO_MAPR_SWJ_CFG_JTAGDISABLE        ((uint32_t)0x02000000)        /*!< JTAG-DP Disabled and SW-DP Enabled */\n ....\n 1816  \n 1817  /*!<*****************  Bit definition for SCB_AIRCR register  *******************/\n 1818: #define  SCB_AIRCR_VECTRESET                 ((uint32_t)0x00000001)        /*!< System Reset bit */\n 1819  #define  SCB_AIRCR_VECTCLRACTIVE             ((uint32_t)0x00000002)        /*!< Clear active vector bit */\n 1820: #define  SCB_AIRCR_SYSRESETREQ               ((uint32_t)0x00000004)        /*!< Requests chip control logic to generate a reset */\n 1821  \n 1822  #define  SCB_AIRCR_PRIGROUP                  ((uint32_t)0x00000700)        /*!< PRIGROUP[2:0] bits (Priority group) */\n ....\n 2196  #define  ADC_CR2_CONT                        ((uint32_t)0x00000002)        /*!< Continuous Conversion */\n 2197  #define  ADC_CR2_CAL                         ((uint32_t)0x00000004)        /*!< A/D Calibration */\n 2198: #define  ADC_CR2_RSTCAL                      ((uint32_t)0x00000008)        /*!< Reset Calibration */\n 2199  #define  ADC_CR2_DMA                         ((uint32_t)0x00000100)        /*!< Direct Memory access mode */\n 2200  #define  ADC_CR2_ALIGN                       ((uint32_t)0x00000800)        /*!< Data Alignment */\n ....\n 3304  /*!< Common registers */\n 3305  /*******************  Bit definition for USB_CNTR register  *******************/\n 3306: #define  USB_CNTR_FRES                       ((uint32_t)0x00000001)        /*!< Force USB Reset */\n 3307  #define  USB_CNTR_PDWN                       ((uint32_t)0x00000002)        /*!< Power down */\n 3308  #define  USB_CNTR_LP_MODE                    ((uint32_t)0x00000004)        /*!< Low-power mode */\n ....\n 3311  #define  USB_CNTR_ESOFM                      ((uint32_t)0x00000100)        /*!< Expected Start Of Frame Interrupt Mask */\n 3312  #define  USB_CNTR_SOFM                       ((uint32_t)0x00000200)        /*!< Start Of Frame Interrupt Mask */\n 3313: #define  USB_CNTR_RESETM                     ((uint32_t)0x00000400)        /*!< RESET Interrupt Mask */\n 3314  #define  USB_CNTR_SUSPM                      ((uint32_t)0x00000800)        /*!< Suspend mode Interrupt Mask */\n 3315  #define  USB_CNTR_WKUPM                      ((uint32_t)0x00001000)        /*!< Wakeup Interrupt Mask */\n ....\n 3323  #define  USB_ISTR_ESOF                       ((uint32_t)0x00000100)        /*!< Expected Start Of Frame */\n 3324  #define  USB_ISTR_SOF                        ((uint32_t)0x00000200)        /*!< Start Of Frame */\n 3325: #define  USB_ISTR_RESET                      ((uint32_t)0x00000400)        /*!< USB RESET request */\n 3326  #define  USB_ISTR_SUSP                       ((uint32_t)0x00000800)        /*!< Suspend mode request */\n 3327  #define  USB_ISTR_WKUP                       ((uint32_t)0x00001000)        /*!< Wake up */\n ....\n 3853  #define  I2C_CR1_PEC                         ((uint32_t)0x00001000)        /*!< Packet Error Checking */\n 3854  #define  I2C_CR1_ALERT                       ((uint32_t)0x00002000)        /*!< SMBus Alert */\n 3855: #define  I2C_CR1_SWRST                       ((uint32_t)0x00008000)        /*!< Software Reset */\n 3856  \n 3857  /*******************  Bit definition for I2C_CR2 register  ********************/\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f102xb.h:\n  359  \n  360  /** \n  361:   * @brief Reset and Clock Control\n  362    */\n  363  \n  ...\n  677  \n  678  /********************  Bit definition for CRC_CR register  ********************/\n  679: #define  CRC_CR_RESET                        ((uint32_t)0x00000001)        /*!< RESET bit */\n  680  \n  681  /******************************************************************************/\n  ...\n  773  /******************************************************************************/\n  774  /*                                                                            */\n  775: /*                         Reset and Clock Control                            */\n  776  /*                                                                            */\n  777  /******************************************************************************/\n  ...\n  924  \n  925  /*****************  Bit definition for RCC_APB2RSTR register  *****************/\n  926: #define  RCC_APB2RSTR_AFIORST                ((uint32_t)0x00000001)        /*!< Alternate Function I/O reset */\n  927: #define  RCC_APB2RSTR_IOPARST                ((uint32_t)0x00000004)        /*!< I/O port A reset */\n  928: #define  RCC_APB2RSTR_IOPBRST                ((uint32_t)0x00000008)        /*!< I/O port B reset */\n  929: #define  RCC_APB2RSTR_IOPCRST                ((uint32_t)0x00000010)        /*!< I/O port C reset */\n  930: #define  RCC_APB2RSTR_IOPDRST                ((uint32_t)0x00000020)        /*!< I/O port D reset */\n  931: #define  RCC_APB2RSTR_ADC1RST                ((uint32_t)0x00000200)        /*!< ADC 1 interface reset */\n  932  \n  933  \n  934: #define  RCC_APB2RSTR_TIM1RST                ((uint32_t)0x00000800)        /*!< TIM1 Timer reset */\n  935: #define  RCC_APB2RSTR_SPI1RST                ((uint32_t)0x00001000)        /*!< SPI 1 reset */\n  936: #define  RCC_APB2RSTR_USART1RST              ((uint32_t)0x00004000)        /*!< USART1 reset */\n  937  \n  938  \n  ...\n  942  \n  943  /*****************  Bit definition for RCC_APB1RSTR register  *****************/\n  944: #define  RCC_APB1RSTR_TIM2RST                ((uint32_t)0x00000001)        /*!< Timer 2 reset */\n  945: #define  RCC_APB1RSTR_TIM3RST                ((uint32_t)0x00000002)        /*!< Timer 3 reset */\n  946: #define  RCC_APB1RSTR_WWDGRST                ((uint32_t)0x00000800)        /*!< Window Watchdog reset */\n  947: #define  RCC_APB1RSTR_USART2RST              ((uint32_t)0x00020000)        /*!< USART 2 reset */\n  948: #define  RCC_APB1RSTR_I2C1RST                ((uint32_t)0x00200000)        /*!< I2C 1 reset */\n  949  \n  950  \n  951: #define  RCC_APB1RSTR_BKPRST                 ((uint32_t)0x08000000)        /*!< Backup interface reset */\n  952: #define  RCC_APB1RSTR_PWRRST                 ((uint32_t)0x10000000)        /*!< Power interface reset */\n  953  \n  954: #define  RCC_APB1RSTR_TIM4RST               ((uint32_t)0x00000004)        /*!< Timer 4 reset */\n  955: #define  RCC_APB1RSTR_SPI2RST               ((uint32_t)0x00004000)        /*!< SPI 2 reset */\n  956: #define  RCC_APB1RSTR_USART3RST             ((uint32_t)0x00040000)        /*!< USART 3 reset */\n  957: #define  RCC_APB1RSTR_I2C2RST               ((uint32_t)0x00400000)        /*!< I2C 2 reset */\n  958  \n  959: #define  RCC_APB1RSTR_USBRST                ((uint32_t)0x00800000)        /*!< USB Device reset */\n  960  \n  961  \n  ...\n 1030  \n 1031  #define  RCC_BDCR_RTCEN                      ((uint32_t)0x00008000)        /*!< RTC clock enable */\n 1032: #define  RCC_BDCR_BDRST                      ((uint32_t)0x00010000)        /*!< Backup domain software reset  */\n 1033  \n 1034  /*******************  Bit definition for RCC_CSR register  ********************/  \n 1035  #define  RCC_CSR_LSION                       ((uint32_t)0x00000001)        /*!< Internal Low Speed oscillator enable */\n 1036  #define  RCC_CSR_LSIRDY                      ((uint32_t)0x00000002)        /*!< Internal Low Speed oscillator Ready */\n 1037: #define  RCC_CSR_RMVF                        ((uint32_t)0x01000000)        /*!< Remove reset flag */\n 1038: #define  RCC_CSR_PINRSTF                     ((uint32_t)0x04000000)        /*!< PIN reset flag */\n 1039: #define  RCC_CSR_PORRSTF                     ((uint32_t)0x08000000)        /*!< POR/PDR reset flag */\n 1040: #define  RCC_CSR_SFTRSTF                     ((uint32_t)0x10000000)        /*!< Software Reset flag */\n 1041: #define  RCC_CSR_IWDGRSTF                    ((uint32_t)0x20000000)        /*!< Independent Watchdog reset flag */\n 1042: #define  RCC_CSR_WWDGRSTF                    ((uint32_t)0x40000000)        /*!< Window watchdog reset flag */\n 1043: #define  RCC_CSR_LPWRRSTF                    ((uint32_t)0x80000000)        /*!< Low-Power reset flag */\n 1044  \n 1045  \n ....\n 1243  #define GPIO_BSRR_BS15                       ((uint32_t)0x00008000)        /*!< Port x Set bit 15 */\n 1244  \n 1245: #define GPIO_BSRR_BR0                        ((uint32_t)0x00010000)        /*!< Port x Reset bit 0 */\n 1246: #define GPIO_BSRR_BR1                        ((uint32_t)0x00020000)        /*!< Port x Reset bit 1 */\n 1247: #define GPIO_BSRR_BR2                        ((uint32_t)0x00040000)        /*!< Port x Reset bit 2 */\n 1248: #define GPIO_BSRR_BR3                        ((uint32_t)0x00080000)        /*!< Port x Reset bit 3 */\n 1249: #define GPIO_BSRR_BR4                        ((uint32_t)0x00100000)        /*!< Port x Reset bit 4 */\n 1250: #define GPIO_BSRR_BR5                        ((uint32_t)0x00200000)        /*!< Port x Reset bit 5 */\n 1251: #define GPIO_BSRR_BR6                        ((uint32_t)0x00400000)        /*!< Port x Reset bit 6 */\n 1252: #define GPIO_BSRR_BR7                        ((uint32_t)0x00800000)        /*!< Port x Reset bit 7 */\n 1253: #define GPIO_BSRR_BR8                        ((uint32_t)0x01000000)        /*!< Port x Reset bit 8 */\n 1254: #define GPIO_BSRR_BR9                        ((uint32_t)0x02000000)        /*!< Port x Reset bit 9 */\n 1255: #define GPIO_BSRR_BR10                       ((uint32_t)0x04000000)        /*!< Port x Reset bit 10 */\n 1256: #define GPIO_BSRR_BR11                       ((uint32_t)0x08000000)        /*!< Port x Reset bit 11 */\n 1257: #define GPIO_BSRR_BR12                       ((uint32_t)0x10000000)        /*!< Port x Reset bit 12 */\n 1258: #define GPIO_BSRR_BR13                       ((uint32_t)0x20000000)        /*!< Port x Reset bit 13 */\n 1259: #define GPIO_BSRR_BR14                       ((uint32_t)0x40000000)        /*!< Port x Reset bit 14 */\n 1260: #define GPIO_BSRR_BR15                       ((uint32_t)0x80000000)        /*!< Port x Reset bit 15 */\n 1261  \n 1262  /*******************  Bit definition for GPIO_BRR register  *******************/\n 1263: #define GPIO_BRR_BR0                         ((uint32_t)0x0001)            /*!< Port x Reset bit 0 */\n 1264: #define GPIO_BRR_BR1                         ((uint32_t)0x0002)            /*!< Port x Reset bit 1 */\n 1265: #define GPIO_BRR_BR2                         ((uint32_t)0x0004)            /*!< Port x Reset bit 2 */\n 1266: #define GPIO_BRR_BR3                         ((uint32_t)0x0008)            /*!< Port x Reset bit 3 */\n 1267: #define GPIO_BRR_BR4                         ((uint32_t)0x0010)            /*!< Port x Reset bit 4 */\n 1268: #define GPIO_BRR_BR5                         ((uint32_t)0x0020)            /*!< Port x Reset bit 5 */\n 1269: #define GPIO_BRR_BR6                         ((uint32_t)0x0040)            /*!< Port x Reset bit 6 */\n 1270: #define GPIO_BRR_BR7                         ((uint32_t)0x0080)            /*!< Port x Reset bit 7 */\n 1271: #define GPIO_BRR_BR8                         ((uint32_t)0x0100)            /*!< Port x Reset bit 8 */\n 1272: #define GPIO_BRR_BR9                         ((uint32_t)0x0200)            /*!< Port x Reset bit 9 */\n 1273: #define GPIO_BRR_BR10                        ((uint32_t)0x0400)            /*!< Port x Reset bit 10 */\n 1274: #define GPIO_BRR_BR11                        ((uint32_t)0x0800)            /*!< Port x Reset bit 11 */\n 1275: #define GPIO_BRR_BR12                        ((uint32_t)0x1000)            /*!< Port x Reset bit 12 */\n 1276: #define GPIO_BRR_BR13                        ((uint32_t)0x2000)            /*!< Port x Reset bit 13 */\n 1277: #define GPIO_BRR_BR14                        ((uint32_t)0x4000)            /*!< Port x Reset bit 14 */\n 1278: #define GPIO_BRR_BR15                        ((uint32_t)0x8000)            /*!< Port x Reset bit 15 */\n 1279  \n 1280  /******************  Bit definition for GPIO_LCKR register  *******************/\n ....\n 1392  #define AFIO_MAPR_SWJ_CFG_2                  ((uint32_t)0x04000000)        /*!< Bit 2 */\n 1393  \n 1394: #define AFIO_MAPR_SWJ_CFG_RESET              ((uint32_t)0x00000000)        /*!< Full SWJ (JTAG-DP + SW-DP) : Reset State */\n 1395  #define AFIO_MAPR_SWJ_CFG_NOJNTRST           ((uint32_t)0x01000000)        /*!< Full SWJ (JTAG-DP + SW-DP) but without JNTRST */\n 1396  #define AFIO_MAPR_SWJ_CFG_JTAGDISABLE        ((uint32_t)0x02000000)        /*!< JTAG-DP Disabled and SW-DP Enabled */\n ....\n 1846  \n 1847  /*!<*****************  Bit definition for SCB_AIRCR register  *******************/\n 1848: #define  SCB_AIRCR_VECTRESET                 ((uint32_t)0x00000001)        /*!< System Reset bit */\n 1849  #define  SCB_AIRCR_VECTCLRACTIVE             ((uint32_t)0x00000002)        /*!< Clear active vector bit */\n 1850: #define  SCB_AIRCR_SYSRESETREQ               ((uint32_t)0x00000004)        /*!< Requests chip control logic to generate a reset */\n 1851  \n 1852  #define  SCB_AIRCR_PRIGROUP                  ((uint32_t)0x00000700)        /*!< PRIGROUP[2:0] bits (Priority group) */\n ....\n 2226  #define  ADC_CR2_CONT                        ((uint32_t)0x00000002)        /*!< Continuous Conversion */\n 2227  #define  ADC_CR2_CAL                         ((uint32_t)0x00000004)        /*!< A/D Calibration */\n 2228: #define  ADC_CR2_RSTCAL                      ((uint32_t)0x00000008)        /*!< Reset Calibration */\n 2229  #define  ADC_CR2_DMA                         ((uint32_t)0x00000100)        /*!< Direct Memory access mode */\n 2230  #define  ADC_CR2_ALIGN                       ((uint32_t)0x00000800)        /*!< Data Alignment */\n ....\n 3334  /*!< Common registers */\n 3335  /*******************  Bit definition for USB_CNTR register  *******************/\n 3336: #define  USB_CNTR_FRES                       ((uint32_t)0x00000001)        /*!< Force USB Reset */\n 3337  #define  USB_CNTR_PDWN                       ((uint32_t)0x00000002)        /*!< Power down */\n 3338  #define  USB_CNTR_LP_MODE                    ((uint32_t)0x00000004)        /*!< Low-power mode */\n ....\n 3341  #define  USB_CNTR_ESOFM                      ((uint32_t)0x00000100)        /*!< Expected Start Of Frame Interrupt Mask */\n 3342  #define  USB_CNTR_SOFM                       ((uint32_t)0x00000200)        /*!< Start Of Frame Interrupt Mask */\n 3343: #define  USB_CNTR_RESETM                     ((uint32_t)0x00000400)        /*!< RESET Interrupt Mask */\n 3344  #define  USB_CNTR_SUSPM                      ((uint32_t)0x00000800)        /*!< Suspend mode Interrupt Mask */\n 3345  #define  USB_CNTR_WKUPM                      ((uint32_t)0x00001000)        /*!< Wakeup Interrupt Mask */\n ....\n 3353  #define  USB_ISTR_ESOF                       ((uint32_t)0x00000100)        /*!< Expected Start Of Frame */\n 3354  #define  USB_ISTR_SOF                        ((uint32_t)0x00000200)        /*!< Start Of Frame */\n 3355: #define  USB_ISTR_RESET                      ((uint32_t)0x00000400)        /*!< USB RESET request */\n 3356  #define  USB_ISTR_SUSP                       ((uint32_t)0x00000800)        /*!< Suspend mode request */\n 3357  #define  USB_ISTR_WKUP                       ((uint32_t)0x00001000)        /*!< Wake up */\n ....\n 3883  #define  I2C_CR1_PEC                         ((uint32_t)0x00001000)        /*!< Packet Error Checking */\n 3884  #define  I2C_CR1_ALERT                       ((uint32_t)0x00002000)        /*!< SMBus Alert */\n 3885: #define  I2C_CR1_SWRST                       ((uint32_t)0x00008000)        /*!< Software Reset */\n 3886  \n 3887  /*******************  Bit definition for I2C_CR2 register  ********************/\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f103x6.h:\n  423  \n  424  /** \n  425:   * @brief Reset and Clock Control\n  426    */\n  427  \n  ...\n  739  \n  740  /********************  Bit definition for CRC_CR register  ********************/\n  741: #define  CRC_CR_RESET                        ((uint32_t)0x00000001)        /*!< RESET bit */\n  742  \n  743  /******************************************************************************/\n  ...\n  835  /******************************************************************************/\n  836  /*                                                                            */\n  837: /*                         Reset and Clock Control                            */\n  838  /*                                                                            */\n  839  /******************************************************************************/\n  ...\n  986  \n  987  /*****************  Bit definition for RCC_APB2RSTR register  *****************/\n  988: #define  RCC_APB2RSTR_AFIORST                ((uint32_t)0x00000001)        /*!< Alternate Function I/O reset */\n  989: #define  RCC_APB2RSTR_IOPARST                ((uint32_t)0x00000004)        /*!< I/O port A reset */\n  990: #define  RCC_APB2RSTR_IOPBRST                ((uint32_t)0x00000008)        /*!< I/O port B reset */\n  991: #define  RCC_APB2RSTR_IOPCRST                ((uint32_t)0x00000010)        /*!< I/O port C reset */\n  992: #define  RCC_APB2RSTR_IOPDRST                ((uint32_t)0x00000020)        /*!< I/O port D reset */\n  993: #define  RCC_APB2RSTR_ADC1RST                ((uint32_t)0x00000200)        /*!< ADC 1 interface reset */\n  994  \n  995: #define  RCC_APB2RSTR_ADC2RST                ((uint32_t)0x00000400)        /*!< ADC 2 interface reset */\n  996  \n  997: #define  RCC_APB2RSTR_TIM1RST                ((uint32_t)0x00000800)        /*!< TIM1 Timer reset */\n  998: #define  RCC_APB2RSTR_SPI1RST                ((uint32_t)0x00001000)        /*!< SPI 1 reset */\n  999: #define  RCC_APB2RSTR_USART1RST              ((uint32_t)0x00004000)        /*!< USART1 reset */\n 1000  \n 1001  \n ....\n 1005  \n 1006  /*****************  Bit definition for RCC_APB1RSTR register  *****************/\n 1007: #define  RCC_APB1RSTR_TIM2RST                ((uint32_t)0x00000001)        /*!< Timer 2 reset */\n 1008: #define  RCC_APB1RSTR_TIM3RST                ((uint32_t)0x00000002)        /*!< Timer 3 reset */\n 1009: #define  RCC_APB1RSTR_WWDGRST                ((uint32_t)0x00000800)        /*!< Window Watchdog reset */\n 1010: #define  RCC_APB1RSTR_USART2RST              ((uint32_t)0x00020000)        /*!< USART 2 reset */\n 1011: #define  RCC_APB1RSTR_I2C1RST                ((uint32_t)0x00200000)        /*!< I2C 1 reset */\n 1012  \n 1013: #define  RCC_APB1RSTR_CAN1RST                ((uint32_t)0x02000000)        /*!< CAN1 reset */\n 1014  \n 1015: #define  RCC_APB1RSTR_BKPRST                 ((uint32_t)0x08000000)        /*!< Backup interface reset */\n 1016: #define  RCC_APB1RSTR_PWRRST                 ((uint32_t)0x10000000)        /*!< Power interface reset */\n 1017  \n 1018  \n 1019: #define  RCC_APB1RSTR_USBRST                ((uint32_t)0x00800000)        /*!< USB Device reset */\n 1020  \n 1021  \n ....\n 1088  \n 1089  #define  RCC_BDCR_RTCEN                      ((uint32_t)0x00008000)        /*!< RTC clock enable */\n 1090: #define  RCC_BDCR_BDRST                      ((uint32_t)0x00010000)        /*!< Backup domain software reset  */\n 1091  \n 1092  /*******************  Bit definition for RCC_CSR register  ********************/  \n 1093  #define  RCC_CSR_LSION                       ((uint32_t)0x00000001)        /*!< Internal Low Speed oscillator enable */\n 1094  #define  RCC_CSR_LSIRDY                      ((uint32_t)0x00000002)        /*!< Internal Low Speed oscillator Ready */\n 1095: #define  RCC_CSR_RMVF                        ((uint32_t)0x01000000)        /*!< Remove reset flag */\n 1096: #define  RCC_CSR_PINRSTF                     ((uint32_t)0x04000000)        /*!< PIN reset flag */\n 1097: #define  RCC_CSR_PORRSTF                     ((uint32_t)0x08000000)        /*!< POR/PDR reset flag */\n 1098: #define  RCC_CSR_SFTRSTF                     ((uint32_t)0x10000000)        /*!< Software Reset flag */\n 1099: #define  RCC_CSR_IWDGRSTF                    ((uint32_t)0x20000000)        /*!< Independent Watchdog reset flag */\n 1100: #define  RCC_CSR_WWDGRSTF                    ((uint32_t)0x40000000)        /*!< Window watchdog reset flag */\n 1101: #define  RCC_CSR_LPWRRSTF                    ((uint32_t)0x80000000)        /*!< Low-Power reset flag */\n 1102  \n 1103  \n ....\n 1301  #define GPIO_BSRR_BS15                       ((uint32_t)0x00008000)        /*!< Port x Set bit 15 */\n 1302  \n 1303: #define GPIO_BSRR_BR0                        ((uint32_t)0x00010000)        /*!< Port x Reset bit 0 */\n 1304: #define GPIO_BSRR_BR1                        ((uint32_t)0x00020000)        /*!< Port x Reset bit 1 */\n 1305: #define GPIO_BSRR_BR2                        ((uint32_t)0x00040000)        /*!< Port x Reset bit 2 */\n 1306: #define GPIO_BSRR_BR3                        ((uint32_t)0x00080000)        /*!< Port x Reset bit 3 */\n 1307: #define GPIO_BSRR_BR4                        ((uint32_t)0x00100000)        /*!< Port x Reset bit 4 */\n 1308: #define GPIO_BSRR_BR5                        ((uint32_t)0x00200000)        /*!< Port x Reset bit 5 */\n 1309: #define GPIO_BSRR_BR6                        ((uint32_t)0x00400000)        /*!< Port x Reset bit 6 */\n 1310: #define GPIO_BSRR_BR7                        ((uint32_t)0x00800000)        /*!< Port x Reset bit 7 */\n 1311: #define GPIO_BSRR_BR8                        ((uint32_t)0x01000000)        /*!< Port x Reset bit 8 */\n 1312: #define GPIO_BSRR_BR9                        ((uint32_t)0x02000000)        /*!< Port x Reset bit 9 */\n 1313: #define GPIO_BSRR_BR10                       ((uint32_t)0x04000000)        /*!< Port x Reset bit 10 */\n 1314: #define GPIO_BSRR_BR11                       ((uint32_t)0x08000000)        /*!< Port x Reset bit 11 */\n 1315: #define GPIO_BSRR_BR12                       ((uint32_t)0x10000000)        /*!< Port x Reset bit 12 */\n 1316: #define GPIO_BSRR_BR13                       ((uint32_t)0x20000000)        /*!< Port x Reset bit 13 */\n 1317: #define GPIO_BSRR_BR14                       ((uint32_t)0x40000000)        /*!< Port x Reset bit 14 */\n 1318: #define GPIO_BSRR_BR15                       ((uint32_t)0x80000000)        /*!< Port x Reset bit 15 */\n 1319  \n 1320  /*******************  Bit definition for GPIO_BRR register  *******************/\n 1321: #define GPIO_BRR_BR0                         ((uint32_t)0x0001)            /*!< Port x Reset bit 0 */\n 1322: #define GPIO_BRR_BR1                         ((uint32_t)0x0002)            /*!< Port x Reset bit 1 */\n 1323: #define GPIO_BRR_BR2                         ((uint32_t)0x0004)            /*!< Port x Reset bit 2 */\n 1324: #define GPIO_BRR_BR3                         ((uint32_t)0x0008)            /*!< Port x Reset bit 3 */\n 1325: #define GPIO_BRR_BR4                         ((uint32_t)0x0010)            /*!< Port x Reset bit 4 */\n 1326: #define GPIO_BRR_BR5                         ((uint32_t)0x0020)            /*!< Port x Reset bit 5 */\n 1327: #define GPIO_BRR_BR6                         ((uint32_t)0x0040)            /*!< Port x Reset bit 6 */\n 1328: #define GPIO_BRR_BR7                         ((uint32_t)0x0080)            /*!< Port x Reset bit 7 */\n 1329: #define GPIO_BRR_BR8                         ((uint32_t)0x0100)            /*!< Port x Reset bit 8 */\n 1330: #define GPIO_BRR_BR9                         ((uint32_t)0x0200)            /*!< Port x Reset bit 9 */\n 1331: #define GPIO_BRR_BR10                        ((uint32_t)0x0400)            /*!< Port x Reset bit 10 */\n 1332: #define GPIO_BRR_BR11                        ((uint32_t)0x0800)            /*!< Port x Reset bit 11 */\n 1333: #define GPIO_BRR_BR12                        ((uint32_t)0x1000)            /*!< Port x Reset bit 12 */\n 1334: #define GPIO_BRR_BR13                        ((uint32_t)0x2000)            /*!< Port x Reset bit 13 */\n 1335: #define GPIO_BRR_BR14                        ((uint32_t)0x4000)            /*!< Port x Reset bit 14 */\n 1336: #define GPIO_BRR_BR15                        ((uint32_t)0x8000)            /*!< Port x Reset bit 15 */\n 1337  \n 1338  /******************  Bit definition for GPIO_LCKR register  *******************/\n ....\n 1449  #define AFIO_MAPR_SWJ_CFG_2                  ((uint32_t)0x04000000)        /*!< Bit 2 */\n 1450  \n 1451: #define AFIO_MAPR_SWJ_CFG_RESET              ((uint32_t)0x00000000)        /*!< Full SWJ (JTAG-DP + SW-DP) : Reset State */\n 1452  #define AFIO_MAPR_SWJ_CFG_NOJNTRST           ((uint32_t)0x01000000)        /*!< Full SWJ (JTAG-DP + SW-DP) but without JNTRST */\n 1453  #define AFIO_MAPR_SWJ_CFG_JTAGDISABLE        ((uint32_t)0x02000000)        /*!< JTAG-DP Disabled and SW-DP Enabled */\n ....\n 1903  \n 1904  /*!<*****************  Bit definition for SCB_AIRCR register  *******************/\n 1905: #define  SCB_AIRCR_VECTRESET                 ((uint32_t)0x00000001)        /*!< System Reset bit */\n 1906  #define  SCB_AIRCR_VECTCLRACTIVE             ((uint32_t)0x00000002)        /*!< Clear active vector bit */\n 1907: #define  SCB_AIRCR_SYSRESETREQ               ((uint32_t)0x00000004)        /*!< Requests chip control logic to generate a reset */\n 1908  \n 1909  #define  SCB_AIRCR_PRIGROUP                  ((uint32_t)0x00000700)        /*!< PRIGROUP[2:0] bits (Priority group) */\n ....\n 2289  #define  ADC_CR2_CONT                        ((uint32_t)0x00000002)        /*!< Continuous Conversion */\n 2290  #define  ADC_CR2_CAL                         ((uint32_t)0x00000004)        /*!< A/D Calibration */\n 2291: #define  ADC_CR2_RSTCAL                      ((uint32_t)0x00000008)        /*!< Reset Calibration */\n 2292  #define  ADC_CR2_DMA                         ((uint32_t)0x00000100)        /*!< Direct Memory access mode */\n 2293  #define  ADC_CR2_ALIGN                       ((uint32_t)0x00000800)        /*!< Data Alignment */\n ....\n 3398  /*!< Common registers */\n 3399  /*******************  Bit definition for USB_CNTR register  *******************/\n 3400: #define  USB_CNTR_FRES                       ((uint32_t)0x00000001)        /*!< Force USB Reset */\n 3401  #define  USB_CNTR_PDWN                       ((uint32_t)0x00000002)        /*!< Power down */\n 3402  #define  USB_CNTR_LP_MODE                    ((uint32_t)0x00000004)        /*!< Low-power mode */\n ....\n 3405  #define  USB_CNTR_ESOFM                      ((uint32_t)0x00000100)        /*!< Expected Start Of Frame Interrupt Mask */\n 3406  #define  USB_CNTR_SOFM                       ((uint32_t)0x00000200)        /*!< Start Of Frame Interrupt Mask */\n 3407: #define  USB_CNTR_RESETM                     ((uint32_t)0x00000400)        /*!< RESET Interrupt Mask */\n 3408  #define  USB_CNTR_SUSPM                      ((uint32_t)0x00000800)        /*!< Suspend mode Interrupt Mask */\n 3409  #define  USB_CNTR_WKUPM                      ((uint32_t)0x00001000)        /*!< Wakeup Interrupt Mask */\n ....\n 3417  #define  USB_ISTR_ESOF                       ((uint32_t)0x00000100)        /*!< Expected Start Of Frame */\n 3418  #define  USB_ISTR_SOF                        ((uint32_t)0x00000200)        /*!< Start Of Frame */\n 3419: #define  USB_ISTR_RESET                      ((uint32_t)0x00000400)        /*!< USB RESET request */\n 3420  #define  USB_ISTR_SUSP                       ((uint32_t)0x00000800)        /*!< Suspend mode request */\n 3421  #define  USB_ISTR_WKUP                       ((uint32_t)0x00001000)        /*!< Wake up */\n ....\n 3881  #define  CAN_MCR_ABOM                        ((uint32_t)0x00000040)        /*!< Automatic Bus-Off Management */\n 3882  #define  CAN_MCR_TTCM                        ((uint32_t)0x00000080)        /*!< Time Triggered Communication Mode */\n 3883: #define  CAN_MCR_RESET                       ((uint32_t)0x00008000)        /*!< CAN software master reset */\n 3884  #define  CAN_MCR_DBF                         ((uint32_t)0x00010000)        /*!< CAN Debug freeze */\n 3885  \n ....\n 5206  #define  I2C_CR1_PEC                         ((uint32_t)0x00001000)        /*!< Packet Error Checking */\n 5207  #define  I2C_CR1_ALERT                       ((uint32_t)0x00002000)        /*!< SMBus Alert */\n 5208: #define  I2C_CR1_SWRST                       ((uint32_t)0x00008000)        /*!< Software Reset */\n 5209  \n 5210  /*******************  Bit definition for I2C_CR2 register  ********************/\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f103xb.h:\n  428  \n  429  /** \n  430:   * @brief Reset and Clock Control\n  431    */\n  432  \n  ...\n  754  \n  755  /********************  Bit definition for CRC_CR register  ********************/\n  756: #define  CRC_CR_RESET                        ((uint32_t)0x00000001)        /*!< RESET bit */\n  757  \n  758  /******************************************************************************/\n  ...\n  850  /******************************************************************************/\n  851  /*                                                                            */\n  852: /*                         Reset and Clock Control                            */\n  853  /*                                                                            */\n  854  /******************************************************************************/\n  ...\n 1001  \n 1002  /*****************  Bit definition for RCC_APB2RSTR register  *****************/\n 1003: #define  RCC_APB2RSTR_AFIORST                ((uint32_t)0x00000001)        /*!< Alternate Function I/O reset */\n 1004: #define  RCC_APB2RSTR_IOPARST                ((uint32_t)0x00000004)        /*!< I/O port A reset */\n 1005: #define  RCC_APB2RSTR_IOPBRST                ((uint32_t)0x00000008)        /*!< I/O port B reset */\n 1006: #define  RCC_APB2RSTR_IOPCRST                ((uint32_t)0x00000010)        /*!< I/O port C reset */\n 1007: #define  RCC_APB2RSTR_IOPDRST                ((uint32_t)0x00000020)        /*!< I/O port D reset */\n 1008: #define  RCC_APB2RSTR_ADC1RST                ((uint32_t)0x00000200)        /*!< ADC 1 interface reset */\n 1009  \n 1010: #define  RCC_APB2RSTR_ADC2RST                ((uint32_t)0x00000400)        /*!< ADC 2 interface reset */\n 1011  \n 1012: #define  RCC_APB2RSTR_TIM1RST                ((uint32_t)0x00000800)        /*!< TIM1 Timer reset */\n 1013: #define  RCC_APB2RSTR_SPI1RST                ((uint32_t)0x00001000)        /*!< SPI 1 reset */\n 1014: #define  RCC_APB2RSTR_USART1RST              ((uint32_t)0x00004000)        /*!< USART1 reset */\n 1015  \n 1016  \n 1017: #define  RCC_APB2RSTR_IOPERST               ((uint32_t)0x00000040)        /*!< I/O port E reset */\n 1018  \n 1019  \n ....\n 1021  \n 1022  /*****************  Bit definition for RCC_APB1RSTR register  *****************/\n 1023: #define  RCC_APB1RSTR_TIM2RST                ((uint32_t)0x00000001)        /*!< Timer 2 reset */\n 1024: #define  RCC_APB1RSTR_TIM3RST                ((uint32_t)0x00000002)        /*!< Timer 3 reset */\n 1025: #define  RCC_APB1RSTR_WWDGRST                ((uint32_t)0x00000800)        /*!< Window Watchdog reset */\n 1026: #define  RCC_APB1RSTR_USART2RST              ((uint32_t)0x00020000)        /*!< USART 2 reset */\n 1027: #define  RCC_APB1RSTR_I2C1RST                ((uint32_t)0x00200000)        /*!< I2C 1 reset */\n 1028  \n 1029: #define  RCC_APB1RSTR_CAN1RST                ((uint32_t)0x02000000)        /*!< CAN1 reset */\n 1030  \n 1031: #define  RCC_APB1RSTR_BKPRST                 ((uint32_t)0x08000000)        /*!< Backup interface reset */\n 1032: #define  RCC_APB1RSTR_PWRRST                 ((uint32_t)0x10000000)        /*!< Power interface reset */\n 1033  \n 1034: #define  RCC_APB1RSTR_TIM4RST               ((uint32_t)0x00000004)        /*!< Timer 4 reset */\n 1035: #define  RCC_APB1RSTR_SPI2RST               ((uint32_t)0x00004000)        /*!< SPI 2 reset */\n 1036: #define  RCC_APB1RSTR_USART3RST             ((uint32_t)0x00040000)        /*!< USART 3 reset */\n 1037: #define  RCC_APB1RSTR_I2C2RST               ((uint32_t)0x00400000)        /*!< I2C 2 reset */\n 1038  \n 1039: #define  RCC_APB1RSTR_USBRST                ((uint32_t)0x00800000)        /*!< USB Device reset */\n 1040  \n 1041  \n ....\n 1113  \n 1114  #define  RCC_BDCR_RTCEN                      ((uint32_t)0x00008000)        /*!< RTC clock enable */\n 1115: #define  RCC_BDCR_BDRST                      ((uint32_t)0x00010000)        /*!< Backup domain software reset  */\n 1116  \n 1117  /*******************  Bit definition for RCC_CSR register  ********************/  \n 1118  #define  RCC_CSR_LSION                       ((uint32_t)0x00000001)        /*!< Internal Low Speed oscillator enable */\n 1119  #define  RCC_CSR_LSIRDY                      ((uint32_t)0x00000002)        /*!< Internal Low Speed oscillator Ready */\n 1120: #define  RCC_CSR_RMVF                        ((uint32_t)0x01000000)        /*!< Remove reset flag */\n 1121: #define  RCC_CSR_PINRSTF                     ((uint32_t)0x04000000)        /*!< PIN reset flag */\n 1122: #define  RCC_CSR_PORRSTF                     ((uint32_t)0x08000000)        /*!< POR/PDR reset flag */\n 1123: #define  RCC_CSR_SFTRSTF                     ((uint32_t)0x10000000)        /*!< Software Reset flag */\n 1124: #define  RCC_CSR_IWDGRSTF                    ((uint32_t)0x20000000)        /*!< Independent Watchdog reset flag */\n 1125: #define  RCC_CSR_WWDGRSTF                    ((uint32_t)0x40000000)        /*!< Window watchdog reset flag */\n 1126: #define  RCC_CSR_LPWRRSTF                    ((uint32_t)0x80000000)        /*!< Low-Power reset flag */\n 1127  \n 1128  \n ....\n 1326  #define GPIO_BSRR_BS15                       ((uint32_t)0x00008000)        /*!< Port x Set bit 15 */\n 1327  \n 1328: #define GPIO_BSRR_BR0                        ((uint32_t)0x00010000)        /*!< Port x Reset bit 0 */\n 1329: #define GPIO_BSRR_BR1                        ((uint32_t)0x00020000)        /*!< Port x Reset bit 1 */\n 1330: #define GPIO_BSRR_BR2                        ((uint32_t)0x00040000)        /*!< Port x Reset bit 2 */\n 1331: #define GPIO_BSRR_BR3                        ((uint32_t)0x00080000)        /*!< Port x Reset bit 3 */\n 1332: #define GPIO_BSRR_BR4                        ((uint32_t)0x00100000)        /*!< Port x Reset bit 4 */\n 1333: #define GPIO_BSRR_BR5                        ((uint32_t)0x00200000)        /*!< Port x Reset bit 5 */\n 1334: #define GPIO_BSRR_BR6                        ((uint32_t)0x00400000)        /*!< Port x Reset bit 6 */\n 1335: #define GPIO_BSRR_BR7                        ((uint32_t)0x00800000)        /*!< Port x Reset bit 7 */\n 1336: #define GPIO_BSRR_BR8                        ((uint32_t)0x01000000)        /*!< Port x Reset bit 8 */\n 1337: #define GPIO_BSRR_BR9                        ((uint32_t)0x02000000)        /*!< Port x Reset bit 9 */\n 1338: #define GPIO_BSRR_BR10                       ((uint32_t)0x04000000)        /*!< Port x Reset bit 10 */\n 1339: #define GPIO_BSRR_BR11                       ((uint32_t)0x08000000)        /*!< Port x Reset bit 11 */\n 1340: #define GPIO_BSRR_BR12                       ((uint32_t)0x10000000)        /*!< Port x Reset bit 12 */\n 1341: #define GPIO_BSRR_BR13                       ((uint32_t)0x20000000)        /*!< Port x Reset bit 13 */\n 1342: #define GPIO_BSRR_BR14                       ((uint32_t)0x40000000)        /*!< Port x Reset bit 14 */\n 1343: #define GPIO_BSRR_BR15                       ((uint32_t)0x80000000)        /*!< Port x Reset bit 15 */\n 1344  \n 1345  /*******************  Bit definition for GPIO_BRR register  *******************/\n 1346: #define GPIO_BRR_BR0                         ((uint32_t)0x0001)            /*!< Port x Reset bit 0 */\n 1347: #define GPIO_BRR_BR1                         ((uint32_t)0x0002)            /*!< Port x Reset bit 1 */\n 1348: #define GPIO_BRR_BR2                         ((uint32_t)0x0004)            /*!< Port x Reset bit 2 */\n 1349: #define GPIO_BRR_BR3                         ((uint32_t)0x0008)            /*!< Port x Reset bit 3 */\n 1350: #define GPIO_BRR_BR4                         ((uint32_t)0x0010)            /*!< Port x Reset bit 4 */\n 1351: #define GPIO_BRR_BR5                         ((uint32_t)0x0020)            /*!< Port x Reset bit 5 */\n 1352: #define GPIO_BRR_BR6                         ((uint32_t)0x0040)            /*!< Port x Reset bit 6 */\n 1353: #define GPIO_BRR_BR7                         ((uint32_t)0x0080)            /*!< Port x Reset bit 7 */\n 1354: #define GPIO_BRR_BR8                         ((uint32_t)0x0100)            /*!< Port x Reset bit 8 */\n 1355: #define GPIO_BRR_BR9                         ((uint32_t)0x0200)            /*!< Port x Reset bit 9 */\n 1356: #define GPIO_BRR_BR10                        ((uint32_t)0x0400)            /*!< Port x Reset bit 10 */\n 1357: #define GPIO_BRR_BR11                        ((uint32_t)0x0800)            /*!< Port x Reset bit 11 */\n 1358: #define GPIO_BRR_BR12                        ((uint32_t)0x1000)            /*!< Port x Reset bit 12 */\n 1359: #define GPIO_BRR_BR13                        ((uint32_t)0x2000)            /*!< Port x Reset bit 13 */\n 1360: #define GPIO_BRR_BR14                        ((uint32_t)0x4000)            /*!< Port x Reset bit 14 */\n 1361: #define GPIO_BRR_BR15                        ((uint32_t)0x8000)            /*!< Port x Reset bit 15 */\n 1362  \n 1363  /******************  Bit definition for GPIO_LCKR register  *******************/\n ....\n 1483  #define AFIO_MAPR_SWJ_CFG_2                  ((uint32_t)0x04000000)        /*!< Bit 2 */\n 1484  \n 1485: #define AFIO_MAPR_SWJ_CFG_RESET              ((uint32_t)0x00000000)        /*!< Full SWJ (JTAG-DP + SW-DP) : Reset State */\n 1486  #define AFIO_MAPR_SWJ_CFG_NOJNTRST           ((uint32_t)0x01000000)        /*!< Full SWJ (JTAG-DP + SW-DP) but without JNTRST */\n 1487  #define AFIO_MAPR_SWJ_CFG_JTAGDISABLE        ((uint32_t)0x02000000)        /*!< JTAG-DP Disabled and SW-DP Enabled */\n ....\n 1937  \n 1938  /*!<*****************  Bit definition for SCB_AIRCR register  *******************/\n 1939: #define  SCB_AIRCR_VECTRESET                 ((uint32_t)0x00000001)        /*!< System Reset bit */\n 1940  #define  SCB_AIRCR_VECTCLRACTIVE             ((uint32_t)0x00000002)        /*!< Clear active vector bit */\n 1941: #define  SCB_AIRCR_SYSRESETREQ               ((uint32_t)0x00000004)        /*!< Requests chip control logic to generate a reset */\n 1942  \n 1943  #define  SCB_AIRCR_PRIGROUP                  ((uint32_t)0x00000700)        /*!< PRIGROUP[2:0] bits (Priority group) */\n ....\n 2323  #define  ADC_CR2_CONT                        ((uint32_t)0x00000002)        /*!< Continuous Conversion */\n 2324  #define  ADC_CR2_CAL                         ((uint32_t)0x00000004)        /*!< A/D Calibration */\n 2325: #define  ADC_CR2_RSTCAL                      ((uint32_t)0x00000008)        /*!< Reset Calibration */\n 2326  #define  ADC_CR2_DMA                         ((uint32_t)0x00000100)        /*!< Direct Memory access mode */\n 2327  #define  ADC_CR2_ALIGN                       ((uint32_t)0x00000800)        /*!< Data Alignment */\n ....\n 3432  /*!< Common registers */\n 3433  /*******************  Bit definition for USB_CNTR register  *******************/\n 3434: #define  USB_CNTR_FRES                       ((uint32_t)0x00000001)        /*!< Force USB Reset */\n 3435  #define  USB_CNTR_PDWN                       ((uint32_t)0x00000002)        /*!< Power down */\n 3436  #define  USB_CNTR_LP_MODE                    ((uint32_t)0x00000004)        /*!< Low-power mode */\n ....\n 3439  #define  USB_CNTR_ESOFM                      ((uint32_t)0x00000100)        /*!< Expected Start Of Frame Interrupt Mask */\n 3440  #define  USB_CNTR_SOFM                       ((uint32_t)0x00000200)        /*!< Start Of Frame Interrupt Mask */\n 3441: #define  USB_CNTR_RESETM                     ((uint32_t)0x00000400)        /*!< RESET Interrupt Mask */\n 3442  #define  USB_CNTR_SUSPM                      ((uint32_t)0x00000800)        /*!< Suspend mode Interrupt Mask */\n 3443  #define  USB_CNTR_WKUPM                      ((uint32_t)0x00001000)        /*!< Wakeup Interrupt Mask */\n ....\n 3451  #define  USB_ISTR_ESOF                       ((uint32_t)0x00000100)        /*!< Expected Start Of Frame */\n 3452  #define  USB_ISTR_SOF                        ((uint32_t)0x00000200)        /*!< Start Of Frame */\n 3453: #define  USB_ISTR_RESET                      ((uint32_t)0x00000400)        /*!< USB RESET request */\n 3454  #define  USB_ISTR_SUSP                       ((uint32_t)0x00000800)        /*!< Suspend mode request */\n 3455  #define  USB_ISTR_WKUP                       ((uint32_t)0x00001000)        /*!< Wake up */\n ....\n 3915  #define  CAN_MCR_ABOM                        ((uint32_t)0x00000040)        /*!< Automatic Bus-Off Management */\n 3916  #define  CAN_MCR_TTCM                        ((uint32_t)0x00000080)        /*!< Time Triggered Communication Mode */\n 3917: #define  CAN_MCR_RESET                       ((uint32_t)0x00008000)        /*!< CAN software master reset */\n 3918  #define  CAN_MCR_DBF                         ((uint32_t)0x00010000)        /*!< CAN Debug freeze */\n 3919  \n ....\n 5240  #define  I2C_CR1_PEC                         ((uint32_t)0x00001000)        /*!< Packet Error Checking */\n 5241  #define  I2C_CR1_ALERT                       ((uint32_t)0x00002000)        /*!< SMBus Alert */\n 5242: #define  I2C_CR1_SWRST                       ((uint32_t)0x00008000)        /*!< Software Reset */\n 5243  \n 5244  /*******************  Bit definition for I2C_CR2 register  ********************/\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f103xe.h:\n  551  \n  552  /** \n  553:   * @brief Reset and Clock Control\n  554    */\n  555  \n  ...\n  932  \n  933  /********************  Bit definition for CRC_CR register  ********************/\n  934: #define  CRC_CR_RESET                        ((uint32_t)0x00000001)        /*!< RESET bit */\n  935  \n  936  /******************************************************************************/\n  ...\n 1124  /******************************************************************************/\n 1125  /*                                                                            */\n 1126: /*                         Reset and Clock Control                            */\n 1127  /*                                                                            */\n 1128  /******************************************************************************/\n ....\n 1275  \n 1276  /*****************  Bit definition for RCC_APB2RSTR register  *****************/\n 1277: #define  RCC_APB2RSTR_AFIORST                ((uint32_t)0x00000001)        /*!< Alternate Function I/O reset */\n 1278: #define  RCC_APB2RSTR_IOPARST                ((uint32_t)0x00000004)        /*!< I/O port A reset */\n 1279: #define  RCC_APB2RSTR_IOPBRST                ((uint32_t)0x00000008)        /*!< I/O port B reset */\n 1280: #define  RCC_APB2RSTR_IOPCRST                ((uint32_t)0x00000010)        /*!< I/O port C reset */\n 1281: #define  RCC_APB2RSTR_IOPDRST                ((uint32_t)0x00000020)        /*!< I/O port D reset */\n 1282: #define  RCC_APB2RSTR_ADC1RST                ((uint32_t)0x00000200)        /*!< ADC 1 interface reset */\n 1283  \n 1284: #define  RCC_APB2RSTR_ADC2RST                ((uint32_t)0x00000400)        /*!< ADC 2 interface reset */\n 1285  \n 1286: #define  RCC_APB2RSTR_TIM1RST                ((uint32_t)0x00000800)        /*!< TIM1 Timer reset */\n 1287: #define  RCC_APB2RSTR_SPI1RST                ((uint32_t)0x00001000)        /*!< SPI 1 reset */\n 1288: #define  RCC_APB2RSTR_USART1RST              ((uint32_t)0x00004000)        /*!< USART1 reset */\n 1289  \n 1290  \n 1291: #define  RCC_APB2RSTR_IOPERST               ((uint32_t)0x00000040)        /*!< I/O port E reset */\n 1292  \n 1293: #define  RCC_APB2RSTR_IOPFRST               ((uint32_t)0x00000080)        /*!< I/O port F reset */\n 1294: #define  RCC_APB2RSTR_IOPGRST               ((uint32_t)0x00000100)        /*!< I/O port G reset */\n 1295: #define  RCC_APB2RSTR_TIM8RST               ((uint32_t)0x00002000)        /*!< TIM8 Timer reset */\n 1296: #define  RCC_APB2RSTR_ADC3RST               ((uint32_t)0x00008000)        /*!< ADC3 interface reset */\n 1297  \n 1298  \n 1299  \n 1300  /*****************  Bit definition for RCC_APB1RSTR register  *****************/\n 1301: #define  RCC_APB1RSTR_TIM2RST                ((uint32_t)0x00000001)        /*!< Timer 2 reset */\n 1302: #define  RCC_APB1RSTR_TIM3RST                ((uint32_t)0x00000002)        /*!< Timer 3 reset */\n 1303: #define  RCC_APB1RSTR_WWDGRST                ((uint32_t)0x00000800)        /*!< Window Watchdog reset */\n 1304: #define  RCC_APB1RSTR_USART2RST              ((uint32_t)0x00020000)        /*!< USART 2 reset */\n 1305: #define  RCC_APB1RSTR_I2C1RST                ((uint32_t)0x00200000)        /*!< I2C 1 reset */\n 1306  \n 1307: #define  RCC_APB1RSTR_CAN1RST                ((uint32_t)0x02000000)        /*!< CAN1 reset */\n 1308  \n 1309: #define  RCC_APB1RSTR_BKPRST                 ((uint32_t)0x08000000)        /*!< Backup interface reset */\n 1310: #define  RCC_APB1RSTR_PWRRST                 ((uint32_t)0x10000000)        /*!< Power interface reset */\n 1311  \n 1312: #define  RCC_APB1RSTR_TIM4RST               ((uint32_t)0x00000004)        /*!< Timer 4 reset */\n 1313: #define  RCC_APB1RSTR_SPI2RST               ((uint32_t)0x00004000)        /*!< SPI 2 reset */\n 1314: #define  RCC_APB1RSTR_USART3RST             ((uint32_t)0x00040000)        /*!< USART 3 reset */\n 1315: #define  RCC_APB1RSTR_I2C2RST               ((uint32_t)0x00400000)        /*!< I2C 2 reset */\n 1316  \n 1317: #define  RCC_APB1RSTR_USBRST                ((uint32_t)0x00800000)        /*!< USB Device reset */\n 1318  \n 1319: #define  RCC_APB1RSTR_TIM5RST                ((uint32_t)0x00000008)        /*!< Timer 5 reset */\n 1320: #define  RCC_APB1RSTR_TIM6RST                ((uint32_t)0x00000010)        /*!< Timer 6 reset */\n 1321: #define  RCC_APB1RSTR_TIM7RST                ((uint32_t)0x00000020)        /*!< Timer 7 reset */\n 1322: #define  RCC_APB1RSTR_SPI3RST                ((uint32_t)0x00008000)        /*!< SPI 3 reset */\n 1323: #define  RCC_APB1RSTR_UART4RST               ((uint32_t)0x00080000)        /*!< UART 4 reset */\n 1324: #define  RCC_APB1RSTR_UART5RST               ((uint32_t)0x00100000)        /*!< UART 5 reset */\n 1325  \n 1326  \n 1327  \n 1328  \n 1329: #define  RCC_APB1RSTR_DACRST                 ((uint32_t)0x20000000)        /*!< DAC interface reset */\n 1330  \n 1331  /******************  Bit definition for RCC_AHBENR register  ******************/\n ....\n 1412  \n 1413  #define  RCC_BDCR_RTCEN                      ((uint32_t)0x00008000)        /*!< RTC clock enable */\n 1414: #define  RCC_BDCR_BDRST                      ((uint32_t)0x00010000)        /*!< Backup domain software reset  */\n 1415  \n 1416  /*******************  Bit definition for RCC_CSR register  ********************/  \n 1417  #define  RCC_CSR_LSION                       ((uint32_t)0x00000001)        /*!< Internal Low Speed oscillator enable */\n 1418  #define  RCC_CSR_LSIRDY                      ((uint32_t)0x00000002)        /*!< Internal Low Speed oscillator Ready */\n 1419: #define  RCC_CSR_RMVF                        ((uint32_t)0x01000000)        /*!< Remove reset flag */\n 1420: #define  RCC_CSR_PINRSTF                     ((uint32_t)0x04000000)        /*!< PIN reset flag */\n 1421: #define  RCC_CSR_PORRSTF                     ((uint32_t)0x08000000)        /*!< POR/PDR reset flag */\n 1422: #define  RCC_CSR_SFTRSTF                     ((uint32_t)0x10000000)        /*!< Software Reset flag */\n 1423: #define  RCC_CSR_IWDGRSTF                    ((uint32_t)0x20000000)        /*!< Independent Watchdog reset flag */\n 1424: #define  RCC_CSR_WWDGRSTF                    ((uint32_t)0x40000000)        /*!< Window watchdog reset flag */\n 1425: #define  RCC_CSR_LPWRRSTF                    ((uint32_t)0x80000000)        /*!< Low-Power reset flag */\n 1426  \n 1427  \n ....\n 1625  #define GPIO_BSRR_BS15                       ((uint32_t)0x00008000)        /*!< Port x Set bit 15 */\n 1626  \n 1627: #define GPIO_BSRR_BR0                        ((uint32_t)0x00010000)        /*!< Port x Reset bit 0 */\n 1628: #define GPIO_BSRR_BR1                        ((uint32_t)0x00020000)        /*!< Port x Reset bit 1 */\n 1629: #define GPIO_BSRR_BR2                        ((uint32_t)0x00040000)        /*!< Port x Reset bit 2 */\n 1630: #define GPIO_BSRR_BR3                        ((uint32_t)0x00080000)        /*!< Port x Reset bit 3 */\n 1631: #define GPIO_BSRR_BR4                        ((uint32_t)0x00100000)        /*!< Port x Reset bit 4 */\n 1632: #define GPIO_BSRR_BR5                        ((uint32_t)0x00200000)        /*!< Port x Reset bit 5 */\n 1633: #define GPIO_BSRR_BR6                        ((uint32_t)0x00400000)        /*!< Port x Reset bit 6 */\n 1634: #define GPIO_BSRR_BR7                        ((uint32_t)0x00800000)        /*!< Port x Reset bit 7 */\n 1635: #define GPIO_BSRR_BR8                        ((uint32_t)0x01000000)        /*!< Port x Reset bit 8 */\n 1636: #define GPIO_BSRR_BR9                        ((uint32_t)0x02000000)        /*!< Port x Reset bit 9 */\n 1637: #define GPIO_BSRR_BR10                       ((uint32_t)0x04000000)        /*!< Port x Reset bit 10 */\n 1638: #define GPIO_BSRR_BR11                       ((uint32_t)0x08000000)        /*!< Port x Reset bit 11 */\n 1639: #define GPIO_BSRR_BR12                       ((uint32_t)0x10000000)        /*!< Port x Reset bit 12 */\n 1640: #define GPIO_BSRR_BR13                       ((uint32_t)0x20000000)        /*!< Port x Reset bit 13 */\n 1641: #define GPIO_BSRR_BR14                       ((uint32_t)0x40000000)        /*!< Port x Reset bit 14 */\n 1642: #define GPIO_BSRR_BR15                       ((uint32_t)0x80000000)        /*!< Port x Reset bit 15 */\n 1643  \n 1644  /*******************  Bit definition for GPIO_BRR register  *******************/\n 1645: #define GPIO_BRR_BR0                         ((uint32_t)0x0001)            /*!< Port x Reset bit 0 */\n 1646: #define GPIO_BRR_BR1                         ((uint32_t)0x0002)            /*!< Port x Reset bit 1 */\n 1647: #define GPIO_BRR_BR2                         ((uint32_t)0x0004)            /*!< Port x Reset bit 2 */\n 1648: #define GPIO_BRR_BR3                         ((uint32_t)0x0008)            /*!< Port x Reset bit 3 */\n 1649: #define GPIO_BRR_BR4                         ((uint32_t)0x0010)            /*!< Port x Reset bit 4 */\n 1650: #define GPIO_BRR_BR5                         ((uint32_t)0x0020)            /*!< Port x Reset bit 5 */\n 1651: #define GPIO_BRR_BR6                         ((uint32_t)0x0040)            /*!< Port x Reset bit 6 */\n 1652: #define GPIO_BRR_BR7                         ((uint32_t)0x0080)            /*!< Port x Reset bit 7 */\n 1653: #define GPIO_BRR_BR8                         ((uint32_t)0x0100)            /*!< Port x Reset bit 8 */\n 1654: #define GPIO_BRR_BR9                         ((uint32_t)0x0200)            /*!< Port x Reset bit 9 */\n 1655: #define GPIO_BRR_BR10                        ((uint32_t)0x0400)            /*!< Port x Reset bit 10 */\n 1656: #define GPIO_BRR_BR11                        ((uint32_t)0x0800)            /*!< Port x Reset bit 11 */\n 1657: #define GPIO_BRR_BR12                        ((uint32_t)0x1000)            /*!< Port x Reset bit 12 */\n 1658: #define GPIO_BRR_BR13                        ((uint32_t)0x2000)            /*!< Port x Reset bit 13 */\n 1659: #define GPIO_BRR_BR14                        ((uint32_t)0x4000)            /*!< Port x Reset bit 14 */\n 1660: #define GPIO_BRR_BR15                        ((uint32_t)0x8000)            /*!< Port x Reset bit 15 */\n 1661  \n 1662  /******************  Bit definition for GPIO_LCKR register  *******************/\n ....\n 1787  #define AFIO_MAPR_SWJ_CFG_2                  ((uint32_t)0x04000000)        /*!< Bit 2 */\n 1788  \n 1789: #define AFIO_MAPR_SWJ_CFG_RESET              ((uint32_t)0x00000000)        /*!< Full SWJ (JTAG-DP + SW-DP) : Reset State */\n 1790  #define AFIO_MAPR_SWJ_CFG_NOJNTRST           ((uint32_t)0x01000000)        /*!< Full SWJ (JTAG-DP + SW-DP) but without JNTRST */\n 1791  #define AFIO_MAPR_SWJ_CFG_JTAGDISABLE        ((uint32_t)0x02000000)        /*!< JTAG-DP Disabled and SW-DP Enabled */\n ....\n 2242  \n 2243  /*!<*****************  Bit definition for SCB_AIRCR register  *******************/\n 2244: #define  SCB_AIRCR_VECTRESET                 ((uint32_t)0x00000001)        /*!< System Reset bit */\n 2245  #define  SCB_AIRCR_VECTCLRACTIVE             ((uint32_t)0x00000002)        /*!< Clear active vector bit */\n 2246: #define  SCB_AIRCR_SYSRESETREQ               ((uint32_t)0x00000004)        /*!< Requests chip control logic to generate a reset */\n 2247  \n 2248  #define  SCB_AIRCR_PRIGROUP                  ((uint32_t)0x00000700)        /*!< PRIGROUP[2:0] bits (Priority group) */\n ....\n 2628  #define  ADC_CR2_CONT                        ((uint32_t)0x00000002)        /*!< Continuous Conversion */\n 2629  #define  ADC_CR2_CAL                         ((uint32_t)0x00000004)        /*!< A/D Calibration */\n 2630: #define  ADC_CR2_RSTCAL                      ((uint32_t)0x00000008)        /*!< Reset Calibration */\n 2631  #define  ADC_CR2_DMA                         ((uint32_t)0x00000100)        /*!< Direct Memory access mode */\n 2632  #define  ADC_CR2_ALIGN                       ((uint32_t)0x00000800)        /*!< Data Alignment */\n ....\n 4098  /*!< Common registers */\n 4099  /*******************  Bit definition for USB_CNTR register  *******************/\n 4100: #define  USB_CNTR_FRES                       ((uint32_t)0x00000001)        /*!< Force USB Reset */\n 4101  #define  USB_CNTR_PDWN                       ((uint32_t)0x00000002)        /*!< Power down */\n 4102  #define  USB_CNTR_LP_MODE                    ((uint32_t)0x00000004)        /*!< Low-power mode */\n ....\n 4105  #define  USB_CNTR_ESOFM                      ((uint32_t)0x00000100)        /*!< Expected Start Of Frame Interrupt Mask */\n 4106  #define  USB_CNTR_SOFM                       ((uint32_t)0x00000200)        /*!< Start Of Frame Interrupt Mask */\n 4107: #define  USB_CNTR_RESETM                     ((uint32_t)0x00000400)        /*!< RESET Interrupt Mask */\n 4108  #define  USB_CNTR_SUSPM                      ((uint32_t)0x00000800)        /*!< Suspend mode Interrupt Mask */\n 4109  #define  USB_CNTR_WKUPM                      ((uint32_t)0x00001000)        /*!< Wakeup Interrupt Mask */\n ....\n 4117  #define  USB_ISTR_ESOF                       ((uint32_t)0x00000100)        /*!< Expected Start Of Frame */\n 4118  #define  USB_ISTR_SOF                        ((uint32_t)0x00000200)        /*!< Start Of Frame */\n 4119: #define  USB_ISTR_RESET                      ((uint32_t)0x00000400)        /*!< USB RESET request */\n 4120  #define  USB_ISTR_SUSP                       ((uint32_t)0x00000800)        /*!< Suspend mode request */\n 4121  #define  USB_ISTR_WKUP                       ((uint32_t)0x00001000)        /*!< Wake up */\n ....\n 4581  #define  CAN_MCR_ABOM                        ((uint32_t)0x00000040)        /*!< Automatic Bus-Off Management */\n 4582  #define  CAN_MCR_TTCM                        ((uint32_t)0x00000080)        /*!< Time Triggered Communication Mode */\n 4583: #define  CAN_MCR_RESET                       ((uint32_t)0x00008000)        /*!< CAN software master reset */\n 4584  #define  CAN_MCR_DBF                         ((uint32_t)0x00010000)        /*!< CAN Debug freeze */\n 4585  \n ....\n 5929  #define  I2C_CR1_PEC                         ((uint32_t)0x00001000)        /*!< Packet Error Checking */\n 5930  #define  I2C_CR1_ALERT                       ((uint32_t)0x00002000)        /*!< SMBus Alert */\n 5931: #define  I2C_CR1_SWRST                       ((uint32_t)0x00008000)        /*!< Software Reset */\n 5932  \n 5933  /*******************  Bit definition for I2C_CR2 register  ********************/\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f103xg.h:\n  557  \n  558  /** \n  559:   * @brief Reset and Clock Control\n  560    */\n  561  \n  ...\n  951  \n  952  /********************  Bit definition for CRC_CR register  ********************/\n  953: #define  CRC_CR_RESET                        ((uint32_t)0x00000001)        /*!< RESET bit */\n  954  \n  955  /******************************************************************************/\n  ...\n 1143  /******************************************************************************/\n 1144  /*                                                                            */\n 1145: /*                         Reset and Clock Control                            */\n 1146  /*                                                                            */\n 1147  /******************************************************************************/\n ....\n 1294  \n 1295  /*****************  Bit definition for RCC_APB2RSTR register  *****************/\n 1296: #define  RCC_APB2RSTR_AFIORST                ((uint32_t)0x00000001)        /*!< Alternate Function I/O reset */\n 1297: #define  RCC_APB2RSTR_IOPARST                ((uint32_t)0x00000004)        /*!< I/O port A reset */\n 1298: #define  RCC_APB2RSTR_IOPBRST                ((uint32_t)0x00000008)        /*!< I/O port B reset */\n 1299: #define  RCC_APB2RSTR_IOPCRST                ((uint32_t)0x00000010)        /*!< I/O port C reset */\n 1300: #define  RCC_APB2RSTR_IOPDRST                ((uint32_t)0x00000020)        /*!< I/O port D reset */\n 1301: #define  RCC_APB2RSTR_ADC1RST                ((uint32_t)0x00000200)        /*!< ADC 1 interface reset */\n 1302  \n 1303: #define  RCC_APB2RSTR_ADC2RST                ((uint32_t)0x00000400)        /*!< ADC 2 interface reset */\n 1304  \n 1305: #define  RCC_APB2RSTR_TIM1RST                ((uint32_t)0x00000800)        /*!< TIM1 Timer reset */\n 1306: #define  RCC_APB2RSTR_SPI1RST                ((uint32_t)0x00001000)        /*!< SPI 1 reset */\n 1307: #define  RCC_APB2RSTR_USART1RST              ((uint32_t)0x00004000)        /*!< USART1 reset */\n 1308  \n 1309  \n 1310: #define  RCC_APB2RSTR_IOPERST               ((uint32_t)0x00000040)        /*!< I/O port E reset */\n 1311  \n 1312: #define  RCC_APB2RSTR_IOPFRST               ((uint32_t)0x00000080)        /*!< I/O port F reset */\n 1313: #define  RCC_APB2RSTR_IOPGRST               ((uint32_t)0x00000100)        /*!< I/O port G reset */\n 1314: #define  RCC_APB2RSTR_TIM8RST               ((uint32_t)0x00002000)        /*!< TIM8 Timer reset */\n 1315: #define  RCC_APB2RSTR_ADC3RST               ((uint32_t)0x00008000)        /*!< ADC3 interface reset */\n 1316  \n 1317  \n 1318: #define  RCC_APB2RSTR_TIM9RST               ((uint32_t)0x00080000)         /*!< TIM9 Timer reset */\n 1319: #define  RCC_APB2RSTR_TIM10RST              ((uint32_t)0x00100000)         /*!< TIM10 Timer reset */\n 1320: #define  RCC_APB2RSTR_TIM11RST              ((uint32_t)0x00200000)         /*!< TIM11 Timer reset */\n 1321  \n 1322  /*****************  Bit definition for RCC_APB1RSTR register  *****************/\n 1323: #define  RCC_APB1RSTR_TIM2RST                ((uint32_t)0x00000001)        /*!< Timer 2 reset */\n 1324: #define  RCC_APB1RSTR_TIM3RST                ((uint32_t)0x00000002)        /*!< Timer 3 reset */\n 1325: #define  RCC_APB1RSTR_WWDGRST                ((uint32_t)0x00000800)        /*!< Window Watchdog reset */\n 1326: #define  RCC_APB1RSTR_USART2RST              ((uint32_t)0x00020000)        /*!< USART 2 reset */\n 1327: #define  RCC_APB1RSTR_I2C1RST                ((uint32_t)0x00200000)        /*!< I2C 1 reset */\n 1328  \n 1329: #define  RCC_APB1RSTR_CAN1RST                ((uint32_t)0x02000000)        /*!< CAN1 reset */\n 1330  \n 1331: #define  RCC_APB1RSTR_BKPRST                 ((uint32_t)0x08000000)        /*!< Backup interface reset */\n 1332: #define  RCC_APB1RSTR_PWRRST                 ((uint32_t)0x10000000)        /*!< Power interface reset */\n 1333  \n 1334: #define  RCC_APB1RSTR_TIM4RST               ((uint32_t)0x00000004)        /*!< Timer 4 reset */\n 1335: #define  RCC_APB1RSTR_SPI2RST               ((uint32_t)0x00004000)        /*!< SPI 2 reset */\n 1336: #define  RCC_APB1RSTR_USART3RST             ((uint32_t)0x00040000)        /*!< USART 3 reset */\n 1337: #define  RCC_APB1RSTR_I2C2RST               ((uint32_t)0x00400000)        /*!< I2C 2 reset */\n 1338  \n 1339: #define  RCC_APB1RSTR_USBRST                ((uint32_t)0x00800000)        /*!< USB Device reset */\n 1340  \n 1341: #define  RCC_APB1RSTR_TIM5RST                ((uint32_t)0x00000008)        /*!< Timer 5 reset */\n 1342: #define  RCC_APB1RSTR_TIM6RST                ((uint32_t)0x00000010)        /*!< Timer 6 reset */\n 1343: #define  RCC_APB1RSTR_TIM7RST                ((uint32_t)0x00000020)        /*!< Timer 7 reset */\n 1344: #define  RCC_APB1RSTR_SPI3RST                ((uint32_t)0x00008000)        /*!< SPI 3 reset */\n 1345: #define  RCC_APB1RSTR_UART4RST               ((uint32_t)0x00080000)        /*!< UART 4 reset */\n 1346: #define  RCC_APB1RSTR_UART5RST               ((uint32_t)0x00100000)        /*!< UART 5 reset */\n 1347  \n 1348  \n 1349  \n 1350  \n 1351: #define  RCC_APB1RSTR_TIM12RST               ((uint32_t)0x00000040)         /*!< TIM12 Timer reset */\n 1352: #define  RCC_APB1RSTR_TIM13RST               ((uint32_t)0x00000080)         /*!< TIM13 Timer reset */\n 1353: #define  RCC_APB1RSTR_TIM14RST               ((uint32_t)0x00000100)         /*!< TIM14 Timer reset */\n 1354: #define  RCC_APB1RSTR_DACRST                 ((uint32_t)0x20000000)        /*!< DAC interface reset */\n 1355  \n 1356  /******************  Bit definition for RCC_AHBENR register  ******************/\n ....\n 1443  \n 1444  #define  RCC_BDCR_RTCEN                      ((uint32_t)0x00008000)        /*!< RTC clock enable */\n 1445: #define  RCC_BDCR_BDRST                      ((uint32_t)0x00010000)        /*!< Backup domain software reset  */\n 1446  \n 1447  /*******************  Bit definition for RCC_CSR register  ********************/  \n 1448  #define  RCC_CSR_LSION                       ((uint32_t)0x00000001)        /*!< Internal Low Speed oscillator enable */\n 1449  #define  RCC_CSR_LSIRDY                      ((uint32_t)0x00000002)        /*!< Internal Low Speed oscillator Ready */\n 1450: #define  RCC_CSR_RMVF                        ((uint32_t)0x01000000)        /*!< Remove reset flag */\n 1451: #define  RCC_CSR_PINRSTF                     ((uint32_t)0x04000000)        /*!< PIN reset flag */\n 1452: #define  RCC_CSR_PORRSTF                     ((uint32_t)0x08000000)        /*!< POR/PDR reset flag */\n 1453: #define  RCC_CSR_SFTRSTF                     ((uint32_t)0x10000000)        /*!< Software Reset flag */\n 1454: #define  RCC_CSR_IWDGRSTF                    ((uint32_t)0x20000000)        /*!< Independent Watchdog reset flag */\n 1455: #define  RCC_CSR_WWDGRSTF                    ((uint32_t)0x40000000)        /*!< Window watchdog reset flag */\n 1456: #define  RCC_CSR_LPWRRSTF                    ((uint32_t)0x80000000)        /*!< Low-Power reset flag */\n 1457  \n 1458  \n ....\n 1656  #define GPIO_BSRR_BS15                       ((uint32_t)0x00008000)        /*!< Port x Set bit 15 */\n 1657  \n 1658: #define GPIO_BSRR_BR0                        ((uint32_t)0x00010000)        /*!< Port x Reset bit 0 */\n 1659: #define GPIO_BSRR_BR1                        ((uint32_t)0x00020000)        /*!< Port x Reset bit 1 */\n 1660: #define GPIO_BSRR_BR2                        ((uint32_t)0x00040000)        /*!< Port x Reset bit 2 */\n 1661: #define GPIO_BSRR_BR3                        ((uint32_t)0x00080000)        /*!< Port x Reset bit 3 */\n 1662: #define GPIO_BSRR_BR4                        ((uint32_t)0x00100000)        /*!< Port x Reset bit 4 */\n 1663: #define GPIO_BSRR_BR5                        ((uint32_t)0x00200000)        /*!< Port x Reset bit 5 */\n 1664: #define GPIO_BSRR_BR6                        ((uint32_t)0x00400000)        /*!< Port x Reset bit 6 */\n 1665: #define GPIO_BSRR_BR7                        ((uint32_t)0x00800000)        /*!< Port x Reset bit 7 */\n 1666: #define GPIO_BSRR_BR8                        ((uint32_t)0x01000000)        /*!< Port x Reset bit 8 */\n 1667: #define GPIO_BSRR_BR9                        ((uint32_t)0x02000000)        /*!< Port x Reset bit 9 */\n 1668: #define GPIO_BSRR_BR10                       ((uint32_t)0x04000000)        /*!< Port x Reset bit 10 */\n 1669: #define GPIO_BSRR_BR11                       ((uint32_t)0x08000000)        /*!< Port x Reset bit 11 */\n 1670: #define GPIO_BSRR_BR12                       ((uint32_t)0x10000000)        /*!< Port x Reset bit 12 */\n 1671: #define GPIO_BSRR_BR13                       ((uint32_t)0x20000000)        /*!< Port x Reset bit 13 */\n 1672: #define GPIO_BSRR_BR14                       ((uint32_t)0x40000000)        /*!< Port x Reset bit 14 */\n 1673: #define GPIO_BSRR_BR15                       ((uint32_t)0x80000000)        /*!< Port x Reset bit 15 */\n 1674  \n 1675  /*******************  Bit definition for GPIO_BRR register  *******************/\n 1676: #define GPIO_BRR_BR0                         ((uint32_t)0x0001)            /*!< Port x Reset bit 0 */\n 1677: #define GPIO_BRR_BR1                         ((uint32_t)0x0002)            /*!< Port x Reset bit 1 */\n 1678: #define GPIO_BRR_BR2                         ((uint32_t)0x0004)            /*!< Port x Reset bit 2 */\n 1679: #define GPIO_BRR_BR3                         ((uint32_t)0x0008)            /*!< Port x Reset bit 3 */\n 1680: #define GPIO_BRR_BR4                         ((uint32_t)0x0010)            /*!< Port x Reset bit 4 */\n 1681: #define GPIO_BRR_BR5                         ((uint32_t)0x0020)            /*!< Port x Reset bit 5 */\n 1682: #define GPIO_BRR_BR6                         ((uint32_t)0x0040)            /*!< Port x Reset bit 6 */\n 1683: #define GPIO_BRR_BR7                         ((uint32_t)0x0080)            /*!< Port x Reset bit 7 */\n 1684: #define GPIO_BRR_BR8                         ((uint32_t)0x0100)            /*!< Port x Reset bit 8 */\n 1685: #define GPIO_BRR_BR9                         ((uint32_t)0x0200)            /*!< Port x Reset bit 9 */\n 1686: #define GPIO_BRR_BR10                        ((uint32_t)0x0400)            /*!< Port x Reset bit 10 */\n 1687: #define GPIO_BRR_BR11                        ((uint32_t)0x0800)            /*!< Port x Reset bit 11 */\n 1688: #define GPIO_BRR_BR12                        ((uint32_t)0x1000)            /*!< Port x Reset bit 12 */\n 1689: #define GPIO_BRR_BR13                        ((uint32_t)0x2000)            /*!< Port x Reset bit 13 */\n 1690: #define GPIO_BRR_BR14                        ((uint32_t)0x4000)            /*!< Port x Reset bit 14 */\n 1691: #define GPIO_BRR_BR15                        ((uint32_t)0x8000)            /*!< Port x Reset bit 15 */\n 1692  \n 1693  /******************  Bit definition for GPIO_LCKR register  *******************/\n ....\n 1818  #define AFIO_MAPR_SWJ_CFG_2                  ((uint32_t)0x04000000)        /*!< Bit 2 */\n 1819  \n 1820: #define AFIO_MAPR_SWJ_CFG_RESET              ((uint32_t)0x00000000)        /*!< Full SWJ (JTAG-DP + SW-DP) : Reset State */\n 1821  #define AFIO_MAPR_SWJ_CFG_NOJNTRST           ((uint32_t)0x01000000)        /*!< Full SWJ (JTAG-DP + SW-DP) but without JNTRST */\n 1822  #define AFIO_MAPR_SWJ_CFG_JTAGDISABLE        ((uint32_t)0x02000000)        /*!< JTAG-DP Disabled and SW-DP Enabled */\n ....\n 2278  \n 2279  /*!<*****************  Bit definition for SCB_AIRCR register  *******************/\n 2280: #define  SCB_AIRCR_VECTRESET                 ((uint32_t)0x00000001)        /*!< System Reset bit */\n 2281  #define  SCB_AIRCR_VECTCLRACTIVE             ((uint32_t)0x00000002)        /*!< Clear active vector bit */\n 2282: #define  SCB_AIRCR_SYSRESETREQ               ((uint32_t)0x00000004)        /*!< Requests chip control logic to generate a reset */\n 2283  \n 2284  #define  SCB_AIRCR_PRIGROUP                  ((uint32_t)0x00000700)        /*!< PRIGROUP[2:0] bits (Priority group) */\n ....\n 2664  #define  ADC_CR2_CONT                        ((uint32_t)0x00000002)        /*!< Continuous Conversion */\n 2665  #define  ADC_CR2_CAL                         ((uint32_t)0x00000004)        /*!< A/D Calibration */\n 2666: #define  ADC_CR2_RSTCAL                      ((uint32_t)0x00000008)        /*!< Reset Calibration */\n 2667  #define  ADC_CR2_DMA                         ((uint32_t)0x00000100)        /*!< Direct Memory access mode */\n 2668  #define  ADC_CR2_ALIGN                       ((uint32_t)0x00000800)        /*!< Data Alignment */\n ....\n 4134  /*!< Common registers */\n 4135  /*******************  Bit definition for USB_CNTR register  *******************/\n 4136: #define  USB_CNTR_FRES                       ((uint32_t)0x00000001)        /*!< Force USB Reset */\n 4137  #define  USB_CNTR_PDWN                       ((uint32_t)0x00000002)        /*!< Power down */\n 4138  #define  USB_CNTR_LP_MODE                    ((uint32_t)0x00000004)        /*!< Low-power mode */\n ....\n 4141  #define  USB_CNTR_ESOFM                      ((uint32_t)0x00000100)        /*!< Expected Start Of Frame Interrupt Mask */\n 4142  #define  USB_CNTR_SOFM                       ((uint32_t)0x00000200)        /*!< Start Of Frame Interrupt Mask */\n 4143: #define  USB_CNTR_RESETM                     ((uint32_t)0x00000400)        /*!< RESET Interrupt Mask */\n 4144  #define  USB_CNTR_SUSPM                      ((uint32_t)0x00000800)        /*!< Suspend mode Interrupt Mask */\n 4145  #define  USB_CNTR_WKUPM                      ((uint32_t)0x00001000)        /*!< Wakeup Interrupt Mask */\n ....\n 4153  #define  USB_ISTR_ESOF                       ((uint32_t)0x00000100)        /*!< Expected Start Of Frame */\n 4154  #define  USB_ISTR_SOF                        ((uint32_t)0x00000200)        /*!< Start Of Frame */\n 4155: #define  USB_ISTR_RESET                      ((uint32_t)0x00000400)        /*!< USB RESET request */\n 4156  #define  USB_ISTR_SUSP                       ((uint32_t)0x00000800)        /*!< Suspend mode request */\n 4157  #define  USB_ISTR_WKUP                       ((uint32_t)0x00001000)        /*!< Wake up */\n ....\n 4617  #define  CAN_MCR_ABOM                        ((uint32_t)0x00000040)        /*!< Automatic Bus-Off Management */\n 4618  #define  CAN_MCR_TTCM                        ((uint32_t)0x00000080)        /*!< Time Triggered Communication Mode */\n 4619: #define  CAN_MCR_RESET                       ((uint32_t)0x00008000)        /*!< CAN software master reset */\n 4620  #define  CAN_MCR_DBF                         ((uint32_t)0x00010000)        /*!< CAN Debug freeze */\n 4621  \n ....\n 5965  #define  I2C_CR1_PEC                         ((uint32_t)0x00001000)        /*!< Packet Error Checking */\n 5966  #define  I2C_CR1_ALERT                       ((uint32_t)0x00002000)        /*!< SMBus Alert */\n 5967: #define  I2C_CR1_SWRST                       ((uint32_t)0x00008000)        /*!< Software Reset */\n 5968  \n 5969  /*******************  Bit definition for I2C_CR2 register  ********************/\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f105xc.h:\n  497  \n  498  /** \n  499:   * @brief Reset and Clock Control\n  500    */\n  501  \n  ...\n  636    __IO uint32_t GAHBCFG;              /*!<  Core AHB Configuration Register           Address offset: 008h */\n  637    __IO uint32_t GUSBCFG;              /*!<  Core USB Configuration Register           Address offset: 00Ch */\n  638:   __IO uint32_t GRSTCTL;              /*!<  Core Reset Register                       Address offset: 010h */\n  639    __IO uint32_t GINTSTS;              /*!<  Core Interrupt Register                   Address offset: 014h */\n  640    __IO uint32_t GINTMSK;              /*!<  Core Interrupt Mask Register              Address offset: 018h */\n  ...\n  947  \n  948  /********************  Bit definition for CRC_CR register  ********************/\n  949: #define  CRC_CR_RESET                        ((uint32_t)0x00000001)        /*!< RESET bit */\n  950  \n  951  /******************************************************************************/\n  ...\n 1139  /******************************************************************************/\n 1140  /*                                                                            */\n 1141: /*                         Reset and Clock Control                            */\n 1142  /*                                                                            */\n 1143  /******************************************************************************/\n ....\n 1298  \n 1299  /*****************  Bit definition for RCC_APB2RSTR register  *****************/\n 1300: #define  RCC_APB2RSTR_AFIORST                ((uint32_t)0x00000001)        /*!< Alternate Function I/O reset */\n 1301: #define  RCC_APB2RSTR_IOPARST                ((uint32_t)0x00000004)        /*!< I/O port A reset */\n 1302: #define  RCC_APB2RSTR_IOPBRST                ((uint32_t)0x00000008)        /*!< I/O port B reset */\n 1303: #define  RCC_APB2RSTR_IOPCRST                ((uint32_t)0x00000010)        /*!< I/O port C reset */\n 1304: #define  RCC_APB2RSTR_IOPDRST                ((uint32_t)0x00000020)        /*!< I/O port D reset */\n 1305: #define  RCC_APB2RSTR_ADC1RST                ((uint32_t)0x00000200)        /*!< ADC 1 interface reset */\n 1306  \n 1307: #define  RCC_APB2RSTR_ADC2RST                ((uint32_t)0x00000400)        /*!< ADC 2 interface reset */\n 1308  \n 1309: #define  RCC_APB2RSTR_TIM1RST                ((uint32_t)0x00000800)        /*!< TIM1 Timer reset */\n 1310: #define  RCC_APB2RSTR_SPI1RST                ((uint32_t)0x00001000)        /*!< SPI 1 reset */\n 1311: #define  RCC_APB2RSTR_USART1RST              ((uint32_t)0x00004000)        /*!< USART1 reset */\n 1312  \n 1313  \n 1314: #define  RCC_APB2RSTR_IOPERST               ((uint32_t)0x00000040)        /*!< I/O port E reset */\n 1315  \n 1316  \n ....\n 1318  \n 1319  /*****************  Bit definition for RCC_APB1RSTR register  *****************/\n 1320: #define  RCC_APB1RSTR_TIM2RST                ((uint32_t)0x00000001)        /*!< Timer 2 reset */\n 1321: #define  RCC_APB1RSTR_TIM3RST                ((uint32_t)0x00000002)        /*!< Timer 3 reset */\n 1322: #define  RCC_APB1RSTR_WWDGRST                ((uint32_t)0x00000800)        /*!< Window Watchdog reset */\n 1323: #define  RCC_APB1RSTR_USART2RST              ((uint32_t)0x00020000)        /*!< USART 2 reset */\n 1324: #define  RCC_APB1RSTR_I2C1RST                ((uint32_t)0x00200000)        /*!< I2C 1 reset */\n 1325  \n 1326: #define  RCC_APB1RSTR_CAN1RST                ((uint32_t)0x02000000)        /*!< CAN1 reset */\n 1327  \n 1328: #define  RCC_APB1RSTR_BKPRST                 ((uint32_t)0x08000000)        /*!< Backup interface reset */\n 1329: #define  RCC_APB1RSTR_PWRRST                 ((uint32_t)0x10000000)        /*!< Power interface reset */\n 1330  \n 1331: #define  RCC_APB1RSTR_TIM4RST               ((uint32_t)0x00000004)        /*!< Timer 4 reset */\n 1332: #define  RCC_APB1RSTR_SPI2RST               ((uint32_t)0x00004000)        /*!< SPI 2 reset */\n 1333: #define  RCC_APB1RSTR_USART3RST             ((uint32_t)0x00040000)        /*!< USART 3 reset */\n 1334: #define  RCC_APB1RSTR_I2C2RST               ((uint32_t)0x00400000)        /*!< I2C 2 reset */\n 1335  \n 1336  \n 1337: #define  RCC_APB1RSTR_TIM5RST                ((uint32_t)0x00000008)        /*!< Timer 5 reset */\n 1338: #define  RCC_APB1RSTR_TIM6RST                ((uint32_t)0x00000010)        /*!< Timer 6 reset */\n 1339: #define  RCC_APB1RSTR_TIM7RST                ((uint32_t)0x00000020)        /*!< Timer 7 reset */\n 1340: #define  RCC_APB1RSTR_SPI3RST                ((uint32_t)0x00008000)        /*!< SPI 3 reset */\n 1341: #define  RCC_APB1RSTR_UART4RST               ((uint32_t)0x00080000)        /*!< UART 4 reset */\n 1342: #define  RCC_APB1RSTR_UART5RST               ((uint32_t)0x00100000)        /*!< UART 5 reset */\n 1343  \n 1344  \n 1345  \n 1346: #define  RCC_APB1RSTR_CAN2RST                ((uint32_t)0x04000000)        /*!< CAN2 reset */\n 1347  \n 1348: #define  RCC_APB1RSTR_DACRST                 ((uint32_t)0x20000000)        /*!< DAC interface reset */\n 1349  \n 1350  /******************  Bit definition for RCC_AHBENR register  ******************/\n ....\n 1426  \n 1427  #define  RCC_BDCR_RTCEN                      ((uint32_t)0x00008000)        /*!< RTC clock enable */\n 1428: #define  RCC_BDCR_BDRST                      ((uint32_t)0x00010000)        /*!< Backup domain software reset  */\n 1429  \n 1430  /*******************  Bit definition for RCC_CSR register  ********************/  \n 1431  #define  RCC_CSR_LSION                       ((uint32_t)0x00000001)        /*!< Internal Low Speed oscillator enable */\n 1432  #define  RCC_CSR_LSIRDY                      ((uint32_t)0x00000002)        /*!< Internal Low Speed oscillator Ready */\n 1433: #define  RCC_CSR_RMVF                        ((uint32_t)0x01000000)        /*!< Remove reset flag */\n 1434: #define  RCC_CSR_PINRSTF                     ((uint32_t)0x04000000)        /*!< PIN reset flag */\n 1435: #define  RCC_CSR_PORRSTF                     ((uint32_t)0x08000000)        /*!< POR/PDR reset flag */\n 1436: #define  RCC_CSR_SFTRSTF                     ((uint32_t)0x10000000)        /*!< Software Reset flag */\n 1437: #define  RCC_CSR_IWDGRSTF                    ((uint32_t)0x20000000)        /*!< Independent Watchdog reset flag */\n 1438: #define  RCC_CSR_WWDGRSTF                    ((uint32_t)0x40000000)        /*!< Window watchdog reset flag */\n 1439: #define  RCC_CSR_LPWRRSTF                    ((uint32_t)0x80000000)        /*!< Low-Power reset flag */\n 1440  \n 1441  /*******************  Bit definition for RCC_AHBRSTR register  ****************/\n 1442: #define  RCC_AHBRSTR_OTGFSRST               ((uint32_t)0x00001000)         /*!< USB OTG FS reset */\n 1443  \n 1444  /*******************  Bit definition for RCC_CFGR2 register  ******************/\n ....\n 1730  #define GPIO_BSRR_BS15                       ((uint32_t)0x00008000)        /*!< Port x Set bit 15 */\n 1731  \n 1732: #define GPIO_BSRR_BR0                        ((uint32_t)0x00010000)        /*!< Port x Reset bit 0 */\n 1733: #define GPIO_BSRR_BR1                        ((uint32_t)0x00020000)        /*!< Port x Reset bit 1 */\n 1734: #define GPIO_BSRR_BR2                        ((uint32_t)0x00040000)        /*!< Port x Reset bit 2 */\n 1735: #define GPIO_BSRR_BR3                        ((uint32_t)0x00080000)        /*!< Port x Reset bit 3 */\n 1736: #define GPIO_BSRR_BR4                        ((uint32_t)0x00100000)        /*!< Port x Reset bit 4 */\n 1737: #define GPIO_BSRR_BR5                        ((uint32_t)0x00200000)        /*!< Port x Reset bit 5 */\n 1738: #define GPIO_BSRR_BR6                        ((uint32_t)0x00400000)        /*!< Port x Reset bit 6 */\n 1739: #define GPIO_BSRR_BR7                        ((uint32_t)0x00800000)        /*!< Port x Reset bit 7 */\n 1740: #define GPIO_BSRR_BR8                        ((uint32_t)0x01000000)        /*!< Port x Reset bit 8 */\n 1741: #define GPIO_BSRR_BR9                        ((uint32_t)0x02000000)        /*!< Port x Reset bit 9 */\n 1742: #define GPIO_BSRR_BR10                       ((uint32_t)0x04000000)        /*!< Port x Reset bit 10 */\n 1743: #define GPIO_BSRR_BR11                       ((uint32_t)0x08000000)        /*!< Port x Reset bit 11 */\n 1744: #define GPIO_BSRR_BR12                       ((uint32_t)0x10000000)        /*!< Port x Reset bit 12 */\n 1745: #define GPIO_BSRR_BR13                       ((uint32_t)0x20000000)        /*!< Port x Reset bit 13 */\n 1746: #define GPIO_BSRR_BR14                       ((uint32_t)0x40000000)        /*!< Port x Reset bit 14 */\n 1747: #define GPIO_BSRR_BR15                       ((uint32_t)0x80000000)        /*!< Port x Reset bit 15 */\n 1748  \n 1749  /*******************  Bit definition for GPIO_BRR register  *******************/\n 1750: #define GPIO_BRR_BR0                         ((uint32_t)0x0001)            /*!< Port x Reset bit 0 */\n 1751: #define GPIO_BRR_BR1                         ((uint32_t)0x0002)            /*!< Port x Reset bit 1 */\n 1752: #define GPIO_BRR_BR2                         ((uint32_t)0x0004)            /*!< Port x Reset bit 2 */\n 1753: #define GPIO_BRR_BR3                         ((uint32_t)0x0008)            /*!< Port x Reset bit 3 */\n 1754: #define GPIO_BRR_BR4                         ((uint32_t)0x0010)            /*!< Port x Reset bit 4 */\n 1755: #define GPIO_BRR_BR5                         ((uint32_t)0x0020)            /*!< Port x Reset bit 5 */\n 1756: #define GPIO_BRR_BR6                         ((uint32_t)0x0040)            /*!< Port x Reset bit 6 */\n 1757: #define GPIO_BRR_BR7                         ((uint32_t)0x0080)            /*!< Port x Reset bit 7 */\n 1758: #define GPIO_BRR_BR8                         ((uint32_t)0x0100)            /*!< Port x Reset bit 8 */\n 1759: #define GPIO_BRR_BR9                         ((uint32_t)0x0200)            /*!< Port x Reset bit 9 */\n 1760: #define GPIO_BRR_BR10                        ((uint32_t)0x0400)            /*!< Port x Reset bit 10 */\n 1761: #define GPIO_BRR_BR11                        ((uint32_t)0x0800)            /*!< Port x Reset bit 11 */\n 1762: #define GPIO_BRR_BR12                        ((uint32_t)0x1000)            /*!< Port x Reset bit 12 */\n 1763: #define GPIO_BRR_BR13                        ((uint32_t)0x2000)            /*!< Port x Reset bit 13 */\n 1764: #define GPIO_BRR_BR14                        ((uint32_t)0x4000)            /*!< Port x Reset bit 14 */\n 1765: #define GPIO_BRR_BR15                        ((uint32_t)0x8000)            /*!< Port x Reset bit 15 */\n 1766  \n 1767  /******************  Bit definition for GPIO_LCKR register  *******************/\n ....\n 1888  #define AFIO_MAPR_SWJ_CFG_2                  ((uint32_t)0x04000000)        /*!< Bit 2 */\n 1889  \n 1890: #define AFIO_MAPR_SWJ_CFG_RESET              ((uint32_t)0x00000000)        /*!< Full SWJ (JTAG-DP + SW-DP) : Reset State */\n 1891  #define AFIO_MAPR_SWJ_CFG_NOJNTRST           ((uint32_t)0x01000000)        /*!< Full SWJ (JTAG-DP + SW-DP) but without JNTRST */\n 1892  #define AFIO_MAPR_SWJ_CFG_JTAGDISABLE        ((uint32_t)0x02000000)        /*!< JTAG-DP Disabled and SW-DP Enabled */\n ....\n 2359  \n 2360  /*!<*****************  Bit definition for SCB_AIRCR register  *******************/\n 2361: #define  SCB_AIRCR_VECTRESET                 ((uint32_t)0x00000001)        /*!< System Reset bit */\n 2362  #define  SCB_AIRCR_VECTCLRACTIVE             ((uint32_t)0x00000002)        /*!< Clear active vector bit */\n 2363: #define  SCB_AIRCR_SYSRESETREQ               ((uint32_t)0x00000004)        /*!< Requests chip control logic to generate a reset */\n 2364  \n 2365  #define  SCB_AIRCR_PRIGROUP                  ((uint32_t)0x00000700)        /*!< PRIGROUP[2:0] bits (Priority group) */\n ....\n 2745  #define  ADC_CR2_CONT                        ((uint32_t)0x00000002)        /*!< Continuous Conversion */\n 2746  #define  ADC_CR2_CAL                         ((uint32_t)0x00000004)        /*!< A/D Calibration */\n 2747: #define  ADC_CR2_RSTCAL                      ((uint32_t)0x00000008)        /*!< Reset Calibration */\n 2748  #define  ADC_CR2_DMA                         ((uint32_t)0x00000100)        /*!< Direct Memory access mode */\n 2749  #define  ADC_CR2_ALIGN                       ((uint32_t)0x00000800)        /*!< Data Alignment */\n ....\n 3710  #define  CAN_MCR_ABOM                        ((uint32_t)0x00000040)        /*!< Automatic Bus-Off Management */\n 3711  #define  CAN_MCR_TTCM                        ((uint32_t)0x00000080)        /*!< Time Triggered Communication Mode */\n 3712: #define  CAN_MCR_RESET                       ((uint32_t)0x00008000)        /*!< CAN software master reset */\n 3713  #define  CAN_MCR_DBF                         ((uint32_t)0x00010000)        /*!< CAN Debug freeze */\n 3714  \n ....\n 6066  #define  I2C_CR1_PEC                         ((uint32_t)0x00001000)        /*!< Packet Error Checking */\n 6067  #define  I2C_CR1_ALERT                       ((uint32_t)0x00002000)        /*!< SMBus Alert */\n 6068: #define  I2C_CR1_SWRST                       ((uint32_t)0x00008000)        /*!< Software Reset */\n 6069  \n 6070  /*******************  Bit definition for I2C_CR2 register  ********************/\n ....\n 6506  \n 6507  /********************  Bit definition forUSB_OTG_GRSTCTL register  *****************/\n 6508: #define USB_OTG_GRSTCTL_CSRST                ((uint32_t)0x00000001)        /*!< Core soft reset */\n 6509: #define USB_OTG_GRSTCTL_HSRST                ((uint32_t)0x00000002)        /*!< HCLK soft reset */\n 6510: #define USB_OTG_GRSTCTL_FCRST                ((uint32_t)0x00000004)        /*!< Host frame counter reset */\n 6511  #define USB_OTG_GRSTCTL_RXFFLSH              ((uint32_t)0x00000010)        /*!< RxFIFO flush */\n 6512  #define USB_OTG_GRSTCTL_TXFFLSH              ((uint32_t)0x00000020)        /*!< TxFIFO flush */\n ....\n 6577  #define USB_OTG_GINTSTS_ESUSP                ((uint32_t)0x00000400)        /*!< Early suspend */\n 6578  #define USB_OTG_GINTSTS_USBSUSP              ((uint32_t)0x00000800)        /*!< USB suspend */\n 6579: #define USB_OTG_GINTSTS_USBRST               ((uint32_t)0x00001000)        /*!< USB reset */\n 6580  #define USB_OTG_GINTSTS_ENUMDNE              ((uint32_t)0x00002000)        /*!< Enumeration done */\n 6581  #define USB_OTG_GINTSTS_ISOODRP              ((uint32_t)0x00004000)        /*!< Isochronous OUT packet dropped interrupt */\n ....\n 6604  #define USB_OTG_GINTMSK_ESUSPM               ((uint32_t)0x00000400)        /*!< Early suspend mask */\n 6605  #define USB_OTG_GINTMSK_USBSUSPM             ((uint32_t)0x00000800)        /*!< USB suspend mask */\n 6606: #define USB_OTG_GINTMSK_USBRST               ((uint32_t)0x00001000)        /*!< USB reset mask */\n 6607  #define USB_OTG_GINTMSK_ENUMDNEM             ((uint32_t)0x00002000)        /*!< Enumeration done mask */\n 6608  #define USB_OTG_GINTMSK_ISOODRPM             ((uint32_t)0x00004000)        /*!< Isochronous OUT packet dropped interrupt mask */\n ....\n 6806  #define USB_OTG_HPRT_PRES                    ((uint32_t)0x00000040)        /*!< Port resume */\n 6807  #define USB_OTG_HPRT_PSUSP                   ((uint32_t)0x00000080)        /*!< Port suspend */\n 6808: #define USB_OTG_HPRT_PRST                    ((uint32_t)0x00000100)        /*!< Port reset */\n 6809  \n 6810  #define USB_OTG_HPRT_PLSTS                   ((uint32_t)0x00000C00)        /*!< Port line status */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f107xc.h:\n  571  \n  572  /** \n  573:   * @brief Reset and Clock Control\n  574    */\n  575  \n  ...\n  710    __IO uint32_t GAHBCFG;              /*!<  Core AHB Configuration Register           Address offset: 008h */\n  711    __IO uint32_t GUSBCFG;              /*!<  Core USB Configuration Register           Address offset: 00Ch */\n  712:   __IO uint32_t GRSTCTL;              /*!<  Core Reset Register                       Address offset: 010h */\n  713    __IO uint32_t GINTSTS;              /*!<  Core Interrupt Register                   Address offset: 014h */\n  714    __IO uint32_t GINTMSK;              /*!<  Core Interrupt Mask Register              Address offset: 018h */\n  ...\n 1027  \n 1028  /********************  Bit definition for CRC_CR register  ********************/\n 1029: #define  CRC_CR_RESET                        ((uint32_t)0x00000001)        /*!< RESET bit */\n 1030  \n 1031  /******************************************************************************/\n ....\n 1219  /******************************************************************************/\n 1220  /*                                                                            */\n 1221: /*                         Reset and Clock Control                            */\n 1222  /*                                                                            */\n 1223  /******************************************************************************/\n ....\n 1378  \n 1379  /*****************  Bit definition for RCC_APB2RSTR register  *****************/\n 1380: #define  RCC_APB2RSTR_AFIORST                ((uint32_t)0x00000001)        /*!< Alternate Function I/O reset */\n 1381: #define  RCC_APB2RSTR_IOPARST                ((uint32_t)0x00000004)        /*!< I/O port A reset */\n 1382: #define  RCC_APB2RSTR_IOPBRST                ((uint32_t)0x00000008)        /*!< I/O port B reset */\n 1383: #define  RCC_APB2RSTR_IOPCRST                ((uint32_t)0x00000010)        /*!< I/O port C reset */\n 1384: #define  RCC_APB2RSTR_IOPDRST                ((uint32_t)0x00000020)        /*!< I/O port D reset */\n 1385: #define  RCC_APB2RSTR_ADC1RST                ((uint32_t)0x00000200)        /*!< ADC 1 interface reset */\n 1386  \n 1387: #define  RCC_APB2RSTR_ADC2RST                ((uint32_t)0x00000400)        /*!< ADC 2 interface reset */\n 1388  \n 1389: #define  RCC_APB2RSTR_TIM1RST                ((uint32_t)0x00000800)        /*!< TIM1 Timer reset */\n 1390: #define  RCC_APB2RSTR_SPI1RST                ((uint32_t)0x00001000)        /*!< SPI 1 reset */\n 1391: #define  RCC_APB2RSTR_USART1RST              ((uint32_t)0x00004000)        /*!< USART1 reset */\n 1392  \n 1393  \n 1394: #define  RCC_APB2RSTR_IOPERST               ((uint32_t)0x00000040)        /*!< I/O port E reset */\n 1395  \n 1396  \n ....\n 1398  \n 1399  /*****************  Bit definition for RCC_APB1RSTR register  *****************/\n 1400: #define  RCC_APB1RSTR_TIM2RST                ((uint32_t)0x00000001)        /*!< Timer 2 reset */\n 1401: #define  RCC_APB1RSTR_TIM3RST                ((uint32_t)0x00000002)        /*!< Timer 3 reset */\n 1402: #define  RCC_APB1RSTR_WWDGRST                ((uint32_t)0x00000800)        /*!< Window Watchdog reset */\n 1403: #define  RCC_APB1RSTR_USART2RST              ((uint32_t)0x00020000)        /*!< USART 2 reset */\n 1404: #define  RCC_APB1RSTR_I2C1RST                ((uint32_t)0x00200000)        /*!< I2C 1 reset */\n 1405  \n 1406: #define  RCC_APB1RSTR_CAN1RST                ((uint32_t)0x02000000)        /*!< CAN1 reset */\n 1407  \n 1408: #define  RCC_APB1RSTR_BKPRST                 ((uint32_t)0x08000000)        /*!< Backup interface reset */\n 1409: #define  RCC_APB1RSTR_PWRRST                 ((uint32_t)0x10000000)        /*!< Power interface reset */\n 1410  \n 1411: #define  RCC_APB1RSTR_TIM4RST               ((uint32_t)0x00000004)        /*!< Timer 4 reset */\n 1412: #define  RCC_APB1RSTR_SPI2RST               ((uint32_t)0x00004000)        /*!< SPI 2 reset */\n 1413: #define  RCC_APB1RSTR_USART3RST             ((uint32_t)0x00040000)        /*!< USART 3 reset */\n 1414: #define  RCC_APB1RSTR_I2C2RST               ((uint32_t)0x00400000)        /*!< I2C 2 reset */\n 1415  \n 1416  \n 1417: #define  RCC_APB1RSTR_TIM5RST                ((uint32_t)0x00000008)        /*!< Timer 5 reset */\n 1418: #define  RCC_APB1RSTR_TIM6RST                ((uint32_t)0x00000010)        /*!< Timer 6 reset */\n 1419: #define  RCC_APB1RSTR_TIM7RST                ((uint32_t)0x00000020)        /*!< Timer 7 reset */\n 1420: #define  RCC_APB1RSTR_SPI3RST                ((uint32_t)0x00008000)        /*!< SPI 3 reset */\n 1421: #define  RCC_APB1RSTR_UART4RST               ((uint32_t)0x00080000)        /*!< UART 4 reset */\n 1422: #define  RCC_APB1RSTR_UART5RST               ((uint32_t)0x00100000)        /*!< UART 5 reset */\n 1423  \n 1424  \n 1425  \n 1426: #define  RCC_APB1RSTR_CAN2RST                ((uint32_t)0x04000000)        /*!< CAN2 reset */\n 1427  \n 1428: #define  RCC_APB1RSTR_DACRST                 ((uint32_t)0x20000000)        /*!< DAC interface reset */\n 1429  \n 1430  /******************  Bit definition for RCC_AHBENR register  ******************/\n ....\n 1509  \n 1510  #define  RCC_BDCR_RTCEN                      ((uint32_t)0x00008000)        /*!< RTC clock enable */\n 1511: #define  RCC_BDCR_BDRST                      ((uint32_t)0x00010000)        /*!< Backup domain software reset  */\n 1512  \n 1513  /*******************  Bit definition for RCC_CSR register  ********************/  \n 1514  #define  RCC_CSR_LSION                       ((uint32_t)0x00000001)        /*!< Internal Low Speed oscillator enable */\n 1515  #define  RCC_CSR_LSIRDY                      ((uint32_t)0x00000002)        /*!< Internal Low Speed oscillator Ready */\n 1516: #define  RCC_CSR_RMVF                        ((uint32_t)0x01000000)        /*!< Remove reset flag */\n 1517: #define  RCC_CSR_PINRSTF                     ((uint32_t)0x04000000)        /*!< PIN reset flag */\n 1518: #define  RCC_CSR_PORRSTF                     ((uint32_t)0x08000000)        /*!< POR/PDR reset flag */\n 1519: #define  RCC_CSR_SFTRSTF                     ((uint32_t)0x10000000)        /*!< Software Reset flag */\n 1520: #define  RCC_CSR_IWDGRSTF                    ((uint32_t)0x20000000)        /*!< Independent Watchdog reset flag */\n 1521: #define  RCC_CSR_WWDGRSTF                    ((uint32_t)0x40000000)        /*!< Window watchdog reset flag */\n 1522: #define  RCC_CSR_LPWRRSTF                    ((uint32_t)0x80000000)        /*!< Low-Power reset flag */\n 1523  \n 1524  /*******************  Bit definition for RCC_AHBRSTR register  ****************/\n 1525: #define  RCC_AHBRSTR_OTGFSRST               ((uint32_t)0x00001000)         /*!< USB OTG FS reset */\n 1526: #define  RCC_AHBRSTR_ETHMACRST              ((uint32_t)0x00004000)         /*!< ETHERNET MAC reset */\n 1527  \n 1528  /*******************  Bit definition for RCC_CFGR2 register  ******************/\n ....\n 1814  #define GPIO_BSRR_BS15                       ((uint32_t)0x00008000)        /*!< Port x Set bit 15 */\n 1815  \n 1816: #define GPIO_BSRR_BR0                        ((uint32_t)0x00010000)        /*!< Port x Reset bit 0 */\n 1817: #define GPIO_BSRR_BR1                        ((uint32_t)0x00020000)        /*!< Port x Reset bit 1 */\n 1818: #define GPIO_BSRR_BR2                        ((uint32_t)0x00040000)        /*!< Port x Reset bit 2 */\n 1819: #define GPIO_BSRR_BR3                        ((uint32_t)0x00080000)        /*!< Port x Reset bit 3 */\n 1820: #define GPIO_BSRR_BR4                        ((uint32_t)0x00100000)        /*!< Port x Reset bit 4 */\n 1821: #define GPIO_BSRR_BR5                        ((uint32_t)0x00200000)        /*!< Port x Reset bit 5 */\n 1822: #define GPIO_BSRR_BR6                        ((uint32_t)0x00400000)        /*!< Port x Reset bit 6 */\n 1823: #define GPIO_BSRR_BR7                        ((uint32_t)0x00800000)        /*!< Port x Reset bit 7 */\n 1824: #define GPIO_BSRR_BR8                        ((uint32_t)0x01000000)        /*!< Port x Reset bit 8 */\n 1825: #define GPIO_BSRR_BR9                        ((uint32_t)0x02000000)        /*!< Port x Reset bit 9 */\n 1826: #define GPIO_BSRR_BR10                       ((uint32_t)0x04000000)        /*!< Port x Reset bit 10 */\n 1827: #define GPIO_BSRR_BR11                       ((uint32_t)0x08000000)        /*!< Port x Reset bit 11 */\n 1828: #define GPIO_BSRR_BR12                       ((uint32_t)0x10000000)        /*!< Port x Reset bit 12 */\n 1829: #define GPIO_BSRR_BR13                       ((uint32_t)0x20000000)        /*!< Port x Reset bit 13 */\n 1830: #define GPIO_BSRR_BR14                       ((uint32_t)0x40000000)        /*!< Port x Reset bit 14 */\n 1831: #define GPIO_BSRR_BR15                       ((uint32_t)0x80000000)        /*!< Port x Reset bit 15 */\n 1832  \n 1833  /*******************  Bit definition for GPIO_BRR register  *******************/\n 1834: #define GPIO_BRR_BR0                         ((uint32_t)0x0001)            /*!< Port x Reset bit 0 */\n 1835: #define GPIO_BRR_BR1                         ((uint32_t)0x0002)            /*!< Port x Reset bit 1 */\n 1836: #define GPIO_BRR_BR2                         ((uint32_t)0x0004)            /*!< Port x Reset bit 2 */\n 1837: #define GPIO_BRR_BR3                         ((uint32_t)0x0008)            /*!< Port x Reset bit 3 */\n 1838: #define GPIO_BRR_BR4                         ((uint32_t)0x0010)            /*!< Port x Reset bit 4 */\n 1839: #define GPIO_BRR_BR5                         ((uint32_t)0x0020)            /*!< Port x Reset bit 5 */\n 1840: #define GPIO_BRR_BR6                         ((uint32_t)0x0040)            /*!< Port x Reset bit 6 */\n 1841: #define GPIO_BRR_BR7                         ((uint32_t)0x0080)            /*!< Port x Reset bit 7 */\n 1842: #define GPIO_BRR_BR8                         ((uint32_t)0x0100)            /*!< Port x Reset bit 8 */\n 1843: #define GPIO_BRR_BR9                         ((uint32_t)0x0200)            /*!< Port x Reset bit 9 */\n 1844: #define GPIO_BRR_BR10                        ((uint32_t)0x0400)            /*!< Port x Reset bit 10 */\n 1845: #define GPIO_BRR_BR11                        ((uint32_t)0x0800)            /*!< Port x Reset bit 11 */\n 1846: #define GPIO_BRR_BR12                        ((uint32_t)0x1000)            /*!< Port x Reset bit 12 */\n 1847: #define GPIO_BRR_BR13                        ((uint32_t)0x2000)            /*!< Port x Reset bit 13 */\n 1848: #define GPIO_BRR_BR14                        ((uint32_t)0x4000)            /*!< Port x Reset bit 14 */\n 1849: #define GPIO_BRR_BR15                        ((uint32_t)0x8000)            /*!< Port x Reset bit 15 */\n 1850  \n 1851  /******************  Bit definition for GPIO_LCKR register  *******************/\n ....\n 1972  #define AFIO_MAPR_SWJ_CFG_2                  ((uint32_t)0x04000000)        /*!< Bit 2 */\n 1973  \n 1974: #define AFIO_MAPR_SWJ_CFG_RESET              ((uint32_t)0x00000000)        /*!< Full SWJ (JTAG-DP + SW-DP) : Reset State */\n 1975  #define AFIO_MAPR_SWJ_CFG_NOJNTRST           ((uint32_t)0x01000000)        /*!< Full SWJ (JTAG-DP + SW-DP) but without JNTRST */\n 1976  #define AFIO_MAPR_SWJ_CFG_JTAGDISABLE        ((uint32_t)0x02000000)        /*!< JTAG-DP Disabled and SW-DP Enabled */\n ....\n 2443  \n 2444  /*!<*****************  Bit definition for SCB_AIRCR register  *******************/\n 2445: #define  SCB_AIRCR_VECTRESET                 ((uint32_t)0x00000001)        /*!< System Reset bit */\n 2446  #define  SCB_AIRCR_VECTCLRACTIVE             ((uint32_t)0x00000002)        /*!< Clear active vector bit */\n 2447: #define  SCB_AIRCR_SYSRESETREQ               ((uint32_t)0x00000004)        /*!< Requests chip control logic to generate a reset */\n 2448  \n 2449  #define  SCB_AIRCR_PRIGROUP                  ((uint32_t)0x00000700)        /*!< PRIGROUP[2:0] bits (Priority group) */\n ....\n 2829  #define  ADC_CR2_CONT                        ((uint32_t)0x00000002)        /*!< Continuous Conversion */\n 2830  #define  ADC_CR2_CAL                         ((uint32_t)0x00000004)        /*!< A/D Calibration */\n 2831: #define  ADC_CR2_RSTCAL                      ((uint32_t)0x00000008)        /*!< Reset Calibration */\n 2832  #define  ADC_CR2_DMA                         ((uint32_t)0x00000100)        /*!< Direct Memory access mode */\n 2833  #define  ADC_CR2_ALIGN                       ((uint32_t)0x00000800)        /*!< Data Alignment */\n ....\n 3794  #define  CAN_MCR_ABOM                        ((uint32_t)0x00000040)        /*!< Automatic Bus-Off Management */\n 3795  #define  CAN_MCR_TTCM                        ((uint32_t)0x00000080)        /*!< Time Triggered Communication Mode */\n 3796: #define  CAN_MCR_RESET                       ((uint32_t)0x00008000)        /*!< CAN software master reset */\n 3797  #define  CAN_MCR_DBF                         ((uint32_t)0x00010000)        /*!< CAN Debug freeze */\n 3798  \n ....\n 6150  #define  I2C_CR1_PEC                         ((uint32_t)0x00001000)        /*!< Packet Error Checking */\n 6151  #define  I2C_CR1_ALERT                       ((uint32_t)0x00002000)        /*!< SMBus Alert */\n 6152: #define  I2C_CR1_SWRST                       ((uint32_t)0x00008000)        /*!< Software Reset */\n 6153  \n 6154  /*******************  Bit definition for I2C_CR2 register  ********************/\n ....\n 6553  \n 6554  /* Bit definition for Ethernet MAC PMT Control and Status Register */ \n 6555: #define ETH_MACPMTCSR_WFFRPR ((uint32_t)0x80000000)  /* Wake-Up Frame Filter Register Pointer Reset */\n 6556  #define ETH_MACPMTCSR_GU     ((uint32_t)0x00000200)  /* Global Unicast */\n 6557  #define ETH_MACPMTCSR_WFR    ((uint32_t)0x00000040)  /* Wake-Up Frame Received */\n ....\n 6629  /* Bit definition for Ethernet MMC Contol Register */\n 6630  #define ETH_MMCCR_MCF        ((uint32_t)0x00000008)  /* MMC Counter Freeze */\n 6631: #define ETH_MMCCR_ROR        ((uint32_t)0x00000004)  /* Reset on Read */\n 6632  #define ETH_MMCCR_CSR        ((uint32_t)0x00000002)  /* Counter Stop Rollover */\n 6633: #define ETH_MMCCR_CR         ((uint32_t)0x00000001)  /* Counters Reset */\n 6634  \n 6635  /* Bit definition for Ethernet MMC Receive Interrupt Register */\n ....\n 6751  #define ETH_DMABMR_DSL       ((uint32_t)0x0000007C)  /* Descriptor Skip Length */\n 6752  #define ETH_DMABMR_DA        ((uint32_t)0x00000002)  /* DMA arbitration scheme */\n 6753: #define ETH_DMABMR_SR        ((uint32_t)0x00000001)  /* Software reset */\n 6754  \n 6755  /* Bit definition for Ethernet DMA Transmit Poll Demand Register */\n ....\n 6775  #define ETH_DMASR_EBS_DataTransfTx    ((uint32_t)0x00800000)  /* Error bits 0-Rx DMA, 1-Tx DMA */\n 6776  #define ETH_DMASR_TPS         ((uint32_t)0x00700000)  /* Transmit process state */\n 6777: #define ETH_DMASR_TPS_Stopped         ((uint32_t)0x00000000)  /* Stopped - Reset or Stop Tx Command issued  */\n 6778  #define ETH_DMASR_TPS_Fetching        ((uint32_t)0x00100000)  /* Running - fetching the Tx descriptor */\n 6779  #define ETH_DMASR_TPS_Waiting         ((uint32_t)0x00200000)  /* Running - waiting for status */\n ....\n 6782  #define ETH_DMASR_TPS_Closing         ((uint32_t)0x00700000)  /* Running - closing Rx descriptor */\n 6783  #define ETH_DMASR_RPS         ((uint32_t)0x000E0000)  /* Receive process state */\n 6784: #define ETH_DMASR_RPS_Stopped         ((uint32_t)0x00000000)  /* Stopped - Reset or Stop Rx Command issued */\n 6785  #define ETH_DMASR_RPS_Fetching        ((uint32_t)0x00020000)  /* Running - fetching the Rx descriptor */\n 6786  #define ETH_DMASR_RPS_Waiting         ((uint32_t)0x00060000)  /* Running - waiting for packet */\n ....\n 7001  \n 7002  /********************  Bit definition forUSB_OTG_GRSTCTL register  *****************/\n 7003: #define USB_OTG_GRSTCTL_CSRST                ((uint32_t)0x00000001)        /*!< Core soft reset */\n 7004: #define USB_OTG_GRSTCTL_HSRST                ((uint32_t)0x00000002)        /*!< HCLK soft reset */\n 7005: #define USB_OTG_GRSTCTL_FCRST                ((uint32_t)0x00000004)        /*!< Host frame counter reset */\n 7006  #define USB_OTG_GRSTCTL_RXFFLSH              ((uint32_t)0x00000010)        /*!< RxFIFO flush */\n 7007  #define USB_OTG_GRSTCTL_TXFFLSH              ((uint32_t)0x00000020)        /*!< TxFIFO flush */\n ....\n 7072  #define USB_OTG_GINTSTS_ESUSP                ((uint32_t)0x00000400)        /*!< Early suspend */\n 7073  #define USB_OTG_GINTSTS_USBSUSP              ((uint32_t)0x00000800)        /*!< USB suspend */\n 7074: #define USB_OTG_GINTSTS_USBRST               ((uint32_t)0x00001000)        /*!< USB reset */\n 7075  #define USB_OTG_GINTSTS_ENUMDNE              ((uint32_t)0x00002000)        /*!< Enumeration done */\n 7076  #define USB_OTG_GINTSTS_ISOODRP              ((uint32_t)0x00004000)        /*!< Isochronous OUT packet dropped interrupt */\n ....\n 7099  #define USB_OTG_GINTMSK_ESUSPM               ((uint32_t)0x00000400)        /*!< Early suspend mask */\n 7100  #define USB_OTG_GINTMSK_USBSUSPM             ((uint32_t)0x00000800)        /*!< USB suspend mask */\n 7101: #define USB_OTG_GINTMSK_USBRST               ((uint32_t)0x00001000)        /*!< USB reset mask */\n 7102  #define USB_OTG_GINTMSK_ENUMDNEM             ((uint32_t)0x00002000)        /*!< Enumeration done mask */\n 7103  #define USB_OTG_GINTMSK_ISOODRPM             ((uint32_t)0x00004000)        /*!< Isochronous OUT packet dropped interrupt mask */\n ....\n 7301  #define USB_OTG_HPRT_PRES                    ((uint32_t)0x00000040)        /*!< Port resume */\n 7302  #define USB_OTG_HPRT_PSUSP                   ((uint32_t)0x00000080)        /*!< Port suspend */\n 7303: #define USB_OTG_HPRT_PRST                    ((uint32_t)0x00000100)        /*!< Port reset */\n 7304  \n 7305  #define USB_OTG_HPRT_PLSTS                   ((uint32_t)0x00000C00)        /*!< Port line status */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f1xx.h:\n  169  typedef enum \n  170  {\n  171:   RESET = 0, \n  172:   SET = !RESET\n  173  } FlagStatus, ITStatus;\n  174  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Source\\Templates\\gcc\\startup_stm32f103xb.s:\n   13    *                - Branches to main in the C library (which eventually\n   14    *                  calls main()).\n   15:   *            After Reset the Cortex-M3 processor is in Thread mode,\n   16    *            priority is Privileged, and the Stack is set to Main.\n   17    ******************************************************************************\n   ..\n   67  /**\n   68   * @brief  This is the code that gets called when the processor first\n   69:  *          starts execution following a reset event. Only the absolutely\n   70   *          necessary set is performed, after which the application\n   71   *          supplied main() routine is called.\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Source\\Templates\\system_stm32f1xx.c:\n   11    *      - SystemInit(): Setups the system clock (System clock source, PLL Multiplier\n   12    *                      factors, AHB/APBx prescalers and Flash settings). \n   13:   *                      This function is called at startup just after reset and \n   14    *                      before branch to main program. This call is made inside\n   15    *                      the \"startup_stm32f1xx_xx.s\" file.\n   ..\n   23    *                                 during program execution.\n   24    *\n   25:   * 2. After each device reset the HSI (8 MHz) is used as system clock source.\n   26    *    Then SystemInit() function is called, in \"startup_stm32f1xx_xx.s\" file, to\n   27    *    configure the system clock before to branch to main program.\n   ..\n  167    *         Initialize the Embedded Flash Interface, the PLL and update the \n  168    *         SystemCoreClock variable.\n  169:   * @note   This function should be used only after reset.\n  170    * @param  None\n  171    * @retval None\n  ...\n  173  void SystemInit (void)\n  174  {\n  175:   /* Reset the RCC clock configuration to the default reset state(for debug purpose) */\n  176    /* Set HSION bit */\n  177    RCC->CR |= (uint32_t)0x00000001;\n  178  \n  179:   /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */\n  180  #if !defined(STM32F105xC) && !defined(STM32F107xC)\n  181    RCC->CFGR &= (uint32_t)0xF8FF0000;\n  ...\n  184  #endif /* STM32F105xC */   \n  185    \n  186:   /* Reset HSEON, CSSON and PLLON bits */\n  187    RCC->CR &= (uint32_t)0xFEF6FFFF;\n  188  \n  189:   /* Reset HSEBYP bit */\n  190    RCC->CR &= (uint32_t)0xFFFBFFFF;\n  191  \n  192:   /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */\n  193    RCC->CFGR &= (uint32_t)0xFF80FFFF;\n  194  \n  195  #if defined(STM32F105xC) || defined(STM32F107xC)\n  196:   /* Reset PLL2ON and PLL3ON bits */\n  197    RCC->CR &= (uint32_t)0xEBFFFFFF;\n  198  \n  ...\n  200    RCC->CIR = 0x00FF0000;\n  201  \n  202:   /* Reset CFGR2 register */\n  203    RCC->CFGR2 = 0x00000000;\n  204  #elif defined(STM32F100xB) || defined(STM32F100xE)\n  ...\n  206    RCC->CIR = 0x009F0000;\n  207  \n  208:   /* Reset CFGR2 register */\n  209    RCC->CFGR2 = 0x00000000;      \n  210  #else\n  ...\n  306   #else\n  307          /* HSE selected as PLL clock entry */\n  308:         if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)\n  309          {/* HSE oscillator clock divided by 2 */\n  310            SystemCoreClock = (HSE_VALUE >> 1) * pllmull;\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Include\\arm_math.h:\n 1872     * @brief  Initialization function for the floating-point PID Control.\n 1873     * @param[in,out] *S      points to an instance of the PID structure.\n 1874:    * @param[in]     resetStateFlag  flag to reset the state. 0 = no change in state 1 = reset the state.\n 1875     * @return none.\n 1876     */\n ....\n 1880  \n 1881    /**\n 1882:    * @brief  Reset function for the floating-point PID Control.\n 1883     * @param[in,out] *S is an instance of the floating-point PID Control structure\n 1884     * @return none\n ....\n 1891     * @brief  Initialization function for the Q31 PID Control.\n 1892     * @param[in,out] *S points to an instance of the Q15 PID structure.\n 1893:    * @param[in]     resetStateFlag  flag to reset the state. 0 = no change in state 1 = reset the state.\n 1894     * @return none.\n 1895     */\n ....\n 1900  \n 1901    /**\n 1902:    * @brief  Reset function for the Q31 PID Control.\n 1903     * @param[in,out] *S points to an instance of the Q31 PID Control structure\n 1904     * @return none\n ....\n 1911     * @brief  Initialization function for the Q15 PID Control.\n 1912     * @param[in,out] *S points to an instance of the Q15 PID structure.\n 1913:    * @param[in] resetStateFlag  flag to reset the state. 0 = no change in state 1 = reset the state.\n 1914     * @return none.\n 1915     */\n ....\n 1919  \n 1920    /**\n 1921:    * @brief  Reset function for the Q15 PID Control.\n 1922     * @param[in,out] *S points to an instance of the q15 PID Control structure\n 1923     * @return none\n ....\n 5066     * There are separate instance structure declarations for each of the 3 supported data types.\n 5067     *\n 5068:    * \\par Reset Functions\n 5069:    * There is also an associated reset function for each data type which clears the state array.\n 5070     *\n 5071     * \\par Initialization Functions\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Include\\core_cm0.h:\n  362    __IO uint32_t ICSR;                    /*!< Offset: 0x004 (R/W)  Interrupt Control and State Register                  */\n  363         uint32_t RESERVED0;\n  364:   __IO uint32_t AIRCR;                   /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset Control Register      */\n  365    __IO uint32_t SCR;                     /*!< Offset: 0x010 (R/W)  System Control Register                               */\n  366    __IO uint32_t CCR;                     /*!< Offset: 0x014 (R/W)  Configuration Control Register                        */\n  ...\n  414  #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB ICSR: VECTACTIVE Mask */\n  415  \n  416: /* SCB Application Interrupt and Reset Control Register Definitions */\n  417  #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB AIRCR: VECTKEY Position */\n  418  #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB AIRCR: VECTKEY Mask */\n  ...\n  670  \n  671  \n  672: /** \\brief  System Reset\n  673  \n  674:     The function initiates a system reset request to reset the MCU.\n  675   */\n  676  __STATIC_INLINE void NVIC_SystemReset(void)\n  677  {\n  678    __DSB();                                                     /* Ensure all outstanding memory accesses included\n  679:                                                                   buffered write are completed before reset */\n  680    SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |\n  681                   SCB_AIRCR_SYSRESETREQ_Msk);\n  682    __DSB();                                                     /* Ensure completion of memory access */\n  683:   while(1) { __NOP(); }                                        /* wait until reset */\n  684  }\n  685  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Include\\core_cm0plus.h:\n  380         uint32_t RESERVED0;\n  381  #endif\n  382:   __IO uint32_t AIRCR;                   /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset Control Register      */\n  383    __IO uint32_t SCR;                     /*!< Offset: 0x010 (R/W)  System Control Register                               */\n  384    __IO uint32_t CCR;                     /*!< Offset: 0x014 (R/W)  Configuration Control Register                        */\n  ...\n  438  #endif\n  439  \n  440: /* SCB Application Interrupt and Reset Control Register Definitions */\n  441  #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB AIRCR: VECTKEY Position */\n  442  #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB AIRCR: VECTKEY Mask */\n  ...\n  784  \n  785  \n  786: /** \\brief  System Reset\n  787  \n  788:     The function initiates a system reset request to reset the MCU.\n  789   */\n  790  __STATIC_INLINE void NVIC_SystemReset(void)\n  791  {\n  792    __DSB();                                                     /* Ensure all outstanding memory accesses included\n  793:                                                                   buffered write are completed before reset */\n  794    SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |\n  795                   SCB_AIRCR_SYSRESETREQ_Msk);\n  796    __DSB();                                                     /* Ensure completion of memory access */\n  797:   while(1) { __NOP(); }                                        /* wait until reset */\n  798  }\n  799  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Include\\core_cm3.h:\n  390    __IO uint32_t ICSR;                    /*!< Offset: 0x004 (R/W)  Interrupt Control and State Register                  */\n  391    __IO uint32_t VTOR;                    /*!< Offset: 0x008 (R/W)  Vector Table Offset Register                          */\n  392:   __IO uint32_t AIRCR;                   /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset Control Register      */\n  393    __IO uint32_t SCR;                     /*!< Offset: 0x010 (R/W)  System Control Register                               */\n  394    __IO uint32_t CCR;                     /*!< Offset: 0x014 (R/W)  Configuration Control Register                        */\n  ...\n  469  #endif\n  470  \n  471: /* SCB Application Interrupt and Reset Control Register Definitions */\n  472  #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB AIRCR: VECTKEY Position */\n  473  #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB AIRCR: VECTKEY Mask */\n  ...\n 1550  \n 1551  \n 1552: /** \\brief  System Reset\n 1553  \n 1554:     The function initiates a system reset request to reset the MCU.\n 1555   */\n 1556  __STATIC_INLINE void NVIC_SystemReset(void)\n 1557  {\n 1558    __DSB();                                                          /* Ensure all outstanding memory accesses included\n 1559:                                                                        buffered write are completed before reset */\n 1560    SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |\n 1561                             (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |\n 1562                              SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */\n 1563    __DSB();                                                          /* Ensure completion of memory access */\n 1564:   while(1) { __NOP(); }                                             /* wait until reset */\n 1565  }\n 1566  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Include\\core_cm4.h:\n  451    __IO uint32_t ICSR;                    /*!< Offset: 0x004 (R/W)  Interrupt Control and State Register                  */\n  452    __IO uint32_t VTOR;                    /*!< Offset: 0x008 (R/W)  Vector Table Offset Register                          */\n  453:   __IO uint32_t AIRCR;                   /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset Control Register      */\n  454    __IO uint32_t SCR;                     /*!< Offset: 0x010 (R/W)  System Control Register                               */\n  455    __IO uint32_t CCR;                     /*!< Offset: 0x014 (R/W)  Configuration Control Register                        */\n  ...\n  522  #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB VTOR: TBLOFF Mask */\n  523  \n  524: /* SCB Application Interrupt and Reset Control Register Definitions */\n  525  #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB AIRCR: VECTKEY Position */\n  526  #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB AIRCR: VECTKEY Mask */\n  ...\n 1715  \n 1716  \n 1717: /** \\brief  System Reset\n 1718  \n 1719:     The function initiates a system reset request to reset the MCU.\n 1720   */\n 1721  __STATIC_INLINE void NVIC_SystemReset(void)\n 1722  {\n 1723    __DSB();                                                          /* Ensure all outstanding memory accesses included\n 1724:                                                                        buffered write are completed before reset */\n 1725    SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |\n 1726                             (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |\n 1727                              SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */\n 1728    __DSB();                                                          /* Ensure completion of memory access */\n 1729:   while(1) { __NOP(); }                                             /* wait until reset */\n 1730  }\n 1731  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Include\\core_cm7.h:\n  466    __IO uint32_t ICSR;                    /*!< Offset: 0x004 (R/W)  Interrupt Control and State Register                  */\n  467    __IO uint32_t VTOR;                    /*!< Offset: 0x008 (R/W)  Vector Table Offset Register                          */\n  468:   __IO uint32_t AIRCR;                   /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset Control Register      */\n  469    __IO uint32_t SCR;                     /*!< Offset: 0x010 (R/W)  System Control Register                               */\n  470    __IO uint32_t CCR;                     /*!< Offset: 0x014 (R/W)  Configuration Control Register                        */\n  ...\n  566  #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB VTOR: TBLOFF Mask */\n  567  \n  568: /* SCB Application Interrupt and Reset Control Register Definitions */\n  569  #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB AIRCR: VECTKEY Position */\n  570  #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB AIRCR: VECTKEY Mask */\n  ...\n 1902  \n 1903  \n 1904: /** \\brief  System Reset\n 1905  \n 1906:     The function initiates a system reset request to reset the MCU.\n 1907   */\n 1908  __STATIC_INLINE void NVIC_SystemReset(void)\n 1909  {\n 1910    __DSB();                                                          /* Ensure all outstanding memory accesses included\n 1911:                                                                        buffered write are completed before reset */\n 1912    SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |\n 1913                             (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |\n 1914                              SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */\n 1915    __DSB();                                                          /* Ensure completion of memory access */\n 1916:   while(1) { __NOP(); }                                             /* wait until reset */\n 1917  }\n 1918  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Include\\core_sc000.h:\n  368    __IO uint32_t ICSR;                    /*!< Offset: 0x004 (R/W)  Interrupt Control and State Register                  */\n  369    __IO uint32_t VTOR;                    /*!< Offset: 0x008 (R/W)  Vector Table Offset Register                          */\n  370:   __IO uint32_t AIRCR;                   /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset Control Register      */\n  371    __IO uint32_t SCR;                     /*!< Offset: 0x010 (R/W)  System Control Register                               */\n  372    __IO uint32_t CCR;                     /*!< Offset: 0x014 (R/W)  Configuration Control Register                        */\n  ...\n  426  #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB VTOR: TBLOFF Mask */\n  427  \n  428: /* SCB Application Interrupt and Reset Control Register Definitions */\n  429  #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB AIRCR: VECTKEY Position */\n  430  #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB AIRCR: VECTKEY Mask */\n  ...\n  794  \n  795  \n  796: /** \\brief  System Reset\n  797  \n  798:     The function initiates a system reset request to reset the MCU.\n  799   */\n  800  __STATIC_INLINE void NVIC_SystemReset(void)\n  801  {\n  802    __DSB();                                                     /* Ensure all outstanding memory accesses included\n  803:                                                                   buffered write are completed before reset */\n  804    SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |\n  805                   SCB_AIRCR_SYSRESETREQ_Msk);\n  806    __DSB();                                                     /* Ensure completion of memory access */\n  807:   while(1) { __NOP(); }                                        /* wait until reset */\n  808  }\n  809  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Include\\core_sc300.h:\n  390    __IO uint32_t ICSR;                    /*!< Offset: 0x004 (R/W)  Interrupt Control and State Register                  */\n  391    __IO uint32_t VTOR;                    /*!< Offset: 0x008 (R/W)  Vector Table Offset Register                          */\n  392:   __IO uint32_t AIRCR;                   /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset Control Register      */\n  393    __IO uint32_t SCR;                     /*!< Offset: 0x010 (R/W)  System Control Register                               */\n  394    __IO uint32_t CCR;                     /*!< Offset: 0x014 (R/W)  Configuration Control Register                        */\n  ...\n  466  #define SCB_VTOR_TBLOFF_Msk                (0x3FFFFFUL << SCB_VTOR_TBLOFF_Pos)            /*!< SCB VTOR: TBLOFF Mask */\n  467  \n  468: /* SCB Application Interrupt and Reset Control Register Definitions */\n  469  #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB AIRCR: VECTKEY Position */\n  470  #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB AIRCR: VECTKEY Mask */\n  ...\n 1532  \n 1533  \n 1534: /** \\brief  System Reset\n 1535  \n 1536:     The function initiates a system reset request to reset the MCU.\n 1537   */\n 1538  __STATIC_INLINE void NVIC_SystemReset(void)\n 1539  {\n 1540    __DSB();                                                          /* Ensure all outstanding memory accesses included\n 1541:                                                                        buffered write are completed before reset */\n 1542    SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |\n 1543                             (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |\n 1544                              SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */\n 1545    __DSB();                                                          /* Ensure completion of memory access */\n 1546:   while(1) { __NOP(); }                                             /* wait until reset */\n 1547  }\n 1548  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal_def.h:\n   76  #define HAL_MAX_DELAY      0xFFFFFFFF\n   77  \n   78: #define HAL_IS_BIT_SET(REG, BIT)         (((REG) & (BIT)) != RESET)\n   79: #define HAL_IS_BIT_CLR(REG, BIT)         (((REG) & (BIT)) == RESET)\n   80  \n   81  #define __HAL_LINKDMA(__HANDLE__, __PPP_DMA_FIELD_, __DMA_HANDLE_)           \\\n   ..\n   87  #define UNUSED(x) ((void)(x))\n   88  \n   89: /** @brief Reset the Handle's State field.\n   90    * @param __HANDLE__: specifies the Peripheral Handle.\n   91    * @note  This macro can be used for the following purpose: \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal_dma.h:\n  292    */\n  293  \n  294: /** @brief  Reset DMA handle state\n  295    * @param  __HANDLE__: DMA handle.\n  296    * @retval None\n  ...\n  347    *            @arg DMA_IT_HT:  Half transfer complete interrupt mask\n  348    *            @arg DMA_IT_TE:  Transfer error interrupt mask\n  349:   * @retval The state of DMA_IT (SET or RESET).\n  350    */\n  351: #define __HAL_DMA_GET_IT_SOURCE(__HANDLE__, __INTERRUPT__)  ((((__HANDLE__)->Instance->CCR & (__INTERRUPT__)) == (__INTERRUPT__)) ? SET : RESET)\n  352  \n  353  /**\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal_dma_ex.h:\n  134    *            @arg DMA_FLAG_TEx:  Transfer error flag\n  135    *         Where x can be 1_7 or 1_5 (depending on DMA1 or DMA2) to select the DMA Channel flag.   \n  136:   * @retval The state of FLAG (SET or RESET).\n  137    */\n  138  #define __HAL_DMA_GET_FLAG(__HANDLE__, __FLAG__)\\\n  ...\n  215    *            @arg DMA_FLAG_TEx:  Transfer error flag\n  216    *         Where x can be 1_7 to select the DMA Channel flag.   \n  217:   * @retval The state of FLAG (SET or RESET).\n  218    */\n  219  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal_flash_ex.h:\n  342    * @{\n  343    */ \n  344: #define OB_STOP_NO_RST            ((uint16_t)0x0002) /*!< No reset generated when entering in STOP */\n  345: #define OB_STOP_RST               ((uint16_t)0x0000) /*!< Reset generated when entering in STOP */\n  346  /**\n  347    * @}\n  ...\n  351    * @{\n  352    */ \n  353: #define OB_STDBY_NO_RST           ((uint16_t)0x0004) /*!< No reset generated when entering in STANDBY */\n  354: #define OB_STDBY_RST              ((uint16_t)0x0000) /*!< Reset generated when entering in STANDBY */\n  355  /**\n  356    * @}\n  ...\n  370    * @{\n  371    */\n  372: #define OB_BOOT1_RESET            ((uint16_t)0x0000) /*!< BOOT1 Reset */\n  373  #define OB_BOOT1_SET              ((uint16_t)0x0008) /*!< BOOT1 Set */\n  374  /**\n  ...\n  651    *            @arg FLASH_FLAG_BSY_BANK2   : FLASH Busy flag on bank2\n  652    *            @arg FLASH_FLAG_OPTVERR : Loaded OB and its complement do not match\n  653:   * @retval The new state of __FLAG__ (SET or RESET).\n  654    */\n  655  #define __HAL_FLASH_GET_FLAG(__FLAG__) (((__FLAG__) == FLASH_FLAG_OPTVERR) ? \\\n  656                                              (FLASH->OBR & FLASH_OBR_OPTERR) : \\\n  657:                                         ((((__FLAG__) & SR_FLAG_MASK) != RESET)? \\\n  658                                              (FLASH->SR & ((__FLAG__) & SR_FLAG_MASK)) : \\\n  659                                              (FLASH->SR2 & ((__FLAG__) >> 16))))\n  ...\n  682                            else { \\\n  683                            /* Clear Flag in Bank1 */ \\\n  684:                           if (((__FLAG__) & SR_FLAG_MASK) != RESET) \\\n  685                            { \\\n  686                              FLASH->SR  = ((__FLAG__) & SR_FLAG_MASK); \\\n  687                            } \\\n  688                            /* Clear Flag in Bank2 */ \\\n  689:                           if (((__FLAG__) >> 16) != RESET) \\\n  690                            { \\\n  691                              FLASH->SR2 = ((__FLAG__) >> 16); \\\n  ...\n  723    *            @arg FLASH_FLAG_BSY   : FLASH Busy flag\n  724    *            @arg FLASH_FLAG_OPTVERR : Loaded OB and its complement do not match\n  725:   * @retval The new state of __FLAG__ (SET or RESET).\n  726    */\n  727  #define __HAL_FLASH_GET_FLAG(__FLAG__)  (((__FLAG__) == FLASH_FLAG_OPTVERR) ? \\\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal_gpio.h:\n   79   \n   80  /** \n   81:   * @brief  GPIO Bit SET and Bit RESET enumeration \n   82    */\n   83  typedef enum\n   ..\n  229    * @param  __EXTI_LINE__: specifies the EXTI line flag to check.\n  230    *         This parameter can be GPIO_PIN_x where x can be(0..15)\n  231:   * @retval The new state of __EXTI_LINE__ (SET or RESET).\n  232    */\n  233  #define __HAL_GPIO_EXTI_GET_FLAG(__EXTI_LINE__) (EXTI->PR & (__EXTI_LINE__))   \n  ...\n  245    * @param  __EXTI_LINE__: specifies the EXTI line to check.\n  246    *          This parameter can be GPIO_PIN_x where x can be(0..15)\n  247:   * @retval The new state of __EXTI_LINE__ (SET or RESET).\n  248    */\n  249  #define __HAL_GPIO_EXTI_GET_IT(__EXTI_LINE__) (EXTI->PR & (__EXTI_LINE__))   \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal_gpio_ex.h:\n  484  /**\n  485    * @brief Enable the Serial wire JTAG configuration\n  486:   * @note  ENABLE: Full SWJ (JTAG-DP + SW-DP): Reset State\n  487    * @retval None\n  488    */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal_pwr.h:\n  202    *            @arg PWR_FLAG_PVDO: PVD Output. This flag is valid only if PVD is enabled\n  203    *                  by the HAL_PWR_EnablePVD() function. The PVD is stopped by Standby mode\n  204:   *                  For this reason, this bit is equal to 0 after Standby or reset\n  205    *                  until the PVDE bit is set.\n  206    * @retval The new state of __FLAG__ (TRUE or FALSE).\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal_rcc.h:\n  478  /* Flags in the CSR register */\n  479  #define RCC_FLAG_LSIRDY                  ((uint8_t)((CSR_REG_INDEX << 5) | POSITION_VAL(RCC_CSR_LSIRDY)))   /*!< Internal Low Speed oscillator Ready */\n  480: #define RCC_FLAG_RMV                     ((uint8_t)((CSR_REG_INDEX << 5) | RCC_RMVF_BIT_NUMBER))     /*!< Remove reset flag */\n  481: #define RCC_FLAG_PINRST                  ((uint8_t)((CSR_REG_INDEX << 5) | POSITION_VAL(RCC_CSR_PINRSTF)))  /*!< PIN reset flag */\n  482: #define RCC_FLAG_PORRST                  ((uint8_t)((CSR_REG_INDEX << 5) | POSITION_VAL(RCC_CSR_PORRSTF)))  /*!< POR/PDR reset flag */\n  483: #define RCC_FLAG_SFTRST                  ((uint8_t)((CSR_REG_INDEX << 5) | POSITION_VAL(RCC_CSR_SFTRSTF)))  /*!< Software Reset flag */\n  484: #define RCC_FLAG_IWDGRST                 ((uint8_t)((CSR_REG_INDEX << 5) | POSITION_VAL(RCC_CSR_IWDGRSTF))) /*!< Independent Watchdog reset flag */\n  485: #define RCC_FLAG_WWDGRST                 ((uint8_t)((CSR_REG_INDEX << 5) | POSITION_VAL(RCC_CSR_WWDGRSTF))) /*!< Window watchdog reset flag */\n  486: #define RCC_FLAG_LPWRRST                 ((uint8_t)((CSR_REG_INDEX << 5) | POSITION_VAL(RCC_CSR_LPWRRSTF))) /*!< Low-Power reset flag */\n  487  \n  488  /* Flags in the BDCR register */\n  ...\n  505  /** @defgroup RCC_Peripheral_Clock_Enable_Disable Peripheral Clock Enable Disable\n  506    * @brief  Enable or disable the AHB1 peripheral clock.\n  507:   * @note   After reset, the peripheral clock (used for registers read/write access)\n  508    *         is disabled and the application software has to enable this clock before \n  509    *         using it.   \n  ...\n  553  /** @defgroup RCC_AHB_Peripheral_Clock_Enable_Disable_Status AHB Peripheral Clock Enable Disable Status\n  554    * @brief  Get the enable or disable status of the AHB peripheral clock.\n  555:   * @note   After reset, the peripheral clock (used for registers read/write access)\n  556    *         is disabled and the application software has to enable this clock before\n  557    *         using it.\n  ...\n  559    */\n  560  \n  561: #define __HAL_RCC_DMA1_IS_CLK_ENABLED()       ((RCC->AHBENR & (RCC_AHBENR_DMA1EN)) != RESET)\n  562: #define __HAL_RCC_DMA1_IS_CLK_DISABLED()      ((RCC->AHBENR & (RCC_AHBENR_DMA1EN)) == RESET)\n  563: #define __HAL_RCC_SRAM_IS_CLK_ENABLED()       ((RCC->AHBENR & (RCC_AHBENR_SRAMEN)) != RESET)\n  564: #define __HAL_RCC_SRAM_IS_CLK_DISABLED()      ((RCC->AHBENR & (RCC_AHBENR_SRAMEN)) == RESET)\n  565: #define __HAL_RCC_FLITF_IS_CLK_ENABLED()       ((RCC->AHBENR & (RCC_AHBENR_FLITFEN)) != RESET)\n  566: #define __HAL_RCC_FLITF_IS_CLK_DISABLED()      ((RCC->AHBENR & (RCC_AHBENR_FLITFEN)) == RESET)\n  567: #define __HAL_RCC_CRC_IS_CLK_ENABLED()       ((RCC->AHBENR & (RCC_AHBENR_CRCEN)) != RESET)\n  568: #define __HAL_RCC_CRC_IS_CLK_DISABLED()      ((RCC->AHBENR & (RCC_AHBENR_CRCEN)) == RESET)\n  569  \n  570  /**\n  ...\n  574  /** @defgroup RCC_APB1_Clock_Enable_Disable APB1 Clock Enable Disable\n  575    * @brief  Enable or disable the Low Speed APB (APB1) peripheral clock.\n  576:   * @note   After reset, the peripheral clock (used for registers read/write access)\n  577    *         is disabled and the application software has to enable this clock before \n  578    *         using it. \n  ...\n  650  /** @defgroup RCC_APB1_Peripheral_Clock_Enable_Disable_Status APB1 Peripheral Clock Enable Disable Status\n  651    * @brief  Get the enable or disable status of the APB1 peripheral clock.\n  652:   * @note   After reset, the peripheral clock (used for registers read/write access)\n  653    *         is disabled and the application software has to enable this clock before\n  654    *         using it.\n  ...\n  656    */\n  657  \n  658: #define __HAL_RCC_TIM2_IS_CLK_ENABLED()       ((RCC->APB1ENR & (RCC_APB1ENR_TIM2EN)) != RESET)\n  659: #define __HAL_RCC_TIM2_IS_CLK_DISABLED()      ((RCC->APB1ENR & (RCC_APB1ENR_TIM2EN)) == RESET)\n  660: #define __HAL_RCC_TIM3_IS_CLK_ENABLED()       ((RCC->APB1ENR & (RCC_APB1ENR_TIM3EN)) != RESET)\n  661: #define __HAL_RCC_TIM3_IS_CLK_DISABLED()      ((RCC->APB1ENR & (RCC_APB1ENR_TIM3EN)) == RESET)\n  662: #define __HAL_RCC_WWDG_IS_CLK_ENABLED()       ((RCC->APB1ENR & (RCC_APB1ENR_WWDGEN)) != RESET)\n  663: #define __HAL_RCC_WWDG_IS_CLK_DISABLED()      ((RCC->APB1ENR & (RCC_APB1ENR_WWDGEN)) == RESET)\n  664: #define __HAL_RCC_USART2_IS_CLK_ENABLED()       ((RCC->APB1ENR & (RCC_APB1ENR_USART2EN)) != RESET)\n  665: #define __HAL_RCC_USART2_IS_CLK_DISABLED()      ((RCC->APB1ENR & (RCC_APB1ENR_USART2EN)) == RESET)\n  666: #define __HAL_RCC_I2C1_IS_CLK_ENABLED()       ((RCC->APB1ENR & (RCC_APB1ENR_I2C1EN)) != RESET)\n  667: #define __HAL_RCC_I2C1_IS_CLK_DISABLED()      ((RCC->APB1ENR & (RCC_APB1ENR_I2C1EN)) == RESET)\n  668: #define __HAL_RCC_BKP_IS_CLK_ENABLED()       ((RCC->APB1ENR & (RCC_APB1ENR_BKPEN)) != RESET)\n  669: #define __HAL_RCC_BKP_IS_CLK_DISABLED()      ((RCC->APB1ENR & (RCC_APB1ENR_BKPEN)) == RESET)\n  670: #define __HAL_RCC_PWR_IS_CLK_ENABLED()       ((RCC->APB1ENR & (RCC_APB1ENR_PWREN)) != RESET)\n  671: #define __HAL_RCC_PWR_IS_CLK_DISABLED()      ((RCC->APB1ENR & (RCC_APB1ENR_PWREN)) == RESET)\n  672  \n  673  /**\n  ...\n  677  /** @defgroup RCC_APB2_Clock_Enable_Disable APB2 Clock Enable Disable\n  678    * @brief  Enable or disable the High Speed APB (APB2) peripheral clock.\n  679:   * @note   After reset, the peripheral clock (used for registers read/write access)\n  680    *         is disabled and the application software has to enable this clock before \n  681    *         using it.\n  ...\n  771  /** @defgroup RCC_APB2_Peripheral_Clock_Enable_Disable_Status APB2 Peripheral Clock Enable Disable Status\n  772    * @brief  Get the enable or disable status of the APB2 peripheral clock.\n  773:   * @note   After reset, the peripheral clock (used for registers read/write access)\n  774    *         is disabled and the application software has to enable this clock before\n  775    *         using it.\n  ...\n  777    */\n  778  \n  779: #define __HAL_RCC_AFIO_IS_CLK_ENABLED()       ((RCC->APB2ENR & (RCC_APB2ENR_AFIOEN)) != RESET)\n  780: #define __HAL_RCC_AFIO_IS_CLK_DISABLED()      ((RCC->APB2ENR & (RCC_APB2ENR_AFIOEN)) == RESET)\n  781: #define __HAL_RCC_GPIOA_IS_CLK_ENABLED()       ((RCC->APB2ENR & (RCC_APB2ENR_IOPAEN)) != RESET)\n  782: #define __HAL_RCC_GPIOA_IS_CLK_DISABLED()      ((RCC->APB2ENR & (RCC_APB2ENR_IOPAEN)) == RESET)\n  783: #define __HAL_RCC_GPIOB_IS_CLK_ENABLED()       ((RCC->APB2ENR & (RCC_APB2ENR_IOPBEN)) != RESET)\n  784: #define __HAL_RCC_GPIOB_IS_CLK_DISABLED()      ((RCC->APB2ENR & (RCC_APB2ENR_IOPBEN)) == RESET)\n  785: #define __HAL_RCC_GPIOC_IS_CLK_ENABLED()       ((RCC->APB2ENR & (RCC_APB2ENR_IOPCEN)) != RESET)\n  786: #define __HAL_RCC_GPIOC_IS_CLK_DISABLED()      ((RCC->APB2ENR & (RCC_APB2ENR_IOPCEN)) == RESET)\n  787: #define __HAL_RCC_GPIOD_IS_CLK_ENABLED()       ((RCC->APB2ENR & (RCC_APB2ENR_IOPDEN)) != RESET)\n  788: #define __HAL_RCC_GPIOD_IS_CLK_DISABLED()      ((RCC->APB2ENR & (RCC_APB2ENR_IOPDEN)) == RESET)\n  789: #define __HAL_RCC_ADC1_IS_CLK_ENABLED()       ((RCC->APB2ENR & (RCC_APB2ENR_ADC1EN)) != RESET)\n  790: #define __HAL_RCC_ADC1_IS_CLK_DISABLED()      ((RCC->APB2ENR & (RCC_APB2ENR_ADC1EN)) == RESET)\n  791: #define __HAL_RCC_TIM1_IS_CLK_ENABLED()       ((RCC->APB2ENR & (RCC_APB2ENR_TIM1EN)) != RESET)\n  792: #define __HAL_RCC_TIM1_IS_CLK_DISABLED()      ((RCC->APB2ENR & (RCC_APB2ENR_TIM1EN)) == RESET)\n  793: #define __HAL_RCC_SPI1_IS_CLK_ENABLED()       ((RCC->APB2ENR & (RCC_APB2ENR_SPI1EN)) != RESET)\n  794: #define __HAL_RCC_SPI1_IS_CLK_DISABLED()      ((RCC->APB2ENR & (RCC_APB2ENR_SPI1EN)) == RESET)\n  795: #define __HAL_RCC_USART1_IS_CLK_ENABLED()       ((RCC->APB2ENR & (RCC_APB2ENR_USART1EN)) != RESET)\n  796: #define __HAL_RCC_USART1_IS_CLK_DISABLED()      ((RCC->APB2ENR & (RCC_APB2ENR_USART1EN)) == RESET)\n  797  \n  798  /**\n  ...\n  800    */\n  801  \n  802: /** @defgroup RCC_APB1_Force_Release_Reset APB1 Force Release Reset\n  803:   * @brief  Force or release APB1 peripheral reset.\n  804    * @{   \n  805    */\n  ...\n  828    */\n  829  \n  830: /** @defgroup RCC_APB2_Force_Release_Reset APB2 Force Release Reset\n  831:   * @brief  Force or release APB2 peripheral reset.\n  832    * @{   \n  833    */\n  ...\n  929    *         of the system clock then change the HSE state (ex. disable it).\n  930    * @note   The HSE is stopped by hardware when entering STOP and STANDBY modes.\n  931:   * @note   This function reset the CSSON bit, so if the Clock security system(CSS)\n  932    *         was previously enabled you have to enable it again after calling this\n  933    *         function.\n  ...\n  974    * @note Transitions LSE Bypass to LSE On and LSE On to LSE Bypass are not supported by this macro. \n  975    * @note   As the LSE is in the Backup domain and write access is denied to\n  976:   *         this domain after reset, you have to enable write access using \n  977    *         @ref HAL_PWR_EnableBkUpAccess() function before to configure the LSE\n  978:   *         (to be done once after reset).  \n  979    * @note   After enabling the LSE (RCC_LSE_ON or RCC_LSE_BYPASS), the application\n  980    *         software should wait on LSERDY flag to be set indicating that LSE clock\n  ...\n 1151  /** @brief Macro to configure the RTC clock (RTCCLK).\n 1152    * @note   As the RTC clock configuration bits are in the Backup domain and write\n 1153:   *         access is denied to this domain after reset, you have to enable write\n 1154    *         access using the Power Backup Access macro before to configure\n 1155:   *         the RTC clock source (to be done once after reset).    \n 1156    * @note   Once the RTC clock is configured it can't be changed unless the  \n 1157:   *         Backup domain is reset using @ref __HAL_RCC_BACKUPRESET_FORCE() macro, or by\n 1158:   *         a Power On Reset (POR).\n 1159    *\n 1160    * @param  __RTC_CLKSOURCE__ specifies the RTC clock source.\n ....\n 1192  #define __HAL_RCC_RTC_DISABLE()         (*(__IO uint32_t *) RCC_BDCR_RTCEN_BB = DISABLE)\n 1193  \n 1194: /** @brief  Macro to force the Backup domain reset.\n 1195    * @note   This function resets the RTC peripheral (including the backup registers)\n 1196    *         and the RTC clock source selection in RCC_BDCR register.\n ....\n 1198  #define __HAL_RCC_BACKUPRESET_FORCE()   (*(__IO uint32_t *) RCC_BDCR_BDRST_BB = ENABLE)\n 1199  \n 1200: /** @brief  Macros to release the Backup domain reset.\n 1201    */\n 1202  #define __HAL_RCC_BACKUPRESET_RELEASE() (*(__IO uint32_t *) RCC_BDCR_BDRST_BB = DISABLE)\n ....\n 1270  #define __HAL_RCC_GET_IT(__INTERRUPT__) ((RCC->CIR & (__INTERRUPT__)) == (__INTERRUPT__))\n 1271  \n 1272: /** @brief Set RMVF bit to clear the reset flags.\n 1273:   *         The reset flags are RCC_FLAG_PINRST, RCC_FLAG_PORRST, RCC_FLAG_SFTRST,\n 1274    *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST\n 1275    */\n ....\n 1286    *            @arg RCC_FLAG_LSERDY LSE oscillator clock ready.\n 1287    *            @arg RCC_FLAG_LSIRDY LSI oscillator clock ready.\n 1288:   *            @arg RCC_FLAG_PINRST Pin reset.\n 1289:   *            @arg RCC_FLAG_PORRST POR/PDR reset.\n 1290:   *            @arg RCC_FLAG_SFTRST Software reset.\n 1291:   *            @arg RCC_FLAG_IWDGRST Independent Watchdog reset.\n 1292:   *            @arg RCC_FLAG_WWDGRST Window Watchdog reset.\n 1293:   *            @arg RCC_FLAG_LPWRRST Low Power reset.\n 1294    * @note (*) This bit is available in STM32F105xx & STM32F107xx devices only.\n 1295    * @retval The new state of __FLAG__ (TRUE or FALSE).\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal_rcc_ex.h:\n  636  /** @defgroup RCCEx_Peripheral_Clock_Enable_Disable Peripheral Clock Enable Disable\n  637    * @brief  Enable or disable the AHB1 peripheral clock.\n  638:   * @note   After reset, the peripheral clock (used for registers read/write access)\n  639    *         is disabled and the application software has to enable this clock before \n  640    *         using it.   \n  ...\n  749  /** @defgroup RCCEx_AHB1_Peripheral_Clock_Enable_Disable_Status AHB1 Peripheral Clock Enable Disable Status\n  750    * @brief  Get the enable or disable status of the AHB1 peripheral clock.\n  751:   * @note   After reset, the peripheral clock (used for registers read/write access)\n  752    *         is disabled and the application software has to enable this clock before\n  753    *         using it.\n  ...\n  758   || defined(STM32F103xG) || defined(STM32F105xC) || defined  (STM32F107xC)\\\n  759   || defined  (STM32F100xE)\n  760: #define __HAL_RCC_DMA2_IS_CLK_ENABLED()       ((RCC->AHBENR & (RCC_AHBENR_DMA2EN)) != RESET)\n  761: #define __HAL_RCC_DMA2_IS_CLK_DISABLED()      ((RCC->AHBENR & (RCC_AHBENR_DMA2EN)) == RESET)\n  762  #endif /* STM32F101xE || STM32F103xE || STM32F101xG || STM32F103xG || STM32F105xC || STM32F107xC || STM32F100xE */\n  763  #if defined(STM32F101xE) || defined(STM32F103xE) || defined(STM32F101xG)\\\n  764   || defined(STM32F103xG) || defined  (STM32F100xE)\n  765: #define __HAL_RCC_FSMC_IS_CLK_ENABLED()       ((RCC->AHBENR & (RCC_AHBENR_FSMCEN)) != RESET)\n  766: #define __HAL_RCC_FSMC_IS_CLK_DISABLED()      ((RCC->AHBENR & (RCC_AHBENR_FSMCEN)) == RESET)\n  767  #endif /* STM32F101xE || STM32F103xE || STM32F101xG || STM32F103xG || STM32F100xE */\n  768  #if defined(STM32F103xE) || defined(STM32F103xG)\n  769: #define __HAL_RCC_SDIO_IS_CLK_ENABLED()       ((RCC->AHBENR & (RCC_AHBENR_SDIOEN)) != RESET)\n  770: #define __HAL_RCC_SDIO_IS_CLK_DISABLED()      ((RCC->AHBENR & (RCC_AHBENR_SDIOEN)) == RESET)\n  771  #endif /* STM32F103xE || STM32F103xG */\n  772  #if defined(STM32F105xC) || defined(STM32F107xC)\n  773: #define __HAL_RCC_USB_OTG_FS_IS_CLK_ENABLED()       ((RCC->AHBENR & (RCC_AHBENR_OTGFSEN)) != RESET)\n  774: #define __HAL_RCC_USB_OTG_FS_IS_CLK_DISABLED()      ((RCC->AHBENR & (RCC_AHBENR_OTGFSEN)) == RESET)\n  775  #endif /* STM32F105xC || STM32F107xC*/\n  776  #if defined(STM32F107xC)\n  777: #define __HAL_RCC_ETHMAC_IS_CLK_ENABLED()       ((RCC->AHBENR & (RCC_AHBENR_ETHMACEN)) != RESET)\n  778: #define __HAL_RCC_ETHMAC_IS_CLK_DISABLED()      ((RCC->AHBENR & (RCC_AHBENR_ETHMACEN)) == RESET)\n  779: #define __HAL_RCC_ETHMACTX_IS_CLK_ENABLED()       ((RCC->AHBENR & (RCC_AHBENR_ETHMACTXEN)) != RESET)\n  780: #define __HAL_RCC_ETHMACTX_IS_CLK_DISABLED()      ((RCC->AHBENR & (RCC_AHBENR_ETHMACTXEN)) == RESET)\n  781: #define __HAL_RCC_ETHMACRX_IS_CLK_ENABLED()       ((RCC->AHBENR & (RCC_AHBENR_ETHMACRXEN)) != RESET)\n  782: #define __HAL_RCC_ETHMACRX_IS_CLK_DISABLED()      ((RCC->AHBENR & (RCC_AHBENR_ETHMACRXEN)) == RESET)\n  783  #endif /* STM32F107xC*/\n  784  \n  ...\n  789  /** @defgroup RCCEx_APB1_Clock_Enable_Disable APB1 Clock Enable Disable\n  790    * @brief  Enable or disable the Low Speed APB (APB1) peripheral clock.\n  791:   * @note   After reset, the peripheral clock (used for registers read/write access)\n  792    *         is disabled and the application software has to enable this clock before \n  793    *         using it. \n  ...\n 1083  /** @defgroup RCCEx_APB1_Peripheral_Clock_Enable_Disable_Status APB1 Peripheral Clock Enable Disable Status\n 1084    * @brief  Get the enable or disable status of the APB1 peripheral clock.\n 1085:   * @note   After reset, the peripheral clock (used for registers read/write access)\n 1086    *         is disabled and the application software has to enable this clock before\n 1087    *         using it.\n ....\n 1091  #if defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE)\\\n 1092   || defined(STM32F103xG) || defined(STM32F105xC) ||defined(STM32F107xC)\n 1093: #define __HAL_RCC_CAN1_IS_CLK_ENABLED()       ((RCC->APB1ENR & (RCC_APB1ENR_CAN1EN)) != RESET)\n 1094: #define __HAL_RCC_CAN1_IS_CLK_DISABLED()      ((RCC->APB1ENR & (RCC_APB1ENR_CAN1EN)) == RESET)\n 1095  #endif /* STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */\n 1096  #if defined(STM32F100xB) || defined(STM32F100xE) || defined(STM32F101xB)\\\n ....\n 1098   || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\\\n 1099   || defined(STM32F105xC) || defined(STM32F107xC)\n 1100: #define __HAL_RCC_TIM4_IS_CLK_ENABLED()       ((RCC->APB1ENR & (RCC_APB1ENR_TIM4EN)) != RESET)\n 1101: #define __HAL_RCC_TIM4_IS_CLK_DISABLED()      ((RCC->APB1ENR & (RCC_APB1ENR_TIM4EN)) == RESET)\n 1102: #define __HAL_RCC_SPI2_IS_CLK_ENABLED()       ((RCC->APB1ENR & (RCC_APB1ENR_SPI2EN)) != RESET)\n 1103: #define __HAL_RCC_SPI2_IS_CLK_DISABLED()      ((RCC->APB1ENR & (RCC_APB1ENR_SPI2EN)) == RESET)\n 1104: #define __HAL_RCC_USART3_IS_CLK_ENABLED()       ((RCC->APB1ENR & (RCC_APB1ENR_USART3EN)) != RESET)\n 1105: #define __HAL_RCC_USART3_IS_CLK_DISABLED()      ((RCC->APB1ENR & (RCC_APB1ENR_USART3EN)) == RESET)\n 1106: #define __HAL_RCC_I2C2_IS_CLK_ENABLED()       ((RCC->APB1ENR & (RCC_APB1ENR_I2C2EN)) != RESET)\n 1107: #define __HAL_RCC_I2C2_IS_CLK_DISABLED()      ((RCC->APB1ENR & (RCC_APB1ENR_I2C2EN)) == RESET)\n 1108  #endif /* STM32F100xB || STM32F101xB || STM32F101xE || (...) || STM32F105xC || STM32F107xC */\n 1109  #if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\\\n 1110   || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\n 1111: #define __HAL_RCC_USB_IS_CLK_ENABLED()       ((RCC->APB1ENR & (RCC_APB1ENR_USBEN)) != RESET)\n 1112: #define __HAL_RCC_USB_IS_CLK_DISABLED()      ((RCC->APB1ENR & (RCC_APB1ENR_USBEN)) == RESET)\n 1113  #endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */\n 1114  #if defined(STM32F101xE) || defined(STM32F103xE) || defined(STM32F101xG)\\\n 1115   || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)\n 1116: #define __HAL_RCC_TIM5_IS_CLK_ENABLED()       ((RCC->APB1ENR & (RCC_APB1ENR_TIM5EN)) != RESET)\n 1117: #define __HAL_RCC_TIM5_IS_CLK_DISABLED()      ((RCC->APB1ENR & (RCC_APB1ENR_TIM5EN)) == RESET)\n 1118: #define __HAL_RCC_TIM6_IS_CLK_ENABLED()       ((RCC->APB1ENR & (RCC_APB1ENR_TIM6EN)) != RESET)\n 1119: #define __HAL_RCC_TIM6_IS_CLK_DISABLED()      ((RCC->APB1ENR & (RCC_APB1ENR_TIM6EN)) == RESET)\n 1120: #define __HAL_RCC_TIM7_IS_CLK_ENABLED()       ((RCC->APB1ENR & (RCC_APB1ENR_TIM7EN)) != RESET)\n 1121: #define __HAL_RCC_TIM7_IS_CLK_DISABLED()      ((RCC->APB1ENR & (RCC_APB1ENR_TIM7EN)) == RESET)\n 1122: #define __HAL_RCC_SPI3_IS_CLK_ENABLED()       ((RCC->APB1ENR & (RCC_APB1ENR_SPI3EN)) != RESET)\n 1123: #define __HAL_RCC_SPI3_IS_CLK_DISABLED()      ((RCC->APB1ENR & (RCC_APB1ENR_SPI3EN)) == RESET)\n 1124: #define __HAL_RCC_UART4_IS_CLK_ENABLED()       ((RCC->APB1ENR & (RCC_APB1ENR_UART4EN)) != RESET)\n 1125: #define __HAL_RCC_UART4_IS_CLK_DISABLED()      ((RCC->APB1ENR & (RCC_APB1ENR_UART4EN)) == RESET)\n 1126: #define __HAL_RCC_UART5_IS_CLK_ENABLED()       ((RCC->APB1ENR & (RCC_APB1ENR_UART5EN)) != RESET)\n 1127: #define __HAL_RCC_UART5_IS_CLK_DISABLED()      ((RCC->APB1ENR & (RCC_APB1ENR_UART5EN)) == RESET)\n 1128: #define __HAL_RCC_DAC_IS_CLK_ENABLED()       ((RCC->APB1ENR & (RCC_APB1ENR_DACEN)) != RESET)\n 1129: #define __HAL_RCC_DAC_IS_CLK_DISABLED()      ((RCC->APB1ENR & (RCC_APB1ENR_DACEN)) == RESET)\n 1130  #endif /* STM32F101xE || STM32F103xE || STM32F101xG || (...) || STM32F105xC || STM32F107xC */\n 1131  #if defined(STM32F100xB) || defined  (STM32F100xE)\n 1132: #define __HAL_RCC_TIM6_IS_CLK_ENABLED()       ((RCC->APB1ENR & (RCC_APB1ENR_TIM6EN)) != RESET)\n 1133: #define __HAL_RCC_TIM6_IS_CLK_DISABLED()      ((RCC->APB1ENR & (RCC_APB1ENR_TIM6EN)) == RESET)\n 1134: #define __HAL_RCC_TIM7_IS_CLK_ENABLED()       ((RCC->APB1ENR & (RCC_APB1ENR_TIM7EN)) != RESET)\n 1135: #define __HAL_RCC_TIM7_IS_CLK_DISABLED()      ((RCC->APB1ENR & (RCC_APB1ENR_TIM7EN)) == RESET)\n 1136: #define __HAL_RCC_DAC_IS_CLK_ENABLED()       ((RCC->APB1ENR & (RCC_APB1ENR_DACEN)) != RESET)\n 1137: #define __HAL_RCC_DAC_IS_CLK_DISABLED()      ((RCC->APB1ENR & (RCC_APB1ENR_DACEN)) == RESET)\n 1138: #define __HAL_RCC_CEC_IS_CLK_ENABLED()       ((RCC->APB1ENR & (RCC_APB1ENR_CECEN)) != RESET)\n 1139: #define __HAL_RCC_CEC_IS_CLK_DISABLED()      ((RCC->APB1ENR & (RCC_APB1ENR_CECEN)) == RESET)\n 1140  #endif /* STM32F100xB || STM32F100xE */\n 1141  #ifdef STM32F100xE\n 1142: #define __HAL_RCC_TIM5_IS_CLK_ENABLED()       ((RCC->APB1ENR & (RCC_APB1ENR_TIM5EN)) != RESET)\n 1143: #define __HAL_RCC_TIM5_IS_CLK_DISABLED()      ((RCC->APB1ENR & (RCC_APB1ENR_TIM5EN)) == RESET)\n 1144: #define __HAL_RCC_TIM12_IS_CLK_ENABLED()       ((RCC->APB1ENR & (RCC_APB1ENR_TIM12EN)) != RESET)\n 1145: #define __HAL_RCC_TIM12_IS_CLK_DISABLED()      ((RCC->APB1ENR & (RCC_APB1ENR_TIM12EN)) == RESET)\n 1146: #define __HAL_RCC_TIM13_IS_CLK_ENABLED()       ((RCC->APB1ENR & (RCC_APB1ENR_TIM13EN)) != RESET)\n 1147: #define __HAL_RCC_TIM13_IS_CLK_DISABLED()      ((RCC->APB1ENR & (RCC_APB1ENR_TIM13EN)) == RESET)\n 1148: #define __HAL_RCC_TIM14_IS_CLK_ENABLED()       ((RCC->APB1ENR & (RCC_APB1ENR_TIM14EN)) != RESET)\n 1149: #define __HAL_RCC_TIM14_IS_CLK_DISABLED()      ((RCC->APB1ENR & (RCC_APB1ENR_TIM14EN)) == RESET)\n 1150: #define __HAL_RCC_SPI3_IS_CLK_ENABLED()       ((RCC->APB1ENR & (RCC_APB1ENR_SPI3EN)) != RESET)\n 1151: #define __HAL_RCC_SPI3_IS_CLK_DISABLED()      ((RCC->APB1ENR & (RCC_APB1ENR_SPI3EN)) == RESET)\n 1152: #define __HAL_RCC_UART4_IS_CLK_ENABLED()       ((RCC->APB1ENR & (RCC_APB1ENR_UART4EN)) != RESET)\n 1153: #define __HAL_RCC_UART4_IS_CLK_DISABLED()      ((RCC->APB1ENR & (RCC_APB1ENR_UART4EN)) == RESET)\n 1154: #define __HAL_RCC_UART5_IS_CLK_ENABLED()       ((RCC->APB1ENR & (RCC_APB1ENR_UART5EN)) != RESET)\n 1155: #define __HAL_RCC_UART5_IS_CLK_DISABLED()      ((RCC->APB1ENR & (RCC_APB1ENR_UART5EN)) == RESET)\n 1156: #define __HAL_RCC_CAN2_IS_CLK_ENABLED()       ((RCC->APB1ENR & (RCC_APB1ENR_CAN2EN)) != RESET)\n 1157: #define __HAL_RCC_CAN2_IS_CLK_DISABLED()      ((RCC->APB1ENR & (RCC_APB1ENR_CAN2EN)) == RESET)\n 1158  #endif /* STM32F100xE */\n 1159  #if defined(STM32F105xC) || defined(STM32F107xC)\n 1160: #define __HAL_RCC_TIM12_IS_CLK_ENABLED()       ((RCC->APB1ENR & (RCC_APB1ENR_TIM12EN)) != RESET)\n 1161: #define __HAL_RCC_TIM12_IS_CLK_DISABLED()      ((RCC->APB1ENR & (RCC_APB1ENR_TIM12EN)) == RESET)\n 1162  #endif /* STM32F105xC || STM32F107xC */\n 1163  #if defined(STM32F101xG) || defined(STM32F103xG)\n 1164: #define __HAL_RCC_TIM13_IS_CLK_ENABLED()       ((RCC->APB1ENR & (RCC_APB1ENR_TIM13EN)) != RESET)\n 1165: #define __HAL_RCC_TIM13_IS_CLK_DISABLED()      ((RCC->APB1ENR & (RCC_APB1ENR_TIM13EN)) == RESET)\n 1166: #define __HAL_RCC_TIM14_IS_CLK_ENABLED()       ((RCC->APB1ENR & (RCC_APB1ENR_TIM14EN)) != RESET)\n 1167: #define __HAL_RCC_TIM14_IS_CLK_DISABLED()      ((RCC->APB1ENR & (RCC_APB1ENR_TIM14EN)) == RESET)\n 1168  #endif /* STM32F101xG || STM32F103xG*/\n 1169  \n ....\n 1174  /** @defgroup RCCEx_APB2_Clock_Enable_Disable APB2 Clock Enable Disable\n 1175    * @brief  Enable or disable the High Speed APB (APB2) peripheral clock.\n 1176:   * @note   After reset, the peripheral clock (used for registers read/write access)\n 1177    *         is disabled and the application software has to enable this clock before \n 1178    *         using it.\n ....\n 1339  /** @defgroup RCCEx_APB2_Peripheral_Clock_Enable_Disable_Status APB2 Peripheral Clock Enable Disable Status\n 1340    * @brief  Get the enable or disable status of the APB2 peripheral clock.\n 1341:   * @note   After reset, the peripheral clock (used for registers read/write access)\n 1342    *         is disabled and the application software has to enable this clock before\n 1343    *         using it.\n ....\n 1348   || defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F103xE)\\\n 1349   || defined(STM32F103xG)\n 1350: #define __HAL_RCC_ADC2_IS_CLK_ENABLED()       ((RCC->APB2ENR & (RCC_APB2ENR_ADC2EN)) != RESET)\n 1351: #define __HAL_RCC_ADC2_IS_CLK_DISABLED()      ((RCC->APB2ENR & (RCC_APB2ENR_ADC2EN)) == RESET)\n 1352  #endif /* STM32F101xG || STM32F103x6 || STM32F103xB || STM32F105xC || STM32F107xC || STM32F103xE || STM32F103xG */\n 1353  #if defined(STM32F100xB) || defined(STM32F100xE)\n 1354: #define __HAL_RCC_TIM15_IS_CLK_ENABLED()       ((RCC->APB2ENR & (RCC_APB2ENR_TIM15EN)) != RESET)\n 1355: #define __HAL_RCC_TIM15_IS_CLK_DISABLED()      ((RCC->APB2ENR & (RCC_APB2ENR_TIM15EN)) == RESET)\n 1356: #define __HAL_RCC_TIM16_IS_CLK_ENABLED()       ((RCC->APB2ENR & (RCC_APB2ENR_TIM16EN)) != RESET)\n 1357: #define __HAL_RCC_TIM16_IS_CLK_DISABLED()      ((RCC->APB2ENR & (RCC_APB2ENR_TIM16EN)) == RESET)\n 1358: #define __HAL_RCC_TIM17_IS_CLK_ENABLED()       ((RCC->APB2ENR & (RCC_APB2ENR_TIM17EN)) != RESET)\n 1359: #define __HAL_RCC_TIM17_IS_CLK_DISABLED()      ((RCC->APB2ENR & (RCC_APB2ENR_TIM17EN)) == RESET)\n 1360  #endif /* STM32F100xB || STM32F100xE */\n 1361  #if defined(STM32F100xE) || defined(STM32F101xB) || defined(STM32F101xE)\\\n ....\n 1363   || defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC)\\\n 1364   || defined(STM32F107xC)\n 1365: #define __HAL_RCC_GPIOE_IS_CLK_ENABLED()       ((RCC->APB2ENR & (RCC_APB2ENR_IOPEEN)) != RESET)\n 1366: #define __HAL_RCC_GPIOE_IS_CLK_DISABLED()      ((RCC->APB2ENR & (RCC_APB2ENR_IOPEEN)) == RESET)\n 1367  #endif /* STM32F101x6 || STM32F101xB || STM32F101xE || (...) || STM32F105xC || STM32F107xC */\n 1368  #if defined(STM32F101xE) || defined(STM32F103xE) || defined(STM32F101xG)\\\n 1369   || defined(STM32F103xG)\n 1370: #define __HAL_RCC_GPIOF_IS_CLK_ENABLED()       ((RCC->APB2ENR & (RCC_APB2ENR_IOPFEN)) != RESET)\n 1371: #define __HAL_RCC_GPIOF_IS_CLK_DISABLED()      ((RCC->APB2ENR & (RCC_APB2ENR_IOPFEN)) == RESET)\n 1372: #define __HAL_RCC_GPIOG_IS_CLK_ENABLED()       ((RCC->APB2ENR & (RCC_APB2ENR_IOPGEN)) != RESET)\n 1373: #define __HAL_RCC_GPIOG_IS_CLK_DISABLED()      ((RCC->APB2ENR & (RCC_APB2ENR_IOPGEN)) == RESET)\n 1374  #endif /* STM32F101xE || STM32F103xE || STM32F101xG || STM32F103xG*/\n 1375  #if defined(STM32F103xE) || defined(STM32F103xG)\n 1376: #define __HAL_RCC_TIM8_IS_CLK_ENABLED()       ((RCC->APB2ENR & (RCC_APB2ENR_TIM8EN)) != RESET)\n 1377: #define __HAL_RCC_TIM8_IS_CLK_DISABLED()      ((RCC->APB2ENR & (RCC_APB2ENR_TIM8EN)) == RESET)\n 1378: #define __HAL_RCC_ADC3_IS_CLK_ENABLED()       ((RCC->APB2ENR & (RCC_APB2ENR_ADC3EN)) != RESET)\n 1379: #define __HAL_RCC_ADC3_IS_CLK_DISABLED()      ((RCC->APB2ENR & (RCC_APB2ENR_ADC3EN)) == RESET)\n 1380  #endif /* STM32F103xE || STM32F103xG */\n 1381  #if defined(STM32F100xE)\n 1382: #define __HAL_RCC_GPIOF_IS_CLK_ENABLED()       ((RCC->APB2ENR & (RCC_APB2ENR_IOPFEN)) != RESET)\n 1383: #define __HAL_RCC_GPIOF_IS_CLK_DISABLED()      ((RCC->APB2ENR & (RCC_APB2ENR_IOPFEN)) == RESET)\n 1384: #define __HAL_RCC_GPIOG_IS_CLK_ENABLED()       ((RCC->APB2ENR & (RCC_APB2ENR_IOPGEN)) != RESET)\n 1385: #define __HAL_RCC_GPIOG_IS_CLK_DISABLED()      ((RCC->APB2ENR & (RCC_APB2ENR_IOPGEN)) == RESET)\n 1386  #endif /* STM32F100xE */\n 1387  #if defined(STM32F101xG) || defined(STM32F103xG)\n 1388: #define __HAL_RCC_TIM9_IS_CLK_ENABLED()       ((RCC->APB2ENR & (RCC_APB2ENR_TIM9EN)) != RESET)\n 1389: #define __HAL_RCC_TIM9_IS_CLK_DISABLED()      ((RCC->APB2ENR & (RCC_APB2ENR_TIM9EN)) == RESET)\n 1390: #define __HAL_RCC_TIM10_IS_CLK_ENABLED()       ((RCC->APB2ENR & (RCC_APB2ENR_TIM10EN)) != RESET)\n 1391: #define __HAL_RCC_TIM10_IS_CLK_DISABLED()      ((RCC->APB2ENR & (RCC_APB2ENR_TIM10EN)) == RESET)\n 1392: #define __HAL_RCC_TIM11_IS_CLK_ENABLED()       ((RCC->APB2ENR & (RCC_APB2ENR_TIM11EN)) != RESET)\n 1393: #define __HAL_RCC_TIM11_IS_CLK_DISABLED()      ((RCC->APB2ENR & (RCC_APB2ENR_TIM11EN)) == RESET)\n 1394  #endif /* STM32F101xG || STM32F103xG */\n 1395  \n ....\n 1400  #if defined(STM32F105xC) || defined(STM32F107xC)\n 1401  /** @defgroup RCCEx_Peripheral_Clock_Force_Release Peripheral Clock Force Release\n 1402:   * @brief  Force or release AHB peripheral reset.\n 1403    * @{\n 1404    */  \n ....\n 1420  #endif /* STM32F105xC || STM32F107xC */\n 1421  \n 1422: /** @defgroup RCCEx_APB1_Force_Release_Reset APB1 Force Release Reset\n 1423:   * @brief  Force or release APB1 peripheral reset.\n 1424    * @{   \n 1425    */\n ....\n 1522    */\n 1523  \n 1524: /** @defgroup RCCEx_APB2_Force_Release_Reset APB2 Force Release Reset\n 1525:   * @brief  Force or release APB2 peripheral reset.\n 1526    * @{   \n 1527    */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal_tim.h:\n 1111   ((__HANDLE__)->Instance->CCMR2 |= ((__ICPSC__) << 8)))\n 1112  \n 1113: /** @brief Reset TIM IC prescaler\n 1114    * @param  __HANDLE__: TIM handle\n 1115    * @param  __CHANNEL__: specifies TIM Channel\n ....\n 1135   ((__HANDLE__)->Instance->CCER |= (((__POLARITY__) << 12) & TIM_CCER_CC4P)))\n 1136  \n 1137: /** @brief Reset TIM IC polarity\n 1138    * @param  __HANDLE__: TIM handle\n 1139    * @param  __CHANNEL__: specifies TIM Channel\n ....\n 1170    */\n 1171  \n 1172: /** @brief  Reset TIM handle state\n 1173    * @param  __HANDLE__: TIM handle.\n 1174    * @retval None\n ....\n 1336    * @param  __HANDLE__: TIM handle\n 1337    * @param  __INTERRUPT__: specifies the TIM interrupt source to check.\n 1338:   * @retval The state of TIM_IT (SET or RESET).\n 1339    */\n 1340: #define __HAL_TIM_GET_IT_SOURCE(__HANDLE__, __INTERRUPT__) ((((__HANDLE__)->Instance->DIER & (__INTERRUPT__)) == (__INTERRUPT__)) ? SET : RESET)\n 1341  \n 1342  /**\n ....\n 1511  \n 1512  /**\n 1513:   * @brief  Reset the Update Request Source (URS) bit of the TIMx_CR1 register\n 1514    * @param  __HANDLE__: TIM handle.\n 1515:   * @note  When the USR bit of the TIMx_CR1 register is reset, any of the\n 1516    *        following events generate an update interrupt or DMA request (if\n 1517    *        enabled):\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal.c:\n  130               handled in milliseconds basis.\n  131          (++) Time base configuration function (HAL_InitTick ()) is called automatically \n  132:              at the beginning of the program after reset by HAL_Init() or at any time \n  133               when clock is configured, by HAL_RCC_ClockConfig(). \n  134          (++) Source of time base is configured  to generate interrupts at regular \n  ...\n  147    * @brief This function configures the Flash prefetch, \n  148    *        Configures time base source, NVIC and Low level hardware\n  149:   * @note This function is called at the beginning of program after reset and before \n  150    *       the clock configuration\n  151:   * @note The time base configuration is based on MSI clock when exiting from Reset.\n  152    *       Once done, time base tick start incrementing.\n  153    *        In the default implementation,Systick is used as source of time base.\n  ...\n  172    HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);\n  173  \n  174:   /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */\n  175    HAL_InitTick(TICK_INT_PRIORITY);\n  176  \n  ...\n  190  HAL_StatusTypeDef HAL_DeInit(void)\n  191  {\n  192:   /* Reset of all peripherals */\n  193    __HAL_RCC_APB1_FORCE_RESET();\n  194    __HAL_RCC_APB1_RELEASE_RESET();\n  ...\n  236    *        Tick interrupt priority.\n  237    * @note This function is called  automatically at the beginning of program after\n  238:   *       reset by HAL_Init() or at any time when clock is reconfigured  by HAL_RCC_ClockConfig(). \n  239    * @note In the default implementation, SysTick timer is the source of time base. \n  240    *       It is used to generate interrupts at regular time intervals. \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_cortex.c:\n  253  \n  254  /**\n  255:   * @brief  Initiates a system reset request to reset the MCU.\n  256    * @retval None\n  257    */\n  258  void HAL_NVIC_SystemReset(void)\n  259  {\n  260:   /* System Reset */\n  261    NVIC_SystemReset();\n  262  }\n  ...\n  309    MPU->RNR = MPU_Init->Number;\n  310  \n  311:   if ((MPU_Init->Enable) != RESET)\n  312    {\n  313      /* Check the parameters */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_dma.c:\n  249    __HAL_DMA_DISABLE(hdma);\n  250    \n  251:   /* Reset DMA Channel control register */\n  252    hdma->Instance->CCR  = 0;\n  253    \n  254:   /* Reset DMA Channel Number of Data to Transfer register */\n  255    hdma->Instance->CNDTR = 0;\n  256    \n  257:   /* Reset DMA Channel peripheral address register */\n  258    hdma->Instance->CPAR  = 0;\n  259    \n  260:   /* Reset DMA Channel memory address register */\n  261    hdma->Instance->CMAR = 0;\n  262  \n  ...\n  451    tickstart = HAL_GetTick();\n  452  \n  453:   while(__HAL_DMA_GET_FLAG(hdma, temp) == RESET)\n  454    {\n  455:     if((__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET))\n  456      {      \n  457        /* Clear the transfer error flags */\n  ...\n  523  {\n  524    /* Transfer Error Interrupt management ***************************************/\n  525:   if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)\n  526    {\n  527:     if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)\n  528      {\n  529        /* Disable the transfer error interrupt */\n  ...\n  551  \n  552    /* Half Transfer Complete Interrupt management ******************************/\n  553:   if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)\n  554    {\n  555:     if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)\n  556      { \n  557        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */\n  ...\n  576    \n  577    /* Transfer Complete Interrupt management ***********************************/\n  578:   if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)\n  579    {\n  580:     if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)\n  581      {\n  582        if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_flash.c:\n   46            functions to manage the Option Bytes:\n   47          (++) Lock and Unlock the Option Bytes\n   48:         (++) Set/Reset the write protection\n   49          (++) Set the Read protection Level\n   50          (++) Program the user Option Bytes\n   ..\n  366      HAL_FLASH_OperationErrorCallback(pFlash.Address);\n  367  \n  368:     /* Reset address and stop the procedure ongoing*/\n  369      pFlash.Address = 0xFFFFFFFF;\n  370      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;\n  ...\n  411            /*No more pages to Erase*/\n  412  \n  413:           /*Reset Address and stop Erase pages procedure*/\n  414            pFlash.Address = 0xFFFFFFFF;\n  415            pFlash.ProcedureOnGoing = FLASH_PROC_NONE;\n  ...\n  474            }\n  475          \n  476:           /* Reset Address and stop Program procedure*/\n  477            pFlash.Address = 0xFFFFFFFF;\n  478            pFlash.ProcedureOnGoing = FLASH_PROC_NONE;\n  ...\n  516            /*No more pages to Erase*/\n  517            \n  518:           /*Reset Address and stop Erase pages procedure*/\n  519            pFlash.Address = 0xFFFFFFFF;\n  520            pFlash.ProcedureOnGoing = FLASH_PROC_NONE;\n  ...\n  573            }\n  574            \n  575:           /* Reset Address and stop Program procedure*/\n  576            pFlash.Address = 0xFFFFFFFF;\n  577            pFlash.ProcedureOnGoing = FLASH_PROC_NONE;\n  ...\n  739  /**\n  740    * @brief  Launch the option byte loading.\n  741:   * @note   This function will reset automatically the MCU.\n  742    * @retval HAL_StatusTypeDef HAL Status\n  743    */\n  744  HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)\n  745  {\n  746:   /* Initiates a system reset request to launch the option byte loading */\n  747    HAL_NVIC_SystemReset();\n  748    \n  ...\n  825  HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)\n  826  {\n  827:   /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.\n  828:      Even if the FLASH operation fails, the BUSY flag will be reset and an error\n  829       flag will be set */\n  830       \n  ...\n  870  HAL_StatusTypeDef FLASH_WaitForLastOperationBank2(uint32_t Timeout)\n  871  { \n  872:   /* Wait for the FLASH BANK2 operation to complete by polling on BUSY flag to be reset.\n  873:      Even if the FLASH BANK2 operation fails, the BUSY flag will be reset and an error\n  874       flag will be set */\n  875       \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_flash_ex.c:\n   23         of all STM32F1xxx devices. It includes\n   24         \n   25:         (++) Set/Reset the write protection\n   26          (++) Program the user Option Bytes\n   27          (++) Get the Read protection Level\n   ..\n  390    *         The function HAL_FLASH_OB_Unlock() should be called before to unlock the options bytes\n  391    *         The function HAL_FLASH_OB_Launch() should be called after to force the reload of the options bytes\n  392:   *         (system reset will occur)\n  393    * @retval HAL status\n  394    */\n  ...\n  436    *         The function HAL_FLASH_OB_Unlock() should be called before to unlock the options bytes\n  437    *         The function HAL_FLASH_OB_Launch() should be called after to force the reload of the options bytes\n  438:   *         (system reset will occur)\n  439    *\n  440    * @param  pOBInit: pointer to an FLASH_OBInitStruct structure that\n  ...\n  912    *         The function HAL_FLASH_OB_Unlock() should be called before to unlock the options bytes\n  913    *         The function HAL_FLASH_OB_Launch() should be called after to force the reload of the options bytes \n  914:   *         (system reset will occur)\n  915    *         Programming of the OB should be performed only after an erase (otherwise PGERR occurs)\n  916    * @param  Address: specifies the address to be programmed.\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_gpio.c:\n   26  \n   27    [..]  \n   28:   During and just after reset, the alternate functions and external interrupt  \n   29    lines are not active and the I/O ports are configured in input floating mode.\n   30    \n   ..\n   72     (#) To get the level of a pin configured in input mode use HAL_GPIO_ReadPin().\n   73              \n   74:    (#) To set/reset the level of a pin configured in output mode use \n   75         HAL_GPIO_WritePin()/HAL_GPIO_TogglePin().\n   76    \n   77:    (#) To lock pin configuration until next reset use HAL_GPIO_LockPin().\n   78                   \n   79:    (#) During and just after reset, the alternate functions are not \n   80         active and the GPIO pins are configured in input floating mode (except JTAG\n   81         pins).\n   ..\n  150  \n  151  /* Definitions for bit manipulation of CRL and CRH register */\n  152: #define  GPIO_CR_MODE_INPUT         ((uint32_t)0x00000000) /*!< 00: Input mode (reset state)  */\n  153  #define  GPIO_CR_CNF_ANALOG         ((uint32_t)0x00000000) /*!< 00: Analog mode  */\n  154: #define  GPIO_CR_CNF_INPUT_FLOATING ((uint32_t)0x00000004) /*!< 01: Floating input (reset state)  */\n  155  #define  GPIO_CR_CNF_INPUT_PU_PD    ((uint32_t)0x00000008) /*!< 10: Input with pull-up / pull-down  */\n  156  #define  GPIO_CR_CNF_GP_OUTPUT_PP   ((uint32_t)0x00000000) /*!< 00: General purpose output push-pull  */\n  ...\n  280              config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;\n  281              \n  282:             /* Reset the corresponding ODR bit */\n  283              GPIOx->BRR = ioposition;\n  284            }\n  ...\n  360  \n  361  /**\n  362:   * @brief  De-initializes the GPIOx peripheral registers to their default reset values.\n  363    * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral\n  364    * @param  GPIO_Pin: specifies the port bit to be written.\n  ...\n  514  * @note   The locking mechanism allows the IO configuration to be frozen. When the LOCK sequence\n  515  *         has been applied on a port bit, it is no longer possible to modify the value of the port bit until\n  516: *         the next reset.\n  517  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral\n  518  * @param  GPIO_Pin: specifies the port bit to be locked.\n  ...\n  532    /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */\n  533    GPIOx->LCKR = tmp;\n  534:   /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */\n  535    GPIOx->LCKR = GPIO_Pin;\n  536    /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */\n  ...\n  557  {\n  558    /* EXTI line interrupt detected */\n  559:   if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) \n  560    { \n  561      __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_pcd.c:\n  451      }\n  452      \n  453:     /* Handle Reset Interrupt */\n  454      if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))\n  455      {\n  ...\n  686  \n  687  /**\n  688:   * @brief  USB Reset callbacks\n  689    * @param  hpcd: PCD handle\n  690    * @retval None\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_pwr.c:\n  156   ===============================================================================\n  157      [..]\n  158:       After reset, the backup domain (RTC registers, RTC backup data\n  159        registers) is protected against possible unwanted\n  160        write accesses.\n  ...\n  169  \n  170  /**\n  171:   * @brief  Deinitializes the PWR peripheral registers to their default reset values.  \n  172    * @retval None\n  173    */\n  ...\n  296          (++) The Standby mode is entered using the HAL_PWR_EnterSTANDBYMode() function.\n  297        (+) Exit:\n  298:         (++) WKUP pin rising edge, RTC alarm event rising edge, external Reset in \n  299:              NRSTpin, IWDG Reset\n  300  \n  301     *** Auto-wakeup (AWU) from low-power mode ***\n  ...\n  504      PWR_OverloadWfe(); /* WFE redefine locally */\n  505    }\n  506:   /* Reset SLEEPDEEP bit of Cortex System Control Register */\n  507    CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));\n  508  }\n  ...\n  511    * @brief Enters Standby mode.\n  512    * @note  In Standby mode, all I/O pins are high impedance except for:\n  513:   *          - Reset pad (still available) \n  514    *          - TAMPER pin if configured for tamper or calibration out.\n  515    *          - WKUP pin (PA0) if enabled.\n  ...\n  596  {\n  597    /* Check PWR exti flag */\n  598:   if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)\n  599    {\n  600      /* PWR PVD interrupt user callback */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_rcc.c:\n    7    * @brief   RCC HAL module driver.\n    8    *          This file provides firmware functions to manage the following \n    9:   *          functionalities of the Reset and Clock Control (RCC) peripheral:\n   10    *           + Initialization and de-initialization functions\n   11    *           + Peripheral Control functions\n   ..\n   16    ==============================================================================\n   17      [..]  \n   18:       After reset the device is running from Internal High Speed oscillator\n   19        (HSI 8MHz) with Flash 0 wait state, Flash prefetch buffer is enabled, \n   20        and all peripherals are off except internal SRAM, Flash and JTAG.\n   ..\n   24        (+) All GPIOs are in input floating state, except the JTAG pins which\n   25            are assigned to be used for debug purpose.\n   26:     [..] Once the device started from reset, the user application has to:\n   27        (+) Configure the clock source to be used to drive the System clock\n   28            (if the application needs higher frequency/performance)\n   ..\n  200  \n  201  /**\n  202:   * @brief  Resets the RCC clock configuration to the default reset state.\n  203:   * @note   The default reset state of the clock configuration is given below:\n  204    *            - HSI ON and used as system clock source\n  205    *            - HSE and PLL OFF\n  ...\n  217    CLEAR_BIT(RCC->CFGR, RCC_CFGR_SW);\n  218  \n  219:   /* Reset HSEON, CSSON, & PLLON bits */\n  220    CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLLON);\n  221    \n  222:   /* Reset HSEBYP bit */\n  223    CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);\n  224    \n  225:   /* Reset CFGR register */\n  226    CLEAR_REG(RCC->CFGR);\n  227    \n  228:   /* Set HSITRIM bits to the reset value */\n  229    MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, ((uint32_t)0x10 << POSITION_VAL(RCC_CR_HSITRIM)));\n  230    \n  231  #if (defined(STM32F105xC) || defined(STM32F107xC) || defined (STM32F100xB) || defined (STM32F100xE))\n  232:   /* Reset CFGR2 register */\n  233    CLEAR_REG(RCC->CFGR2);\n  234  \n  ...\n  265         || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))\n  266      {\n  267:       if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))\n  268        {\n  269          return HAL_ERROR;\n  ...\n  272      else\n  273      {\n  274:       /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/\n  275        __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);\n  276        \n  ...\n  279        \n  280        /* Wait till HSE is disabled */  \n  281:       while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)\n  282        {\n  283          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)\n  ...\n  298          \n  299          /* Wait till HSE is ready */\n  300:         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)\n  301          {\n  302            if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)\n  ...\n  312          \n  313          /* Wait till HSE is bypassed or disabled */\n  314:         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)\n  315          {\n  316             if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)\n  ...\n  334      {\n  335        /* When HSI is used as system clock it will not disabled */\n  336:       if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))\n  337        {\n  338          return HAL_ERROR;\n  ...\n  357          \n  358          /* Wait till HSI is ready */\n  359:         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)\n  360          {\n  361            if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)\n  ...\n  377          \n  378          /* Wait till HSI is disabled */\n  379:         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)\n  380          {\n  381            if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)\n  ...\n  403        \n  404        /* Wait till LSI is ready */  \n  405:       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)\n  406        {\n  407          if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)\n  ...\n  423        \n  424        /* Wait till LSI is disabled */  \n  425:       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)\n  426        {\n  427          if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)\n  ...\n  447      tickstart = HAL_GetTick();\n  448      \n  449:     while((PWR->CR & PWR_CR_DBP) == RESET)\n  450      {\n  451        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)\n  ...\n  455      }\n  456      \n  457:     /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/\n  458      __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);\n  459      \n  ...\n  462      \n  463      /* Wait till LSE is disabled */  \n  464:     while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)\n  465      {\n  466        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)\n  ...\n  479        \n  480        /* Wait till LSE is ready */  \n  481:       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)\n  482        {\n  483          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)\n  ...\n  493        \n  494        /* Wait till LSE is disabled */  \n  495:       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)\n  496        {\n  497          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)\n  ...\n  540          \n  541          /* Wait till PLL2 is disabled */\n  542:         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)\n  543          {\n  544            if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)\n  ...\n  561          \n  562          /* Wait till PLL2 is ready */\n  563:         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)\n  564          {\n  565            if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)\n  ...\n  581          \n  582          /* Wait till PLL2 is disabled */  \n  583:         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)\n  584          {\n  585            if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)\n  ...\n  614          \n  615          /* Wait till PLL is disabled */\n  616:         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)\n  617          {\n  618            if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)\n  ...\n  649          \n  650          /* Wait till PLL is ready */\n  651:         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)\n  652          {\n  653            if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)\n  ...\n  666          \n  667          /* Wait till PLL is disabled */  \n  668:         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)\n  669          {\n  670            if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)\n  ...\n  695    *\n  696    * @note   The HSI is used (enabled by hardware) as system clock source after\n  697:   *         startup from Reset, wake-up from STOP and STANDBY mode, or in case\n  698    *         of failure of the HSE used directly or indirectly as system clock\n  699    *         (if the Clock Security System CSS is enabled).\n  ...\n  751        {\n  752          /* Check the HSE ready flag */  \n  753:         if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)\n  754          {\n  755            return HAL_ERROR;\n  ...\n  760        {\n  761          /* Check the PLL ready flag */  \n  762:         if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)\n  763          {\n  764            return HAL_ERROR;\n  ...\n  769        {\n  770          /* Check the HSI ready flag */  \n  771:         if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)\n  772          {\n  773            return HAL_ERROR;\n  ...\n  831        {\n  832          /* Check the HSE ready flag */  \n  833:         if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)\n  834          {\n  835            return HAL_ERROR;\n  ...\n  840        {\n  841          /* Check the PLL ready flag */  \n  842:         if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)\n  843          {\n  844            return HAL_ERROR;\n  ...\n  849        {\n  850          /* Check the HSI ready flag */  \n  851:         if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)\n  852          {\n  853            return HAL_ERROR;\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_rcc_ex.c:\n   91      [..] \n   92      (@) Important note: Care must be taken when HAL_RCCEx_PeriphCLKConfig() is used to\n   93:         select the RTC clock source; in this case the Backup domain will be reset in  \n   94          order to modify the RTC Clock source, as consequence RTC registers (including \n   95:         the backup registers) and RCC_BDCR register are set to their reset values.\n   96        \n   97  @endverbatim\n   ..\n  106    *\n  107    * @note   Care must be taken when HAL_RCCEx_PeriphCLKConfig() is used to select \n  108:   *         the RTC clock source; in this case the Backup domain will be reset in  \n  109    *         order to modify the RTC Clock source, as consequence RTC registers (including \n  110:   *         the backup registers) are set to their reset values.\n  111    *\n  112    * @note   In case of STM32F105xC or STM32F107xC devices, PLLI2S will be enabled if requested on \n  ...\n  141      tickstart = HAL_GetTick();\n  142      \n  143:     while((PWR->CR & PWR_CR_DBP) == RESET)\n  144      {\n  145        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)\n  ...\n  149      }\n  150        \n  151:     /* Reset the Backup domain only if the RTC Clock source selection is modified */ \n  152      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))\n  153      {\n  154:       /* Store the content of BDCR register before the reset of Backup Domain */\n  155        temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));\n  156:       /* RTC Clock selection can be changed only if the Backup Domain is reset */\n  157        __HAL_RCC_BACKUPRESET_FORCE();\n  158        __HAL_RCC_BACKUPRESET_RELEASE();\n  ...\n  167        \n  168          /* Wait till LSE is ready */  \n  169:         while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)\n  170          {\n  171            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)\n  ...\n  249        \n  250        /* Wait till PLLI2S is ready */\n  251:       while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)\n  252        {\n  253          if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)\n  ...\n  609      \n  610      /* Wait till PLLI2S is ready */  \n  611:     while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)\n  612      {\n  613        if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)\n  ...\n  631      \n  632      /* Wait till PLLI2S is ready */\n  633:     while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)\n  634      {\n  635        if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)\n  ...\n  667      \n  668      /* Wait till PLLI2S is ready */  \n  669:     while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)\n  670      {\n  671        if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)\n  ...\n  742      \n  743      /* Wait till PLL2 is disabled */\n  744:     while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)\n  745      {\n  746        if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)\n  ...\n  763      \n  764      /* Wait till PLL2 is ready */\n  765:     while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)\n  766      {\n  767        if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)\n  ...\n  801      \n  802      /* Wait till PLL2 is disabled */  \n  803:     while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)\n  804      {\n  805        if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_tim.c:\n  579    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);\n  580  \n  581:   if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)\n  582    {\n  583      /* Enable the main output */\n  ...\n  611    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);\n  612  \n  613:   if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)\n  614    {\n  615      /* Disable the Main Ouput */\n  ...\n  677    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);\n  678  \n  679:   if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)\n  680    {\n  681      /* Enable the main output */\n  ...\n  743    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);\n  744  \n  745:   if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)\n  746    {\n  747      /* Disable the Main Ouput */\n  ...\n  862    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);\n  863  \n  864:   if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)\n  865    {\n  866      /* Enable the main output */\n  ...\n  928    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);\n  929  \n  930:   if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)\n  931    {\n  932      /* Disable the Main Ouput */\n  ...\n 1079    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);\n 1080  \n 1081:   if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)\n 1082    {\n 1083      /* Enable the main output */\n ....\n 1111    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);\n 1112  \n 1113:   if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)\n 1114    {\n 1115      /* Disable the Main Ouput */\n ....\n 1180    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);\n 1181  \n 1182:   if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)\n 1183    {\n 1184      /* Enable the main output */\n ....\n 1246    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);\n 1247  \n 1248:   if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)\n 1249    {\n 1250      /* Disable the Main Ouput */\n ....\n 1365    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);\n 1366  \n 1367:   if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)\n 1368    {\n 1369      /* Enable the main output */\n ....\n 1431    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);\n 1432  \n 1433:   if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)\n 1434    {\n 1435      /* Disable the Main Ouput */\n ....\n 1976    TIM_Base_SetConfig(htim->Instance, &htim->Init);\n 1977  \n 1978:   /* Reset the OPM Bit */\n 1979    htim->Instance->CR1 &= ~TIM_CR1_OPM;\n 1980  \n ....\n 2062    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);\n 2063  \n 2064:   if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)\n 2065    {\n 2066      /* Enable the main output */\n ....\n 2092    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);\n 2093  \n 2094:   if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)\n 2095    {\n 2096      /* Disable the Main Ouput */\n ....\n 2134    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);\n 2135  \n 2136:   if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)\n 2137    {\n 2138      /* Enable the main output */\n ....\n 2169    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);\n 2170  \n 2171:   if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)\n 2172    {\n 2173      /* Disable the Main Ouput */\n ....\n 2249    htim->State= HAL_TIM_STATE_BUSY;\n 2250  \n 2251:   /* Reset the SMS bits */\n 2252    htim->Instance->SMCR &= ~TIM_SMCR_SMS;\n 2253  \n ....\n 2729  {\n 2730    /* Capture compare 1 event */\n 2731:   if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)\n 2732    {\n 2733:     if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)\n 2734      {\n 2735        {\n ....\n 2753    }\n 2754    /* Capture compare 2 event */\n 2755:   if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)\n 2756    {\n 2757:     if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)\n 2758      {\n 2759        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);\n ....\n 2774    }\n 2775    /* Capture compare 3 event */\n 2776:   if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)\n 2777    {\n 2778:     if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)\n 2779      {\n 2780        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);\n ....\n 2795    }\n 2796    /* Capture compare 4 event */\n 2797:   if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)\n 2798    {\n 2799:     if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)\n 2800      {\n 2801        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);\n ....\n 2816    }\n 2817    /* TIM Update event */\n 2818:   if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)\n 2819    {\n 2820:     if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)\n 2821      {\n 2822        __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);\n ....\n 2825    }\n 2826    /* TIM Break input event */\n 2827:   if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)\n 2828    {\n 2829:     if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)\n 2830      {\n 2831        __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);\n ....\n 2834    }\n 2835    /* TIM Trigger detection event */\n 2836:   if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)\n 2837    {\n 2838:     if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)\n 2839      {\n 2840        __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);\n ....\n 2843    }\n 2844    /* TIM commutation event */\n 2845:   if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)\n 2846    {\n 2847:     if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)\n 2848      {\n 2849        __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);\n ....\n 2982                 sConfig->ICFilter);\n 2983  \n 2984:     /* Reset the IC1PSC Bits */\n 2985      htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;\n 2986  \n ....\n 2998                        sConfig->ICFilter);\n 2999  \n 3000:     /* Reset the IC2PSC Bits */\n 3001      htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;\n 3002  \n ....\n 3014                 sConfig->ICFilter);\n 3015  \n 3016:     /* Reset the IC3PSC Bits */\n 3017      htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;\n 3018  \n ....\n 3030                 sConfig->ICFilter);\n 3031  \n 3032:     /* Reset the IC4PSC Bits */\n 3033      htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;\n 3034  \n ....\n 3210                          sConfig->ICSelection, sConfig->ICFilter);\n 3211  \n 3212:       /* Reset the IC1PSC Bits */\n 3213      htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;\n 3214  \n ....\n 3229                   sConfig->ICSelection, sConfig->ICFilter);\n 3230  \n 3231:       /* Reset the IC2PSC Bits */\n 3232          htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;\n 3233  \n ....\n 3810      case TIM_CHANNEL_1:\n 3811        {\n 3812:         if(sClearInputConfig->ClearInputState != RESET)\n 3813          {\n 3814            /* Enable the Ocref clear feature for Channel 1 */\n ....\n 3825        {\n 3826          assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));\n 3827:         if(sClearInputConfig->ClearInputState != RESET)\n 3828          {\n 3829            /* Enable the Ocref clear feature for Channel 2 */\n ....\n 3840        {\n 3841          assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));\n 3842:         if(sClearInputConfig->ClearInputState != RESET)\n 3843          {\n 3844            /* Enable the Ocref clear feature for Channel 3 */\n ....\n 3855        {\n 3856          assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));\n 3857:         if(sClearInputConfig->ClearInputState != RESET)\n 3858          {\n 3859            /* Enable the Ocref clear feature for Channel 4 */\n ....\n 3900    assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));\n 3901  \n 3902:   /* Reset the SMS, TS, ECE, ETPS and ETRF bits */\n 3903    tmpsmcr = htim->Instance->SMCR;\n 3904    tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);\n ....\n 3928        /* Get the TIMx SMCR register value */\n 3929        tmpsmcr = htim->Instance->SMCR;\n 3930:       /* Reset the SMS and TS Bits */\n 3931        tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);\n 3932        /* Select the External clock mode1 and the ETRF trigger */\n ....\n 4051    tmpcr2 = htim->Instance->CR2;\n 4052  \n 4053:   /* Reset the TI1 selection */\n 4054    tmpcr2 &= ~TIM_CR2_TI1S;\n 4055  \n ....\n 4069    *         contains the selected trigger (internal trigger input, filtered\n 4070    *         timer input or external trigger input) and the ) and the Slave \n 4071:   *         mode (Disable, Reset, Gated, Trigger, External clock mode 1).\n 4072    * @retval HAL status\n 4073    */\n ....\n 4104    *         contains the selected trigger (internal trigger input, filtered\n 4105    *         timer input or external trigger input) and the ) and the Slave \n 4106:   *         mode (Disable, Reset, Gated, Trigger, External clock mode 1).\n 4107    * @retval HAL status\n 4108    */\n ....\n 4553    uint32_t tmpcr2 = 0;\n 4554  \n 4555:    /* Disable the Channel 1: Reset the CC1E Bit */\n 4556    TIMx->CCER &= ~TIM_CCER_CC1E;\n 4557  \n ....\n 4564    tmpccmrx = TIMx->CCMR1;\n 4565  \n 4566:   /* Reset the Output Compare Mode Bits */\n 4567    tmpccmrx &= ~TIM_CCMR1_OC1M;\n 4568    tmpccmrx &= ~TIM_CCMR1_CC1S;\n ....\n 4570    tmpccmrx |= OC_Config->OCMode;\n 4571  \n 4572:   /* Reset the Output Polarity level */\n 4573    tmpccer &= ~TIM_CCER_CC1P;\n 4574    /* Set the Output Compare Polarity */\n ....\n 4580      assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));\n 4581  \n 4582:     /* Reset the Output N Polarity level */\n 4583      tmpccer &= ~TIM_CCER_CC1NP;\n 4584      /* Set the Output N Polarity */\n 4585      tmpccer |= OC_Config->OCNPolarity;\n 4586:     /* Reset the Output N State */\n 4587      tmpccer &= ~TIM_CCER_CC1NE;\n 4588    }\n ....\n 4594      assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));\n 4595  \n 4596:     /* Reset the Output Compare and Output Compare N IDLE State */\n 4597      tmpcr2 &= ~TIM_CR2_OIS1;\n 4598      tmpcr2 &= ~TIM_CR2_OIS1N;\n ....\n 4627    uint32_t tmpcr2 = 0;\n 4628  \n 4629:   /* Disable the Channel 2: Reset the CC2E Bit */\n 4630    TIMx->CCER &= ~TIM_CCER_CC2E;\n 4631  \n ....\n 4638    tmpccmrx = TIMx->CCMR1;\n 4639  \n 4640:   /* Reset the Output Compare mode and Capture/Compare selection Bits */\n 4641    tmpccmrx &= ~TIM_CCMR1_OC2M;\n 4642    tmpccmrx &= ~TIM_CCMR1_CC2S;\n ....\n 4645    tmpccmrx |= (OC_Config->OCMode << 8);\n 4646  \n 4647:   /* Reset the Output Polarity level */\n 4648    tmpccer &= ~TIM_CCER_CC2P;\n 4649    /* Set the Output Compare Polarity */\n ....\n 4656      assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));\n 4657  \n 4658:     /* Reset the Output N Polarity level */\n 4659      tmpccer &= ~TIM_CCER_CC2NP;\n 4660      /* Set the Output N Polarity */\n 4661      tmpccer |= (OC_Config->OCNPolarity << 4);\n 4662:     /* Reset the Output N State */\n 4663      tmpccer &= ~TIM_CCER_CC2NE;\n 4664  \n ....\n 4671      assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));\n 4672  \n 4673:     /* Reset the Output Compare and Output Compare N IDLE State */\n 4674      tmpcr2 &= ~TIM_CR2_OIS2;\n 4675      tmpcr2 &= ~TIM_CR2_OIS2N;\n ....\n 4705    uint32_t tmpcr2 = 0;\n 4706  \n 4707:   /* Disable the Channel 3: Reset the CC2E Bit */\n 4708    TIMx->CCER &= ~TIM_CCER_CC3E;\n 4709  \n ....\n 4716    tmpccmrx = TIMx->CCMR2;\n 4717  \n 4718:   /* Reset the Output Compare mode and Capture/Compare selection Bits */\n 4719    tmpccmrx &= ~TIM_CCMR2_OC3M;\n 4720    tmpccmrx &= ~TIM_CCMR2_CC3S;\n ....\n 4722    tmpccmrx |= OC_Config->OCMode;\n 4723  \n 4724:   /* Reset the Output Polarity level */\n 4725    tmpccer &= ~TIM_CCER_CC3P;\n 4726    /* Set the Output Compare Polarity */\n ....\n 4733      assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));\n 4734  \n 4735:     /* Reset the Output N Polarity level */\n 4736      tmpccer &= ~TIM_CCER_CC3NP;\n 4737      /* Set the Output N Polarity */\n 4738      tmpccer |= (OC_Config->OCNPolarity << 8);\n 4739:     /* Reset the Output N State */\n 4740      tmpccer &= ~TIM_CCER_CC3NE;\n 4741    }\n ....\n 4747      assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));\n 4748  \n 4749:     /* Reset the Output Compare and Output Compare N IDLE State */\n 4750      tmpcr2 &= ~TIM_CR2_OIS3;\n 4751      tmpcr2 &= ~TIM_CR2_OIS3N;\n ....\n 4781    uint32_t tmpcr2 = 0;\n 4782  \n 4783:   /* Disable the Channel 4: Reset the CC4E Bit */\n 4784    TIMx->CCER &= ~TIM_CCER_CC4E;\n 4785  \n ....\n 4792    tmpccmrx = TIMx->CCMR2;\n 4793  \n 4794:   /* Reset the Output Compare mode and Capture/Compare selection Bits */\n 4795    tmpccmrx &= ~TIM_CCMR2_OC4M;\n 4796    tmpccmrx &= ~TIM_CCMR2_CC4S;\n ....\n 4799    tmpccmrx |= (OC_Config->OCMode << 8);\n 4800  \n 4801:   /* Reset the Output Polarity level */\n 4802    tmpccer &= ~TIM_CCER_CC4P;\n 4803    /* Set the Output Compare Polarity */\n ....\n 4808      assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));\n 4809  \n 4810:    /* Reset the Output Compare IDLE State */\n 4811      tmpcr2 &= ~TIM_CR2_OIS4;\n 4812      /* Set the Output Idle state */\n ....\n 4845    tmpsmcr = htim->Instance->SMCR;\n 4846  \n 4847:   /* Reset the Trigger Selection Bits */\n 4848    tmpsmcr &= ~TIM_SMCR_TS;\n 4849    /* Set the Input Trigger source */\n 4850    tmpsmcr |= sSlaveConfig->InputTrigger;\n 4851  \n 4852:   /* Reset the slave mode Bits */\n 4853    tmpsmcr &= ~TIM_SMCR_SMS;\n 4854    /* Set the slave mode */\n ....\n 4882        assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));\n 4883  \n 4884:       /* Disable the Channel 1: Reset the CC1E Bit */\n 4885        tmpccer = htim->Instance->CCER;\n 4886        htim->Instance->CCER &= ~TIM_CCER_CC1E;\n ....\n 4985    uint32_t tmpccer = 0;\n 4986  \n 4987:   /* Disable the Channel 1: Reset the CC1E Bit */\n 4988    TIMx->CCER &= ~TIM_CCER_CC1E;\n 4989    tmpccmr1 = TIMx->CCMR1;\n ....\n 4991  \n 4992    /* Select the Input */\n 4993:   if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)\n 4994    {\n 4995      tmpccmr1 &= ~TIM_CCMR1_CC1S;\n ....\n 5031    uint32_t tmpccer = 0;\n 5032  \n 5033:   /* Disable the Channel 1: Reset the CC1E Bit */\n 5034    tmpccer = TIMx->CCER;\n 5035    TIMx->CCER &= ~TIM_CCER_CC1E;\n ....\n 5075    uint32_t tmpccer = 0;\n 5076  \n 5077:   /* Disable the Channel 2: Reset the CC2E Bit */\n 5078    TIMx->CCER &= ~TIM_CCER_CC2E;\n 5079    tmpccmr1 = TIMx->CCMR1;\n ....\n 5114    uint32_t tmpccer = 0;\n 5115  \n 5116:   /* Disable the Channel 2: Reset the CC2E Bit */\n 5117    TIMx->CCER &= ~TIM_CCER_CC2E;\n 5118    tmpccmr1 = TIMx->CCMR1;\n ....\n 5158    uint32_t tmpccer = 0;\n 5159  \n 5160:   /* Disable the Channel 3: Reset the CC3E Bit */\n 5161    TIMx->CCER &= ~TIM_CCER_CC3E;\n 5162    tmpccmr2 = TIMx->CCMR2;\n ....\n 5206    uint32_t tmpccer = 0;\n 5207  \n 5208:   /* Disable the Channel 4: Reset the CC4E Bit */\n 5209    TIMx->CCER &= ~TIM_CCER_CC4E;\n 5210    tmpccmr2 = TIMx->CCMR2;\n ....\n 5249     /* Get the TIMx SMCR register value */\n 5250     tmpsmcr = TIMx->SMCR;\n 5251:    /* Reset the TS Bits */\n 5252     tmpsmcr &= ~TIM_SMCR_TS;\n 5253     /* Set the Input Trigger source and the slave mode*/\n ....\n 5280    tmpsmcr = TIMx->SMCR;\n 5281  \n 5282:   /* Reset the ETR Bits */\n 5283    tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);\n 5284  \n ....\n 5313    tmp = TIM_CCER_CC1E << Channel;\n 5314  \n 5315:   /* Reset the CCxE Bit */\n 5316    TIMx->CCER &= ~tmp;\n 5317  \n 5318:   /* Set or reset the CCxE Bit */\n 5319    TIMx->CCER |=  (uint32_t)(ChannelState << Channel);\n 5320  }\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_tim_ex.c:\n   25      (#) Synchronization circuit to control the timer with external signals and to\n   26          interconnect several timers together.\n   27:     (#) Break input to put the timer output signals in reset state or in a known state.\n   28      (#) Supports incremental (quadrature) encoder and hall-sensor circuitry for\n   29          positioning purposes\n   ..\n  200    TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);\n  201  \n  202:   /* Reset the IC1PSC Bits */\n  203    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;\n  204    /* Set the IC1PSC value */\n  ...\n  212    htim->Instance->SMCR |= TIM_TS_TI1F_ED;\n  213  \n  214:   /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */\n  215    htim->Instance->SMCR &= ~TIM_SMCR_SMS;\n  216    htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;\n  ...\n  666    /* Disable the TIM Break interrupt (only if no more channel is active) */\n  667    tmpccer = htim->Instance->CCER;\n  668:   if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == RESET)\n  669    {\n  670      __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);\n  ...\n 1082    /* Disable the TIM Break interrupt (only if no more channel is active) */\n 1083    tmpccer = htim->Instance->CCER;\n 1084:   if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == RESET)\n 1085    {\n 1086      __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);\n ....\n 1678    htim->State = HAL_TIM_STATE_BUSY;\n 1679  \n 1680:   /* Reset the MMS Bits */\n 1681    htim->Instance->CR2 &= ~TIM_CR2_MMS;\n 1682    /* Select the TRGO source */\n 1683    htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;\n 1684  \n 1685:   /* Reset the MSM Bit */\n 1686    htim->Instance->SMCR &= ~TIM_SMCR_MSM;\n 1687:   /* Set or Reset the MSM Bit */\n 1688    htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;\n 1689  \n ....\n 1823    tmp = TIM_CCER_CC1NE << Channel;\n 1824  \n 1825:   /* Reset the CCxNE Bit */\n 1826    TIMx->CCER &=  ~tmp;\n 1827  \n 1828:   /* Set or reset the CCxNE Bit */\n 1829    TIMx->CCER |=  (uint32_t)(ChannelNState << Channel);\n 1830  }\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_ll_usb.c:\n  127    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;\n  128    \n  129:   /* Reset after a PHY select and set Host mode */\n  130    USB_CoreReset(USBx);\n  131    \n  ...\n 1021  \n 1022  /**\n 1023: * @brief  USB_OTG_ResetPort : Reset Host Port\n 1024    * @param  USBx : Selected device\n 1025    * @retval HAL status\n 1026    * @note : (1)The application must wait at least 10 ms\n 1027:   *   before clearing the reset bit.\n 1028    */\n 1029  HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)\n ....\n 1669        PCD_CLEAR_TX_DTOG(USBx, ep->num);\n 1670        \n 1671:       /* Reset value of the data toggle bits for the endpoint out*/\n 1672        PCD_TX_DTOG(USBx, ep->num);\n 1673        \n ....\n 1722        PCD_CLEAR_TX_DTOG(USBx, ep->num);\n 1723        \n 1724:       /* Reset value of the data toggle bits for the endpoint out*/\n 1725        PCD_TX_DTOG(USBx, ep->num);\n 1726        \n ....\n 1918  HAL_StatusTypeDef USB_StopDevice(USB_TypeDef *USBx)\n 1919  {\n 1920:   /* disable all interrupts and force USB reset */\n 1921    USBx->CNTR = USB_CNTR_FRES;\n 1922    \n ....\n 2163    */\n 2164  /**\n 2165:   * @brief  Reset the USB Core (needed after USB clock settings change)\n 2166    * @param  USBx : Selected device\n 2167    * @retval HAL status\n ....\n 2181    while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0);\n 2182    \n 2183:   /* Core Soft Reset */\n 2184    count = 0;\n 2185    USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Inc\\Backup\\stm32f1xx_hal_conf.h.bak:\n  166  /* DP83848 PHY Address*/ \n  167  #define DP83848_PHY_ADDRESS             0x01\n  168: /* PHY Reset delay these values are based on a 1 ms Systick interrupt*/ \n  169  #define PHY_RESET_DELAY                 ((uint32_t)0x000000FF)\n  170  /* PHY Configuration delay */\n  ...\n  179  #define PHY_BSR                         ((uint16_t)0x01)    /*!< Transceiver Basic Status Register    */\n  180   \n  181: #define PHY_RESET                       ((uint16_t)0x8000)  /*!< PHY Reset */\n  182  #define PHY_LOOPBACK                    ((uint16_t)0x4000)  /*!< Select loop-back mode */\n  183  #define PHY_FULLDUPLEX_100M             ((uint16_t)0x2100)  /*!< Set the full-duplex mode at 100 Mb/s */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Inc\\stm32f1xx_hal_conf.h:\n  166  /* DP83848 PHY Address*/ \n  167  #define DP83848_PHY_ADDRESS             0x01\n  168: /* PHY Reset delay these values are based on a 1 ms Systick interrupt*/ \n  169  #define PHY_RESET_DELAY                 ((uint32_t)0x000000FF)\n  170  /* PHY Configuration delay */\n  ...\n  179  #define PHY_BSR                         ((uint16_t)0x01)    /*!< Transceiver Basic Status Register    */\n  180   \n  181: #define PHY_RESET                       ((uint16_t)0x8000)  /*!< PHY Reset */\n  182  #define PHY_LOOPBACK                    ((uint16_t)0x4000)  /*!< Select loop-back mode */\n  183  #define PHY_FULLDUPLEX_100M             ((uint16_t)0x2100)  /*!< Set the full-duplex mode at 100 Mb/s */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Middlewares\\ST\\STM32_USB_Device_Library\\Core\\Src\\usbd_core.c:\n  408  /**\n  409  * @brief  USBD_LL_Reset \n  410: *         Handle Reset event\n  411  * @param  pdev: device instance\n  412  * @retval status\n  ...\n  430    \n  431    pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;\n  432:   /* Upon Reset call user call back */\n  433    pdev->dev_state = USBD_STATE_DEFAULT;\n  434    \n  ...\n  445  /**\n  446  * @brief  USBD_LL_Reset \n  447: *         Handle Reset event\n  448  * @param  pdev: device instance\n  449  * @retval status\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\Backup\\main.c.bak:\n  112    /* MCU Configuration----------------------------------------------------------*/\n  113  \n  114:   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */\n  115    HAL_Init();\n  116  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\Backup\\startup_stm32f10x_md.s.bak:\n   13    *                - Branches to main in the C library (which eventually\n   14    *                  calls main()).\n   15:   *            After Reset the Cortex-M3 processor is in Thread mode,\n   16    *            priority is Privileged, and the Stack is set to Main.\n   17    ******************************************************************************\n   ..\n   52  /**\n   53   * @brief  This is the code that gets called when the processor first\n   54:  *          starts execution following a reset event. Only the absolutely\n   55   *          necessary set is performed, after which the application\n   56   *          supplied main() routine is called. \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\Backup\\usbd_conf.c.bak:\n  139  \n  140  /**\n  141:   * @brief  Reset callback.\n  142    * @param  hpcd: PCD handle\n  143    * @retval None\n  ...\n  160    USBD_LL_SetSpeed(hpcd->pData, speed);  \n  161    \n  162:   /*Reset Device*/\n  163    USBD_LL_Reset(hpcd->pData);\n  164  }\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\main.c:\n  122  	/* MCU Configuration----------------------------------------------------------*/\n  123  \n  124: 	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */\n  125  	HAL_Init();\n  126  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\main.c.bak:\n   70    /* MCU Configuration----------------------------------------------------------*/\n   71  \n   72:   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */\n   73    HAL_Init();\n   74  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\startup_stm32f10x_md.s:\n   13    *                - Branches to main in the C library (which eventually\n   14    *                  calls main()).\n   15:   *            After Reset the Cortex-M3 processor is in Thread mode,\n   16    *            priority is Privileged, and the Stack is set to Main.\n   17    ******************************************************************************\n   ..\n   52  /**\n   53   * @brief  This is the code that gets called when the processor first\n   54:  *          starts execution following a reset event. Only the absolutely\n   55   *          necessary set is performed, after which the application\n   56   *          supplied main() routine is called. \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\usbd_conf.c:\n  156  \n  157  /**\n  158:   * @brief  Reset callback.\n  159    * @param  hpcd: PCD handle\n  160    * @retval None\n  ...\n  177    USBD_LL_SetSpeed(hpcd->pData, speed);  \n  178    \n  179:   /*Reset Device*/\n  180    USBD_LL_Reset(hpcd->pData);\n  181  }\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\usbd_conf.c.bak:\n  139  \n  140  /**\n  141:   * @brief  Reset callback.\n  142    * @param  hpcd: PCD handle\n  143    * @retval None\n  ...\n  160    USBD_LL_SetSpeed(hpcd->pData, speed);  \n  161    \n  162:   /*Reset Device*/\n  163    USBD_LL_Reset(hpcd->pData);\n  164  }\n\nD:\\WorkSTM32\\stm32_PPM_F103\\stm32_PPM_F103.ioc:\n  104  VP_TIM1_VS_ClockSourceINT.Mode=Internal\n  105  VP_TIM1_VS_ClockSourceINT.Signal=TIM1_VS_ClockSourceINT\n  106: VP_TIM1_VS_ControllerModeReset.Mode=Reset Mode\n  107  VP_TIM1_VS_ControllerModeReset.Signal=TIM1_VS_ControllerModeReset\n  108  VP_USB_DEVICE_VS_USB_DEVICE_HID_FS.Mode=HID_FS\n\nD:\\WorkSTM32\\stm32_PPM_F103\\stm32_PPM_F103.txt:\n    9  RCC	Crystal/Ceramic Resonator	RCC_OSC_IN	PD0-OSC_IN\n   10  RCC	Crystal/Ceramic Resonator	RCC_OSC_OUT	PD1-OSC_OUT\n   11: TIM1	Reset Mode	TIM1_VS_ControllerModeReset	VP_TIM1_VS_ControllerModeReset\n   12  TIM1	TI1FP1	TIM1_CH1	PA8\n   13  TIM1	Internal Clock	TIM1_VS_ClockSourceINT	VP_TIM1_VS_ClockSourceINT\n\n1634 matches across 61 files\n\n\nSearching 130 files for \"#define reset\" (whole word)\n\n0 matches\n\nSearching 130 files for \"TIM1_TRG_COM_IRQHandler\" (whole word)\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f100xb.h:\n 4026  #define TIM9_IRQHandler               TIM1_BRK_TIM15_IRQHandler\n 4027  #define TIM1_TRG_COM_TIM11_IRQHandler TIM1_TRG_COM_TIM17_IRQHandler\n 4028: #define TIM1_TRG_COM_IRQHandler       TIM1_TRG_COM_TIM17_IRQHandler\n 4029  #define TIM11_IRQHandler              TIM1_TRG_COM_TIM17_IRQHandler\n 4030  #define TIM1_UP_IRQHandler            TIM1_UP_TIM16_IRQHandler\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f100xe.h:\n 4457  #define TIM1_BRK_TIM9_IRQHandler      TIM1_BRK_TIM15_IRQHandler\n 4458  #define TIM1_TRG_COM_TIM11_IRQHandler TIM1_TRG_COM_TIM17_IRQHandler\n 4459: #define TIM1_TRG_COM_IRQHandler       TIM1_TRG_COM_TIM17_IRQHandler\n 4460  #define TIM11_IRQHandler              TIM1_TRG_COM_TIM17_IRQHandler\n 4461  #define TIM10_IRQHandler              TIM1_UP_TIM16_IRQHandler\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f101xg.h:\n 4533  #define TIM1_TRG_COM_TIM11_IRQHandler TIM11_IRQHandler\n 4534  #define TIM1_TRG_COM_TIM17_IRQHandler TIM11_IRQHandler\n 4535: #define TIM1_TRG_COM_IRQHandler       TIM11_IRQHandler\n 4536  #define TIM8_BRK_TIM12_IRQHandler     TIM12_IRQHandler\n 4537  #define TIM8_BRK_IRQHandler           TIM12_IRQHandler\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f103x6.h:\n 5766  #define TIM1_BRK_TIM9_IRQHandler      TIM1_BRK_IRQHandler\n 5767  #define TIM9_IRQHandler               TIM1_BRK_IRQHandler\n 5768: #define TIM1_TRG_COM_TIM11_IRQHandler TIM1_TRG_COM_IRQHandler\n 5769: #define TIM1_TRG_COM_TIM17_IRQHandler TIM1_TRG_COM_IRQHandler\n 5770: #define TIM11_IRQHandler              TIM1_TRG_COM_IRQHandler\n 5771  #define TIM10_IRQHandler              TIM1_UP_IRQHandler\n 5772  #define TIM1_UP_TIM16_IRQHandler      TIM1_UP_IRQHandler\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f103xb.h:\n 5851  #define TIM1_BRK_TIM9_IRQHandler      TIM1_BRK_IRQHandler\n 5852  #define TIM9_IRQHandler               TIM1_BRK_IRQHandler\n 5853: #define TIM1_TRG_COM_TIM11_IRQHandler TIM1_TRG_COM_IRQHandler\n 5854: #define TIM1_TRG_COM_TIM17_IRQHandler TIM1_TRG_COM_IRQHandler\n 5855: #define TIM11_IRQHandler              TIM1_TRG_COM_IRQHandler\n 5856  #define TIM10_IRQHandler              TIM1_UP_IRQHandler\n 5857  #define TIM1_UP_TIM16_IRQHandler      TIM1_UP_IRQHandler\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f103xe.h:\n 6645  #define TIM1_BRK_TIM9_IRQHandler      TIM1_BRK_IRQHandler\n 6646  #define TIM9_IRQHandler               TIM1_BRK_IRQHandler\n 6647: #define TIM1_TRG_COM_TIM11_IRQHandler TIM1_TRG_COM_IRQHandler\n 6648: #define TIM1_TRG_COM_TIM17_IRQHandler TIM1_TRG_COM_IRQHandler\n 6649: #define TIM11_IRQHandler              TIM1_TRG_COM_IRQHandler\n 6650  #define TIM10_IRQHandler              TIM1_UP_IRQHandler\n 6651  #define TIM1_UP_TIM16_IRQHandler      TIM1_UP_IRQHandler\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f103xg.h:\n 6756  #define TIM9_IRQHandler               TIM1_BRK_TIM9_IRQHandler\n 6757  #define TIM1_TRG_COM_TIM17_IRQHandler TIM1_TRG_COM_TIM11_IRQHandler\n 6758: #define TIM1_TRG_COM_IRQHandler       TIM1_TRG_COM_TIM11_IRQHandler\n 6759  #define TIM11_IRQHandler              TIM1_TRG_COM_TIM11_IRQHandler\n 6760  #define TIM10_IRQHandler              TIM1_UP_TIM10_IRQHandler\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f105xc.h:\n 7398  #define TIM1_BRK_TIM9_IRQHandler      TIM1_BRK_IRQHandler\n 7399  #define TIM9_IRQHandler               TIM1_BRK_IRQHandler\n 7400: #define TIM1_TRG_COM_TIM11_IRQHandler TIM1_TRG_COM_IRQHandler\n 7401: #define TIM1_TRG_COM_TIM17_IRQHandler TIM1_TRG_COM_IRQHandler\n 7402: #define TIM11_IRQHandler              TIM1_TRG_COM_IRQHandler\n 7403  #define TIM10_IRQHandler              TIM1_UP_IRQHandler\n 7404  #define TIM1_UP_TIM16_IRQHandler      TIM1_UP_IRQHandler\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f107xc.h:\n 7895  #define TIM1_BRK_TIM9_IRQHandler      TIM1_BRK_IRQHandler\n 7896  #define TIM9_IRQHandler               TIM1_BRK_IRQHandler\n 7897: #define TIM1_TRG_COM_TIM11_IRQHandler TIM1_TRG_COM_IRQHandler\n 7898: #define TIM1_TRG_COM_TIM17_IRQHandler TIM1_TRG_COM_IRQHandler\n 7899: #define TIM11_IRQHandler              TIM1_TRG_COM_IRQHandler\n 7900  #define TIM10_IRQHandler              TIM1_UP_IRQHandler\n 7901  #define TIM1_UP_TIM16_IRQHandler      TIM1_UP_IRQHandler\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Source\\Templates\\gcc\\startup_stm32f103xb.s:\n  185    .word TIM1_BRK_IRQHandler\n  186    .word TIM1_UP_IRQHandler\n  187:   .word TIM1_TRG_COM_IRQHandler\n  188    .word TIM1_CC_IRQHandler\n  189    .word TIM2_IRQHandler\n  ...\n  325    .thumb_set TIM1_UP_IRQHandler,Default_Handler\n  326  \n  327:   .weak TIM1_TRG_COM_IRQHandler\n  328:   .thumb_set TIM1_TRG_COM_IRQHandler,Default_Handler\n  329  \n  330    .weak TIM1_CC_IRQHandler\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Inc\\Backup\\stm32f1xx_it.h.bak:\n   48  void SysTick_Handler(void);\n   49  void USB_LP_CAN1_RX0_IRQHandler(void);\n   50: void TIM1_TRG_COM_IRQHandler(void);\n   51  \n   52  #ifdef __cplusplus\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Inc\\stm32f1xx_it.h:\n   48  void SysTick_Handler(void);\n   49  void USB_LP_CAN1_RX0_IRQHandler(void);\n   50: void TIM1_TRG_COM_IRQHandler(void);\n   51  \n   52  #ifdef __cplusplus\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\Backup\\startup_stm32f10x_md.s.bak:\n  165  	.word	TIM1_BRK_IRQHandler\n  166  	.word	TIM1_UP_IRQHandler\n  167: 	.word	TIM1_TRG_COM_IRQHandler\n  168  	.word	TIM1_CC_IRQHandler\n  169  	.word	TIM2_IRQHandler\n  ...\n  305  	.thumb_set TIM1_UP_IRQHandler,Default_Handler\n  306  \n  307: 	.weak	TIM1_TRG_COM_IRQHandler\n  308: 	.thumb_set TIM1_TRG_COM_IRQHandler,Default_Handler\n  309  \n  310  	.weak	TIM1_CC_IRQHandler\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\Backup\\stm32f1xx_it.c.bak:\n   87  * @brief This function handles TIM1 trigger and commutation interrupts.\n   88  */\n   89: void TIM1_TRG_COM_IRQHandler(void)\n   90  {\n   91    /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\startup_stm32f10x_md.s:\n  165  	.word	TIM1_BRK_IRQHandler\n  166  	.word	TIM1_UP_IRQHandler\n  167: 	.word	TIM1_TRG_COM_IRQHandler\n  168  	.word	TIM1_CC_IRQHandler\n  169  	.word	TIM2_IRQHandler\n  ...\n  305  	.thumb_set TIM1_UP_IRQHandler,Default_Handler\n  306  \n  307: 	.weak	TIM1_TRG_COM_IRQHandler\n  308: 	.thumb_set TIM1_TRG_COM_IRQHandler,Default_Handler\n  309  \n  310  	.weak	TIM1_CC_IRQHandler\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\stm32f1xx_it.c:\n   87  * @brief This function handles TIM1 trigger and commutation interrupts.\n   88  */\n   89: void TIM1_TRG_COM_IRQHandler(void)\n   90  {\n   91    /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\stm32_PPM_F103\\Debug\\bin\\stm32_PPM_F103.elf:\n    <binary>\n\nD:\\WorkSTM32\\stm32_PPM_F103\\stm32_PPM_F103\\Debug\\bin\\stm32_PPM_F103.map:\n  823                  0x08000410       0x10 ..\\obj\\stm32f1xx_it.o\n  824                  0x08000410                USB_LP_CAN1_RX0_IRQHandler\n  825:  .text.TIM1_TRG_COM_IRQHandler\n  826                  0x08000420       0x10 ..\\obj\\stm32f1xx_it.o\n  827:                 0x08000420                TIM1_TRG_COM_IRQHandler\n  828   .text.NVIC_SetPriorityGrouping\n  829                  0x08000430       0x48 ..\\obj\\stm32f1xx_hal_cortex.o\n\n36 matches across 18 files\n\n\nSearching 130 files for \"TIM1_TRG_COM_IRQHandler\" (whole word)\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f100xb.h:\n 4026  #define TIM9_IRQHandler               TIM1_BRK_TIM15_IRQHandler\n 4027  #define TIM1_TRG_COM_TIM11_IRQHandler TIM1_TRG_COM_TIM17_IRQHandler\n 4028: #define TIM1_TRG_COM_IRQHandler       TIM1_TRG_COM_TIM17_IRQHandler\n 4029  #define TIM11_IRQHandler              TIM1_TRG_COM_TIM17_IRQHandler\n 4030  #define TIM1_UP_IRQHandler            TIM1_UP_TIM16_IRQHandler\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f100xe.h:\n 4457  #define TIM1_BRK_TIM9_IRQHandler      TIM1_BRK_TIM15_IRQHandler\n 4458  #define TIM1_TRG_COM_TIM11_IRQHandler TIM1_TRG_COM_TIM17_IRQHandler\n 4459: #define TIM1_TRG_COM_IRQHandler       TIM1_TRG_COM_TIM17_IRQHandler\n 4460  #define TIM11_IRQHandler              TIM1_TRG_COM_TIM17_IRQHandler\n 4461  #define TIM10_IRQHandler              TIM1_UP_TIM16_IRQHandler\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f101xg.h:\n 4533  #define TIM1_TRG_COM_TIM11_IRQHandler TIM11_IRQHandler\n 4534  #define TIM1_TRG_COM_TIM17_IRQHandler TIM11_IRQHandler\n 4535: #define TIM1_TRG_COM_IRQHandler       TIM11_IRQHandler\n 4536  #define TIM8_BRK_TIM12_IRQHandler     TIM12_IRQHandler\n 4537  #define TIM8_BRK_IRQHandler           TIM12_IRQHandler\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f103x6.h:\n 5766  #define TIM1_BRK_TIM9_IRQHandler      TIM1_BRK_IRQHandler\n 5767  #define TIM9_IRQHandler               TIM1_BRK_IRQHandler\n 5768: #define TIM1_TRG_COM_TIM11_IRQHandler TIM1_TRG_COM_IRQHandler\n 5769: #define TIM1_TRG_COM_TIM17_IRQHandler TIM1_TRG_COM_IRQHandler\n 5770: #define TIM11_IRQHandler              TIM1_TRG_COM_IRQHandler\n 5771  #define TIM10_IRQHandler              TIM1_UP_IRQHandler\n 5772  #define TIM1_UP_TIM16_IRQHandler      TIM1_UP_IRQHandler\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f103xb.h:\n 5851  #define TIM1_BRK_TIM9_IRQHandler      TIM1_BRK_IRQHandler\n 5852  #define TIM9_IRQHandler               TIM1_BRK_IRQHandler\n 5853: #define TIM1_TRG_COM_TIM11_IRQHandler TIM1_TRG_COM_IRQHandler\n 5854: #define TIM1_TRG_COM_TIM17_IRQHandler TIM1_TRG_COM_IRQHandler\n 5855: #define TIM11_IRQHandler              TIM1_TRG_COM_IRQHandler\n 5856  #define TIM10_IRQHandler              TIM1_UP_IRQHandler\n 5857  #define TIM1_UP_TIM16_IRQHandler      TIM1_UP_IRQHandler\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f103xe.h:\n 6645  #define TIM1_BRK_TIM9_IRQHandler      TIM1_BRK_IRQHandler\n 6646  #define TIM9_IRQHandler               TIM1_BRK_IRQHandler\n 6647: #define TIM1_TRG_COM_TIM11_IRQHandler TIM1_TRG_COM_IRQHandler\n 6648: #define TIM1_TRG_COM_TIM17_IRQHandler TIM1_TRG_COM_IRQHandler\n 6649: #define TIM11_IRQHandler              TIM1_TRG_COM_IRQHandler\n 6650  #define TIM10_IRQHandler              TIM1_UP_IRQHandler\n 6651  #define TIM1_UP_TIM16_IRQHandler      TIM1_UP_IRQHandler\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f103xg.h:\n 6756  #define TIM9_IRQHandler               TIM1_BRK_TIM9_IRQHandler\n 6757  #define TIM1_TRG_COM_TIM17_IRQHandler TIM1_TRG_COM_TIM11_IRQHandler\n 6758: #define TIM1_TRG_COM_IRQHandler       TIM1_TRG_COM_TIM11_IRQHandler\n 6759  #define TIM11_IRQHandler              TIM1_TRG_COM_TIM11_IRQHandler\n 6760  #define TIM10_IRQHandler              TIM1_UP_TIM10_IRQHandler\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f105xc.h:\n 7398  #define TIM1_BRK_TIM9_IRQHandler      TIM1_BRK_IRQHandler\n 7399  #define TIM9_IRQHandler               TIM1_BRK_IRQHandler\n 7400: #define TIM1_TRG_COM_TIM11_IRQHandler TIM1_TRG_COM_IRQHandler\n 7401: #define TIM1_TRG_COM_TIM17_IRQHandler TIM1_TRG_COM_IRQHandler\n 7402: #define TIM11_IRQHandler              TIM1_TRG_COM_IRQHandler\n 7403  #define TIM10_IRQHandler              TIM1_UP_IRQHandler\n 7404  #define TIM1_UP_TIM16_IRQHandler      TIM1_UP_IRQHandler\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f107xc.h:\n 7895  #define TIM1_BRK_TIM9_IRQHandler      TIM1_BRK_IRQHandler\n 7896  #define TIM9_IRQHandler               TIM1_BRK_IRQHandler\n 7897: #define TIM1_TRG_COM_TIM11_IRQHandler TIM1_TRG_COM_IRQHandler\n 7898: #define TIM1_TRG_COM_TIM17_IRQHandler TIM1_TRG_COM_IRQHandler\n 7899: #define TIM11_IRQHandler              TIM1_TRG_COM_IRQHandler\n 7900  #define TIM10_IRQHandler              TIM1_UP_IRQHandler\n 7901  #define TIM1_UP_TIM16_IRQHandler      TIM1_UP_IRQHandler\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Source\\Templates\\gcc\\startup_stm32f103xb.s:\n  185    .word TIM1_BRK_IRQHandler\n  186    .word TIM1_UP_IRQHandler\n  187:   .word TIM1_TRG_COM_IRQHandler\n  188    .word TIM1_CC_IRQHandler\n  189    .word TIM2_IRQHandler\n  ...\n  325    .thumb_set TIM1_UP_IRQHandler,Default_Handler\n  326  \n  327:   .weak TIM1_TRG_COM_IRQHandler\n  328:   .thumb_set TIM1_TRG_COM_IRQHandler,Default_Handler\n  329  \n  330    .weak TIM1_CC_IRQHandler\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Inc\\Backup\\stm32f1xx_it.h.bak:\n   48  void SysTick_Handler(void);\n   49  void USB_LP_CAN1_RX0_IRQHandler(void);\n   50: void TIM1_TRG_COM_IRQHandler(void);\n   51  \n   52  #ifdef __cplusplus\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Inc\\stm32f1xx_it.h:\n   48  void SysTick_Handler(void);\n   49  void USB_LP_CAN1_RX0_IRQHandler(void);\n   50: void TIM1_TRG_COM_IRQHandler(void);\n   51  \n   52  #ifdef __cplusplus\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\Backup\\startup_stm32f10x_md.s.bak:\n  165  	.word	TIM1_BRK_IRQHandler\n  166  	.word	TIM1_UP_IRQHandler\n  167: 	.word	TIM1_TRG_COM_IRQHandler\n  168  	.word	TIM1_CC_IRQHandler\n  169  	.word	TIM2_IRQHandler\n  ...\n  305  	.thumb_set TIM1_UP_IRQHandler,Default_Handler\n  306  \n  307: 	.weak	TIM1_TRG_COM_IRQHandler\n  308: 	.thumb_set TIM1_TRG_COM_IRQHandler,Default_Handler\n  309  \n  310  	.weak	TIM1_CC_IRQHandler\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\Backup\\stm32f1xx_it.c.bak:\n   87  * @brief This function handles TIM1 trigger and commutation interrupts.\n   88  */\n   89: void TIM1_TRG_COM_IRQHandler(void)\n   90  {\n   91    /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\startup_stm32f10x_md.s:\n  165  	.word	TIM1_BRK_IRQHandler\n  166  	.word	TIM1_UP_IRQHandler\n  167: 	.word	TIM1_TRG_COM_IRQHandler\n  168  	.word	TIM1_CC_IRQHandler\n  169  	.word	TIM2_IRQHandler\n  ...\n  305  	.thumb_set TIM1_UP_IRQHandler,Default_Handler\n  306  \n  307: 	.weak	TIM1_TRG_COM_IRQHandler\n  308: 	.thumb_set TIM1_TRG_COM_IRQHandler,Default_Handler\n  309  \n  310  	.weak	TIM1_CC_IRQHandler\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\stm32f1xx_it.c:\n   87  * @brief This function handles TIM1 trigger and commutation interrupts.\n   88  */\n   89: void TIM1_TRG_COM_IRQHandler(void)\n   90  {\n   91    /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\stm32_PPM_F103\\Debug\\bin\\stm32_PPM_F103.elf:\n    <binary>\n\nD:\\WorkSTM32\\stm32_PPM_F103\\stm32_PPM_F103\\Debug\\bin\\stm32_PPM_F103.map:\n  823                  0x08000410       0x10 ..\\obj\\stm32f1xx_it.o\n  824                  0x08000410                USB_LP_CAN1_RX0_IRQHandler\n  825:  .text.TIM1_TRG_COM_IRQHandler\n  826                  0x08000420       0x10 ..\\obj\\stm32f1xx_it.o\n  827:                 0x08000420                TIM1_TRG_COM_IRQHandler\n  828   .text.NVIC_SetPriorityGrouping\n  829                  0x08000430       0x48 ..\\obj\\stm32f1xx_hal_cortex.o\n\n36 matches across 18 files\n\n\nSearching 130 files for \"HAL_Init\" (whole word)\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal.h:\n  273  \n  274  /* Initialization and de-initialization functions  ******************************/\n  275: HAL_StatusTypeDef HAL_Init(void);\n  276  HAL_StatusTypeDef HAL_DeInit(void);\n  277  void              HAL_MspInit(void);\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal.c:\n  130               handled in milliseconds basis.\n  131          (++) Time base configuration function (HAL_InitTick ()) is called automatically \n  132:              at the beginning of the program after reset by HAL_Init() or at any time \n  133               when clock is configured, by HAL_RCC_ClockConfig(). \n  134          (++) Source of time base is configured  to generate interrupts at regular \n  ...\n  155    * @retval HAL status\n  156    */\n  157: HAL_StatusTypeDef HAL_Init(void)\n  158  {\n  159    /* Configure Flash prefetch */\n  ...\n  236    *        Tick interrupt priority.\n  237    * @note This function is called  automatically at the beginning of program after\n  238:   *       reset by HAL_Init() or at any time when clock is reconfigured  by HAL_RCC_ClockConfig(). \n  239    * @note In the default implementation, SysTick timer is the source of time base. \n  240    *       It is used to generate interrupts at regular time intervals. \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\Backup\\main.c.bak:\n  113  \n  114    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */\n  115:   HAL_Init();\n  116  \n  117    /* Configure the system clock */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\main.c:\n  123  \n  124  	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */\n  125: 	HAL_Init();\n  126  \n  127  	/* Configure the system clock */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\main.c.bak:\n   71  \n   72    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */\n   73:   HAL_Init();\n   74  \n   75    /* Configure the system clock */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\stm32_PPM_F103\\Debug\\bin\\stm32_PPM_F103.elf:\n    <binary>\n\nD:\\WorkSTM32\\stm32_PPM_F103\\stm32_PPM_F103\\Debug\\bin\\stm32_PPM_F103.map:\n  802                  0x08000160      0x1dc ..\\obj\\stm32f1xx_hal_rcc_ex.o\n  803                  0x08000160                HAL_RCCEx_PeriphCLKConfig\n  804:  .text.HAL_Init\n  805                  0x0800033c       0x2c ..\\obj\\stm32f1xx_hal.o\n  806:                 0x0800033c                HAL_Init\n  807   .text.HAL_InitTick\n  808                  0x08000368       0x38 ..\\obj\\stm32f1xx_hal.o\n\n11 matches across 7 files\n\n\nSearching 130 files for \"HAL_MspInit\" (whole word)\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal.h:\n  275  HAL_StatusTypeDef HAL_Init(void);\n  276  HAL_StatusTypeDef HAL_DeInit(void);\n  277: void              HAL_MspInit(void);\n  278  void              HAL_MspDeInit(void);\n  279  HAL_StatusTypeDef HAL_InitTick (uint32_t TickPriority);\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal.c:\n  176  \n  177    /* Init the low level hardware */\n  178:   HAL_MspInit();\n  179  \n  180    /* Return function status */\n  ...\n  213    * @retval None\n  214    */\n  215: __weak void HAL_MspInit(void)\n  216  {\n  217    /* NOTE : This function Should not be modified, when the callback is needed,\n  218:             the HAL_MspInit could be implemented in the user file\n  219     */\n  220  }\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\Backup\\stm32f1xx_hal_msp.c.bak:\n   42    * Initializes the Global MSP.\n   43    */\n   44: void HAL_MspInit(void)\n   45  {\n   46    /* USER CODE BEGIN MspInit 0 */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\stm32f1xx_hal_msp.c:\n   42    * Initializes the Global MSP.\n   43    */\n   44: void HAL_MspInit(void)\n   45  {\n   46    /* USER CODE BEGIN MspInit 0 */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\stm32_PPM_F103\\Debug\\bin\\stm32_PPM_F103.elf:\n    <binary>\n\nD:\\WorkSTM32\\stm32_PPM_F103\\stm32_PPM_F103\\Debug\\bin\\stm32_PPM_F103.map:\n  102   .text.HAL_DeInit\n  103                  0x00000000       0x30 ..\\obj\\stm32f1xx_hal.o\n  104:  .text.HAL_MspInit\n  105                  0x00000000        0xc ..\\obj\\stm32f1xx_hal.o\n  106   .text.HAL_MspDeInit\n  ...\n 1171                  0x08005140       0x18 ..\\obj\\usbd_conf.o\n 1172                  0x08005140                HAL_PCDEx_SetConnectionState\n 1173:  .text.HAL_MspInit\n 1174                  0x08005158       0x3c ..\\obj\\stm32f1xx_hal_msp.o\n 1175:                 0x08005158                HAL_MspInit\n 1176   .text.HAL_TIM_Base_MspInit\n 1177                  0x08005194       0x68 ..\\obj\\stm32f1xx_hal_msp.o\n\n11 matches across 6 files\n\n\nSearching 130 files for \"HAL_TIM_Base_MspInit\" (whole word)\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal_tim.h:\n 1564  HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim);\n 1565  HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim);\n 1566: void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim);\n 1567  void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef *htim);\n 1568  /* Blocking mode: Polling */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_tim.c:\n   51       (#) Initialize the TIM low level resources by implementing the following functions \n   52           depending from feature used :\n   53:            (++) Time Base : HAL_TIM_Base_MspInit()\n   54             (++) Input Capture : HAL_TIM_IC_MspInit()\n   55             (++) Output Compare : HAL_TIM_OC_MspInit()\n   ..\n  223      \n  224      /* Init the low level hardware : GPIO, CLOCK, NVIC */\n  225:     HAL_TIM_Base_MspInit(htim);\n  226    }\n  227  \n  ...\n  270    * @retval None\n  271    */\n  272: __weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)\n  273  {\n  274    /* NOTE : This function Should not be modified, when the callback is needed,\n  275:             the HAL_TIM_Base_MspInit could be implemented in the user file\n  276     */\n  277  }\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\Backup\\stm32f1xx_hal_msp.c.bak:\n   61  }\n   62  \n   63: void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)\n   64  {\n   65  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\stm32f1xx_hal_msp.c:\n   61  }\n   62  \n   63: void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)\n   64  {\n   65  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\stm32_PPM_F103\\Debug\\bin\\stm32_PPM_F103.elf:\n    <binary>\n\nD:\\WorkSTM32\\stm32_PPM_F103\\stm32_PPM_F103\\Debug\\bin\\stm32_PPM_F103.map:\n  438   .text.HAL_TIM_Base_DeInit\n  439                  0x00000000       0x60 ..\\obj\\stm32f1xx_hal_tim.o\n  440:  .text.HAL_TIM_Base_MspInit\n  441                  0x00000000       0x14 ..\\obj\\stm32f1xx_hal_tim.o\n  442   .text.HAL_TIM_Base_MspDeInit\n  ...\n 1174                  0x08005158       0x3c ..\\obj\\stm32f1xx_hal_msp.o\n 1175                  0x08005158                HAL_MspInit\n 1176:  .text.HAL_TIM_Base_MspInit\n 1177                  0x08005194       0x68 ..\\obj\\stm32f1xx_hal_msp.o\n 1178:                 0x08005194                HAL_TIM_Base_MspInit\n 1179   .text.HAL_TIM_Base_Init\n 1180                  0x080051fc       0x58 ..\\obj\\stm32f1xx_hal_tim.o\n\n12 matches across 6 files\n\n\nSearching 130 files for \"HAL_TIM_Base_Init\" (whole word)\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Inc\\stm32f1xx_hal_tim.h:\n 1562   */\n 1563  /* Time Base functions ********************************************************/\n 1564: HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim);\n 1565  HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim);\n 1566  void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim);\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_tim.c:\n   72       (#) Configure the TIM in the desired functioning mode using one of the \n   73         Initialization function of this driver:\n   74:        (++) HAL_TIM_Base_Init: to use the Timer to generate a simple time base\n   75         (++) HAL_TIM_OC_Init and HAL_TIM_OC_ConfigChannel: to use the Timer to generate an \n   76              Output Compare signal.\n   ..\n  204    * @retval HAL status\n  205    */\n  206: HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)\n  207  {\n  208    /* Check the TIM handle allocation */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\Backup\\main.c.bak:\n  196    htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;\n  197    htim1.Init.RepetitionCounter = 0;\n  198:   HAL_TIM_Base_Init(&htim1);\n  199  \n  200    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\main.c:\n  205  	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;\n  206  	htim1.Init.RepetitionCounter = 0;\n  207: 	HAL_TIM_Base_Init(&htim1);\n  208  \n  209  	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\main.c.bak:\n  149    htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;\n  150    htim1.Init.RepetitionCounter = 0;\n  151:   HAL_TIM_Base_Init(&htim1);\n  152  \n  153    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;\n\nD:\\WorkSTM32\\stm32_PPM_F103\\stm32_PPM_F103\\Debug\\bin\\stm32_PPM_F103.elf:\n    <binary>\n\nD:\\WorkSTM32\\stm32_PPM_F103\\stm32_PPM_F103\\Debug\\bin\\stm32_PPM_F103.map:\n 1177                  0x08005194       0x68 ..\\obj\\stm32f1xx_hal_msp.o\n 1178                  0x08005194                HAL_TIM_Base_MspInit\n 1179:  .text.HAL_TIM_Base_Init\n 1180                  0x080051fc       0x58 ..\\obj\\stm32f1xx_hal_tim.o\n 1181:                 0x080051fc                HAL_TIM_Base_Init\n 1182   .text.HAL_TIM_IC_Init\n 1183                  0x08005254       0x58 ..\\obj\\stm32f1xx_hal_tim.o\n\n10 matches across 7 files\n\n\nSearching 130 files for \"USB_LP_CAN1_RX0_IRQn\" (whole word)\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f102x6.h:\n 4354  #define USB_HP_CAN1_TX_IRQn  USB_HP_IRQn\n 4355  #define CAN1_TX_IRQn         USB_HP_IRQn\n 4356: #define USB_LP_CAN1_RX0_IRQn USB_LP_IRQn\n 4357  #define CAN1_RX0_IRQn        USB_LP_IRQn\n 4358  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f102xb.h:\n 4434  #define USB_HP_CAN1_TX_IRQn  USB_HP_IRQn\n 4435  #define CAN1_TX_IRQn         USB_HP_IRQn\n 4436: #define USB_LP_CAN1_RX0_IRQn USB_LP_IRQn\n 4437  #define CAN1_RX0_IRQn        USB_LP_IRQn\n 4438  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f103x6.h:\n  118    ADC1_2_IRQn                 = 18,     /*!< ADC1 and ADC2 global Interrupt                       */\n  119    USB_HP_CAN1_TX_IRQn         = 19,     /*!< USB Device High Priority or CAN1 TX Interrupts       */\n  120:   USB_LP_CAN1_RX0_IRQn        = 20,     /*!< USB Device Low Priority or CAN1 RX0 Interrupts       */\n  121    CAN1_RX1_IRQn               = 21,     /*!< CAN1 RX1 Interrupt                                   */\n  122    CAN1_SCE_IRQn               = 22,     /*!< CAN1 SCE Interrupt                                   */\n  ...\n 5757  #define CAN1_TX_IRQn            USB_HP_CAN1_TX_IRQn\n 5758  #define USB_HP_IRQn             USB_HP_CAN1_TX_IRQn\n 5759: #define USB_LP_IRQn             USB_LP_CAN1_RX0_IRQn\n 5760: #define CAN1_RX0_IRQn           USB_LP_CAN1_RX0_IRQn\n 5761  \n 5762  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f103xb.h:\n  118    ADC1_2_IRQn                 = 18,     /*!< ADC1 and ADC2 global Interrupt                       */\n  119    USB_HP_CAN1_TX_IRQn         = 19,     /*!< USB Device High Priority or CAN1 TX Interrupts       */\n  120:   USB_LP_CAN1_RX0_IRQn        = 20,     /*!< USB Device Low Priority or CAN1 RX0 Interrupts       */\n  121    CAN1_RX1_IRQn               = 21,     /*!< CAN1 RX1 Interrupt                                   */\n  122    CAN1_SCE_IRQn               = 22,     /*!< CAN1 SCE Interrupt                                   */\n  ...\n 5842  #define CAN1_TX_IRQn            USB_HP_CAN1_TX_IRQn\n 5843  #define USB_HP_IRQn             USB_HP_CAN1_TX_IRQn\n 5844: #define USB_LP_IRQn             USB_LP_CAN1_RX0_IRQn\n 5845: #define CAN1_RX0_IRQn           USB_LP_CAN1_RX0_IRQn\n 5846  \n 5847  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f103xe.h:\n  118    ADC1_2_IRQn                 = 18,     /*!< ADC1 and ADC2 global Interrupt                       */\n  119    USB_HP_CAN1_TX_IRQn         = 19,     /*!< USB Device High Priority or CAN1 TX Interrupts       */\n  120:   USB_LP_CAN1_RX0_IRQn        = 20,     /*!< USB Device Low Priority or CAN1 RX0 Interrupts       */\n  121    CAN1_RX1_IRQn               = 21,     /*!< CAN1 RX1 Interrupt                                   */\n  122    CAN1_SCE_IRQn               = 22,     /*!< CAN1 SCE Interrupt                                   */\n  ...\n 6635  #define CAN1_TX_IRQn            USB_HP_CAN1_TX_IRQn\n 6636  #define USB_HP_IRQn             USB_HP_CAN1_TX_IRQn\n 6637: #define USB_LP_IRQn             USB_LP_CAN1_RX0_IRQn\n 6638: #define CAN1_RX0_IRQn           USB_LP_CAN1_RX0_IRQn\n 6639  \n 6640  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f103xg.h:\n  118    ADC1_2_IRQn                 = 18,     /*!< ADC1 and ADC2 global Interrupt                       */\n  119    USB_HP_CAN1_TX_IRQn         = 19,     /*!< USB Device High Priority or CAN1 TX Interrupts       */\n  120:   USB_LP_CAN1_RX0_IRQn        = 20,     /*!< USB Device Low Priority or CAN1 RX0 Interrupts       */\n  121    CAN1_RX1_IRQn               = 21,     /*!< CAN1 RX1 Interrupt                                   */\n  122    CAN1_SCE_IRQn               = 22,     /*!< CAN1 SCE Interrupt                                   */\n  ...\n 6745  #define CAN1_TX_IRQn            USB_HP_CAN1_TX_IRQn\n 6746  #define USB_HP_IRQn             USB_HP_CAN1_TX_IRQn\n 6747: #define USB_LP_IRQn             USB_LP_CAN1_RX0_IRQn\n 6748: #define CAN1_RX0_IRQn           USB_LP_CAN1_RX0_IRQn\n 6749  \n 6750  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f105xc.h:\n 7368  #define ADC1_IRQn               ADC1_2_IRQn\n 7369  #define USB_LP_IRQn             CAN1_RX0_IRQn\n 7370: #define USB_LP_CAN1_RX0_IRQn    CAN1_RX0_IRQn\n 7371  #define USB_HP_CAN1_TX_IRQn     CAN1_TX_IRQn\n 7372  #define USB_HP_IRQn             CAN1_TX_IRQn\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f107xc.h:\n 7865  #define ADC1_IRQn               ADC1_2_IRQn\n 7866  #define USB_LP_IRQn             CAN1_RX0_IRQn\n 7867: #define USB_LP_CAN1_RX0_IRQn    CAN1_RX0_IRQn\n 7868  #define USB_HP_CAN1_TX_IRQn     CAN1_TX_IRQn\n 7869  #define USB_HP_IRQn             CAN1_TX_IRQn\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\Backup\\stm32f1xx_it.c.bak:\n   75  void USB_LP_CAN1_RX0_IRQHandler(void)\n   76  {\n   77:   /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */\n   78  \n   79:   /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */\n   80    HAL_PCD_IRQHandler(&hpcd_USB_FS);\n   81:   /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */\n   82  \n   83:   /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */\n   84  }\n   85  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\Backup\\usbd_conf.c.bak:\n   69  \n   70      /* Peripheral interrupt init*/\n   71:     HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);\n   72:     HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);\n   73    /* USER CODE BEGIN USB_MspInit 1 */\n   74  \n   ..\n   88  \n   89      /* Peripheral interrupt Deinit*/\n   90:     HAL_NVIC_DisableIRQ(USB_LP_CAN1_RX0_IRQn);\n   91  \n   92    /* USER CODE BEGIN USB_MspDeInit 1 */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\stm32f1xx_it.c:\n   75  void USB_LP_CAN1_RX0_IRQHandler(void)\n   76  {\n   77:   /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */\n   78  \n   79:   /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */\n   80    HAL_PCD_IRQHandler(&hpcd_USB_FS);\n   81:   /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */\n   82  \n   83:   /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */\n   84  }\n   85  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\stm32f1xx_it.c.CCINT:\n   75  void USB_LP_CAN1_RX0_IRQHandler(void)\n   76  {\n   77:   /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */\n   78  \n   79:   /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */\n   80    HAL_PCD_IRQHandler(&hpcd_USB_FS);\n   81:   /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */\n   82  \n   83:   /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */\n   84  }\n   85  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\usbd_conf.c:\n   81  \n   82      /* Peripheral interrupt init*/\n   83:     HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);\n   84:     HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);\n   85    /* USER CODE BEGIN USB_MspInit 1 */\n   86  \n   ..\n  105      HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);\n  106      /* Peripheral interrupt Deinit*/\n  107:     HAL_NVIC_DisableIRQ(USB_LP_CAN1_RX0_IRQn);\n  108  \n  109    /* USER CODE BEGIN USB_MspDeInit 1 */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\usbd_conf.c.bak:\n   69  \n   70      /* Peripheral interrupt init*/\n   71:     HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);\n   72:     HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);\n   73    /* USER CODE BEGIN USB_MspInit 1 */\n   74  \n   ..\n   88  \n   89      /* Peripheral interrupt Deinit*/\n   90:     HAL_NVIC_DisableIRQ(USB_LP_CAN1_RX0_IRQn);\n   91  \n   92    /* USER CODE BEGIN USB_MspDeInit 1 */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\stm32_PPM_F103.ioc:\n   28  NVIC.SysTick_IRQn=true\\:0\\:0\\:false\n   29  NVIC.TIM1_TRG_COM_IRQn=true\\:0\\:0\\:false\n   30: NVIC.USB_LP_CAN1_RX0_IRQn=true\\:0\\:0\\:false\n   31  PA11.Mode=Device\n   32  PA11.Signal=USB_DM\n\nD:\\WorkSTM32\\stm32_PPM_F103\\stm32_PPM_F103\\Debug\\bin\\stm32_PPM_F103.elf:\n    <binary>\n\n39 matches across 16 files\n\n\nSearching 130 files for \"USB_LP_CAN_RX0_IRQn\" (whole word)\n\n0 matches\n\nSearching 130 files for \"USB_LP_CAN1_RX0_IRQn\" (whole word)\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f102x6.h:\n 4354  #define USB_HP_CAN1_TX_IRQn  USB_HP_IRQn\n 4355  #define CAN1_TX_IRQn         USB_HP_IRQn\n 4356: #define USB_LP_CAN1_RX0_IRQn USB_LP_IRQn\n 4357  #define CAN1_RX0_IRQn        USB_LP_IRQn\n 4358  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f102xb.h:\n 4434  #define USB_HP_CAN1_TX_IRQn  USB_HP_IRQn\n 4435  #define CAN1_TX_IRQn         USB_HP_IRQn\n 4436: #define USB_LP_CAN1_RX0_IRQn USB_LP_IRQn\n 4437  #define CAN1_RX0_IRQn        USB_LP_IRQn\n 4438  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f103x6.h:\n  118    ADC1_2_IRQn                 = 18,     /*!< ADC1 and ADC2 global Interrupt                       */\n  119    USB_HP_CAN1_TX_IRQn         = 19,     /*!< USB Device High Priority or CAN1 TX Interrupts       */\n  120:   USB_LP_CAN1_RX0_IRQn        = 20,     /*!< USB Device Low Priority or CAN1 RX0 Interrupts       */\n  121    CAN1_RX1_IRQn               = 21,     /*!< CAN1 RX1 Interrupt                                   */\n  122    CAN1_SCE_IRQn               = 22,     /*!< CAN1 SCE Interrupt                                   */\n  ...\n 5757  #define CAN1_TX_IRQn            USB_HP_CAN1_TX_IRQn\n 5758  #define USB_HP_IRQn             USB_HP_CAN1_TX_IRQn\n 5759: #define USB_LP_IRQn             USB_LP_CAN1_RX0_IRQn\n 5760: #define CAN1_RX0_IRQn           USB_LP_CAN1_RX0_IRQn\n 5761  \n 5762  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f103xb.h:\n  118    ADC1_2_IRQn                 = 18,     /*!< ADC1 and ADC2 global Interrupt                       */\n  119    USB_HP_CAN1_TX_IRQn         = 19,     /*!< USB Device High Priority or CAN1 TX Interrupts       */\n  120:   USB_LP_CAN1_RX0_IRQn        = 20,     /*!< USB Device Low Priority or CAN1 RX0 Interrupts       */\n  121    CAN1_RX1_IRQn               = 21,     /*!< CAN1 RX1 Interrupt                                   */\n  122    CAN1_SCE_IRQn               = 22,     /*!< CAN1 SCE Interrupt                                   */\n  ...\n 5842  #define CAN1_TX_IRQn            USB_HP_CAN1_TX_IRQn\n 5843  #define USB_HP_IRQn             USB_HP_CAN1_TX_IRQn\n 5844: #define USB_LP_IRQn             USB_LP_CAN1_RX0_IRQn\n 5845: #define CAN1_RX0_IRQn           USB_LP_CAN1_RX0_IRQn\n 5846  \n 5847  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f103xe.h:\n  118    ADC1_2_IRQn                 = 18,     /*!< ADC1 and ADC2 global Interrupt                       */\n  119    USB_HP_CAN1_TX_IRQn         = 19,     /*!< USB Device High Priority or CAN1 TX Interrupts       */\n  120:   USB_LP_CAN1_RX0_IRQn        = 20,     /*!< USB Device Low Priority or CAN1 RX0 Interrupts       */\n  121    CAN1_RX1_IRQn               = 21,     /*!< CAN1 RX1 Interrupt                                   */\n  122    CAN1_SCE_IRQn               = 22,     /*!< CAN1 SCE Interrupt                                   */\n  ...\n 6635  #define CAN1_TX_IRQn            USB_HP_CAN1_TX_IRQn\n 6636  #define USB_HP_IRQn             USB_HP_CAN1_TX_IRQn\n 6637: #define USB_LP_IRQn             USB_LP_CAN1_RX0_IRQn\n 6638: #define CAN1_RX0_IRQn           USB_LP_CAN1_RX0_IRQn\n 6639  \n 6640  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f103xg.h:\n  118    ADC1_2_IRQn                 = 18,     /*!< ADC1 and ADC2 global Interrupt                       */\n  119    USB_HP_CAN1_TX_IRQn         = 19,     /*!< USB Device High Priority or CAN1 TX Interrupts       */\n  120:   USB_LP_CAN1_RX0_IRQn        = 20,     /*!< USB Device Low Priority or CAN1 RX0 Interrupts       */\n  121    CAN1_RX1_IRQn               = 21,     /*!< CAN1 RX1 Interrupt                                   */\n  122    CAN1_SCE_IRQn               = 22,     /*!< CAN1 SCE Interrupt                                   */\n  ...\n 6745  #define CAN1_TX_IRQn            USB_HP_CAN1_TX_IRQn\n 6746  #define USB_HP_IRQn             USB_HP_CAN1_TX_IRQn\n 6747: #define USB_LP_IRQn             USB_LP_CAN1_RX0_IRQn\n 6748: #define CAN1_RX0_IRQn           USB_LP_CAN1_RX0_IRQn\n 6749  \n 6750  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f105xc.h:\n 7368  #define ADC1_IRQn               ADC1_2_IRQn\n 7369  #define USB_LP_IRQn             CAN1_RX0_IRQn\n 7370: #define USB_LP_CAN1_RX0_IRQn    CAN1_RX0_IRQn\n 7371  #define USB_HP_CAN1_TX_IRQn     CAN1_TX_IRQn\n 7372  #define USB_HP_IRQn             CAN1_TX_IRQn\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Drivers\\CMSIS\\Device\\ST\\STM32F1xx\\Include\\stm32f107xc.h:\n 7865  #define ADC1_IRQn               ADC1_2_IRQn\n 7866  #define USB_LP_IRQn             CAN1_RX0_IRQn\n 7867: #define USB_LP_CAN1_RX0_IRQn    CAN1_RX0_IRQn\n 7868  #define USB_HP_CAN1_TX_IRQn     CAN1_TX_IRQn\n 7869  #define USB_HP_IRQn             CAN1_TX_IRQn\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\Backup\\stm32f1xx_it.c.bak:\n   75  void USB_LP_CAN1_RX0_IRQHandler(void)\n   76  {\n   77:   /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */\n   78  \n   79:   /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */\n   80    HAL_PCD_IRQHandler(&hpcd_USB_FS);\n   81:   /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */\n   82  \n   83:   /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */\n   84  }\n   85  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\Backup\\usbd_conf.c.bak:\n   69  \n   70      /* Peripheral interrupt init*/\n   71:     HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);\n   72:     HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);\n   73    /* USER CODE BEGIN USB_MspInit 1 */\n   74  \n   ..\n   88  \n   89      /* Peripheral interrupt Deinit*/\n   90:     HAL_NVIC_DisableIRQ(USB_LP_CAN1_RX0_IRQn);\n   91  \n   92    /* USER CODE BEGIN USB_MspDeInit 1 */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\stm32f1xx_it.c:\n   75  void USB_LP_CAN1_RX0_IRQHandler(void)\n   76  {\n   77:   /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */\n   78  \n   79:   /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */\n   80    HAL_PCD_IRQHandler(&hpcd_USB_FS);\n   81:   /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */\n   82  \n   83:   /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */\n   84  }\n   85  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\stm32f1xx_it.c.CCINT:\n   75  void USB_LP_CAN1_RX0_IRQHandler(void)\n   76  {\n   77:   /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */\n   78  \n   79:   /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */\n   80    HAL_PCD_IRQHandler(&hpcd_USB_FS);\n   81:   /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */\n   82  \n   83:   /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */\n   84  }\n   85  \n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\usbd_conf.c:\n   81  \n   82      /* Peripheral interrupt init*/\n   83:     HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);\n   84:     HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);\n   85    /* USER CODE BEGIN USB_MspInit 1 */\n   86  \n   ..\n  105      HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);\n  106      /* Peripheral interrupt Deinit*/\n  107:     HAL_NVIC_DisableIRQ(USB_LP_CAN1_RX0_IRQn);\n  108  \n  109    /* USER CODE BEGIN USB_MspDeInit 1 */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\Src\\usbd_conf.c.bak:\n   69  \n   70      /* Peripheral interrupt init*/\n   71:     HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);\n   72:     HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);\n   73    /* USER CODE BEGIN USB_MspInit 1 */\n   74  \n   ..\n   88  \n   89      /* Peripheral interrupt Deinit*/\n   90:     HAL_NVIC_DisableIRQ(USB_LP_CAN1_RX0_IRQn);\n   91  \n   92    /* USER CODE BEGIN USB_MspDeInit 1 */\n\nD:\\WorkSTM32\\stm32_PPM_F103\\stm32_PPM_F103.ioc:\n   28  NVIC.SysTick_IRQn=true\\:0\\:0\\:false\n   29  NVIC.TIM1_TRG_COM_IRQn=true\\:0\\:0\\:false\n   30: NVIC.USB_LP_CAN1_RX0_IRQn=true\\:0\\:0\\:false\n   31  PA11.Mode=Device\n   32  PA11.Signal=USB_DM\n\nD:\\WorkSTM32\\stm32_PPM_F103\\stm32_PPM_F103\\Debug\\bin\\stm32_PPM_F103.elf:\n    <binary>\n\n39 matches across 16 files\n",
			"settings":
			{
				"buffer_size": 1195539,
				"line_ending": "Windows",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "Src/stm32f1xx_it.c",
			"settings":
			{
				"buffer_size": 4083,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Src/usbd_desc.c",
			"settings":
			{
				"buffer_size": 9210,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Src/stm32f1xx_hal_msp.c",
			"settings":
			{
				"buffer_size": 3995,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Drivers/CMSIS/Device/ST/STM32F1xx/Source/Templates/gcc/startup_stm32f103xb.s",
			"settings":
			{
				"buffer_size": 11156,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Src/startup_stm32f10x_md.s",
			"settings":
			{
				"buffer_size": 9909,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h",
			"settings":
			{
				"buffer_size": 80504,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103x6.h",
			"settings":
			{
				"buffer_size": 440378,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_cortex.c",
			"settings":
			{
				"buffer_size": 21322,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c",
			"settings":
			{
				"buffer_size": 19312,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_tim.c",
			"settings":
			{
				"buffer_size": 162453,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "Packages/User/node.sublime-build",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"Snippet: ",
				"Snippet: ConsoleLogSnippet"
			],
			[
				"pack ins",
				"Package Control: Install Package"
			],
			[
				"pack list",
				"Package Control: List Packages"
			],
			[
				"Package Control: list",
				"Package Control: List Packages"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"remo",
				"Package Control: Remove Package"
			],
			[
				"packag",
				"Package Control: Remove Package"
			],
			[
				"pack",
				"Package Control: List Packages"
			],
			[
				"Package Control: ",
				"Package Control: Install Package"
			],
			[
				"Package Control: inst",
				"Package Control: Install Package"
			],
			[
				"sssc",
				"Set Syntax: SCSS"
			],
			[
				"syntax sc",
				"Set Syntax: SCSS"
			],
			[
				"pack inst",
				"Package Control: Install Package"
			],
			[
				"package con",
				"Package Control: Install Package"
			],
			[
				"package",
				"Package Control: Install Package"
			],
			[
				"plu",
				"Package Control: Upgrade Package"
			],
			[
				"ssj",
				"Set Syntax: JavaScript"
			],
			[
				"",
				"Set Syntax: JSON"
			],
			[
				"jsh",
				"jshintify: Run jshint"
			],
			[
				"js",
				"JSHint"
			],
			[
				"ssjs",
				"Set Syntax: JavaScript"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"emmet",
				"Toggle Comment"
			]
		],
		"width": 416.0
	},
	"console":
	{
		"height": 358.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/D/WorkSTM32/stm32_PPM_F103",
		"/D/WorkSTM32/stm32_PPM_F103/Src"
	],
	"file_history":
	[
		"/D/WorkSTM32/stm32_PPM_F103/Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f100xb.h",
		"/D/WorkSTM32/stm32_PPM_F103/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h",
		"/D/Temp/stm32-ppm-usb-adapter-master/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_tim.c",
		"/D/Temp/stm32-ppm-usb-adapter-master/Src/sublime_project.sublime-project",
		"/D/Temp/stm32-ppm-usb-adapter-master/Src/main.c",
		"/D/Work/IPLN/Repo/ipln-ngen/src/server/helpers/VersionDataRetriever.js",
		"/D/Work/IPLN/Repo/ipln-ngen/src/server/helpers/ExportHelper.js",
		"/D/Work/IPLN/Repo/ipln-ngen/src/server/graphql/__tests__/serviceData.js",
		"/D/Work/IPLN/Repo/ipln-ngen/package.json",
		"/D/Work/IPLN/Repo/ipln-ngen/src/server/controllers/export.js",
		"/D/Work/IPLN/Repo/ipln-ngen/config/dataProviders/igo.js",
		"/D/Work/IPLN/Repo/ipln-ngen/src/sd/constants/QueriesConfig/Elementary/Items.js",
		"/D/Work/IPLN/Repo/ipln-ngen/src/server/graphql/types/version.js",
		"/D/Work/IPLN/Repo/ipln-ngen/src/sd/constants/QueriesConfig/Compound/RulesEventsDVsForVersion.js",
		"/D/Work/IPLN/Repo/ipln-ngen/src/server/models/version.js",
		"/D/Work/IPLN/Repo/ipln-ngen/src/server/models/screen.js",
		"/D/Work/IPLN/Repo/ipln-ngen/src/sd/constants/QueriesConfig/Compound/index.js",
		"/D/Work/IPLN/Repo/ipln-ngen/src/server/graphql/query/service.js",
		"/d/Work/IPLN/Repo/ipln-ngen/src/sd/stores/PageStore.js",
		"/d/Work/IPLN/Repo/ipln-ngen/src/sd/constants/QueriesConfig/Pages/Pages.js",
		"/d/Work/IPLN/Repo/ipln-ngen/src/server/routes/statics.js",
		"/d/Work/IPLN/Repo/ipln-ngen/src/sd/components/layout/preview/RuntimeContainer.react.js",
		"/d/Work/IPLN/Repo/ipln-ngen/src/server/routes/api.js",
		"/d/Work/IPLN/Repo/ipln-ngen/src/server/controllers/runtime.js",
		"/d/Work/IPLN/Repo/ipln-ngen/src/server/schemas/screen-schema.js",
		"/D/Work/IPLN/Repo/ipln-ngen/src/utils/TypeToNameConverter.js",
		"/D/Work/IPLN/Repo/ipln-ngen/src/sd/constants/FieldTypes.js",
		"/D/Work/IPLN/Repo/ipln-ngen/src/utils/GQLClient.js",
		"/d/Work/IPLN/Repo/ipln-ngen/src/sd/actions/PageActionCreators.js",
		"/D/Work/IPLN/Repo/ipln-ngen/src/sd/constants/QueriesConfig/Compound/ListValidationExpressionList.js",
		"/D/Work/IPLN/Repo/ipln-ngen/src/server/graphql/query/generic.js",
		"/D/Work/IPLN/Repo/ipln-ngen/src/utils/ScreenClass.js",
		"/d/Work/IPLN/Repo/ipln-ngen/src/server/models/version.js",
		"/d/Work/IPLN/Repo/ipln-ngen/src/server/graphql/resolver/generic.js",
		"/D/Work/IPLN/Repo/ipln-ngen/src/server/graphql/query/templateEditor/templateEditor--servertest.js",
		"/d/Work/IPLN/Repo/ipln-ngen/src/sd/stores/ProductStore.js",
		"/d/Work/IPLN/Repo/ipln-ngen/src/server/rulesHelper/InRuleRenamer.js",
		"/d/Work/IPLN/Repo/ipln-ngen/src/sd/components/fields/__tests__/field_checkbox-test.js",
		"/d/Work/IPLN/Repo/ipln-ngen/src/sd/components/layout/designer/EditorItems/__tests__/EditorGroupItem-skip_test.js",
		"/d/Work/IPLN/Repo/ipln-ngen/src/sd/components/fields/__tests__/field_base-test.js",
		"/d/Work/IPLN/Repo/ipln-ngen/src/sd/stores/__tests__/AvatarStore-test.js",
		"/D/Work/IPLN/Repo/ipln-ngen/src/sd/components/layout/product/ReleaseContainer.react.js",
		"/D/Work/IPLN/Repo/ipln-ngen/src/server/__tests__/template--servertest.js",
		"/D/Work/IPLN/Repo/ipln-ngen/src/server/__tests__/export--servertest.js",
		"/D/Work/IPLN/Repo/ipln-ngen/src/server/__tests__/data/template_data.js",
		"/D/Work/IPLN/Repo/ipln-ngen/src/server/helpers/__tests__/ExportHelper--servertest.js",
		"/D/Work/IPLN/Repo/ipln-ngen/src/server/controllers/version.js",
		"/D/Work/IPLN/Repo/ipln-ngen/src/sd/constants/PropertyTypes.js",
		"/d/Work/IPLN/Repo/ipln-ngen/src/sd/constants/ScreenTypes.js",
		"/D/Work/IPLN/Repo/ipln-ngen/src/sd/constants/QueriesConfig/Compound/ControlPanelData.js",
		"/D/Work/IPLN/Repo/ipln-ngen/src/sd/actions/ProductActionCreators.js",
		"/d/Work/IPLN/Repo/ipln-ngen/src/sd/components/layout/product/ReleaseContainer.react.js",
		"/d/Work/IPLN/Repo/ipln-ngen/src/controls/DateTime/DateTimeField.react.js",
		"/D/Work/IPLN/Repo/ipln-ngen/src/server/controllers/rule.js",
		"/D/Work/IPLN/Repo/ipln-ngen/src/server/routes/api.js",
		"/D/Work/IPLN/Repo/ipln-ngen/src/server/rulesHelper/_tests_/RulesConnectionParser--servertest.js",
		"/D/Work/IPLN/Repo/ipln-ngen/src/server/rulesHelper/RulesFindHelpers.js",
		"/D/Work/IPLN/Repo/ipln-ngen/src/server/graphql/customTypeBuilder/utils/findQueryFunctions.js",
		"/D/Work/IPLN/Repo/ipln-ngen/src/server/helpers/__tests__/ExportHelper--test.js",
		"/D/Work/IPLN/Repo/ipln-ngen/src/server/rulesHelper/RuleParser/ScreenRuleParser.js",
		"/D/Work/IPLN/Repo/ipln-ngen/src/sd/constants/QueriesConfig/Elementary/Lists.js",
		"/d/Work/IPLN/Repo/ipln-ngen/src/utils/TypeToNameConverter.js",
		"/d/Work/IPLN/Repo/ipln-ngen/src/sd/components/layout/designer/propertiesCard/ScreenPropertyCard.react.js",
		"/d/Work/IPLN/Repo/ipln-ngen/src/sd/constants/QueriesConfig/Compound/ListValidationExpressionList.js",
		"/d/Work/IPLN/Repo/ipln-ngen/src/sd/actions/DictionaryActionCreators.js",
		"/D/Work/IPLN/Repo/ipln-ngen/src/runtime/stores/RuntimeStore/RuntimeStore.js",
		"/D/Work/IPLN/Repo/ipln-ngen/src/server/helpers/TemplateCommonHelper.js",
		"/D/Work/IPLN/Repo/ipln-ngen/src/server/helpers/DetachGroupHelper.js",
		"/d/Work/IPLN/Repo/ipln-ngen/src/server/rulesHelper/RuleParser/ScreenRuleParser.js",
		"/d/Work/IPLN/Repo/ipln-ngen/src/server/rulesHelper/RuleParser/BaseRuleParser.js",
		"/d/Work/IPLN/Repo/ipln-ngen/src/sd/constants/ListOperationContextMenu.js",
		"/D/Work/IPLN/Repo/ipln-ngen/src/controls/ContextMenuButton.react.js",
		"/D/Work/IPLN/Repo/ipln-ngen/src/controls/Collapsible/CollapsibleItem.react.js",
		"/D/Work/IPLN/Repo/ipln-ngen/src/controls/Collapsible/Collapsible.react.js",
		"/D/Work/IPLN/Repo/ipln-ngen/logger/index.js",
		"/D/Work/IPLN/Repo/ipln-ngen/src/sd/stores/ProductStore.js",
		"/d/Work/IPLN/Repo/ipln-ngen/src/sd/pages/ProductView.react.js",
		"/d/Work/IPLN/Repo/ipln-ngen/src/server/graphql/customTypeBuilder/version.js",
		"/d/Work/IPLN/Repo/ipln-ngen/src/sd/actions/ListActionCreators.js",
		"/d/Work/IPLN/Repo/ipln-ngen/src/server/graphql/__tests__/gettingServiceNames--servertest.js",
		"/d/Work/IPLN/Repo/ipln-ngen/src/utils/ScreenClass.js",
		"/D/Work/IPLN/Repo/ipln-ngen/src/server/graphql/schema.js",
		"/D/Work/IPLN/Repo/ipln-ngen/src/server/graphql/genericType.js",
		"/D/Work/IPLN/Repo/ipln-ngen/src/sd/stores/PageStore.js",
		"/D/Work/IPLN/Repo/ipln-ngen/src/runtime/stores/__tests__/RuntimeStore_data.js",
		"/d/Work/IPLN/Repo/ipln-ngen/src/server/middleware/express.js",
		"/D/Work/IPLN/Repo/ipln-ngen/src/server/__tests__/exceljs--servertest.js",
		"/D/Work/IPLN/Repo/ipln-ngen/src/server/controllers/syncAPI.js",
		"/d/Work/IPLN/Repo/ipln-ngen/src/sd/components/layout/designer/propertiesCard/Container.react.js",
		"/d/Work/IPLN/Repo/ipln-ngen/src/sd/components/layout/designer/engine/shared/utils/ActionExpressionBase.react.js",
		"/d/Work/IPLN/Repo/ipln-ngen/src/sd/stores/PropertyCardStore.js",
		"/D/Work/IPLN/Repo/ipln-ngen/src/sd/stores/ScreenStore.js",
		"/D/Work/IPLN/Repo/ipln-ngen/src/sd/components/layout/designer/engine/shared/expressions/field_is_hidden.react.js",
		"/D/Work/IPLN/Repo/ipln-ngen/src/sd/components/layout/designer/engine/shared/components/FieldNames.react.js",
		"/d/Work/IPLN/Repo/ipln-ngen/src/sd/components/layout/designer/engine/events/EventsContainer.react.js",
		"/D/Work/IPLN/Repo/ipln-ngen/src/sd/components/layout/designer/engine/rules/RulesContainer.react.js",
		"/D/Work/IPLN/Repo/ipln-ngen/src/sd/components/layout/designer/engine/rules/RuleEditor.react.js",
		"/d/Work/IPLN/Repo/ipln-ngen/src/sd/components/layout/designer/propertiesCard/BasePropertyCard.js",
		"/d/Work/IPLN/Repo/ipln-ngen/src/sd/components/layout/designer/propertiesCard/FieldPropertyCard.react.js",
		"/d/Work/IPLN/Repo/ipln-ngen/src/server/controllers/screen.js",
		"/D/Work/IPLN/Repo/ipln-ngen/src/runtime/engine/shared/expressionComponents/field_is_hidden.js",
		"/D/Work/IPLN/Repo/ipln-ngen/src/sd/constants/EventConstants/EventsForField.js",
		"/D/Work/IPLN/Repo/ipln-ngen/src/server/rulesHelper/RuleSemanticValidator.js",
		"/D/Work/IPLN/Repo/ipln-ngen/src/server/rulesHelper/RuleWalkerHelper.js",
		"/d/Work/IPLN/Repo/ipln-ngen/src/sd/components/layout/designer/engine/rules/actions/index.js",
		"/D/Work/IPLN/Repo/ipln-ngen/src/sd/components/layout/designer/engine/shared/utils/IncludeExcludeActionBase.react.js",
		"/D/Work/IPLN/Repo/ipln-ngen/src/controls/NumberControl.react.js",
		"/d/Work/IPLN/Repo/ipln-ngen/src/sd/components/layout/designer/engine/rules/actions/set_required.react.js",
		"/D/Work/IPLN/Repo/ipln-ngen/src/sd/components/layout/designer/engine/rules/actions/field_required_base.react.js",
		"/D/Work/IPLN/Repo/ipln-ngen/src/sd/components/layout/designer/engine/shared/utils/ActionExpressionBase.react.js",
		"/d/Work/IPLN/Repo/ipln-ngen/src/sd/constants/MessageBoxConfig.js",
		"/d/Work/IPLN/Repo/ipln-ngen/src/runtime/stores/RuntimeStore/rulesDecorator.js",
		"/D/Work/IPLN/Repo/ipln-ngen/src/styles/text.scss",
		"/d/Work/IPLN/Repo/ipln-ngen/src/runtime/themes/custom.scss",
		"/D/Work/IPLN/Repo/ipln-ngen/src/styles/_editor.scss",
		"/D/Work/IPLN/Repo/ipln-ngen/src/server/rulesHelper/_tests_/RuleSemanticValidator--servertest.js",
		"/D/Work/IPLN/Repo/ipln-ngen/src/runtime/engine/rules/actionComponents/set_required.js",
		"/d/Work/IPLN/Repo/ipln-ngen/src/styles/_property_card.scss",
		"/D/Work/IPLN/Repo/ipln-ngen/src/server/rulesHelper/RuleParser/BaseRuleParser.js",
		"/D/Work/IPLN/Repo/ipln-ngen/src/sd/components/layout/admin/templates/TemplateItem.react.js",
		"/D/Work/IPLN/Repo/ipln-ngen/src/sd/components/layout/admin/templates/TemplatesContainer.react.js",
		"/D/Work/IPLN/Repo/ipln-ngen/src/server/helpers/TemplateFromGroupHelper.js",
		"/D/Work/IPLN/Repo/ipln-ngen/src/server/rulesHelper/RuleParser/TemplateRuleParser.js",
		"/D/Work/IPLN/Repo/ipln-ngen/src/server/graphql/mutations.js",
		"/D/Work/IPLN/Repo/ipln-ngen/src/server/helpers/DeleteTemplateHelper.js",
		"/D/Work/IPLN/Repo/ipln-ngen/src/server/helpers/GroupFromTemplateHelper.js",
		"/D/Work/IPLN/Repo/ipln-ngen/src/runtime/engine/rules/RuleConditionals.js",
		"/D/Work/IPLN/Repo/ipln-ngen/src/runtime/actions/RuleActionCreators.js"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 90.0,
		"where_history":
		[
			"D:\\WorkSTM32\\stm32_PPM_F103",
			"D:\\Temp\\stm32-ppm-usb-adapter-master",
			"/d/Work/IPLN/Repo/ipln-ngen,-/d/Work/IPLN/Repo/ipln-ngen/dist/*,-/d/Work/IPLN/Repo/ipln-ngen/node_modules/*,-/d/Work/IPLN/Repo/ipln-ngen/test_out/*",
			"/d/Work/IPLN/Repo/ipln-ngen,-/d/Work/IPLN/Repo/ipln-ngen/dist/*.*,-/d/Work/IPLN/Repo/ipln-ngen/node_modules/*,-/d/Work/IPLN/Repo/ipln-ngen/test_out/*",
			"/d/Work/IPLN/Repo/ipln-ngen,-/d/Work/IPLN/Repo/ipln-ngen/dist/*,-/d/Work/IPLN/Repo/ipln-ngen/node_modules/*,-/d/Work/IPLN/Repo/ipln-ngen/test_out/*",
			"/d/Work/IPLN/Repo/ipln-ngen,-/d/Work/IPLN/Repo/ipln-ngen/dist/*.*,-/d/Work/IPLN/Repo/ipln-ngen/node_modules/*,-/d/Work/IPLN/Repo/ipln-ngen/test_out/*.*",
			"/d/Work/IPLN/Repo/ipln-ngen,-/d/Work/IPLN/Repo/ipln-ngen/dist/*.*,-/d/Work/IPLN/Repo/ipln-ngen/node_modules/*.*,-/d/Work/IPLN/Repo/ipln-ngen/test_out/*.*",
			"/d/Work/IPLN/Repo/ipln-ngen,-/d/Work/IPLN/Repo/ipln-ngen/dist/*.*,-/d/Work/IPLN/Repo/ipln-ngen/node_modules/*.*",
			"/d/Work/IPLN/Repo/ipln-ngen,-/d/Work/IPLN/Repo/ipln-ngen/dist/*.*",
			"/d/Work/IPLN/Repo/ipln-ngen,-/d/Work/IPLN/Repo/ipln-ngen/dist",
			"/d/Work/IPLN/Repo/ipln-ngen/,-/d/Work/IPLN/Repo/ipln-ngen/dist/",
			"/ipln-ngen/,-/ipln-ngen/dist/*.*",
			"ipln-ngen\\,-ipln-ngen/dist/*.*",
			"D:\\Work\\IPLN\\Repo\\ipln-ngen\\,-D:\\Work\\IPLN\\Repo\\ipln-ngen\\*.*",
			"D:\\Work\\IPLN\\Repo\\ipln-ngen\\,-D:\\Work\\IPLN\\Repo\\ipln-ngen\\",
			"D:\\Work\\IPLN\\Repo\\ipln-ngen\\",
			"D:\\Work\\IPLN\\Repo\\ipln-ngen\\*.*",
			"D:\\Work\\IPLN\\Repo\\ipln-ngen\\",
			"D:\\Work\\IPLN\\Repo\\ipln-ngen\\node-modules,D:\\Work\\IPLN\\Repo\\ipln-ngen\\app,D:\\Work\\IPLN\\Repo\\ipln-ngen\\e2e,D:\\Work\\IPLN\\Repo\\ipln-ngen\\server,-app.bundle.js,-vendor.bundle.js,D:\\Work\\IPLN\\Repo\\ipln-ngen\\*.*, D:\\Work\\IPLN\\Repo\\ipln-ngen\\webpack",
			"D:\\Work\\IPLN\\Repo\\ipln-ngen\\e2e\\specs\\utils",
			"D:\\Work\\IPLN\\Repo\\ipln-ngen\\node-modules,D:\\Work\\IPLN\\Repo\\ipln-ngen\\app,D:\\Work\\IPLN\\Repo\\ipln-ngen\\e2e,D:\\Work\\IPLN\\Repo\\ipln-ngen\\server,-app.bundle.js,-vendor.bundle.js,D:\\Work\\IPLN\\Repo\\ipln-ngen\\*.*, D:\\Work\\IPLN\\Repo\\ipln-ngen\\webpack",
			"D:\\Work\\IPLN\\Repo\\ipln-ngen\\node-modules,D:\\Work\\IPLN\\Repo\\ipln-ngen\\app,D:\\Work\\IPLN\\Repo\\ipln-ngen\\server,-app.bundle.js,-vendor.bundle.js,D:\\Work\\IPLN\\Repo\\ipln-ngen\\*.*, D:\\Work\\IPLN\\Repo\\ipln-ngen\\webpack",
			"",
			"D:\\Work\\IPLN\\Repo\\ipln-ngen\\node-modules,D:\\Work\\IPLN\\Repo\\ipln-ngen\\app,D:\\Work\\IPLN\\Repo\\ipln-ngen\\server,-app.bundle.js,-vendor.bundle.js,D:\\Work\\IPLN\\Repo\\ipln-ngen\\*.*, D:\\Work\\IPLN\\Repo\\ipln-ngen\\webpack",
			"D:\\Work\\IPLN\\Repo\\ipln-ngen\\app,D:\\Work\\IPLN\\Repo\\ipln-ngen\\server,-app.bundle.js,-vendor.bundle.js,D:\\Work\\IPLN\\Repo\\ipln-ngen\\*.*, D:\\Work\\IPLN\\Repo\\ipln-ngen\\webpack",
			"D:\\Work\\IPLN\\Repo\\ipln-ngen\\app,D:\\Work\\IPLN\\Repo\\ipln-ngen\\server,-app.bundle.js,-vendor.bundle.js,D:\\Work\\IPLN\\Repo\\ipln-ngen\\*.*",
			"D:\\Work\\IPLN\\Repo\\ipln-ngen\\app,D:\\Work\\IPLN\\Repo\\ipln-ngen\\server,-app.bundle.js,-vendor.bundle.js",
			"D:\\Work\\IPLN\\Repo\\ipln-ngen\\app,D:\\Work\\IPLN\\Repo\\ipln-ngen\\server,-app.bundle.js",
			"D:\\Work\\IPLN\\Repo\\ipln-ngen\\app,D:\\Work\\IPLN\\Repo\\ipln-ngen\\server,-D:\\Work\\IPLN\\Repo\\ipln-ngen\\server\\assets\\bundle\\app.bundle.js",
			"D:\\Work\\IPLN\\Repo\\ipln-ngen\\app\\sd\\client\\,D:\\Work\\IPLN\\Repo\\ipln-ngen\\app\\sd\\server\\,-D:\\Work\\IPLN\\Repo\\ipln-ngen\\server\\assets\\bundle\\app.bundle.js",
			"D:\\Work\\IPLN\\Repo\\ipln-ngen\\app\\sd\\client,D:\\Work\\IPLN\\Repo\\ipln-ngen\\app\\sd\\server,-D:\\Work\\IPLN\\Repo\\ipln-ngen\\server\\assets\\bundle\\app.bundle.js",
			"D:\\Work\\IPLN\\Repo\\ipln-ngen\\client,D:\\Work\\IPLN\\Repo\\ipln-ngen\\server,-D:\\Work\\IPLN\\Repo\\ipln-ngen\\server\\assets\\bundle\\app.bundle.js",
			"D:\\Work\\IPLN\\Repo\\ipln-ngen\\client,D:\\Work\\IPLN\\Repo\\ipln-ngen\\server,-D:\\Work\\IPLN\\Repo\\ipln-ngen\\server\\assets\\bundle\\*.js",
			"D:\\Work\\IPLN\\Repo\\ipln-ngen\\client,D:\\Work\\IPLN\\Repo\\ipln-ngen\\server",
			"d:\\Temp\\AndroidDev\\veravoice-1.0",
			"D:\\Work\\IPLN\\Repo\\ipln-ngen\\client,D:\\Work\\IPLN\\Repo\\ipln-ngen\\server",
			"D:\\Work\\IPLN\\Repo\\ipln-ngen\\client,D:\\Work\\IPLN\\Repo\\ipln-ngen\\server,d:\\Work\\IPLN\\Repo\\ipln-ngen\\node_modules\\webpack\\node_modules\\node-libs-browser\\node_modules\\crypto-browserify ",
			"D:\\Work\\IPLN\\Repo\\ipln-ngen\\client,D:\\Work\\IPLN\\Repo\\ipln-ngen\\server,D:\\Work\\IPLN\\Repo\\ipln-ngen\\node_modules\\crypto-browserify",
			"D:\\Work\\IPLN\\Repo\\ipln-ngen\\client,D:\\Work\\IPLN\\Repo\\ipln-ngen\\server,D:\\Work\\IPLN\\Repo\\ipln-ngen\\node_modules",
			"D:\\Work\\IPLN\\Repo\\ipln-ngen\\client,D:\\Work\\IPLN\\Repo\\ipln-ngen\\server",
			"D:\\Work\\IPLN\\Repo\\ipln-ngen\\client,D:\\Work\\IPLN\\Repo\\ipln-ngen\\server,D:\\Work\\IPLN\\Repo\\ipln-ngen\\node-modules\\react-bootstrap",
			"D:\\Work\\IPLN\\Repo\\ipln-ngen\\client,D:\\Work\\IPLN\\Repo\\ipln-ngen\\server",
			"D:\\Work\\IPLN\\Repo\\ipln-ngen\\client,-*.txt",
			"D:\\Work\\IPLN\\Repo\\ipln-ngen\\,-D:\\Work\\IPLN\\Repo\\ipln-ngen\\node-modules\\",
			"D:\\Work\\IPLN\\Repo\\ipln-ngen,-D:\\Work\\IPLN\\Repo\\ipln-ngen\\node-modules",
			"D:\\Work\\IPLN\\Repo\\ipln-ngen\\client,D:\\Work\\IPLN\\Repo\\ipln-ngen\\server,D:\\Work\\IPLN\\Repo\\ipln-ngen\\*.*",
			"D:\\Work\\IPLN\\Repo\\ipln-ngen\\client,D:\\Work\\IPLN\\Repo\\ipln-ngen\\server",
			"D:\\Work\\IPLN\\Repo\\ipln-ngen\\client;D:\\Work\\IPLN\\Repo\\ipln-ngen\\server",
			"D:\\Work\\IPLN\\Repo\\ipln-ngen\\client",
			"D:\\Work\\IPLN\\Repo\\ipln-ngen\\",
			"D:\\Work\\IPLN\\Repo\\ipln-ngen\\client",
			"D:\\Work\\IPLN\\Repo\\ipln-ngen\\node_modules\\react",
			"D:\\Work\\IPLN\\Repo\\ipln-ngen\\node-modules\\",
			"D:\\Work\\IPLN\\Repo\\ipln-ngen\\node-modules\\react\\",
			"D:\\Work\\IPLN\\Repo\\ipln-ngen\\client\\node-modules\\react\\",
			"D:\\Work\\IPLN\\Repo\\ipln-ngen\\client\\",
			"D:\\Work\\IPLN\\Repo\\ipln-ngen\\client\\,D:\\Work\\IPLN\\Repo\\ipln-ngen\\node_modules\\",
			"D:\\Work\\IPLN\\Repo\\ipln-ngen\\client\\;D:\\Work\\IPLN\\Repo\\ipln-ngen\\node_modules\\;",
			"D:\\Work\\IPLN\\Repo\\ipln-ngen\\client\\;D:\\Work\\IPLN\\Repo\\ipln-ngen\\node_modules\\react-bootstrap;",
			"D:\\Work\\IPLN\\Repo\\ipln-ngen\\client\\",
			"D:\\Work\\IPLN\\Repo\\ipln-ngen\\server\\",
			"D:\\Work\\IPLN\\Repo\\ipln-ngen\\client\\",
			"D:\\Work\\IPLN\\Repo\\ipln-ngen\\server\\",
			"D:\\Work\\IPLN\\Repo\\ipln-ngen\\client\\",
			"D:\\Work\\IPLN\\Repo\\ipln-ngen\\server\\",
			"D:\\Work\\IPLN\\Repo\\ipln-ngen\\server",
			"D:\\Work\\IPLN\\Repo\\ipln-ngen\\client\\js",
			"D:\\Work\\IPLN\\Repo\\ipln-ngen\\client\\js,D:\\Work\\IPLN\\Repo\\ipln-ngen\\client",
			"D:\\Work\\IPLN\\Repo\\ipln-ngen\\client\\js,D:\\Work\\IPLN\\Repo\\ipln-ngen\\client\\scss",
			"<open folders>",
			"<open files>",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"USB_LP_CAN1_RX0_IRQn",
			"USB_LP_CAN_RX0_IRQn",
			"USB_LP_CAN1_RX0_IRQn",
			"HAL_TIM_Base_Init",
			"HAL_TIM_Base_MspInit",
			"HAL_MspInit",
			"HAL_Init",
			"TIM1_TRG_COM_IRQHandler",
			"#define reset",
			"reset",
			"__HAL_TIM_GET_FLAG",
			"dbgmcu",
			"hal_tim_enable_it",
			"IRQn_Type",
			"tim1_cc_irq",
			"HAL_NVIC_SetPriority",
			"HAL_TIM_IC_Start_IT",
			"TIM_DIER_TIE",
			"__HAL_TIM_ENABLE_IT",
			"TIM_IT_CC1",
			"TIM_DIER_CC1IE",
			"TI1FP1",
			"TIM_IT_TRIGGER",
			"TIM_DIER",
			"TIE",
			"TIM_Base_InitTypeDef",
			"TIM_HandleTypeDef",
			"TIE",
			"HAL_TIM_IC_CaptureCallback",
			"GPIO_InitStruct",
			"__GPIOF_CLK_ENABLE",
			"captured_value",
			"_fillScreenItemsForExport",
			"_.find",
			"_addDetailViewsToGrids",
			"getTypeName",
			"typetonameconverter",
			"BREAKLINE",
			"versionItem",
			"/runtime",
			"RUNTIME_URL",
			"version'",
			"versionэ",
			"version",
			"/version",
			"runtime/version",
			"getVersion",
			"versionName",
			"getVersionName",
			"versionname",
			"versionName",
			"getItemWithScreensAndItems",
			"{",
			"gqlClient.fetch",
			"ruleList",
			"_getAdditionalVersionData",
			"getAllByParent",
			"_id",
			"console.log",
			"console",
			"_id",
			"tmpList",
			"_id",
			"stringifyvalid",
			"EXPORT_TO_XLSX",
			"escape-regexp",
			"not.empty",
			"\"(.*)\":",
			"sheet",
			"commit",
			"_addRow",
			"lastrow",
			"validationExpressionObjects",
			"listObjects",
			"this.data",
			"sheet",
			"workbook",
			"sinon",
			"releaseRef",
			".version",
			"{version",
			"{version}",
			"getItemWithScreensAndItems",
			"version",
			".version",
			".end",
			"/**",
			"console",
			"export/runtime",
			".get('/",
			".get(",
			"export/version",
			"validationexpressionobje",
			"sheet.",
			"sheet._",
			"sheet._add",
			"alone",
			"expandItems",
			"itemToXlsxRowData",
			"containerEndToXlsxRow",
			"containerStartToXlsxRow",
			"addRow",
			"stringifyOtherProps",
			"getNextColor",
			"chooseAllScreenRules",
			"findConnectedRulesForScreen",
			"validationexpressionList",
			"listValidationExpressionList",
			"gqlClient.fetch",
			"formatfu",
			", formatfunc.*\\}",
			"]:(.*):",
			"^'",
			"COLUMNS_PROPS_NAMED",
			"typetonameconverter",
			"HYPERLINK",
			"this.",
			"listList",
			"grid_screen",
			"grid-screen",
			"getConnectedRules",
			"chooseAllScreenRules",
			"getConnectedRules",
			"change",
			"update",
			"GRID",
			"header",
			"gqlclient"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"$1:",
			"$1",
			"_expandItems",
			"_itemToXlsxRowData",
			"_containerEndToXlsxRow",
			"_containerStartToXlsxRow",
			"_addRow",
			"_stringifyOtherProps",
			"}",
			"]:",
			"",
			"'ff",
			"'",
			"removeKeysFromObject",
			"'",
			"}, {",
			"{",
			"\\n",
			"",
			"items:",
			"listName:",
			"",
			"value:",
			"name:",
			"ScreenWrapper",
			"screenWrapper",
			"$1",
			"test",
			"_initRulesFromTemplate",
			"_initEventsFromTemplate",
			"_initEvents",
			"_initDetailViewsFromTemplate",
			"TemplateFromGroupHelper",
			"changeNamesInSingleRule",
			"Rules",
			"changeAllNamesInMultiRules",
			"replacements",
			"renames",
			"InRuleRenamer",
			"RuleWalker",
			"}",
			"zmdi '",
			"zmdi ",
			"getValidationFuncs",
			"topaz",
			"window.jQuery",
			"loadCasesData",
			"saveCasesData",
			"pathVariable",
			"createXHR",
			"this.SigWeb",
			"drawingContext",
			"this.onSigPenUp",
			"this.onSigPenDown",
			"this.evStatus",
			"setDisplayTarget",
			"setDisplayYSize",
			"setDisplayXSize",
			"getTabletState",
			"setRealTabletState",
			"= ()=>",
			"()=>",
			"this.getProperty",
			"this.setImageBlobProperty",
			"this.setImageStreamProperty",
			"this.setStreamProperty",
			"this.setPropertySync",
			"this.setProperty",
			"this.CreateXHR",
			"this.isIE",
			"this.baseUri",
			"let",
			"",
			"()=>",
			"=funcion",
			"'",
			"let",
			"'",
			"duplicate",
			"supplierId",
			"supplier_id",
			"supplier",
			"Supplier",
			"Suppliers",
			"suppliers",
			"supplier",
			"SUPPLIER",
			"/Supplier",
			"/supplier",
			"getBetweenArgsValues",
			"getBetweenValues",
			"getArgumentValue",
			"ruleEditor",
			"fieldItems",
			"openNthControlProps",
			"addControlName",
			"",
			"\"",
			"functions",
			"function (",
			": function ",
			": function",
			" = function (fieldValue,",
			"= function (fieldValue,",
			"_addFunc",
			"exprFunction",
			"ExpressionFunctionsObj",
			"_addMeta",
			"make",
			"getInfoMessageReactComponent",
			"checkbox",
			"testOperationBoxForSelectedField\n",
			"ft",
			"retScreen",
			"let",
			"ScreenStore",
			"ScreenAction.receiveScreen",
			"Screens",
			"updatePages",
			"document.querySelector",
			"youtubeViewer.screenWidth",
			"window.innerWidth",
			"window.outerWidth",
			"window.innerWidth",
			"mouseUpHandler",
			"mouseDownHandler",
			"isSwipeInProgress",
			"Swipeable"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": true,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "Src/main.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8418,
						"regions":
						{
						},
						"selection":
						[
							[
								6224,
								6224
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 3210.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 1,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1195539,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										286,
										312
									],
									[
										658,
										684
									],
									[
										853,
										879
									],
									[
										1044,
										1070
									],
									[
										1235,
										1261
									],
									[
										1385,
										1411
									],
									[
										1557,
										1583
									],
									[
										1678,
										1704
									],
									[
										1880,
										1906
									],
									[
										2095,
										2121
									],
									[
										2528,
										2554
									],
									[
										2808,
										2834
									],
									[
										2943,
										2969
									],
									[
										3370,
										3373
									],
									[
										3436,
										3439
									],
									[
										3936,
										3939
									],
									[
										4541,
										4544
									],
									[
										5153,
										5156
									],
									[
										5276,
										5279
									],
									[
										5787,
										5790
									],
									[
										6267,
										6270
									],
									[
										6388,
										6391
									],
									[
										6516,
										6519
									],
									[
										7168,
										7171
									],
									[
										7658,
										7661
									],
									[
										7724,
										7727
									],
									[
										8224,
										8227
									],
									[
										8829,
										8832
									],
									[
										9441,
										9444
									],
									[
										9564,
										9567
									],
									[
										10075,
										10078
									],
									[
										10555,
										10558
									],
									[
										10676,
										10679
									],
									[
										10804,
										10807
									],
									[
										11456,
										11459
									],
									[
										11946,
										11949
									],
									[
										12012,
										12015
									],
									[
										12512,
										12515
									],
									[
										13117,
										13120
									],
									[
										13729,
										13732
									],
									[
										13852,
										13855
									],
									[
										14363,
										14366
									],
									[
										14843,
										14846
									],
									[
										14964,
										14967
									],
									[
										15092,
										15095
									],
									[
										15744,
										15747
									],
									[
										16234,
										16237
									],
									[
										16300,
										16303
									],
									[
										16800,
										16803
									],
									[
										17405,
										17408
									],
									[
										18017,
										18020
									],
									[
										18140,
										18143
									],
									[
										18651,
										18654
									],
									[
										19131,
										19134
									],
									[
										19252,
										19255
									],
									[
										19380,
										19383
									],
									[
										20032,
										20035
									],
									[
										20522,
										20525
									],
									[
										20588,
										20591
									],
									[
										21088,
										21091
									],
									[
										21693,
										21696
									],
									[
										22305,
										22308
									],
									[
										22428,
										22431
									],
									[
										22939,
										22942
									],
									[
										23419,
										23422
									],
									[
										23540,
										23543
									],
									[
										23668,
										23671
									],
									[
										24320,
										24323
									],
									[
										24810,
										24813
									],
									[
										24876,
										24879
									],
									[
										25376,
										25379
									],
									[
										25981,
										25984
									],
									[
										26593,
										26596
									],
									[
										26716,
										26719
									],
									[
										27227,
										27230
									],
									[
										27707,
										27710
									],
									[
										27828,
										27831
									],
									[
										27956,
										27959
									],
									[
										28608,
										28611
									],
									[
										29098,
										29101
									],
									[
										29164,
										29167
									],
									[
										29664,
										29667
									],
									[
										30269,
										30272
									],
									[
										30881,
										30884
									],
									[
										31004,
										31007
									],
									[
										31515,
										31518
									],
									[
										31995,
										31998
									],
									[
										32116,
										32119
									],
									[
										32244,
										32247
									],
									[
										32896,
										32899
									],
									[
										33386,
										33389
									],
									[
										33452,
										33455
									],
									[
										33952,
										33955
									],
									[
										34557,
										34560
									],
									[
										35169,
										35172
									],
									[
										35292,
										35295
									],
									[
										35803,
										35806
									],
									[
										36283,
										36286
									],
									[
										36404,
										36407
									],
									[
										36532,
										36535
									],
									[
										37184,
										37187
									],
									[
										37674,
										37677
									],
									[
										37740,
										37743
									],
									[
										38240,
										38243
									],
									[
										38845,
										38848
									],
									[
										39457,
										39460
									],
									[
										39580,
										39583
									],
									[
										40091,
										40094
									],
									[
										40571,
										40574
									],
									[
										40692,
										40695
									],
									[
										40820,
										40823
									],
									[
										41472,
										41475
									],
									[
										41962,
										41965
									],
									[
										42028,
										42031
									],
									[
										42528,
										42531
									],
									[
										43133,
										43136
									],
									[
										43745,
										43748
									],
									[
										43868,
										43871
									],
									[
										44379,
										44382
									],
									[
										44859,
										44862
									],
									[
										44980,
										44983
									],
									[
										45108,
										45111
									],
									[
										45760,
										45763
									],
									[
										46250,
										46253
									],
									[
										46316,
										46319
									],
									[
										46816,
										46819
									],
									[
										47421,
										47424
									],
									[
										48033,
										48036
									],
									[
										48156,
										48159
									],
									[
										48667,
										48670
									],
									[
										49147,
										49150
									],
									[
										49268,
										49271
									],
									[
										49396,
										49399
									],
									[
										50048,
										50051
									],
									[
										50538,
										50541
									],
									[
										50604,
										50607
									],
									[
										51104,
										51107
									],
									[
										51709,
										51712
									],
									[
										52321,
										52324
									],
									[
										52444,
										52447
									],
									[
										52955,
										52958
									],
									[
										53435,
										53438
									],
									[
										53556,
										53559
									],
									[
										53684,
										53687
									],
									[
										54336,
										54339
									],
									[
										54826,
										54829
									],
									[
										54892,
										54895
									],
									[
										55392,
										55395
									],
									[
										55997,
										56000
									],
									[
										56609,
										56612
									],
									[
										56732,
										56735
									],
									[
										57243,
										57246
									],
									[
										57723,
										57726
									],
									[
										57844,
										57847
									],
									[
										57972,
										57975
									],
									[
										58624,
										58627
									],
									[
										59114,
										59117
									],
									[
										59180,
										59183
									],
									[
										59680,
										59683
									],
									[
										60285,
										60288
									],
									[
										60897,
										60900
									],
									[
										61020,
										61023
									],
									[
										61531,
										61534
									],
									[
										62011,
										62014
									],
									[
										62132,
										62135
									],
									[
										62260,
										62263
									],
									[
										62912,
										62915
									],
									[
										63403,
										63406
									],
									[
										63502,
										63505
									],
									[
										64035,
										64038
									],
									[
										64359,
										64362
									],
									[
										64754,
										64757
									],
									[
										64820,
										64823
									],
									[
										65292,
										65295
									],
									[
										65358,
										65361
									],
									[
										65846,
										65849
									],
									[
										65912,
										65915
									],
									[
										66393,
										66396
									],
									[
										66459,
										66462
									],
									[
										66906,
										66909
									],
									[
										66970,
										66973
									],
									[
										67363,
										67366
									],
									[
										67427,
										67430
									],
									[
										67811,
										67814
									],
									[
										67875,
										67878
									],
									[
										68264,
										68267
									],
									[
										68329,
										68332
									],
									[
										68601,
										68604
									],
									[
										69069,
										69072
									],
									[
										69134,
										69137
									],
									[
										69406,
										69409
									],
									[
										69870,
										69873
									],
									[
										69935,
										69938
									],
									[
										70360,
										70363
									],
									[
										70425,
										70428
									],
									[
										70850,
										70853
									],
									[
										70915,
										70918
									],
									[
										71343,
										71346
									],
									[
										71408,
										71411
									],
									[
										71837,
										71840
									],
									[
										71902,
										71905
									],
									[
										72330,
										72333
									],
									[
										72395,
										72398
									],
									[
										72822,
										72825
									],
									[
										72887,
										72890
									],
									[
										73159,
										73162
									],
									[
										73625,
										73628
									],
									[
										73690,
										73693
									],
									[
										74142,
										74145
									],
									[
										74208,
										74211
									],
									[
										74616,
										74619
									],
									[
										74961,
										74964
									],
									[
										75027,
										75030
									],
									[
										75494,
										75497
									],
									[
										75560,
										75563
									],
									[
										76024,
										76027
									],
									[
										76090,
										76093
									],
									[
										76554,
										76557
									],
									[
										76620,
										76623
									],
									[
										77020,
										77023
									],
									[
										77338,
										77341
									],
									[
										77404,
										77407
									],
									[
										77870,
										77873
									],
									[
										77936,
										77939
									],
									[
										78405,
										78408
									],
									[
										78471,
										78474
									],
									[
										78936,
										78939
									],
									[
										79002,
										79005
									],
									[
										79470,
										79473
									],
									[
										79536,
										79539
									],
									[
										80000,
										80003
									],
									[
										80066,
										80069
									],
									[
										80533,
										80536
									],
									[
										80599,
										80602
									],
									[
										81063,
										81066
									],
									[
										81129,
										81132
									],
									[
										81593,
										81596
									],
									[
										81659,
										81662
									],
									[
										82126,
										82129
									],
									[
										82192,
										82195
									],
									[
										82656,
										82659
									],
									[
										82722,
										82725
									],
									[
										83128,
										83131
									],
									[
										83426,
										83429
									],
									[
										83492,
										83495
									],
									[
										83955,
										83958
									],
									[
										84021,
										84024
									],
									[
										84481,
										84484
									],
									[
										84547,
										84550
									],
									[
										84996,
										84999
									],
									[
										85286,
										85289
									],
									[
										85352,
										85355
									],
									[
										85744,
										85747
									],
									[
										85933,
										85936
									],
									[
										86175,
										86178
									],
									[
										86490,
										86493
									],
									[
										86556,
										86559
									],
									[
										87039,
										87042
									],
									[
										87323,
										87326
									],
									[
										87389,
										87392
									],
									[
										87845,
										87848
									],
									[
										88154,
										88157
									],
									[
										88220,
										88223
									],
									[
										88700,
										88703
									],
									[
										89024,
										89027
									],
									[
										89090,
										89093
									],
									[
										89583,
										89586
									],
									[
										89872,
										89875
									],
									[
										89938,
										89941
									],
									[
										90417,
										90420
									],
									[
										90720,
										90723
									],
									[
										90786,
										90789
									],
									[
										91277,
										91280
									],
									[
										91593,
										91596
									],
									[
										91659,
										91662
									],
									[
										92105,
										92108
									],
									[
										92419,
										92422
									],
									[
										92485,
										92488
									],
									[
										92964,
										92967
									],
									[
										93288,
										93291
									],
									[
										93354,
										93357
									],
									[
										93845,
										93848
									],
									[
										94098,
										94101
									],
									[
										94164,
										94167
									],
									[
										94642,
										94645
									],
									[
										94913,
										94916
									],
									[
										94979,
										94982
									],
									[
										95351,
										95354
									],
									[
										95711,
										95714
									],
									[
										96076,
										96079
									],
									[
										96350,
										96353
									],
									[
										96416,
										96419
									],
									[
										96862,
										96865
									],
									[
										97162,
										97165
									],
									[
										97228,
										97231
									],
									[
										97668,
										97671
									],
									[
										97734,
										97737
									],
									[
										98181,
										98184
									],
									[
										98247,
										98250
									],
									[
										98688,
										98691
									],
									[
										98754,
										98757
									],
									[
										99193,
										99196
									],
									[
										99259,
										99262
									],
									[
										99697,
										99700
									],
									[
										99763,
										99766
									],
									[
										100201,
										100204
									],
									[
										100267,
										100270
									],
									[
										100696,
										100699
									],
									[
										100762,
										100765
									],
									[
										101198,
										101201
									],
									[
										101264,
										101267
									],
									[
										101694,
										101697
									],
									[
										101760,
										101763
									],
									[
										102188,
										102191
									],
									[
										102254,
										102257
									],
									[
										102681,
										102684
									],
									[
										102747,
										102750
									],
									[
										103174,
										103177
									],
									[
										103240,
										103243
									],
									[
										103757,
										103760
									],
									[
										104219,
										104222
									],
									[
										104677,
										104680
									],
									[
										105139,
										105142
									],
									[
										105593,
										105596
									],
									[
										106049,
										106052
									],
									[
										106502,
										106505
									],
									[
										106959,
										106962
									],
									[
										107414,
										107417
									],
									[
										107868,
										107871
									],
									[
										108324,
										108327
									],
									[
										108779,
										108782
									],
									[
										109153,
										109156
									],
									[
										109219,
										109222
									],
									[
										109665,
										109668
									],
									[
										109731,
										109734
									],
									[
										110172,
										110175
									],
									[
										110238,
										110241
									],
									[
										110677,
										110680
									],
									[
										110743,
										110746
									],
									[
										111181,
										111184
									],
									[
										111247,
										111250
									],
									[
										111685,
										111688
									],
									[
										111751,
										111754
									],
									[
										112170,
										112173
									],
									[
										112235,
										112238
									],
									[
										112659,
										112662
									],
									[
										112725,
										112728
									],
									[
										113160,
										113163
									],
									[
										113226,
										113229
									],
									[
										113656,
										113659
									],
									[
										113722,
										113725
									],
									[
										114150,
										114153
									],
									[
										114216,
										114219
									],
									[
										114643,
										114646
									],
									[
										114709,
										114712
									],
									[
										115140,
										115143
									],
									[
										115206,
										115209
									],
									[
										115633,
										115636
									],
									[
										115699,
										115702
									],
									[
										116130,
										116133
									],
									[
										116196,
										116199
									],
									[
										116784,
										116787
									],
									[
										117688,
										117705
									],
									[
										117874,
										117891
									],
									[
										117945,
										117962
									],
									[
										118004,
										118021
									],
									[
										118065,
										118082
									],
									[
										118171,
										118188
									],
									[
										118240,
										118257
									],
									[
										118355,
										118372
									],
									[
										118427,
										118444
									],
									[
										118537,
										118554
									],
									[
										118644,
										118661
									],
									[
										118842,
										118859
									],
									[
										118911,
										118928
									],
									[
										118968,
										118985
									],
									[
										119027,
										119044
									],
									[
										119131,
										119148
									],
									[
										119216,
										119233
									],
									[
										119347,
										119364
									],
									[
										119435,
										119452
									],
									[
										119561,
										119578
									],
									[
										119684,
										119701
									],
									[
										119895,
										119912
									],
									[
										119965,
										119982
									],
									[
										120023,
										120040
									],
									[
										120083,
										120100
									],
									[
										120188,
										120205
									],
									[
										120274,
										120291
									],
									[
										120406,
										120423
									],
									[
										120495,
										120512
									],
									[
										120622,
										120639
									],
									[
										120746,
										120763
									],
									[
										120962,
										120979
									],
									[
										121031,
										121048
									],
									[
										121088,
										121105
									],
									[
										121147,
										121164
									],
									[
										121251,
										121268
									],
									[
										121336,
										121353
									],
									[
										121467,
										121484
									],
									[
										121555,
										121572
									],
									[
										121681,
										121698
									],
									[
										121804,
										121821
									],
									[
										122026,
										122043
									],
									[
										122124,
										122141
									],
									[
										122187,
										122204
									],
									[
										122252,
										122269
									],
									[
										122362,
										122379
									],
									[
										122459,
										122476
									],
									[
										122602,
										122619
									],
									[
										122702,
										122719
									],
									[
										122929,
										122946
									],
									[
										123038,
										123055
									],
									[
										123100,
										123117
									],
									[
										123164,
										123181
									],
									[
										123274,
										123291
									],
									[
										123364,
										123381
									],
									[
										123500,
										123517
									],
									[
										123593,
										123610
									],
									[
										123724,
										123741
									],
									[
										123871,
										123888
									],
									[
										124069,
										124086
									],
									[
										124275,
										124292
									],
									[
										124399,
										124416
									],
									[
										124522,
										124539
									],
									[
										124651,
										124668
									],
									[
										124810,
										124827
									],
									[
										124954,
										124971
									],
									[
										125073,
										125090
									],
									[
										125183,
										125200
									],
									[
										125311,
										125328
									],
									[
										125429,
										125446
									],
									[
										125662,
										125679
									],
									[
										125766,
										125783
									],
									[
										125998,
										126015
									],
									[
										126097,
										126114
									],
									[
										126187,
										126204
									],
									[
										126397,
										126414
									],
									[
										126467,
										126484
									],
									[
										126532,
										126549
									],
									[
										126604,
										126621
									],
									[
										126666,
										126683
									],
									[
										126726,
										126743
									],
									[
										126934,
										126951
									],
									[
										127008,
										127025
									],
									[
										127083,
										127100
									],
									[
										127157,
										127174
									],
									[
										127237,
										127254
									],
									[
										127316,
										127333
									],
									[
										127596,
										127613
									],
									[
										127712,
										127729
									],
									[
										127787,
										127804
									],
									[
										127856,
										127873
									],
									[
										127979,
										127996
									],
									[
										128056,
										128073
									],
									[
										128179,
										128196
									],
									[
										128259,
										128276
									],
									[
										128377,
										128394
									],
									[
										128492,
										128509
									],
									[
										128717,
										128734
									],
									[
										128805,
										128822
									],
									[
										128947,
										128964
									],
									[
										129038,
										129055
									],
									[
										129175,
										129192
									],
									[
										129301,
										129318
									],
									[
										129545,
										129562
									],
									[
										129634,
										129651
									],
									[
										129777,
										129794
									],
									[
										129869,
										129886
									],
									[
										129999,
										130016
									],
									[
										130126,
										130143
									],
									[
										130375,
										130392
									],
									[
										130475,
										130492
									],
									[
										130629,
										130646
									],
									[
										130732,
										130749
									],
									[
										131042,
										131059
									],
									[
										131182,
										131199
									],
									[
										131323,
										131340
									],
									[
										131457,
										131474
									],
									[
										131948,
										131965
									],
									[
										132188,
										132205
									],
									[
										132250,
										132267
									],
									[
										132465,
										132482
									],
									[
										132777,
										132794
									],
									[
										133029,
										133046
									],
									[
										133208,
										133225
									],
									[
										133382,
										133399
									],
									[
										133534,
										133551
									],
									[
										133738,
										133755
									],
									[
										133948,
										133965
									],
									[
										134107,
										134124
									],
									[
										134270,
										134287
									],
									[
										134432,
										134449
									],
									[
										134596,
										134613
									],
									[
										134793,
										134810
									],
									[
										134998,
										135015
									],
									[
										135185,
										135202
									],
									[
										135357,
										135374
									],
									[
										135507,
										135524
									],
									[
										135709,
										135726
									],
									[
										135917,
										135934
									],
									[
										136092,
										136109
									],
									[
										136271,
										136288
									],
									[
										136449,
										136466
									],
									[
										136629,
										136646
									],
									[
										136842,
										136859
									],
									[
										137064,
										137081
									],
									[
										137237,
										137254
									],
									[
										137410,
										137427
									],
									[
										137561,
										137578
									],
									[
										137764,
										137781
									],
									[
										137973,
										137990
									],
									[
										138149,
										138166
									],
									[
										138329,
										138346
									],
									[
										138509,
										138526
									],
									[
										138690,
										138707
									],
									[
										138904,
										138921
									],
									[
										139136,
										139153
									],
									[
										139322,
										139339
									],
									[
										139494,
										139511
									],
									[
										139644,
										139661
									],
									[
										139846,
										139863
									],
									[
										140055,
										140072
									],
									[
										140230,
										140247
									],
									[
										140410,
										140427
									],
									[
										140588,
										140605
									],
									[
										140768,
										140785
									],
									[
										140981,
										140998
									],
									[
										141209,
										141226
									],
									[
										141463,
										141480
									],
									[
										141664,
										141681
									],
									[
										141820,
										141837
									],
									[
										142028,
										142045
									],
									[
										142242,
										142259
									],
									[
										142464,
										142481
									],
									[
										142690,
										142707
									],
									[
										142915,
										142932
									],
									[
										143126,
										143143
									],
									[
										143322,
										143339
									],
									[
										143477,
										143494
									],
									[
										143684,
										143701
									],
									[
										143897,
										143914
									],
									[
										144077,
										144094
									],
									[
										144261,
										144278
									],
									[
										144444,
										144461
									],
									[
										144629,
										144646
									],
									[
										144866,
										144883
									],
									[
										145027,
										145044
									],
									[
										145198,
										145215
									],
									[
										145413,
										145430
									],
									[
										145629,
										145646
									],
									[
										145841,
										145858
									],
									[
										146095,
										146112
									],
									[
										146381,
										146398
									],
									[
										146577,
										146594
									],
									[
										146862,
										146879
									],
									[
										147031,
										147048
									],
									[
										147222,
										147239
									],
									[
										147454,
										147471
									],
									[
										147660,
										147677
									],
									[
										147856,
										147873
									],
									[
										148076,
										148093
									],
									[
										148310,
										148327
									],
									[
										148483,
										148500
									],
									[
										148696,
										148713
									],
									[
										148904,
										148921
									],
									[
										149119,
										149136
									],
									[
										149324,
										149341
									],
									[
										149527,
										149544
									],
									[
										149744,
										149761
									],
									[
										149902,
										149919
									],
									[
										150061,
										150078
									],
									[
										150219,
										150236
									],
									[
										150383,
										150400
									],
									[
										150546,
										150563
									],
									[
										150683,
										150700
									],
									[
										150711,
										150728
									],
									[
										150902,
										150919
									],
									[
										150930,
										150947
									],
									[
										151118,
										151135
									],
									[
										151146,
										151163
									],
									[
										151347,
										151364
									],
									[
										151375,
										151392
									],
									[
										151570,
										151587
									],
									[
										151598,
										151615
									],
									[
										151805,
										151822
									],
									[
										152066,
										152083
									],
									[
										152355,
										152372
									],
									[
										152566,
										152583
									],
									[
										152726,
										152743
									],
									[
										152938,
										152955
									],
									[
										153158,
										153175
									],
									[
										153327,
										153344
									],
									[
										153500,
										153517
									],
									[
										153672,
										153689
									],
									[
										153846,
										153863
									],
									[
										154053,
										154070
									],
									[
										154216,
										154233
									],
									[
										154396,
										154413
									],
									[
										154580,
										154597
									],
									[
										154763,
										154780
									],
									[
										154943,
										154960
									],
									[
										155161,
										155178
									],
									[
										155343,
										155360
									],
									[
										155524,
										155541
									],
									[
										155709,
										155726
									],
									[
										155894,
										155911
									],
									[
										156075,
										156092
									],
									[
										156294,
										156311
									],
									[
										156481,
										156498
									],
									[
										156675,
										156692
									],
									[
										156843,
										156860
									],
									[
										157038,
										157055
									],
									[
										157238,
										157255
									],
									[
										157470,
										157487
									],
									[
										157703,
										157720
									],
									[
										157929,
										157946
									],
									[
										158183,
										158200
									],
									[
										158385,
										158402
									],
									[
										158590,
										158607
									],
									[
										158796,
										158813
									],
									[
										158824,
										158841
									],
									[
										159037,
										159054
									],
									[
										159255,
										159272
									],
									[
										159404,
										159421
									],
									[
										159615,
										159632
									],
									[
										159720,
										159737
									],
									[
										159974,
										159991
									],
									[
										160239,
										160256
									],
									[
										160385,
										160402
									],
									[
										160554,
										160571
									],
									[
										160809,
										160826
									],
									[
										160978,
										160995
									],
									[
										161083,
										161100
									],
									[
										161326,
										161343
									],
									[
										161926,
										161946
									],
									[
										162082,
										162102
									],
									[
										162408,
										162428
									],
									[
										162816,
										162836
									],
									[
										163261,
										163264
									],
									[
										163327,
										163330
									],
									[
										163827,
										163830
									],
									[
										164432,
										164435
									],
									[
										165044,
										165047
									],
									[
										165167,
										165170
									],
									[
										165678,
										165681
									],
									[
										166158,
										166161
									],
									[
										166279,
										166282
									],
									[
										166407,
										166410
									],
									[
										167059,
										167062
									],
									[
										167549,
										167552
									],
									[
										167615,
										167618
									],
									[
										168115,
										168118
									],
									[
										168720,
										168723
									],
									[
										169332,
										169335
									],
									[
										169455,
										169458
									],
									[
										169966,
										169969
									],
									[
										170446,
										170449
									],
									[
										170567,
										170570
									],
									[
										170695,
										170698
									],
									[
										171347,
										171350
									],
									[
										171837,
										171840
									],
									[
										171903,
										171906
									],
									[
										172403,
										172406
									],
									[
										173008,
										173011
									],
									[
										173620,
										173623
									],
									[
										173743,
										173746
									],
									[
										174254,
										174257
									],
									[
										174734,
										174737
									],
									[
										174855,
										174858
									],
									[
										174983,
										174986
									],
									[
										175635,
										175638
									],
									[
										176125,
										176128
									],
									[
										176191,
										176194
									],
									[
										176691,
										176694
									],
									[
										177296,
										177299
									],
									[
										177908,
										177911
									],
									[
										178031,
										178034
									],
									[
										178542,
										178545
									],
									[
										179022,
										179025
									],
									[
										179143,
										179146
									],
									[
										179271,
										179274
									],
									[
										179923,
										179926
									],
									[
										180413,
										180416
									],
									[
										180479,
										180482
									],
									[
										180979,
										180982
									],
									[
										181584,
										181587
									],
									[
										182196,
										182199
									],
									[
										182319,
										182322
									],
									[
										182830,
										182833
									],
									[
										183310,
										183313
									],
									[
										183431,
										183434
									],
									[
										183559,
										183562
									],
									[
										184211,
										184214
									],
									[
										184701,
										184704
									],
									[
										184767,
										184770
									],
									[
										185267,
										185270
									],
									[
										185872,
										185875
									],
									[
										186484,
										186487
									],
									[
										186607,
										186610
									],
									[
										187118,
										187121
									],
									[
										187598,
										187601
									],
									[
										187719,
										187722
									],
									[
										187847,
										187850
									],
									[
										188499,
										188502
									],
									[
										188989,
										188992
									],
									[
										189055,
										189058
									],
									[
										189555,
										189558
									],
									[
										190160,
										190163
									],
									[
										190772,
										190775
									],
									[
										190895,
										190898
									],
									[
										191406,
										191409
									],
									[
										191886,
										191889
									],
									[
										192007,
										192010
									],
									[
										192135,
										192138
									],
									[
										192787,
										192790
									],
									[
										193277,
										193280
									],
									[
										193343,
										193346
									],
									[
										193843,
										193846
									],
									[
										194448,
										194451
									],
									[
										195060,
										195063
									],
									[
										195183,
										195186
									],
									[
										195694,
										195697
									],
									[
										196174,
										196177
									],
									[
										196295,
										196298
									],
									[
										196423,
										196426
									],
									[
										197075,
										197078
									],
									[
										197565,
										197568
									],
									[
										197631,
										197634
									],
									[
										198131,
										198134
									],
									[
										198736,
										198739
									],
									[
										199348,
										199351
									],
									[
										199471,
										199474
									],
									[
										199982,
										199985
									],
									[
										200462,
										200465
									],
									[
										200583,
										200586
									],
									[
										200711,
										200714
									],
									[
										201363,
										201366
									],
									[
										201853,
										201856
									],
									[
										201919,
										201922
									],
									[
										202419,
										202422
									],
									[
										203024,
										203027
									],
									[
										203636,
										203639
									],
									[
										203759,
										203762
									],
									[
										204270,
										204273
									],
									[
										204750,
										204753
									],
									[
										204871,
										204874
									],
									[
										204999,
										205002
									],
									[
										205651,
										205654
									],
									[
										206141,
										206144
									],
									[
										206207,
										206210
									],
									[
										206707,
										206710
									],
									[
										207312,
										207315
									],
									[
										207924,
										207927
									],
									[
										208047,
										208050
									],
									[
										208558,
										208561
									],
									[
										209038,
										209041
									],
									[
										209159,
										209162
									],
									[
										209287,
										209290
									],
									[
										209939,
										209942
									],
									[
										210429,
										210432
									],
									[
										210495,
										210498
									],
									[
										210995,
										210998
									],
									[
										211600,
										211603
									],
									[
										212212,
										212215
									],
									[
										212335,
										212338
									],
									[
										212846,
										212849
									],
									[
										213326,
										213329
									],
									[
										213447,
										213450
									],
									[
										213575,
										213578
									],
									[
										214227,
										214230
									],
									[
										214717,
										214720
									],
									[
										214783,
										214786
									],
									[
										215283,
										215286
									],
									[
										215888,
										215891
									],
									[
										216500,
										216503
									],
									[
										216623,
										216626
									],
									[
										217134,
										217137
									],
									[
										217614,
										217617
									],
									[
										217735,
										217738
									],
									[
										217863,
										217866
									],
									[
										218515,
										218518
									],
									[
										219005,
										219008
									],
									[
										219071,
										219074
									],
									[
										219571,
										219574
									],
									[
										220176,
										220179
									],
									[
										220788,
										220791
									],
									[
										220911,
										220914
									],
									[
										221422,
										221425
									],
									[
										221902,
										221905
									],
									[
										222023,
										222026
									],
									[
										222151,
										222154
									],
									[
										222803,
										222806
									],
									[
										223294,
										223297
									],
									[
										223393,
										223396
									],
									[
										223926,
										223929
									],
									[
										224250,
										224253
									],
									[
										224645,
										224648
									],
									[
										224711,
										224714
									],
									[
										225183,
										225186
									],
									[
										225249,
										225252
									],
									[
										225737,
										225740
									],
									[
										225803,
										225806
									],
									[
										226284,
										226287
									],
									[
										226350,
										226353
									],
									[
										226797,
										226800
									],
									[
										226861,
										226864
									],
									[
										227254,
										227257
									],
									[
										227318,
										227321
									],
									[
										227702,
										227705
									],
									[
										227766,
										227769
									],
									[
										228155,
										228158
									],
									[
										228220,
										228223
									],
									[
										228492,
										228495
									],
									[
										228960,
										228963
									],
									[
										229025,
										229028
									],
									[
										229297,
										229300
									],
									[
										229761,
										229764
									],
									[
										229826,
										229829
									],
									[
										230251,
										230254
									],
									[
										230316,
										230319
									],
									[
										230741,
										230744
									],
									[
										230806,
										230809
									],
									[
										231234,
										231237
									],
									[
										231299,
										231302
									],
									[
										231728,
										231731
									],
									[
										231793,
										231796
									],
									[
										232221,
										232224
									],
									[
										232286,
										232289
									],
									[
										232713,
										232716
									],
									[
										232778,
										232781
									],
									[
										233050,
										233053
									],
									[
										233516,
										233519
									],
									[
										233581,
										233584
									],
									[
										234033,
										234036
									],
									[
										234099,
										234102
									],
									[
										234507,
										234510
									],
									[
										234852,
										234855
									],
									[
										234918,
										234921
									],
									[
										235385,
										235388
									],
									[
										235451,
										235454
									],
									[
										235915,
										235918
									],
									[
										235981,
										235984
									],
									[
										236445,
										236448
									],
									[
										236511,
										236514
									],
									[
										236911,
										236914
									],
									[
										237229,
										237232
									],
									[
										237295,
										237298
									],
									[
										237761,
										237764
									],
									[
										237827,
										237830
									],
									[
										238296,
										238299
									],
									[
										238362,
										238365
									],
									[
										238827,
										238830
									],
									[
										238893,
										238896
									],
									[
										239361,
										239364
									],
									[
										239427,
										239430
									],
									[
										239891,
										239894
									],
									[
										239957,
										239960
									],
									[
										240424,
										240427
									],
									[
										240490,
										240493
									],
									[
										240954,
										240957
									],
									[
										241020,
										241023
									],
									[
										241484,
										241487
									],
									[
										241550,
										241553
									],
									[
										242017,
										242020
									],
									[
										242083,
										242086
									],
									[
										242547,
										242550
									],
									[
										242613,
										242616
									],
									[
										243019,
										243022
									],
									[
										243317,
										243320
									],
									[
										243383,
										243386
									],
									[
										243846,
										243849
									],
									[
										243912,
										243915
									],
									[
										244372,
										244375
									],
									[
										244438,
										244441
									],
									[
										244887,
										244890
									],
									[
										245177,
										245180
									],
									[
										245243,
										245246
									],
									[
										245635,
										245638
									],
									[
										245824,
										245827
									],
									[
										246066,
										246069
									],
									[
										246381,
										246384
									],
									[
										246447,
										246450
									],
									[
										246930,
										246933
									],
									[
										247214,
										247217
									],
									[
										247280,
										247283
									],
									[
										247736,
										247739
									],
									[
										248045,
										248048
									],
									[
										248111,
										248114
									],
									[
										248591,
										248594
									],
									[
										248915,
										248918
									],
									[
										248981,
										248984
									],
									[
										249474,
										249477
									],
									[
										249763,
										249766
									],
									[
										249829,
										249832
									],
									[
										250308,
										250311
									],
									[
										250611,
										250614
									],
									[
										250677,
										250680
									],
									[
										251168,
										251171
									],
									[
										251484,
										251487
									],
									[
										251550,
										251553
									],
									[
										251996,
										251999
									],
									[
										252310,
										252313
									],
									[
										252376,
										252379
									],
									[
										252855,
										252858
									],
									[
										253179,
										253182
									],
									[
										253245,
										253248
									],
									[
										253736,
										253739
									],
									[
										253989,
										253992
									],
									[
										254055,
										254058
									],
									[
										254533,
										254536
									],
									[
										254804,
										254807
									],
									[
										254870,
										254873
									],
									[
										255242,
										255245
									],
									[
										255602,
										255605
									],
									[
										255967,
										255970
									],
									[
										256241,
										256244
									],
									[
										256307,
										256310
									],
									[
										256753,
										256756
									],
									[
										257053,
										257056
									],
									[
										257119,
										257122
									],
									[
										257559,
										257562
									],
									[
										257625,
										257628
									],
									[
										258072,
										258075
									],
									[
										258138,
										258141
									],
									[
										258579,
										258582
									],
									[
										258645,
										258648
									],
									[
										259084,
										259087
									],
									[
										259150,
										259153
									],
									[
										259588,
										259591
									],
									[
										259654,
										259657
									],
									[
										260092,
										260095
									],
									[
										260158,
										260161
									],
									[
										260587,
										260590
									],
									[
										260653,
										260656
									],
									[
										261089,
										261092
									],
									[
										261155,
										261158
									],
									[
										261585,
										261588
									],
									[
										261651,
										261654
									],
									[
										262079,
										262082
									],
									[
										262145,
										262148
									],
									[
										262572,
										262575
									],
									[
										262638,
										262641
									],
									[
										263065,
										263068
									],
									[
										263131,
										263134
									],
									[
										263648,
										263651
									],
									[
										264110,
										264113
									],
									[
										264568,
										264571
									],
									[
										265030,
										265033
									],
									[
										265484,
										265487
									],
									[
										265940,
										265943
									],
									[
										266393,
										266396
									],
									[
										266850,
										266853
									],
									[
										267305,
										267308
									],
									[
										267759,
										267762
									],
									[
										268215,
										268218
									],
									[
										268670,
										268673
									],
									[
										269044,
										269047
									],
									[
										269110,
										269113
									],
									[
										269556,
										269559
									],
									[
										269622,
										269625
									],
									[
										270063,
										270066
									],
									[
										270129,
										270132
									],
									[
										270568,
										270571
									],
									[
										270634,
										270637
									],
									[
										271072,
										271075
									],
									[
										271138,
										271141
									],
									[
										271576,
										271579
									],
									[
										271642,
										271645
									],
									[
										272061,
										272064
									],
									[
										272126,
										272129
									],
									[
										272550,
										272553
									],
									[
										272616,
										272619
									],
									[
										273051,
										273054
									],
									[
										273117,
										273120
									],
									[
										273547,
										273550
									],
									[
										273613,
										273616
									],
									[
										274041,
										274044
									],
									[
										274107,
										274110
									],
									[
										274534,
										274537
									],
									[
										274600,
										274603
									],
									[
										275031,
										275034
									],
									[
										275097,
										275100
									],
									[
										275524,
										275527
									],
									[
										275590,
										275593
									],
									[
										276021,
										276024
									],
									[
										276087,
										276090
									],
									[
										276675,
										276678
									],
									[
										277553,
										277561
									],
									[
										277608,
										277616
									],
									[
										277725,
										277733
									],
									[
										277853,
										277861
									],
									[
										277981,
										277989
									],
									[
										278109,
										278117
									],
									[
										278237,
										278245
									],
									[
										278351,
										278359
									],
									[
										278469,
										278477
									],
									[
										278585,
										278593
									],
									[
										278704,
										278712
									],
									[
										278834,
										278842
									],
									[
										278964,
										278972
									],
									[
										279094,
										279102
									],
									[
										279224,
										279232
									],
									[
										279340,
										279348
									],
									[
										279800,
										279808
									],
									[
										279855,
										279863
									],
									[
										279972,
										279980
									],
									[
										280100,
										280108
									],
									[
										280228,
										280236
									],
									[
										280356,
										280364
									],
									[
										280484,
										280492
									],
									[
										280598,
										280606
									],
									[
										280716,
										280724
									],
									[
										280832,
										280840
									],
									[
										280951,
										280959
									],
									[
										281081,
										281089
									],
									[
										281211,
										281219
									],
									[
										281341,
										281349
									],
									[
										281471,
										281479
									],
									[
										281587,
										281595
									],
									[
										282047,
										282055
									],
									[
										282102,
										282110
									],
									[
										282219,
										282227
									],
									[
										282347,
										282355
									],
									[
										282475,
										282483
									],
									[
										282603,
										282611
									],
									[
										282731,
										282739
									],
									[
										282845,
										282853
									],
									[
										282963,
										282971
									],
									[
										283079,
										283087
									],
									[
										283198,
										283206
									],
									[
										283328,
										283336
									],
									[
										283458,
										283466
									],
									[
										283588,
										283596
									],
									[
										283718,
										283726
									],
									[
										283834,
										283842
									],
									[
										284294,
										284302
									],
									[
										284349,
										284357
									],
									[
										284466,
										284474
									],
									[
										284594,
										284602
									],
									[
										284722,
										284730
									],
									[
										284850,
										284858
									],
									[
										284978,
										284986
									],
									[
										285092,
										285100
									],
									[
										285210,
										285218
									],
									[
										285326,
										285334
									],
									[
										285445,
										285453
									],
									[
										285575,
										285583
									],
									[
										285705,
										285713
									],
									[
										285835,
										285843
									],
									[
										285965,
										285973
									],
									[
										286081,
										286089
									],
									[
										286541,
										286549
									],
									[
										286596,
										286604
									],
									[
										286713,
										286721
									],
									[
										286841,
										286849
									],
									[
										286969,
										286977
									],
									[
										287097,
										287105
									],
									[
										287225,
										287233
									],
									[
										287339,
										287347
									],
									[
										287457,
										287465
									],
									[
										287573,
										287581
									],
									[
										287692,
										287700
									],
									[
										287822,
										287830
									],
									[
										287952,
										287960
									],
									[
										288082,
										288090
									],
									[
										288212,
										288220
									],
									[
										288328,
										288336
									],
									[
										288788,
										288796
									],
									[
										288843,
										288851
									],
									[
										288960,
										288968
									],
									[
										289088,
										289096
									],
									[
										289216,
										289224
									],
									[
										289344,
										289352
									],
									[
										289472,
										289480
									],
									[
										289586,
										289594
									],
									[
										289704,
										289712
									],
									[
										289820,
										289828
									],
									[
										289939,
										289947
									],
									[
										290069,
										290077
									],
									[
										290199,
										290207
									],
									[
										290329,
										290337
									],
									[
										290459,
										290467
									],
									[
										290575,
										290583
									],
									[
										291035,
										291043
									],
									[
										291090,
										291098
									],
									[
										291207,
										291215
									],
									[
										291335,
										291343
									],
									[
										291463,
										291471
									],
									[
										291591,
										291599
									],
									[
										291719,
										291727
									],
									[
										291833,
										291841
									],
									[
										291951,
										291959
									],
									[
										292067,
										292075
									],
									[
										292186,
										292194
									],
									[
										292316,
										292324
									],
									[
										292446,
										292454
									],
									[
										292576,
										292584
									],
									[
										292706,
										292714
									],
									[
										292822,
										292830
									],
									[
										293282,
										293290
									],
									[
										293337,
										293345
									],
									[
										293454,
										293462
									],
									[
										293582,
										293590
									],
									[
										293710,
										293718
									],
									[
										293838,
										293846
									],
									[
										293966,
										293974
									],
									[
										294080,
										294088
									],
									[
										294198,
										294206
									],
									[
										294314,
										294322
									],
									[
										294433,
										294441
									],
									[
										294563,
										294571
									],
									[
										294693,
										294701
									],
									[
										294823,
										294831
									],
									[
										294953,
										294961
									],
									[
										295069,
										295077
									],
									[
										295529,
										295537
									],
									[
										295584,
										295592
									],
									[
										295701,
										295709
									],
									[
										295829,
										295837
									],
									[
										295957,
										295965
									],
									[
										296085,
										296093
									],
									[
										296213,
										296221
									],
									[
										296327,
										296335
									],
									[
										296445,
										296453
									],
									[
										296561,
										296569
									],
									[
										296680,
										296688
									],
									[
										296810,
										296818
									],
									[
										296940,
										296948
									],
									[
										297070,
										297078
									],
									[
										297200,
										297208
									],
									[
										297316,
										297324
									],
									[
										297776,
										297784
									],
									[
										297831,
										297839
									],
									[
										297948,
										297956
									],
									[
										298076,
										298084
									],
									[
										298204,
										298212
									],
									[
										298332,
										298340
									],
									[
										298460,
										298468
									],
									[
										298574,
										298582
									],
									[
										298692,
										298700
									],
									[
										298808,
										298816
									],
									[
										298927,
										298935
									],
									[
										299057,
										299065
									],
									[
										299187,
										299195
									],
									[
										299317,
										299325
									],
									[
										299447,
										299455
									],
									[
										299563,
										299571
									],
									[
										300023,
										300031
									],
									[
										300078,
										300086
									],
									[
										300195,
										300203
									],
									[
										300323,
										300331
									],
									[
										300451,
										300459
									],
									[
										300579,
										300587
									],
									[
										300707,
										300715
									],
									[
										300821,
										300829
									],
									[
										300939,
										300947
									],
									[
										301055,
										301063
									],
									[
										301174,
										301182
									],
									[
										301304,
										301312
									],
									[
										301434,
										301442
									],
									[
										301564,
										301572
									],
									[
										301694,
										301702
									],
									[
										301810,
										301818
									],
									[
										302270,
										302278
									],
									[
										302325,
										302333
									],
									[
										302442,
										302450
									],
									[
										302570,
										302578
									],
									[
										302698,
										302706
									],
									[
										302826,
										302834
									],
									[
										302954,
										302962
									],
									[
										303068,
										303076
									],
									[
										303186,
										303194
									],
									[
										303302,
										303310
									],
									[
										303421,
										303429
									],
									[
										303551,
										303559
									],
									[
										303681,
										303689
									],
									[
										303811,
										303819
									],
									[
										303941,
										303949
									],
									[
										304057,
										304065
									],
									[
										304517,
										304525
									],
									[
										304572,
										304580
									],
									[
										304689,
										304697
									],
									[
										304817,
										304825
									],
									[
										304945,
										304953
									],
									[
										305073,
										305081
									],
									[
										305201,
										305209
									],
									[
										305315,
										305323
									],
									[
										305433,
										305441
									],
									[
										305549,
										305557
									],
									[
										305668,
										305676
									],
									[
										305798,
										305806
									],
									[
										305928,
										305936
									],
									[
										306058,
										306066
									],
									[
										306188,
										306196
									],
									[
										306304,
										306312
									],
									[
										306764,
										306772
									],
									[
										306819,
										306827
									],
									[
										306936,
										306944
									],
									[
										307064,
										307072
									],
									[
										307192,
										307200
									],
									[
										307320,
										307328
									],
									[
										307448,
										307456
									],
									[
										307562,
										307570
									],
									[
										307680,
										307688
									],
									[
										307796,
										307804
									],
									[
										307915,
										307923
									],
									[
										308045,
										308053
									],
									[
										308175,
										308183
									],
									[
										308305,
										308313
									],
									[
										308435,
										308443
									],
									[
										308551,
										308559
									],
									[
										308899,
										308907
									],
									[
										308953,
										308961
									],
									[
										309009,
										309017
									],
									[
										309065,
										309073
									],
									[
										309121,
										309129
									],
									[
										309177,
										309185
									],
									[
										309233,
										309241
									],
									[
										309287,
										309295
									],
									[
										309409,
										309417
									],
									[
										309474,
										309482
									],
									[
										309541,
										309549
									],
									[
										309608,
										309616
									],
									[
										309675,
										309683
									],
									[
										309742,
										309750
									],
									[
										309809,
										309817
									],
									[
										310130,
										310144
									],
									[
										310398,
										310412
									],
									[
										310677,
										310691
									],
									[
										310995,
										311009
									],
									[
										311071,
										311085
									],
									[
										311236,
										311250
									],
									[
										311393,
										311407
									],
									[
										311765,
										311771
									],
									[
										312209,
										312215
									],
									[
										312619,
										312625
									],
									[
										312729,
										312735
									],
									[
										312952,
										312958
									],
									[
										313273,
										313279
									],
									[
										313542,
										313548
									],
									[
										313815,
										313821
									],
									[
										314118,
										314124
									],
									[
										314415,
										314421
									],
									[
										314938,
										314952
									],
									[
										315612,
										315626
									],
									[
										316286,
										316300
									],
									[
										316960,
										316974
									],
									[
										317634,
										317648
									],
									[
										318308,
										318322
									],
									[
										318982,
										318996
									],
									[
										319656,
										319670
									],
									[
										320330,
										320344
									],
									[
										321004,
										321018
									],
									[
										321678,
										321692
									],
									[
										322352,
										322366
									],
									[
										323026,
										323040
									],
									[
										323700,
										323714
									],
									[
										324257,
										324271
									],
									[
										324616,
										324626
									],
									[
										324932,
										324942
									],
									[
										325273,
										325283
									],
									[
										325648,
										325658
									],
									[
										325814,
										325824
									],
									[
										325978,
										325988
									],
									[
										326144,
										326154
									],
									[
										326308,
										326318
									],
									[
										326474,
										326484
									],
									[
										326625,
										326635
									],
									[
										326814,
										326824
									],
									[
										327025,
										327035
									],
									[
										327269,
										327279
									],
									[
										327460,
										327470
									],
									[
										327643,
										327653
									],
									[
										327840,
										327850
									],
									[
										327929,
										327939
									],
									[
										328197,
										328207
									],
									[
										328375,
										328385
									],
									[
										328551,
										328561
									],
									[
										328714,
										328724
									],
									[
										328878,
										328888
									],
									[
										329044,
										329054
									],
									[
										329195,
										329205
									],
									[
										329383,
										329393
									],
									[
										329672,
										329691
									],
									[
										329940,
										329959
									],
									[
										330122,
										330141
									],
									[
										330286,
										330305
									],
									[
										330450,
										330469
									],
									[
										330614,
										330633
									],
									[
										330778,
										330797
									],
									[
										330942,
										330961
									],
									[
										331106,
										331125
									],
									[
										331270,
										331289
									],
									[
										331434,
										331453
									],
									[
										331598,
										331617
									],
									[
										331762,
										331781
									],
									[
										331926,
										331945
									],
									[
										332077,
										332096
									],
									[
										332191,
										332210
									],
									[
										332418,
										332437
									],
									[
										332593,
										332612
									],
									[
										332837,
										332856
									],
									[
										332888,
										332907
									],
									[
										333022,
										333041
									],
									[
										333280,
										333299
									],
									[
										333465,
										333484
									],
									[
										333626,
										333645
									],
									[
										333787,
										333806
									],
									[
										333948,
										333967
									],
									[
										334087,
										334106
									],
									[
										334282,
										334301
									],
									[
										334446,
										334465
									],
									[
										334610,
										334629
									],
									[
										334774,
										334793
									],
									[
										334913,
										334932
									],
									[
										335095,
										335114
									],
									[
										335209,
										335228
									],
									[
										335392,
										335411
									],
									[
										335880,
										335892
									],
									[
										336561,
										336573
									],
									[
										337242,
										337254
									],
									[
										337923,
										337935
									],
									[
										338604,
										338616
									],
									[
										339285,
										339297
									],
									[
										339966,
										339978
									],
									[
										340647,
										340659
									],
									[
										341328,
										341340
									],
									[
										342009,
										342021
									],
									[
										342690,
										342702
									],
									[
										343371,
										343383
									],
									[
										344052,
										344064
									],
									[
										344733,
										344745
									],
									[
										345305,
										345317
									],
									[
										345695,
										345714
									],
									[
										346267,
										346286
									],
									[
										346575,
										346594
									],
									[
										346785,
										346804
									],
									[
										346957,
										346976
									],
									[
										347354,
										347373
									],
									[
										347495,
										347514
									],
									[
										347899,
										347919
									],
									[
										347969,
										347989
									],
									[
										348300,
										348320
									],
									[
										348537,
										348557
									],
									[
										348860,
										348880
									],
									[
										349128,
										349148
									],
									[
										349798,
										349818
									],
									[
										350005,
										350025
									],
									[
										350123,
										350143
									],
									[
										350346,
										350366
									],
									[
										350498,
										350518
									],
									[
										350840,
										350860
									],
									[
										351260,
										351280
									],
									[
										351477,
										351497
									],
									[
										351656,
										351676
									],
									[
										351813,
										351833
									],
									[
										351969,
										351989
									],
									[
										352230,
										352250
									],
									[
										352486,
										352506
									],
									[
										352659,
										352679
									],
									[
										352827,
										352847
									],
									[
										352984,
										353004
									],
									[
										353140,
										353160
									],
									[
										353390,
										353410
									],
									[
										353649,
										353669
									],
									[
										354076,
										354096
									],
									[
										354229,
										354249
									],
									[
										354272,
										354292
									],
									[
										354417,
										354437
									],
									[
										354925,
										354936
									],
									[
										355551,
										355562
									],
									[
										356177,
										356188
									],
									[
										356803,
										356814
									],
									[
										357429,
										357440
									],
									[
										358068,
										358079
									],
									[
										358694,
										358705
									],
									[
										359320,
										359331
									],
									[
										359830,
										359841
									],
									[
										360000,
										360011
									],
									[
										360039,
										360050
									],
									[
										360266,
										360277
									],
									[
										360432,
										360443
									],
									[
										360470,
										360481
									],
									[
										360685,
										360696
									],
									[
										360851,
										360862
									],
									[
										360889,
										360900
									],
									[
										361304,
										361315
									],
									[
										361831,
										361840
									],
									[
										362166,
										362175
									],
									[
										362504,
										362513
									],
									[
										362842,
										362851
									],
									[
										363180,
										363189
									],
									[
										363518,
										363527
									],
									[
										363862,
										363871
									],
									[
										364206,
										364215
									],
									[
										364550,
										364559
									],
									[
										364894,
										364903
									],
									[
										365232,
										365241
									],
									[
										365570,
										365579
									],
									[
										365908,
										365917
									],
									[
										366246,
										366255
									],
									[
										366477,
										366486
									],
									[
										366732,
										366741
									],
									[
										366970,
										366979
									],
									[
										367252,
										367261
									],
									[
										367512,
										367521
									],
									[
										367732,
										367741
									],
									[
										367946,
										367955
									],
									[
										368187,
										368196
									],
									[
										368442,
										368451
									],
									[
										368680,
										368689
									],
									[
										368962,
										368971
									],
									[
										369222,
										369231
									],
									[
										369442,
										369451
									],
									[
										369656,
										369665
									],
									[
										369893,
										369902
									],
									[
										370181,
										370190
									],
									[
										370452,
										370461
									],
									[
										370767,
										370776
									],
									[
										371060,
										371069
									],
									[
										371326,
										371335
									],
									[
										371612,
										371621
									],
									[
										371824,
										371833
									],
									[
										372061,
										372070
									],
									[
										372349,
										372358
									],
									[
										372620,
										372629
									],
									[
										372935,
										372944
									],
									[
										373228,
										373237
									],
									[
										373494,
										373503
									],
									[
										373780,
										373789
									],
									[
										373992,
										374001
									],
									[
										374229,
										374238
									],
									[
										374517,
										374526
									],
									[
										374788,
										374797
									],
									[
										375103,
										375112
									],
									[
										375396,
										375405
									],
									[
										375662,
										375671
									],
									[
										375948,
										375957
									],
									[
										376160,
										376169
									],
									[
										376399,
										376408
									],
									[
										376654,
										376663
									],
									[
										376892,
										376901
									],
									[
										377174,
										377183
									],
									[
										377434,
										377443
									],
									[
										377654,
										377663
									],
									[
										377868,
										377877
									],
									[
										378107,
										378116
									],
									[
										378395,
										378404
									],
									[
										378666,
										378675
									],
									[
										378981,
										378990
									],
									[
										379274,
										379283
									],
									[
										379540,
										379549
									],
									[
										379826,
										379835
									],
									[
										380038,
										380047
									],
									[
										380352,
										380361
									],
									[
										380452,
										380461
									],
									[
										380505,
										380514
									],
									[
										380751,
										380760
									],
									[
										380883,
										380892
									],
									[
										380939,
										380948
									],
									[
										380997,
										381006
									],
									[
										381049,
										381058
									],
									[
										381426,
										381435
									],
									[
										381743,
										381752
									],
									[
										382024,
										382033
									],
									[
										382250,
										382259
									],
									[
										382515,
										382524
									],
									[
										382744,
										382753
									],
									[
										382974,
										382983
									],
									[
										383278,
										383287
									],
									[
										383591,
										383600
									],
									[
										383823,
										383832
									],
									[
										384076,
										384085
									],
									[
										384414,
										384423
									],
									[
										384662,
										384671
									],
									[
										384896,
										384905
									],
									[
										385179,
										385188
									],
									[
										385513,
										385522
									],
									[
										385877,
										385894
									],
									[
										386145,
										386162
									],
									[
										386327,
										386344
									],
									[
										386491,
										386508
									],
									[
										386655,
										386672
									],
									[
										386819,
										386836
									],
									[
										386983,
										387000
									],
									[
										387147,
										387164
									],
									[
										387311,
										387328
									],
									[
										387475,
										387492
									],
									[
										387639,
										387656
									],
									[
										387803,
										387820
									],
									[
										387967,
										387984
									],
									[
										388131,
										388148
									],
									[
										388282,
										388299
									],
									[
										388396,
										388413
									],
									[
										388623,
										388640
									],
									[
										388798,
										388815
									],
									[
										389042,
										389059
									],
									[
										389093,
										389110
									],
									[
										389227,
										389244
									],
									[
										389485,
										389502
									],
									[
										389670,
										389687
									],
									[
										389831,
										389848
									],
									[
										389992,
										390009
									],
									[
										390153,
										390170
									],
									[
										390292,
										390309
									],
									[
										390487,
										390504
									],
									[
										390651,
										390668
									],
									[
										390815,
										390832
									],
									[
										390979,
										390996
									],
									[
										391118,
										391135
									],
									[
										391300,
										391317
									],
									[
										391414,
										391431
									],
									[
										391597,
										391614
									],
									[
										391773,
										391790
									],
									[
										392047,
										392053
									],
									[
										392120,
										392126
									],
									[
										392370,
										392376
									],
									[
										392392,
										392398
									],
									[
										392410,
										392416
									],
									[
										392586,
										392592
									],
									[
										392645,
										392651
									],
									[
										392761,
										392767
									],
									[
										392891,
										392897
									],
									[
										392987,
										392993
									],
									[
										393083,
										393089
									],
									[
										393179,
										393185
									],
									[
										393275,
										393281
									],
									[
										393371,
										393377
									],
									[
										393467,
										393473
									],
									[
										393563,
										393569
									],
									[
										393659,
										393665
									],
									[
										393755,
										393761
									],
									[
										393851,
										393857
									],
									[
										393948,
										393954
									],
									[
										394045,
										394051
									],
									[
										394142,
										394148
									],
									[
										394239,
										394245
									],
									[
										394336,
										394342
									],
									[
										394472,
										394478
									],
									[
										394529,
										394535
									],
									[
										394636,
										394642
									],
									[
										394742,
										394748
									],
									[
										394851,
										394857
									],
									[
										394978,
										394984
									],
									[
										395120,
										395126
									],
									[
										395216,
										395222
									],
									[
										395320,
										395326
									],
									[
										395465,
										395471
									],
									[
										395605,
										395611
									],
									[
										395736,
										395742
									],
									[
										395867,
										395873
									],
									[
										395998,
										396004
									],
									[
										396129,
										396135
									],
									[
										396266,
										396272
									],
									[
										396403,
										396409
									],
									[
										396533,
										396539
									],
									[
										396663,
										396669
									],
									[
										397025,
										397031
									],
									[
										397196,
										397202
									],
									[
										397476,
										397482
									],
									[
										397498,
										397504
									],
									[
										397516,
										397522
									],
									[
										397692,
										397698
									],
									[
										397751,
										397757
									],
									[
										397867,
										397873
									],
									[
										397997,
										398003
									],
									[
										398093,
										398099
									],
									[
										398189,
										398195
									],
									[
										398285,
										398291
									],
									[
										398381,
										398387
									],
									[
										398477,
										398483
									],
									[
										398573,
										398579
									],
									[
										398669,
										398675
									],
									[
										398765,
										398771
									],
									[
										398861,
										398867
									],
									[
										398957,
										398963
									],
									[
										399054,
										399060
									],
									[
										399151,
										399157
									],
									[
										399248,
										399254
									],
									[
										399345,
										399351
									],
									[
										399442,
										399448
									],
									[
										399578,
										399584
									],
									[
										399635,
										399641
									],
									[
										399742,
										399748
									],
									[
										399848,
										399854
									],
									[
										399957,
										399963
									],
									[
										400084,
										400090
									],
									[
										400226,
										400232
									],
									[
										400322,
										400328
									],
									[
										400426,
										400432
									],
									[
										400571,
										400577
									],
									[
										400711,
										400717
									],
									[
										400842,
										400848
									],
									[
										400973,
										400979
									],
									[
										401104,
										401110
									],
									[
										401235,
										401241
									],
									[
										401372,
										401378
									],
									[
										401509,
										401515
									],
									[
										401640,
										401646
									],
									[
										401771,
										401777
									],
									[
										401902,
										401908
									],
									[
										402032,
										402038
									],
									[
										402162,
										402168
									],
									[
										402292,
										402298
									],
									[
										402422,
										402428
									],
									[
										402552,
										402558
									],
									[
										402914,
										402920
									],
									[
										402987,
										402993
									],
									[
										403237,
										403243
									],
									[
										403259,
										403265
									],
									[
										403277,
										403283
									],
									[
										403453,
										403459
									],
									[
										403512,
										403518
									],
									[
										403628,
										403634
									],
									[
										403758,
										403764
									],
									[
										403854,
										403860
									],
									[
										403950,
										403956
									],
									[
										404046,
										404052
									],
									[
										404142,
										404148
									],
									[
										404238,
										404244
									],
									[
										404334,
										404340
									],
									[
										404430,
										404436
									],
									[
										404526,
										404532
									],
									[
										404622,
										404628
									],
									[
										404718,
										404724
									],
									[
										404815,
										404821
									],
									[
										404912,
										404918
									],
									[
										405009,
										405015
									],
									[
										405106,
										405112
									],
									[
										405203,
										405209
									],
									[
										405339,
										405345
									],
									[
										405396,
										405402
									],
									[
										405503,
										405509
									],
									[
										405609,
										405615
									],
									[
										405718,
										405724
									],
									[
										405845,
										405851
									],
									[
										405987,
										405993
									],
									[
										406083,
										406089
									],
									[
										406187,
										406193
									],
									[
										406332,
										406338
									],
									[
										406472,
										406478
									],
									[
										406603,
										406609
									],
									[
										406734,
										406740
									],
									[
										407103,
										407109
									],
									[
										407176,
										407182
									],
									[
										407426,
										407432
									],
									[
										407448,
										407454
									],
									[
										407466,
										407472
									],
									[
										407642,
										407648
									],
									[
										407701,
										407707
									],
									[
										407817,
										407823
									],
									[
										407947,
										407953
									],
									[
										408043,
										408049
									],
									[
										408139,
										408145
									],
									[
										408235,
										408241
									],
									[
										408331,
										408337
									],
									[
										408427,
										408433
									],
									[
										408523,
										408529
									],
									[
										408619,
										408625
									],
									[
										408715,
										408721
									],
									[
										408811,
										408817
									],
									[
										408907,
										408913
									],
									[
										409004,
										409010
									],
									[
										409101,
										409107
									],
									[
										409198,
										409204
									],
									[
										409295,
										409301
									],
									[
										409392,
										409398
									],
									[
										409528,
										409534
									],
									[
										409585,
										409591
									],
									[
										409692,
										409698
									],
									[
										409798,
										409804
									],
									[
										409907,
										409913
									],
									[
										410034,
										410040
									],
									[
										410176,
										410182
									],
									[
										410272,
										410278
									],
									[
										410376,
										410382
									],
									[
										410521,
										410527
									],
									[
										410661,
										410667
									],
									[
										410792,
										410798
									],
									[
										410923,
										410929
									],
									[
										411054,
										411060
									],
									[
										411191,
										411197
									],
									[
										411560,
										411566
									],
									[
										411730,
										411736
									],
									[
										412012,
										412018
									],
									[
										412034,
										412040
									],
									[
										412052,
										412058
									],
									[
										412228,
										412234
									],
									[
										412287,
										412293
									],
									[
										412403,
										412409
									],
									[
										412533,
										412539
									],
									[
										412629,
										412635
									],
									[
										412725,
										412731
									],
									[
										412821,
										412827
									],
									[
										412917,
										412923
									],
									[
										413013,
										413019
									],
									[
										413109,
										413115
									],
									[
										413205,
										413211
									],
									[
										413301,
										413307
									],
									[
										413397,
										413403
									],
									[
										413493,
										413499
									],
									[
										413590,
										413596
									],
									[
										413687,
										413693
									],
									[
										413784,
										413790
									],
									[
										413881,
										413887
									],
									[
										413978,
										413984
									],
									[
										414114,
										414120
									],
									[
										414171,
										414177
									],
									[
										414278,
										414284
									],
									[
										414384,
										414390
									],
									[
										414493,
										414499
									],
									[
										414620,
										414626
									],
									[
										414762,
										414768
									],
									[
										414858,
										414864
									],
									[
										414962,
										414968
									],
									[
										415107,
										415113
									],
									[
										415247,
										415253
									],
									[
										415378,
										415384
									],
									[
										415509,
										415515
									],
									[
										415640,
										415646
									],
									[
										415771,
										415777
									],
									[
										415908,
										415914
									],
									[
										416045,
										416051
									],
									[
										416176,
										416182
									],
									[
										416307,
										416313
									],
									[
										416438,
										416444
									],
									[
										416567,
										416573
									],
									[
										416697,
										416703
									],
									[
										417059,
										417065
									],
									[
										417229,
										417235
									],
									[
										417511,
										417517
									],
									[
										417533,
										417539
									],
									[
										417551,
										417557
									],
									[
										417727,
										417733
									],
									[
										417786,
										417792
									],
									[
										417902,
										417908
									],
									[
										418032,
										418038
									],
									[
										418128,
										418134
									],
									[
										418224,
										418230
									],
									[
										418320,
										418326
									],
									[
										418416,
										418422
									],
									[
										418512,
										418518
									],
									[
										418608,
										418614
									],
									[
										418704,
										418710
									],
									[
										418800,
										418806
									],
									[
										418896,
										418902
									],
									[
										418992,
										418998
									],
									[
										419089,
										419095
									],
									[
										419186,
										419192
									],
									[
										419283,
										419289
									],
									[
										419380,
										419386
									],
									[
										419477,
										419483
									],
									[
										419613,
										419619
									],
									[
										419670,
										419676
									],
									[
										419777,
										419783
									],
									[
										419883,
										419889
									],
									[
										419992,
										419998
									],
									[
										420119,
										420125
									],
									[
										420261,
										420267
									],
									[
										420357,
										420363
									],
									[
										420461,
										420467
									],
									[
										420606,
										420612
									],
									[
										420746,
										420752
									],
									[
										420877,
										420883
									],
									[
										421008,
										421014
									],
									[
										421139,
										421145
									],
									[
										421270,
										421276
									],
									[
										421407,
										421413
									],
									[
										421544,
										421550
									],
									[
										421675,
										421681
									],
									[
										421806,
										421812
									],
									[
										421937,
										421943
									],
									[
										422067,
										422073
									],
									[
										422197,
										422203
									],
									[
										422327,
										422333
									],
									[
										422456,
										422462
									],
									[
										422586,
										422592
									],
									[
										422948,
										422954
									],
									[
										423021,
										423027
									],
									[
										423290,
										423296
									],
									[
										423312,
										423318
									],
									[
										423330,
										423336
									],
									[
										423506,
										423512
									],
									[
										423565,
										423571
									],
									[
										423681,
										423687
									],
									[
										423811,
										423817
									],
									[
										423907,
										423913
									],
									[
										424003,
										424009
									],
									[
										424099,
										424105
									],
									[
										424195,
										424201
									],
									[
										424291,
										424297
									],
									[
										424387,
										424393
									],
									[
										424483,
										424489
									],
									[
										424579,
										424585
									],
									[
										424675,
										424681
									],
									[
										424771,
										424777
									],
									[
										424868,
										424874
									],
									[
										424965,
										424971
									],
									[
										425062,
										425068
									],
									[
										425159,
										425165
									],
									[
										425256,
										425262
									],
									[
										425392,
										425398
									],
									[
										425449,
										425455
									],
									[
										425556,
										425562
									],
									[
										425662,
										425668
									],
									[
										425771,
										425777
									],
									[
										425898,
										425904
									],
									[
										426040,
										426046
									],
									[
										426136,
										426142
									],
									[
										426240,
										426246
									],
									[
										426385,
										426391
									],
									[
										426525,
										426531
									],
									[
										426656,
										426662
									],
									[
										426787,
										426793
									],
									[
										427156,
										427162
									],
									[
										427229,
										427235
									],
									[
										427498,
										427504
									],
									[
										427520,
										427526
									],
									[
										427538,
										427544
									],
									[
										427714,
										427720
									],
									[
										427773,
										427779
									],
									[
										427889,
										427895
									],
									[
										428019,
										428025
									],
									[
										428115,
										428121
									],
									[
										428211,
										428217
									],
									[
										428307,
										428313
									],
									[
										428403,
										428409
									],
									[
										428499,
										428505
									],
									[
										428595,
										428601
									],
									[
										428691,
										428697
									],
									[
										428787,
										428793
									],
									[
										428883,
										428889
									],
									[
										428979,
										428985
									],
									[
										429076,
										429082
									],
									[
										429173,
										429179
									],
									[
										429270,
										429276
									],
									[
										429367,
										429373
									],
									[
										429464,
										429470
									],
									[
										429600,
										429606
									],
									[
										429657,
										429663
									],
									[
										429764,
										429770
									],
									[
										429870,
										429876
									],
									[
										429979,
										429985
									],
									[
										430106,
										430112
									],
									[
										430248,
										430254
									],
									[
										430344,
										430350
									],
									[
										430448,
										430454
									],
									[
										430593,
										430599
									],
									[
										430733,
										430739
									],
									[
										430864,
										430870
									],
									[
										430995,
										431001
									],
									[
										431126,
										431132
									],
									[
										431263,
										431269
									],
									[
										431632,
										431638
									],
									[
										431705,
										431711
									],
									[
										431974,
										431980
									],
									[
										431996,
										432002
									],
									[
										432014,
										432020
									],
									[
										432190,
										432196
									],
									[
										432249,
										432255
									],
									[
										432365,
										432371
									],
									[
										432495,
										432501
									],
									[
										432591,
										432597
									],
									[
										432687,
										432693
									],
									[
										432783,
										432789
									],
									[
										432879,
										432885
									],
									[
										432975,
										432981
									],
									[
										433071,
										433077
									],
									[
										433167,
										433173
									],
									[
										433263,
										433269
									],
									[
										433359,
										433365
									],
									[
										433455,
										433461
									],
									[
										433552,
										433558
									],
									[
										433649,
										433655
									],
									[
										433746,
										433752
									],
									[
										433843,
										433849
									],
									[
										433940,
										433946
									],
									[
										434076,
										434082
									],
									[
										434133,
										434139
									],
									[
										434240,
										434246
									],
									[
										434346,
										434352
									],
									[
										434455,
										434461
									],
									[
										434582,
										434588
									],
									[
										434724,
										434730
									],
									[
										434820,
										434826
									],
									[
										434924,
										434930
									],
									[
										435069,
										435075
									],
									[
										435209,
										435215
									],
									[
										435340,
										435346
									],
									[
										435471,
										435477
									],
									[
										435602,
										435608
									],
									[
										435731,
										435737
									],
									[
										436100,
										436106
									],
									[
										436173,
										436179
									],
									[
										436442,
										436448
									],
									[
										436464,
										436470
									],
									[
										436482,
										436488
									],
									[
										436658,
										436664
									],
									[
										436717,
										436723
									],
									[
										436833,
										436839
									],
									[
										436963,
										436969
									],
									[
										437059,
										437065
									],
									[
										437155,
										437161
									],
									[
										437251,
										437257
									],
									[
										437347,
										437353
									],
									[
										437443,
										437449
									],
									[
										437539,
										437545
									],
									[
										437635,
										437641
									],
									[
										437731,
										437737
									],
									[
										437827,
										437833
									],
									[
										437923,
										437929
									],
									[
										438020,
										438026
									],
									[
										438117,
										438123
									],
									[
										438214,
										438220
									],
									[
										438311,
										438317
									],
									[
										438408,
										438414
									],
									[
										438544,
										438550
									],
									[
										438601,
										438607
									],
									[
										438708,
										438714
									],
									[
										438814,
										438820
									],
									[
										438923,
										438929
									],
									[
										439050,
										439056
									],
									[
										439192,
										439198
									],
									[
										439288,
										439294
									],
									[
										439392,
										439398
									],
									[
										439537,
										439543
									],
									[
										439677,
										439683
									],
									[
										439808,
										439814
									],
									[
										439939,
										439945
									],
									[
										440070,
										440076
									],
									[
										440201,
										440207
									],
									[
										440330,
										440336
									],
									[
										440467,
										440473
									],
									[
										440836,
										440842
									],
									[
										441006,
										441012
									],
									[
										441307,
										441313
									],
									[
										441329,
										441335
									],
									[
										441347,
										441353
									],
									[
										441523,
										441529
									],
									[
										441582,
										441588
									],
									[
										441698,
										441704
									],
									[
										441828,
										441834
									],
									[
										441924,
										441930
									],
									[
										442020,
										442026
									],
									[
										442116,
										442122
									],
									[
										442212,
										442218
									],
									[
										442308,
										442314
									],
									[
										442404,
										442410
									],
									[
										442500,
										442506
									],
									[
										442596,
										442602
									],
									[
										442692,
										442698
									],
									[
										442788,
										442794
									],
									[
										442885,
										442891
									],
									[
										442982,
										442988
									],
									[
										443079,
										443085
									],
									[
										443176,
										443182
									],
									[
										443273,
										443279
									],
									[
										443409,
										443415
									],
									[
										443466,
										443472
									],
									[
										443573,
										443579
									],
									[
										443679,
										443685
									],
									[
										443788,
										443794
									],
									[
										443915,
										443921
									],
									[
										444057,
										444063
									],
									[
										444153,
										444159
									],
									[
										444257,
										444263
									],
									[
										444402,
										444408
									],
									[
										444542,
										444548
									],
									[
										444673,
										444679
									],
									[
										444804,
										444810
									],
									[
										444935,
										444941
									],
									[
										445066,
										445072
									],
									[
										445195,
										445201
									],
									[
										445332,
										445338
									],
									[
										445469,
										445475
									],
									[
										445600,
										445606
									],
									[
										445731,
										445737
									],
									[
										445862,
										445868
									],
									[
										446225,
										446231
									],
									[
										446395,
										446401
									],
									[
										446696,
										446702
									],
									[
										446718,
										446724
									],
									[
										446736,
										446742
									],
									[
										446912,
										446918
									],
									[
										446971,
										446977
									],
									[
										447087,
										447093
									],
									[
										447217,
										447223
									],
									[
										447313,
										447319
									],
									[
										447409,
										447415
									],
									[
										447505,
										447511
									],
									[
										447601,
										447607
									],
									[
										447697,
										447703
									],
									[
										447793,
										447799
									],
									[
										447889,
										447895
									],
									[
										447985,
										447991
									],
									[
										448081,
										448087
									],
									[
										448177,
										448183
									],
									[
										448274,
										448280
									],
									[
										448371,
										448377
									],
									[
										448468,
										448474
									],
									[
										448565,
										448571
									],
									[
										448662,
										448668
									],
									[
										448798,
										448804
									],
									[
										448855,
										448861
									],
									[
										448962,
										448968
									],
									[
										449068,
										449074
									],
									[
										449177,
										449183
									],
									[
										449304,
										449310
									],
									[
										449446,
										449452
									],
									[
										449542,
										449548
									],
									[
										449646,
										449652
									],
									[
										449791,
										449797
									],
									[
										449931,
										449937
									],
									[
										450062,
										450068
									],
									[
										450193,
										450199
									],
									[
										450324,
										450330
									],
									[
										450455,
										450461
									],
									[
										450584,
										450590
									],
									[
										450721,
										450727
									],
									[
										450858,
										450864
									],
									[
										450989,
										450995
									],
									[
										451120,
										451126
									],
									[
										451251,
										451257
									],
									[
										451382,
										451388
									],
									[
										451512,
										451518
									],
									[
										451642,
										451648
									],
									[
										451772,
										451778
									],
									[
										451901,
										451907
									],
									[
										452031,
										452037
									],
									[
										452393,
										452399
									],
									[
										452466,
										452472
									],
									[
										452716,
										452722
									],
									[
										452738,
										452744
									],
									[
										452756,
										452762
									],
									[
										453010,
										453016
									],
									[
										453069,
										453075
									],
									[
										453185,
										453191
									],
									[
										453315,
										453321
									],
									[
										453411,
										453417
									],
									[
										453507,
										453513
									],
									[
										453603,
										453609
									],
									[
										453699,
										453705
									],
									[
										453795,
										453801
									],
									[
										453891,
										453897
									],
									[
										453987,
										453993
									],
									[
										454083,
										454089
									],
									[
										454179,
										454185
									],
									[
										454275,
										454281
									],
									[
										454372,
										454378
									],
									[
										454469,
										454475
									],
									[
										454566,
										454572
									],
									[
										454663,
										454669
									],
									[
										454760,
										454766
									],
									[
										454896,
										454902
									],
									[
										454953,
										454959
									],
									[
										455060,
										455066
									],
									[
										455166,
										455172
									],
									[
										455275,
										455281
									],
									[
										455402,
										455408
									],
									[
										455544,
										455550
									],
									[
										455640,
										455646
									],
									[
										455744,
										455750
									],
									[
										455889,
										455895
									],
									[
										456029,
										456035
									],
									[
										456160,
										456166
									],
									[
										456291,
										456297
									],
									[
										456422,
										456428
									],
									[
										456553,
										456559
									],
									[
										456682,
										456688
									],
									[
										456819,
										456825
									],
									[
										456956,
										456962
									],
									[
										457087,
										457093
									],
									[
										457218,
										457224
									],
									[
										457349,
										457355
									],
									[
										457478,
										457484
									],
									[
										457607,
										457613
									],
									[
										457737,
										457743
									],
									[
										458099,
										458105
									],
									[
										458172,
										458178
									],
									[
										458416,
										458422
									],
									[
										458438,
										458444
									],
									[
										458456,
										458462
									],
									[
										458710,
										458716
									],
									[
										458769,
										458775
									],
									[
										458885,
										458891
									],
									[
										459015,
										459021
									],
									[
										459111,
										459117
									],
									[
										459207,
										459213
									],
									[
										459303,
										459309
									],
									[
										459399,
										459405
									],
									[
										459495,
										459501
									],
									[
										459591,
										459597
									],
									[
										459687,
										459693
									],
									[
										459783,
										459789
									],
									[
										459879,
										459885
									],
									[
										459975,
										459981
									],
									[
										460072,
										460078
									],
									[
										460169,
										460175
									],
									[
										460266,
										460272
									],
									[
										460363,
										460369
									],
									[
										460460,
										460466
									],
									[
										460596,
										460602
									],
									[
										460653,
										460659
									],
									[
										460760,
										460766
									],
									[
										460866,
										460872
									],
									[
										460975,
										460981
									],
									[
										461102,
										461108
									],
									[
										461244,
										461250
									],
									[
										461340,
										461346
									],
									[
										461444,
										461450
									],
									[
										461589,
										461595
									],
									[
										461729,
										461735
									],
									[
										461860,
										461866
									],
									[
										461991,
										461997
									],
									[
										462122,
										462128
									],
									[
										462253,
										462259
									],
									[
										462382,
										462388
									],
									[
										462519,
										462525
									],
									[
										462656,
										462662
									],
									[
										462787,
										462793
									],
									[
										462918,
										462924
									],
									[
										463049,
										463055
									],
									[
										463178,
										463184
									],
									[
										463307,
										463313
									],
									[
										463437,
										463443
									],
									[
										463804,
										463810
									],
									[
										463873,
										463879
									],
									[
										463941,
										463947
									],
									[
										464008,
										464014
									],
									[
										464078,
										464084
									],
									[
										464151,
										464157
									],
									[
										464253,
										464259
									],
									[
										464299,
										464305
									],
									[
										464590,
										464596
									],
									[
										464616,
										464622
									],
									[
										464727,
										464733
									],
									[
										464740,
										464746
									],
									[
										464794,
										464800
									],
									[
										464807,
										464813
									],
									[
										464861,
										464867
									],
									[
										464874,
										464880
									],
									[
										464928,
										464934
									],
									[
										464941,
										464947
									],
									[
										464995,
										465001
									],
									[
										465008,
										465014
									],
									[
										465062,
										465068
									],
									[
										465075,
										465081
									],
									[
										465129,
										465135
									],
									[
										465142,
										465148
									],
									[
										465196,
										465202
									],
									[
										465209,
										465215
									],
									[
										465263,
										465269
									],
									[
										465276,
										465282
									],
									[
										465330,
										465336
									],
									[
										465343,
										465349
									],
									[
										465397,
										465403
									],
									[
										465410,
										465416
									],
									[
										465464,
										465470
									],
									[
										465477,
										465483
									],
									[
										465531,
										465537
									],
									[
										465544,
										465550
									],
									[
										465598,
										465604
									],
									[
										465611,
										465617
									],
									[
										465665,
										465671
									],
									[
										465678,
										465684
									],
									[
										465732,
										465738
									],
									[
										465745,
										465751
									],
									[
										465807,
										465813
									],
									[
										465820,
										465826
									],
									[
										465874,
										465880
									],
									[
										465887,
										465893
									],
									[
										465942,
										465948
									],
									[
										465955,
										465961
									],
									[
										466011,
										466017
									],
									[
										466024,
										466030
									],
									[
										466080,
										466086
									],
									[
										466093,
										466099
									],
									[
										466149,
										466155
									],
									[
										466162,
										466168
									],
									[
										466218,
										466224
									],
									[
										466231,
										466237
									],
									[
										466287,
										466293
									],
									[
										466300,
										466306
									],
									[
										466356,
										466362
									],
									[
										466369,
										466375
									],
									[
										466425,
										466431
									],
									[
										466438,
										466444
									],
									[
										466494,
										466500
									],
									[
										466507,
										466513
									],
									[
										466563,
										466569
									],
									[
										466576,
										466582
									],
									[
										466631,
										466637
									],
									[
										466644,
										466650
									],
									[
										466698,
										466704
									],
									[
										466711,
										466717
									],
									[
										466782,
										466788
									],
									[
										466795,
										466801
									],
									[
										466851,
										466857
									],
									[
										466864,
										466870
									],
									[
										466920,
										466926
									],
									[
										466933,
										466939
									],
									[
										466989,
										466995
									],
									[
										467002,
										467008
									],
									[
										467058,
										467064
									],
									[
										467071,
										467077
									],
									[
										467127,
										467133
									],
									[
										467140,
										467146
									],
									[
										467194,
										467200
									],
									[
										467207,
										467213
									],
									[
										467259,
										467265
									],
									[
										467272,
										467278
									],
									[
										467325,
										467331
									],
									[
										467338,
										467344
									],
									[
										467392,
										467398
									],
									[
										467405,
										467411
									],
									[
										467459,
										467465
									],
									[
										467472,
										467478
									],
									[
										467526,
										467532
									],
									[
										467539,
										467545
									],
									[
										467601,
										467607
									],
									[
										467614,
										467620
									],
									[
										467684,
										467690
									],
									[
										467697,
										467703
									],
									[
										467767,
										467773
									],
									[
										467780,
										467786
									],
									[
										467850,
										467856
									],
									[
										467863,
										467869
									],
									[
										467933,
										467939
									],
									[
										467946,
										467952
									],
									[
										468016,
										468022
									],
									[
										468029,
										468035
									],
									[
										468091,
										468097
									],
									[
										468104,
										468110
									],
									[
										468158,
										468164
									],
									[
										468171,
										468177
									],
									[
										468227,
										468233
									],
									[
										468240,
										468246
									],
									[
										468298,
										468304
									],
									[
										468311,
										468317
									],
									[
										468369,
										468375
									],
									[
										468382,
										468388
									],
									[
										468440,
										468446
									],
									[
										468453,
										468459
									],
									[
										468644,
										468650
									],
									[
										468676,
										468682
									],
									[
										468711,
										468717
									],
									[
										468744,
										468750
									],
									[
										468780,
										468786
									],
									[
										468812,
										468818
									],
									[
										468848,
										468854
									],
									[
										468880,
										468886
									],
									[
										469145,
										469151
									],
									[
										469485,
										469491
									],
									[
										469503,
										469509
									],
									[
										469780,
										469786
									],
									[
										469820,
										469826
									],
									[
										469832,
										469838
									],
									[
										469878,
										469884
									],
									[
										469920,
										469926
									],
									[
										469932,
										469938
									],
									[
										470057,
										470063
									],
									[
										470097,
										470103
									],
									[
										470109,
										470115
									],
									[
										470155,
										470161
									],
									[
										470197,
										470203
									],
									[
										470209,
										470215
									],
									[
										470262,
										470268
									],
									[
										470379,
										470385
									],
									[
										470419,
										470425
									],
									[
										470431,
										470437
									],
									[
										470477,
										470483
									],
									[
										470519,
										470525
									],
									[
										470531,
										470537
									],
									[
										470598,
										470604
									],
									[
										470715,
										470721
									],
									[
										470755,
										470761
									],
									[
										470767,
										470773
									],
									[
										470813,
										470819
									],
									[
										470855,
										470861
									],
									[
										470867,
										470873
									],
									[
										470934,
										470940
									],
									[
										471051,
										471057
									],
									[
										471091,
										471097
									],
									[
										471103,
										471109
									],
									[
										471149,
										471155
									],
									[
										471191,
										471197
									],
									[
										471203,
										471209
									],
									[
										471270,
										471276
									],
									[
										471387,
										471393
									],
									[
										471427,
										471433
									],
									[
										471439,
										471445
									],
									[
										471485,
										471491
									],
									[
										471527,
										471533
									],
									[
										471539,
										471545
									],
									[
										471606,
										471612
									],
									[
										471725,
										471731
									],
									[
										471766,
										471772
									],
									[
										471778,
										471784
									],
									[
										471825,
										471831
									],
									[
										471868,
										471874
									],
									[
										471880,
										471886
									],
									[
										471948,
										471954
									],
									[
										472067,
										472073
									],
									[
										472108,
										472114
									],
									[
										472120,
										472126
									],
									[
										472167,
										472173
									],
									[
										472210,
										472216
									],
									[
										472222,
										472228
									],
									[
										472290,
										472296
									],
									[
										472409,
										472415
									],
									[
										472450,
										472456
									],
									[
										472462,
										472468
									],
									[
										472509,
										472515
									],
									[
										472552,
										472558
									],
									[
										472564,
										472570
									],
									[
										472699,
										472705
									],
									[
										472739,
										472745
									],
									[
										472751,
										472757
									],
									[
										472797,
										472803
									],
									[
										472839,
										472845
									],
									[
										472851,
										472857
									],
									[
										472976,
										472982
									],
									[
										473016,
										473022
									],
									[
										473028,
										473034
									],
									[
										473074,
										473080
									],
									[
										473116,
										473122
									],
									[
										473128,
										473134
									],
									[
										473253,
										473259
									],
									[
										473293,
										473299
									],
									[
										473305,
										473311
									],
									[
										473360,
										473366
									],
									[
										473402,
										473408
									],
									[
										473414,
										473420
									],
									[
										473476,
										473482
									],
									[
										473602,
										473608
									],
									[
										473642,
										473648
									],
									[
										473654,
										473660
									],
									[
										473709,
										473715
									],
									[
										473751,
										473757
									],
									[
										473763,
										473769
									],
									[
										473839,
										473845
									],
									[
										473956,
										473962
									],
									[
										473996,
										474002
									],
									[
										474008,
										474014
									],
									[
										474054,
										474060
									],
									[
										474096,
										474102
									],
									[
										474108,
										474114
									],
									[
										474175,
										474181
									],
									[
										474292,
										474298
									],
									[
										474332,
										474338
									],
									[
										474344,
										474350
									],
									[
										474390,
										474396
									],
									[
										474432,
										474438
									],
									[
										474444,
										474450
									],
									[
										474550,
										474556
									],
									[
										474667,
										474673
									],
									[
										474707,
										474713
									],
									[
										474719,
										474725
									],
									[
										474765,
										474771
									],
									[
										474807,
										474813
									],
									[
										474819,
										474825
									],
									[
										474886,
										474892
									],
									[
										475003,
										475009
									],
									[
										475043,
										475049
									],
									[
										475055,
										475061
									],
									[
										475101,
										475107
									],
									[
										475143,
										475149
									],
									[
										475155,
										475161
									],
									[
										475222,
										475228
									],
									[
										475339,
										475345
									],
									[
										475379,
										475385
									],
									[
										475391,
										475397
									],
									[
										475437,
										475443
									],
									[
										475479,
										475485
									],
									[
										475491,
										475497
									],
									[
										475558,
										475564
									],
									[
										475677,
										475683
									],
									[
										475718,
										475724
									],
									[
										475730,
										475736
									],
									[
										475777,
										475783
									],
									[
										475820,
										475826
									],
									[
										475832,
										475838
									],
									[
										475900,
										475906
									],
									[
										476019,
										476025
									],
									[
										476060,
										476066
									],
									[
										476072,
										476078
									],
									[
										476119,
										476125
									],
									[
										476162,
										476168
									],
									[
										476174,
										476180
									],
									[
										476250,
										476256
									],
									[
										476369,
										476375
									],
									[
										476410,
										476416
									],
									[
										476422,
										476428
									],
									[
										476469,
										476475
									],
									[
										476512,
										476518
									],
									[
										476524,
										476530
									],
									[
										476592,
										476598
									],
									[
										476711,
										476717
									],
									[
										476752,
										476758
									],
									[
										476764,
										476770
									],
									[
										476811,
										476817
									],
									[
										476854,
										476860
									],
									[
										476866,
										476872
									],
									[
										476934,
										476940
									],
									[
										477053,
										477059
									],
									[
										477094,
										477100
									],
									[
										477106,
										477112
									],
									[
										477153,
										477159
									],
									[
										477196,
										477202
									],
									[
										477208,
										477214
									],
									[
										477381,
										477387
									],
									[
										477443,
										477449
									],
									[
										477506,
										477512
									],
									[
										477567,
										477573
									],
									[
										477629,
										477635
									],
									[
										477693,
										477699
									],
									[
										477976,
										477982
									],
									[
										477994,
										478000
									],
									[
										478251,
										478257
									],
									[
										478283,
										478289
									],
									[
										478479,
										478485
									],
									[
										478497,
										478503
									],
									[
										478755,
										478761
									],
									[
										478868,
										478874
									],
									[
										478926,
										478932
									],
									[
										478938,
										478944
									],
									[
										479132,
										479138
									],
									[
										479150,
										479156
									],
									[
										479392,
										479398
									],
									[
										479453,
										479459
									],
									[
										479465,
										479471
									],
									[
										479659,
										479665
									],
									[
										479677,
										479683
									],
									[
										480041,
										480047
									],
									[
										480387,
										480393
									],
									[
										480609,
										480615
									],
									[
										480666,
										480672
									],
									[
										480678,
										480684
									],
									[
										480871,
										480877
									],
									[
										480889,
										480895
									],
									[
										481131,
										481137
									],
									[
										481191,
										481197
									],
									[
										481203,
										481209
									],
									[
										481396,
										481402
									],
									[
										481414,
										481420
									],
									[
										481656,
										481662
									],
									[
										481716,
										481722
									],
									[
										481728,
										481734
									],
									[
										481924,
										481930
									],
									[
										481942,
										481948
									],
									[
										482184,
										482190
									],
									[
										482247,
										482253
									],
									[
										482259,
										482265
									],
									[
										482421,
										482427
									],
									[
										482468,
										482474
									],
									[
										482482,
										482488
									],
									[
										482829,
										482835
									],
									[
										482941,
										482947
									],
									[
										483054,
										483060
									],
									[
										483165,
										483171
									],
									[
										483277,
										483283
									],
									[
										483391,
										483397
									],
									[
										484273,
										484279
									],
									[
										485187,
										485193
									],
									[
										486187,
										486193
									],
									[
										486828,
										486846
									],
									[
										487097,
										487115
									],
									[
										487290,
										487308
									],
									[
										487483,
										487501
									],
									[
										487676,
										487694
									],
									[
										487862,
										487880
									],
									[
										488059,
										488077
									],
									[
										488260,
										488278
									],
									[
										488459,
										488477
									],
									[
										488768,
										488773
									],
									[
										488937,
										488942
									],
									[
										489001,
										489006
									],
									[
										489326,
										489331
									],
									[
										489768,
										489773
									],
									[
										489875,
										489880
									],
									[
										489982,
										489987
									],
									[
										490089,
										490094
									],
									[
										490196,
										490201
									],
									[
										490308,
										490313
									],
									[
										490431,
										490436
									],
									[
										490533,
										490538
									],
									[
										490636,
										490641
									],
									[
										490752,
										490757
									],
									[
										490860,
										490865
									],
									[
										490968,
										490973
									],
									[
										491082,
										491087
									],
									[
										491304,
										491309
									],
									[
										491408,
										491413
									],
									[
										491520,
										491525
									],
									[
										491624,
										491629
									],
									[
										491726,
										491731
									],
									[
										491855,
										491860
									],
									[
										491967,
										491972
									],
									[
										492078,
										492083
									],
									[
										492179,
										492184
									],
									[
										492282,
										492287
									],
									[
										492383,
										492388
									],
									[
										492511,
										492516
									],
									[
										492615,
										492620
									],
									[
										492725,
										492730
									],
									[
										492860,
										492865
									],
									[
										493196,
										493201
									],
									[
										493651,
										493656
									],
									[
										493756,
										493761
									],
									[
										493865,
										493870
									],
									[
										493975,
										493980
									],
									[
										494097,
										494102
									],
									[
										494214,
										494219
									],
									[
										494325,
										494330
									],
									[
										494571,
										494576
									],
									[
										494680,
										494685
									],
									[
										494789,
										494794
									],
									[
										494898,
										494903
									],
									[
										495007,
										495012
									],
									[
										495116,
										495121
									],
									[
										495225,
										495230
									],
									[
										495334,
										495339
									],
									[
										495443,
										495448
									],
									[
										495552,
										495557
									],
									[
										495661,
										495666
									],
									[
										495771,
										495776
									],
									[
										495881,
										495886
									],
									[
										495991,
										495996
									],
									[
										496101,
										496106
									],
									[
										496211,
										496216
									],
									[
										496417,
										496422
									],
									[
										496526,
										496531
									],
									[
										496635,
										496640
									],
									[
										496744,
										496749
									],
									[
										496853,
										496858
									],
									[
										496962,
										496967
									],
									[
										497071,
										497076
									],
									[
										497180,
										497185
									],
									[
										497289,
										497294
									],
									[
										497398,
										497403
									],
									[
										497507,
										497512
									],
									[
										497617,
										497622
									],
									[
										497727,
										497732
									],
									[
										497837,
										497842
									],
									[
										497947,
										497952
									],
									[
										498057,
										498062
									],
									[
										498312,
										498317
									],
									[
										498395,
										498400
									],
									[
										498805,
										498810
									],
									[
										498869,
										498874
									],
									[
										499025,
										499030
									],
									[
										499125,
										499130
									],
									[
										499579,
										499584
									],
									[
										500137,
										500142
									],
									[
										500366,
										500371
									],
									[
										500535,
										500540
									],
									[
										500599,
										500604
									],
									[
										500924,
										500929
									],
									[
										501366,
										501371
									],
									[
										501473,
										501478
									],
									[
										501580,
										501585
									],
									[
										501687,
										501692
									],
									[
										501794,
										501799
									],
									[
										501906,
										501911
									],
									[
										502029,
										502034
									],
									[
										502131,
										502136
									],
									[
										502234,
										502239
									],
									[
										502350,
										502355
									],
									[
										502458,
										502463
									],
									[
										502566,
										502571
									],
									[
										502680,
										502685
									],
									[
										502802,
										502807
									],
									[
										502908,
										502913
									],
									[
										503116,
										503121
									],
									[
										503220,
										503225
									],
									[
										503332,
										503337
									],
									[
										503436,
										503441
									],
									[
										503538,
										503543
									],
									[
										503667,
										503672
									],
									[
										503779,
										503784
									],
									[
										503890,
										503895
									],
									[
										503991,
										503996
									],
									[
										504094,
										504099
									],
									[
										504195,
										504200
									],
									[
										504323,
										504328
									],
									[
										504427,
										504432
									],
									[
										504537,
										504542
									],
									[
										504650,
										504655
									],
									[
										504758,
										504763
									],
									[
										504866,
										504871
									],
									[
										504974,
										504979
									],
									[
										505076,
										505081
									],
									[
										505180,
										505185
									],
									[
										505283,
										505288
									],
									[
										505410,
										505415
									],
									[
										505746,
										505751
									],
									[
										506201,
										506206
									],
									[
										506306,
										506311
									],
									[
										506415,
										506420
									],
									[
										506525,
										506530
									],
									[
										506647,
										506652
									],
									[
										506764,
										506769
									],
									[
										506875,
										506880
									],
									[
										507121,
										507126
									],
									[
										507230,
										507235
									],
									[
										507339,
										507344
									],
									[
										507448,
										507453
									],
									[
										507557,
										507562
									],
									[
										507666,
										507671
									],
									[
										507775,
										507780
									],
									[
										507884,
										507889
									],
									[
										507993,
										507998
									],
									[
										508102,
										508107
									],
									[
										508211,
										508216
									],
									[
										508321,
										508326
									],
									[
										508431,
										508436
									],
									[
										508541,
										508546
									],
									[
										508651,
										508656
									],
									[
										508761,
										508766
									],
									[
										508967,
										508972
									],
									[
										509076,
										509081
									],
									[
										509185,
										509190
									],
									[
										509294,
										509299
									],
									[
										509403,
										509408
									],
									[
										509512,
										509517
									],
									[
										509621,
										509626
									],
									[
										509730,
										509735
									],
									[
										509839,
										509844
									],
									[
										509948,
										509953
									],
									[
										510057,
										510062
									],
									[
										510167,
										510172
									],
									[
										510277,
										510282
									],
									[
										510387,
										510392
									],
									[
										510497,
										510502
									],
									[
										510607,
										510612
									],
									[
										510862,
										510867
									],
									[
										510945,
										510950
									],
									[
										511355,
										511360
									],
									[
										511419,
										511424
									],
									[
										511575,
										511580
									],
									[
										511675,
										511680
									],
									[
										512129,
										512134
									],
									[
										512687,
										512692
									],
									[
										512916,
										512921
									],
									[
										513085,
										513090
									],
									[
										513149,
										513154
									],
									[
										513474,
										513479
									],
									[
										513916,
										513921
									],
									[
										514023,
										514028
									],
									[
										514130,
										514135
									],
									[
										514237,
										514242
									],
									[
										514344,
										514349
									],
									[
										514456,
										514461
									],
									[
										514579,
										514584
									],
									[
										514681,
										514686
									],
									[
										514784,
										514789
									],
									[
										515006,
										515011
									],
									[
										515110,
										515115
									],
									[
										515222,
										515227
									],
									[
										515326,
										515331
									],
									[
										515428,
										515433
									],
									[
										515557,
										515562
									],
									[
										515669,
										515674
									],
									[
										515925,
										515930
									],
									[
										516380,
										516385
									],
									[
										516485,
										516490
									],
									[
										516594,
										516599
									],
									[
										516704,
										516709
									],
									[
										516826,
										516831
									],
									[
										516943,
										516948
									],
									[
										517054,
										517059
									],
									[
										517300,
										517305
									],
									[
										517409,
										517414
									],
									[
										517518,
										517523
									],
									[
										517627,
										517632
									],
									[
										517736,
										517741
									],
									[
										517845,
										517850
									],
									[
										517954,
										517959
									],
									[
										518063,
										518068
									],
									[
										518172,
										518177
									],
									[
										518281,
										518286
									],
									[
										518390,
										518395
									],
									[
										518500,
										518505
									],
									[
										518610,
										518615
									],
									[
										518720,
										518725
									],
									[
										518830,
										518835
									],
									[
										518940,
										518945
									],
									[
										519146,
										519151
									],
									[
										519255,
										519260
									],
									[
										519364,
										519369
									],
									[
										519473,
										519478
									],
									[
										519582,
										519587
									],
									[
										519691,
										519696
									],
									[
										519800,
										519805
									],
									[
										519909,
										519914
									],
									[
										520018,
										520023
									],
									[
										520127,
										520132
									],
									[
										520236,
										520241
									],
									[
										520346,
										520351
									],
									[
										520456,
										520461
									],
									[
										520566,
										520571
									],
									[
										520676,
										520681
									],
									[
										520786,
										520791
									],
									[
										521041,
										521046
									],
									[
										521124,
										521129
									],
									[
										521534,
										521539
									],
									[
										521598,
										521603
									],
									[
										521754,
										521759
									],
									[
										521854,
										521859
									],
									[
										522308,
										522313
									],
									[
										522866,
										522871
									],
									[
										523095,
										523100
									],
									[
										523264,
										523269
									],
									[
										523328,
										523333
									],
									[
										523653,
										523658
									],
									[
										524095,
										524100
									],
									[
										524202,
										524207
									],
									[
										524309,
										524314
									],
									[
										524416,
										524421
									],
									[
										524523,
										524528
									],
									[
										524635,
										524640
									],
									[
										524758,
										524763
									],
									[
										524860,
										524865
									],
									[
										524963,
										524968
									],
									[
										525085,
										525090
									],
									[
										525307,
										525312
									],
									[
										525411,
										525416
									],
									[
										525523,
										525528
									],
									[
										525627,
										525632
									],
									[
										525729,
										525734
									],
									[
										525858,
										525863
									],
									[
										525970,
										525975
									],
									[
										526081,
										526086
									],
									[
										526182,
										526187
									],
									[
										526285,
										526290
									],
									[
										526386,
										526391
									],
									[
										526642,
										526647
									],
									[
										527097,
										527102
									],
									[
										527202,
										527207
									],
									[
										527311,
										527316
									],
									[
										527421,
										527426
									],
									[
										527543,
										527548
									],
									[
										527660,
										527665
									],
									[
										527771,
										527776
									],
									[
										528017,
										528022
									],
									[
										528126,
										528131
									],
									[
										528235,
										528240
									],
									[
										528344,
										528349
									],
									[
										528453,
										528458
									],
									[
										528562,
										528567
									],
									[
										528671,
										528676
									],
									[
										528780,
										528785
									],
									[
										528889,
										528894
									],
									[
										528998,
										529003
									],
									[
										529107,
										529112
									],
									[
										529217,
										529222
									],
									[
										529327,
										529332
									],
									[
										529437,
										529442
									],
									[
										529547,
										529552
									],
									[
										529657,
										529662
									],
									[
										529863,
										529868
									],
									[
										529972,
										529977
									],
									[
										530081,
										530086
									],
									[
										530190,
										530195
									],
									[
										530299,
										530304
									],
									[
										530408,
										530413
									],
									[
										530517,
										530522
									],
									[
										530626,
										530631
									],
									[
										530735,
										530740
									],
									[
										530844,
										530849
									],
									[
										530953,
										530958
									],
									[
										531063,
										531068
									],
									[
										531173,
										531178
									],
									[
										531283,
										531288
									],
									[
										531393,
										531398
									],
									[
										531503,
										531508
									],
									[
										531758,
										531763
									],
									[
										531841,
										531846
									],
									[
										532251,
										532256
									],
									[
										532315,
										532320
									],
									[
										532471,
										532476
									],
									[
										532571,
										532576
									],
									[
										533025,
										533030
									],
									[
										533583,
										533588
									],
									[
										533812,
										533817
									],
									[
										533981,
										533986
									],
									[
										534045,
										534050
									],
									[
										534370,
										534375
									],
									[
										534812,
										534817
									],
									[
										534919,
										534924
									],
									[
										535026,
										535031
									],
									[
										535133,
										535138
									],
									[
										535240,
										535245
									],
									[
										535352,
										535357
									],
									[
										535475,
										535480
									],
									[
										535577,
										535582
									],
									[
										535680,
										535685
									],
									[
										535802,
										535807
									],
									[
										535916,
										535921
									],
									[
										536022,
										536027
									],
									[
										536238,
										536243
									],
									[
										536342,
										536347
									],
									[
										536454,
										536459
									],
									[
										536558,
										536563
									],
									[
										536660,
										536665
									],
									[
										536789,
										536794
									],
									[
										536901,
										536906
									],
									[
										537012,
										537017
									],
									[
										537113,
										537118
									],
									[
										537216,
										537221
									],
									[
										537317,
										537322
									],
									[
										537437,
										537442
									],
									[
										537541,
										537546
									],
									[
										537645,
										537650
									],
									[
										537747,
										537752
									],
									[
										537850,
										537855
									],
									[
										537953,
										537958
									],
									[
										538095,
										538100
									],
									[
										538431,
										538436
									],
									[
										538886,
										538891
									],
									[
										538991,
										538996
									],
									[
										539100,
										539105
									],
									[
										539210,
										539215
									],
									[
										539332,
										539337
									],
									[
										539449,
										539454
									],
									[
										539560,
										539565
									],
									[
										539806,
										539811
									],
									[
										539915,
										539920
									],
									[
										540024,
										540029
									],
									[
										540133,
										540138
									],
									[
										540242,
										540247
									],
									[
										540351,
										540356
									],
									[
										540460,
										540465
									],
									[
										540569,
										540574
									],
									[
										540678,
										540683
									],
									[
										540787,
										540792
									],
									[
										540896,
										540901
									],
									[
										541006,
										541011
									],
									[
										541116,
										541121
									],
									[
										541226,
										541231
									],
									[
										541336,
										541341
									],
									[
										541446,
										541451
									],
									[
										541652,
										541657
									],
									[
										541761,
										541766
									],
									[
										541870,
										541875
									],
									[
										541979,
										541984
									],
									[
										542088,
										542093
									],
									[
										542197,
										542202
									],
									[
										542306,
										542311
									],
									[
										542415,
										542420
									],
									[
										542524,
										542529
									],
									[
										542633,
										542638
									],
									[
										542742,
										542747
									],
									[
										542852,
										542857
									],
									[
										542962,
										542967
									],
									[
										543072,
										543077
									],
									[
										543182,
										543187
									],
									[
										543292,
										543297
									],
									[
										543547,
										543552
									],
									[
										543630,
										543635
									],
									[
										544040,
										544045
									],
									[
										544104,
										544109
									],
									[
										544260,
										544265
									],
									[
										544360,
										544365
									],
									[
										544814,
										544819
									],
									[
										545372,
										545377
									],
									[
										545601,
										545606
									],
									[
										545770,
										545775
									],
									[
										545834,
										545839
									],
									[
										546159,
										546164
									],
									[
										546601,
										546606
									],
									[
										546708,
										546713
									],
									[
										546815,
										546820
									],
									[
										546922,
										546927
									],
									[
										547029,
										547034
									],
									[
										547141,
										547146
									],
									[
										547261,
										547266
									],
									[
										547376,
										547381
									],
									[
										547478,
										547483
									],
									[
										547581,
										547586
									],
									[
										547703,
										547708
									],
									[
										547817,
										547822
									],
									[
										547923,
										547928
									],
									[
										548046,
										548051
									],
									[
										548154,
										548159
									],
									[
										548262,
										548267
									],
									[
										548462,
										548467
									],
									[
										548566,
										548571
									],
									[
										548678,
										548683
									],
									[
										548782,
										548787
									],
									[
										548884,
										548889
									],
									[
										549013,
										549018
									],
									[
										549125,
										549130
									],
									[
										549236,
										549241
									],
									[
										549337,
										549342
									],
									[
										549440,
										549445
									],
									[
										549541,
										549546
									],
									[
										549661,
										549666
									],
									[
										549765,
										549770
									],
									[
										549869,
										549874
									],
									[
										549971,
										549976
									],
									[
										550074,
										550079
									],
									[
										550177,
										550182
									],
									[
										550318,
										550323
									],
									[
										550427,
										550432
									],
									[
										550536,
										550541
									],
									[
										550646,
										550651
									],
									[
										550982,
										550987
									],
									[
										551437,
										551442
									],
									[
										551542,
										551547
									],
									[
										551651,
										551656
									],
									[
										551761,
										551766
									],
									[
										551883,
										551888
									],
									[
										552000,
										552005
									],
									[
										552111,
										552116
									],
									[
										552357,
										552362
									],
									[
										552466,
										552471
									],
									[
										552575,
										552580
									],
									[
										552684,
										552689
									],
									[
										552793,
										552798
									],
									[
										552902,
										552907
									],
									[
										553011,
										553016
									],
									[
										553120,
										553125
									],
									[
										553229,
										553234
									],
									[
										553338,
										553343
									],
									[
										553447,
										553452
									],
									[
										553557,
										553562
									],
									[
										553667,
										553672
									],
									[
										553777,
										553782
									],
									[
										553887,
										553892
									],
									[
										553997,
										554002
									],
									[
										554203,
										554208
									],
									[
										554312,
										554317
									],
									[
										554421,
										554426
									],
									[
										554530,
										554535
									],
									[
										554639,
										554644
									],
									[
										554748,
										554753
									],
									[
										554857,
										554862
									],
									[
										554966,
										554971
									],
									[
										555075,
										555080
									],
									[
										555184,
										555189
									],
									[
										555293,
										555298
									],
									[
										555403,
										555408
									],
									[
										555513,
										555518
									],
									[
										555623,
										555628
									],
									[
										555733,
										555738
									],
									[
										555843,
										555848
									],
									[
										556098,
										556103
									],
									[
										556181,
										556186
									],
									[
										556591,
										556596
									],
									[
										556655,
										556660
									],
									[
										556811,
										556816
									],
									[
										556911,
										556916
									],
									[
										557365,
										557370
									],
									[
										557923,
										557928
									],
									[
										558152,
										558157
									],
									[
										558321,
										558326
									],
									[
										558385,
										558390
									],
									[
										558710,
										558715
									],
									[
										559152,
										559157
									],
									[
										559259,
										559264
									],
									[
										559366,
										559371
									],
									[
										559473,
										559478
									],
									[
										559580,
										559585
									],
									[
										559692,
										559697
									],
									[
										559815,
										559820
									],
									[
										559917,
										559922
									],
									[
										560020,
										560025
									],
									[
										560242,
										560247
									],
									[
										560346,
										560351
									],
									[
										560458,
										560463
									],
									[
										560562,
										560567
									],
									[
										560664,
										560669
									],
									[
										560793,
										560798
									],
									[
										560905,
										560910
									],
									[
										561027,
										561032
									],
									[
										561283,
										561288
									],
									[
										561738,
										561743
									],
									[
										561843,
										561848
									],
									[
										561952,
										561957
									],
									[
										562062,
										562067
									],
									[
										562184,
										562189
									],
									[
										562301,
										562306
									],
									[
										562412,
										562417
									],
									[
										562658,
										562663
									],
									[
										562767,
										562772
									],
									[
										562876,
										562881
									],
									[
										562985,
										562990
									],
									[
										563094,
										563099
									],
									[
										563203,
										563208
									],
									[
										563312,
										563317
									],
									[
										563421,
										563426
									],
									[
										563530,
										563535
									],
									[
										563639,
										563644
									],
									[
										563748,
										563753
									],
									[
										563858,
										563863
									],
									[
										563968,
										563973
									],
									[
										564078,
										564083
									],
									[
										564188,
										564193
									],
									[
										564298,
										564303
									],
									[
										564504,
										564509
									],
									[
										564613,
										564618
									],
									[
										564722,
										564727
									],
									[
										564831,
										564836
									],
									[
										564940,
										564945
									],
									[
										565049,
										565054
									],
									[
										565158,
										565163
									],
									[
										565267,
										565272
									],
									[
										565376,
										565381
									],
									[
										565485,
										565490
									],
									[
										565594,
										565599
									],
									[
										565704,
										565709
									],
									[
										565814,
										565819
									],
									[
										565924,
										565929
									],
									[
										566034,
										566039
									],
									[
										566144,
										566149
									],
									[
										566399,
										566404
									],
									[
										566482,
										566487
									],
									[
										566892,
										566897
									],
									[
										566956,
										566961
									],
									[
										567112,
										567117
									],
									[
										567212,
										567217
									],
									[
										567666,
										567671
									],
									[
										568131,
										568136
									],
									[
										568626,
										568631
									],
									[
										568688,
										568693
									],
									[
										569192,
										569197
									],
									[
										569258,
										569263
									],
									[
										569800,
										569805
									],
									[
										570029,
										570034
									],
									[
										570198,
										570203
									],
									[
										570262,
										570267
									],
									[
										570587,
										570592
									],
									[
										571029,
										571034
									],
									[
										571136,
										571141
									],
									[
										571243,
										571248
									],
									[
										571350,
										571355
									],
									[
										571457,
										571462
									],
									[
										571569,
										571574
									],
									[
										571692,
										571697
									],
									[
										571794,
										571799
									],
									[
										571897,
										571902
									],
									[
										572119,
										572124
									],
									[
										572223,
										572228
									],
									[
										572335,
										572340
									],
									[
										572439,
										572444
									],
									[
										572541,
										572546
									],
									[
										572670,
										572675
									],
									[
										572782,
										572787
									],
									[
										572893,
										572898
									],
									[
										572994,
										572999
									],
									[
										573097,
										573102
									],
									[
										573198,
										573203
									],
									[
										573312,
										573317
									],
									[
										573568,
										573573
									],
									[
										574023,
										574028
									],
									[
										574128,
										574133
									],
									[
										574237,
										574242
									],
									[
										574347,
										574352
									],
									[
										574469,
										574474
									],
									[
										574586,
										574591
									],
									[
										574697,
										574702
									],
									[
										574943,
										574948
									],
									[
										575052,
										575057
									],
									[
										575161,
										575166
									],
									[
										575270,
										575275
									],
									[
										575379,
										575384
									],
									[
										575488,
										575493
									],
									[
										575597,
										575602
									],
									[
										575706,
										575711
									],
									[
										575815,
										575820
									],
									[
										575924,
										575929
									],
									[
										576033,
										576038
									],
									[
										576143,
										576148
									],
									[
										576253,
										576258
									],
									[
										576363,
										576368
									],
									[
										576473,
										576478
									],
									[
										576583,
										576588
									],
									[
										576789,
										576794
									],
									[
										576898,
										576903
									],
									[
										577007,
										577012
									],
									[
										577116,
										577121
									],
									[
										577225,
										577230
									],
									[
										577334,
										577339
									],
									[
										577443,
										577448
									],
									[
										577552,
										577557
									],
									[
										577661,
										577666
									],
									[
										577770,
										577775
									],
									[
										577879,
										577884
									],
									[
										577989,
										577994
									],
									[
										578099,
										578104
									],
									[
										578209,
										578214
									],
									[
										578319,
										578324
									],
									[
										578429,
										578434
									],
									[
										578684,
										578689
									],
									[
										578767,
										578772
									],
									[
										579177,
										579182
									],
									[
										579241,
										579246
									],
									[
										579397,
										579402
									],
									[
										579497,
										579502
									],
									[
										579951,
										579956
									],
									[
										580416,
										580421
									],
									[
										580911,
										580916
									],
									[
										580973,
										580978
									],
									[
										581477,
										581482
									],
									[
										581543,
										581548
									],
									[
										582085,
										582090
									],
									[
										582314,
										582319
									],
									[
										582483,
										582488
									],
									[
										582547,
										582552
									],
									[
										582872,
										582877
									],
									[
										583314,
										583319
									],
									[
										583421,
										583426
									],
									[
										583528,
										583533
									],
									[
										583635,
										583640
									],
									[
										583742,
										583747
									],
									[
										583854,
										583859
									],
									[
										583974,
										583979
									],
									[
										584089,
										584094
									],
									[
										584191,
										584196
									],
									[
										584294,
										584299
									],
									[
										584516,
										584521
									],
									[
										584620,
										584625
									],
									[
										584732,
										584737
									],
									[
										584836,
										584841
									],
									[
										584938,
										584943
									],
									[
										585047,
										585052
									],
									[
										585168,
										585173
									],
									[
										585280,
										585285
									],
									[
										585402,
										585407
									],
									[
										585658,
										585663
									],
									[
										586113,
										586118
									],
									[
										586218,
										586223
									],
									[
										586327,
										586332
									],
									[
										586437,
										586442
									],
									[
										586559,
										586564
									],
									[
										586676,
										586681
									],
									[
										586787,
										586792
									],
									[
										587033,
										587038
									],
									[
										587142,
										587147
									],
									[
										587251,
										587256
									],
									[
										587360,
										587365
									],
									[
										587469,
										587474
									],
									[
										587578,
										587583
									],
									[
										587687,
										587692
									],
									[
										587796,
										587801
									],
									[
										587905,
										587910
									],
									[
										588014,
										588019
									],
									[
										588123,
										588128
									],
									[
										588233,
										588238
									],
									[
										588343,
										588348
									],
									[
										588453,
										588458
									],
									[
										588563,
										588568
									],
									[
										588673,
										588678
									],
									[
										588879,
										588884
									],
									[
										588988,
										588993
									],
									[
										589097,
										589102
									],
									[
										589206,
										589211
									],
									[
										589315,
										589320
									],
									[
										589424,
										589429
									],
									[
										589533,
										589538
									],
									[
										589642,
										589647
									],
									[
										589751,
										589756
									],
									[
										589860,
										589865
									],
									[
										589969,
										589974
									],
									[
										590079,
										590084
									],
									[
										590189,
										590194
									],
									[
										590299,
										590304
									],
									[
										590409,
										590414
									],
									[
										590519,
										590524
									],
									[
										590774,
										590779
									],
									[
										590857,
										590862
									],
									[
										591267,
										591272
									],
									[
										591331,
										591336
									],
									[
										591487,
										591492
									],
									[
										591587,
										591592
									],
									[
										592041,
										592046
									],
									[
										592506,
										592511
									],
									[
										593001,
										593006
									],
									[
										593063,
										593068
									],
									[
										593567,
										593572
									],
									[
										593633,
										593638
									],
									[
										594132,
										594137
									],
									[
										594215,
										594220
									],
									[
										594655,
										594660
									],
									[
										594884,
										594889
									],
									[
										595053,
										595058
									],
									[
										595117,
										595122
									],
									[
										595442,
										595447
									],
									[
										595884,
										595889
									],
									[
										595991,
										595996
									],
									[
										596098,
										596103
									],
									[
										596205,
										596210
									],
									[
										596312,
										596317
									],
									[
										596424,
										596429
									],
									[
										596544,
										596549
									],
									[
										596659,
										596664
									],
									[
										596761,
										596766
									],
									[
										596864,
										596869
									],
									[
										596986,
										596991
									],
									[
										597208,
										597213
									],
									[
										597312,
										597317
									],
									[
										597424,
										597429
									],
									[
										597528,
										597533
									],
									[
										597630,
										597635
									],
									[
										597739,
										597744
									],
									[
										597860,
										597865
									],
									[
										597972,
										597977
									],
									[
										598083,
										598088
									],
									[
										598184,
										598189
									],
									[
										598287,
										598292
									],
									[
										598388,
										598393
									],
									[
										598502,
										598507
									],
									[
										598758,
										598763
									],
									[
										599213,
										599218
									],
									[
										599318,
										599323
									],
									[
										599427,
										599432
									],
									[
										599537,
										599542
									],
									[
										599659,
										599664
									],
									[
										599776,
										599781
									],
									[
										599887,
										599892
									],
									[
										600133,
										600138
									],
									[
										600242,
										600247
									],
									[
										600351,
										600356
									],
									[
										600460,
										600465
									],
									[
										600569,
										600574
									],
									[
										600678,
										600683
									],
									[
										600787,
										600792
									],
									[
										600896,
										600901
									],
									[
										601005,
										601010
									],
									[
										601114,
										601119
									],
									[
										601223,
										601228
									],
									[
										601333,
										601338
									],
									[
										601443,
										601448
									],
									[
										601553,
										601558
									],
									[
										601663,
										601668
									],
									[
										601773,
										601778
									],
									[
										601979,
										601984
									],
									[
										602088,
										602093
									],
									[
										602197,
										602202
									],
									[
										602306,
										602311
									],
									[
										602415,
										602420
									],
									[
										602524,
										602529
									],
									[
										602633,
										602638
									],
									[
										602742,
										602747
									],
									[
										602851,
										602856
									],
									[
										602960,
										602965
									],
									[
										603069,
										603074
									],
									[
										603179,
										603184
									],
									[
										603289,
										603294
									],
									[
										603399,
										603404
									],
									[
										603509,
										603514
									],
									[
										603619,
										603624
									],
									[
										603874,
										603879
									],
									[
										603957,
										603962
									],
									[
										604367,
										604372
									],
									[
										604431,
										604436
									],
									[
										604587,
										604592
									],
									[
										604687,
										604692
									],
									[
										605141,
										605146
									],
									[
										605606,
										605611
									],
									[
										606101,
										606106
									],
									[
										606163,
										606168
									],
									[
										606667,
										606672
									],
									[
										606733,
										606738
									],
									[
										607232,
										607237
									],
									[
										607315,
										607320
									],
									[
										607755,
										607760
									],
									[
										607984,
										607989
									],
									[
										608153,
										608158
									],
									[
										608217,
										608222
									],
									[
										608542,
										608547
									],
									[
										608984,
										608989
									],
									[
										609091,
										609096
									],
									[
										609198,
										609203
									],
									[
										609305,
										609310
									],
									[
										609412,
										609417
									],
									[
										609524,
										609529
									],
									[
										609644,
										609649
									],
									[
										609759,
										609764
									],
									[
										609861,
										609866
									],
									[
										609964,
										609969
									],
									[
										610086,
										610091
									],
									[
										610200,
										610205
									],
									[
										610306,
										610311
									],
									[
										610412,
										610417
									],
									[
										610522,
										610527
									],
									[
										610738,
										610743
									],
									[
										610842,
										610847
									],
									[
										610954,
										610959
									],
									[
										611058,
										611063
									],
									[
										611160,
										611165
									],
									[
										611269,
										611274
									],
									[
										611390,
										611395
									],
									[
										611502,
										611507
									],
									[
										611613,
										611618
									],
									[
										611714,
										611719
									],
									[
										611817,
										611822
									],
									[
										611918,
										611923
									],
									[
										612032,
										612037
									],
									[
										612144,
										612149
									],
									[
										612248,
										612253
									],
									[
										612352,
										612357
									],
									[
										612454,
										612459
									],
									[
										612557,
										612562
									],
									[
										612660,
										612665
									],
									[
										612802,
										612807
									],
									[
										613138,
										613143
									],
									[
										613593,
										613598
									],
									[
										613698,
										613703
									],
									[
										613807,
										613812
									],
									[
										613917,
										613922
									],
									[
										614039,
										614044
									],
									[
										614156,
										614161
									],
									[
										614267,
										614272
									],
									[
										614513,
										614518
									],
									[
										614622,
										614627
									],
									[
										614731,
										614736
									],
									[
										614840,
										614845
									],
									[
										614949,
										614954
									],
									[
										615058,
										615063
									],
									[
										615167,
										615172
									],
									[
										615276,
										615281
									],
									[
										615385,
										615390
									],
									[
										615494,
										615499
									],
									[
										615603,
										615608
									],
									[
										615713,
										615718
									],
									[
										615823,
										615828
									],
									[
										615933,
										615938
									],
									[
										616043,
										616048
									],
									[
										616153,
										616158
									],
									[
										616359,
										616364
									],
									[
										616468,
										616473
									],
									[
										616577,
										616582
									],
									[
										616686,
										616691
									],
									[
										616795,
										616800
									],
									[
										616904,
										616909
									],
									[
										617013,
										617018
									],
									[
										617122,
										617127
									],
									[
										617231,
										617236
									],
									[
										617340,
										617345
									],
									[
										617449,
										617454
									],
									[
										617559,
										617564
									],
									[
										617669,
										617674
									],
									[
										617779,
										617784
									],
									[
										617889,
										617894
									],
									[
										617999,
										618004
									],
									[
										618254,
										618259
									],
									[
										618337,
										618342
									],
									[
										618747,
										618752
									],
									[
										618811,
										618816
									],
									[
										618967,
										618972
									],
									[
										619067,
										619072
									],
									[
										619521,
										619526
									],
									[
										619986,
										619991
									],
									[
										620481,
										620486
									],
									[
										620543,
										620548
									],
									[
										621047,
										621052
									],
									[
										621113,
										621118
									],
									[
										621612,
										621617
									],
									[
										621695,
										621700
									],
									[
										622135,
										622140
									],
									[
										622364,
										622369
									],
									[
										622533,
										622538
									],
									[
										622597,
										622602
									],
									[
										622922,
										622927
									],
									[
										623364,
										623369
									],
									[
										623471,
										623476
									],
									[
										623578,
										623583
									],
									[
										623685,
										623690
									],
									[
										623792,
										623797
									],
									[
										623904,
										623909
									],
									[
										624024,
										624029
									],
									[
										624139,
										624144
									],
									[
										624241,
										624246
									],
									[
										624344,
										624349
									],
									[
										624466,
										624471
									],
									[
										624580,
										624585
									],
									[
										624686,
										624691
									],
									[
										624792,
										624797
									],
									[
										624902,
										624907
									],
									[
										625025,
										625030
									],
									[
										625133,
										625138
									],
									[
										625241,
										625246
									],
									[
										625441,
										625446
									],
									[
										625545,
										625550
									],
									[
										625657,
										625662
									],
									[
										625761,
										625766
									],
									[
										625863,
										625868
									],
									[
										625972,
										625977
									],
									[
										626093,
										626098
									],
									[
										626205,
										626210
									],
									[
										626316,
										626321
									],
									[
										626417,
										626422
									],
									[
										626520,
										626525
									],
									[
										626621,
										626626
									],
									[
										626735,
										626740
									],
									[
										626847,
										626852
									],
									[
										626951,
										626956
									],
									[
										627055,
										627060
									],
									[
										627157,
										627162
									],
									[
										627260,
										627265
									],
									[
										627363,
										627368
									],
									[
										627504,
										627509
									],
									[
										627613,
										627618
									],
									[
										627722,
										627727
									],
									[
										627832,
										627837
									],
									[
										628168,
										628173
									],
									[
										628623,
										628628
									],
									[
										628728,
										628733
									],
									[
										628837,
										628842
									],
									[
										628947,
										628952
									],
									[
										629069,
										629074
									],
									[
										629186,
										629191
									],
									[
										629297,
										629302
									],
									[
										629543,
										629548
									],
									[
										629652,
										629657
									],
									[
										629761,
										629766
									],
									[
										629870,
										629875
									],
									[
										629979,
										629984
									],
									[
										630088,
										630093
									],
									[
										630197,
										630202
									],
									[
										630306,
										630311
									],
									[
										630415,
										630420
									],
									[
										630524,
										630529
									],
									[
										630633,
										630638
									],
									[
										630743,
										630748
									],
									[
										630853,
										630858
									],
									[
										630963,
										630968
									],
									[
										631073,
										631078
									],
									[
										631183,
										631188
									],
									[
										631389,
										631394
									],
									[
										631498,
										631503
									],
									[
										631607,
										631612
									],
									[
										631716,
										631721
									],
									[
										631825,
										631830
									],
									[
										631934,
										631939
									],
									[
										632043,
										632048
									],
									[
										632152,
										632157
									],
									[
										632261,
										632266
									],
									[
										632370,
										632375
									],
									[
										632479,
										632484
									],
									[
										632589,
										632594
									],
									[
										632699,
										632704
									],
									[
										632809,
										632814
									],
									[
										632919,
										632924
									],
									[
										633029,
										633034
									],
									[
										633284,
										633289
									],
									[
										633367,
										633372
									],
									[
										633777,
										633782
									],
									[
										633841,
										633846
									],
									[
										633997,
										634002
									],
									[
										634097,
										634102
									],
									[
										634551,
										634556
									],
									[
										635016,
										635021
									],
									[
										635511,
										635516
									],
									[
										635573,
										635578
									],
									[
										636077,
										636082
									],
									[
										636143,
										636148
									],
									[
										636642,
										636647
									],
									[
										636725,
										636730
									],
									[
										637165,
										637170
									],
									[
										637394,
										637399
									],
									[
										637734,
										637739
									],
									[
										638154,
										638159
									],
									[
										638218,
										638223
									],
									[
										638543,
										638548
									],
									[
										638985,
										638990
									],
									[
										639092,
										639097
									],
									[
										639199,
										639204
									],
									[
										639306,
										639311
									],
									[
										639413,
										639418
									],
									[
										639525,
										639530
									],
									[
										639645,
										639650
									],
									[
										639760,
										639765
									],
									[
										639862,
										639867
									],
									[
										639965,
										639970
									],
									[
										640087,
										640092
									],
									[
										640309,
										640314
									],
									[
										640413,
										640418
									],
									[
										640525,
										640530
									],
									[
										640629,
										640634
									],
									[
										640731,
										640736
									],
									[
										640840,
										640845
									],
									[
										640961,
										640966
									],
									[
										641073,
										641078
									],
									[
										641184,
										641189
									],
									[
										641285,
										641290
									],
									[
										641388,
										641393
									],
									[
										641489,
										641494
									],
									[
										641609,
										641614
									],
									[
										641713,
										641718
									],
									[
										641817,
										641822
									],
									[
										641919,
										641924
									],
									[
										642022,
										642027
									],
									[
										642125,
										642130
									],
									[
										642250,
										642255
									],
									[
										642368,
										642373
									],
									[
										642704,
										642709
									],
									[
										643159,
										643164
									],
									[
										643264,
										643269
									],
									[
										643373,
										643378
									],
									[
										643483,
										643488
									],
									[
										643605,
										643610
									],
									[
										643722,
										643727
									],
									[
										643833,
										643838
									],
									[
										644041,
										644046
									],
									[
										644362,
										644367
									],
									[
										644471,
										644476
									],
									[
										644580,
										644585
									],
									[
										644689,
										644694
									],
									[
										644798,
										644803
									],
									[
										644907,
										644912
									],
									[
										645016,
										645021
									],
									[
										645125,
										645130
									],
									[
										645234,
										645239
									],
									[
										645343,
										645348
									],
									[
										645452,
										645457
									],
									[
										645562,
										645567
									],
									[
										645672,
										645677
									],
									[
										645782,
										645787
									],
									[
										645892,
										645897
									],
									[
										646002,
										646007
									],
									[
										646208,
										646213
									],
									[
										646317,
										646322
									],
									[
										646426,
										646431
									],
									[
										646535,
										646540
									],
									[
										646644,
										646649
									],
									[
										646753,
										646758
									],
									[
										646862,
										646867
									],
									[
										646971,
										646976
									],
									[
										647080,
										647085
									],
									[
										647189,
										647194
									],
									[
										647298,
										647303
									],
									[
										647408,
										647413
									],
									[
										647518,
										647523
									],
									[
										647628,
										647633
									],
									[
										647738,
										647743
									],
									[
										647848,
										647853
									],
									[
										648103,
										648108
									],
									[
										648186,
										648191
									],
									[
										648596,
										648601
									],
									[
										648660,
										648665
									],
									[
										648816,
										648821
									],
									[
										648916,
										648921
									],
									[
										649370,
										649375
									],
									[
										649885,
										649890
									],
									[
										649968,
										649973
									],
									[
										650408,
										650413
									],
									[
										650717,
										650722
									],
									[
										650823,
										650828
									],
									[
										650938,
										650943
									],
									[
										651456,
										651461
									],
									[
										652016,
										652021
									],
									[
										652581,
										652586
									],
									[
										652829,
										652834
									],
									[
										653169,
										653174
									],
									[
										653589,
										653594
									],
									[
										653653,
										653658
									],
									[
										653978,
										653983
									],
									[
										654420,
										654425
									],
									[
										654527,
										654532
									],
									[
										654634,
										654639
									],
									[
										654741,
										654746
									],
									[
										654848,
										654853
									],
									[
										654960,
										654965
									],
									[
										655080,
										655085
									],
									[
										655195,
										655200
									],
									[
										655297,
										655302
									],
									[
										655400,
										655405
									],
									[
										655522,
										655527
									],
									[
										655744,
										655749
									],
									[
										655848,
										655853
									],
									[
										655960,
										655965
									],
									[
										656064,
										656069
									],
									[
										656166,
										656171
									],
									[
										656275,
										656280
									],
									[
										656396,
										656401
									],
									[
										656508,
										656513
									],
									[
										656619,
										656624
									],
									[
										656720,
										656725
									],
									[
										656823,
										656828
									],
									[
										656924,
										656929
									],
									[
										657044,
										657049
									],
									[
										657148,
										657153
									],
									[
										657252,
										657257
									],
									[
										657354,
										657359
									],
									[
										657457,
										657462
									],
									[
										657560,
										657565
									],
									[
										657685,
										657690
									],
									[
										657803,
										657808
									],
									[
										658139,
										658144
									],
									[
										658594,
										658599
									],
									[
										658699,
										658704
									],
									[
										658808,
										658813
									],
									[
										658918,
										658923
									],
									[
										659040,
										659045
									],
									[
										659157,
										659162
									],
									[
										659268,
										659273
									],
									[
										659476,
										659481
									],
									[
										659585,
										659590
									],
									[
										659906,
										659911
									],
									[
										660015,
										660020
									],
									[
										660124,
										660129
									],
									[
										660233,
										660238
									],
									[
										660342,
										660347
									],
									[
										660451,
										660456
									],
									[
										660560,
										660565
									],
									[
										660669,
										660674
									],
									[
										660778,
										660783
									],
									[
										660887,
										660892
									],
									[
										660996,
										661001
									],
									[
										661106,
										661111
									],
									[
										661216,
										661221
									],
									[
										661326,
										661331
									],
									[
										661436,
										661441
									],
									[
										661546,
										661551
									],
									[
										661752,
										661757
									],
									[
										661861,
										661866
									],
									[
										661970,
										661975
									],
									[
										662079,
										662084
									],
									[
										662188,
										662193
									],
									[
										662297,
										662302
									],
									[
										662406,
										662411
									],
									[
										662515,
										662520
									],
									[
										662624,
										662629
									],
									[
										662733,
										662738
									],
									[
										662842,
										662847
									],
									[
										662952,
										662957
									],
									[
										663062,
										663067
									],
									[
										663172,
										663177
									],
									[
										663282,
										663287
									],
									[
										663392,
										663397
									],
									[
										663647,
										663652
									],
									[
										663730,
										663735
									],
									[
										664140,
										664145
									],
									[
										664204,
										664209
									],
									[
										664360,
										664365
									],
									[
										664460,
										664465
									],
									[
										664914,
										664919
									],
									[
										665429,
										665434
									],
									[
										665512,
										665517
									],
									[
										665952,
										665957
									],
									[
										666250,
										666255
									],
									[
										666644,
										666649
									],
									[
										666821,
										666826
									],
									[
										667166,
										667171
									],
									[
										667541,
										667546
									],
									[
										668077,
										668082
									],
									[
										668532,
										668537
									],
									[
										668638,
										668643
									],
									[
										668753,
										668758
									],
									[
										669271,
										669276
									],
									[
										669831,
										669836
									],
									[
										670396,
										670401
									],
									[
										670643,
										670648
									],
									[
										670671,
										670676
									],
									[
										670964,
										670969
									],
									[
										671277,
										671282
									],
									[
										671632,
										671637
									],
									[
										671842,
										671847
									],
									[
										671871,
										671876
									],
									[
										671900,
										671905
									],
									[
										671932,
										671937
									],
									[
										672073,
										672078
									],
									[
										672090,
										672095
									],
									[
										672175,
										672180
									],
									[
										672603,
										672608
									],
									[
										672887,
										672892
									],
									[
										673299,
										673304
									],
									[
										673411,
										673416
									],
									[
										673460,
										673465
									],
									[
										673585,
										673590
									],
									[
										673803,
										673808
									],
									[
										673902,
										673907
									],
									[
										673984,
										673989
									],
									[
										674163,
										674168
									],
									[
										674303,
										674308
									],
									[
										674477,
										674482
									],
									[
										674691,
										674696
									],
									[
										675066,
										675071
									],
									[
										675090,
										675095
									],
									[
										675134,
										675139
									],
									[
										675274,
										675279
									],
									[
										675332,
										675337
									],
									[
										675532,
										675537
									],
									[
										675767,
										675772
									],
									[
										675791,
										675796
									],
									[
										675835,
										675840
									],
									[
										675975,
										675980
									],
									[
										676041,
										676046
									],
									[
										676234,
										676239
									],
									[
										676465,
										676470
									],
									[
										676489,
										676494
									],
									[
										676533,
										676538
									],
									[
										676673,
										676678
									],
									[
										676731,
										676736
									],
									[
										676916,
										676921
									],
									[
										677109,
										677114
									],
									[
										677165,
										677170
									],
									[
										677611,
										677616
									],
									[
										678089,
										678094
									],
									[
										678562,
										678567
									],
									[
										678650,
										678655
									],
									[
										678699,
										678704
									],
									[
										678742,
										678747
									],
									[
										678787,
										678792
									],
									[
										678999,
										679004
									],
									[
										679056,
										679061
									],
									[
										679073,
										679078
									],
									[
										679138,
										679143
									],
									[
										679389,
										679394
									],
									[
										679496,
										679501
									],
									[
										679706,
										679711
									],
									[
										679947,
										679952
									],
									[
										680308,
										680313
									],
									[
										680781,
										680786
									],
									[
										680869,
										680874
									],
									[
										680918,
										680923
									],
									[
										680961,
										680966
									],
									[
										681006,
										681011
									],
									[
										681218,
										681223
									],
									[
										681275,
										681280
									],
									[
										681292,
										681297
									],
									[
										681357,
										681362
									],
									[
										681608,
										681613
									],
									[
										681715,
										681720
									],
									[
										681925,
										681930
									],
									[
										682376,
										682381
									],
									[
										682737,
										682742
									],
									[
										683209,
										683214
									],
									[
										683297,
										683302
									],
									[
										683346,
										683351
									],
									[
										683389,
										683394
									],
									[
										683434,
										683439
									],
									[
										683770,
										683775
									],
									[
										683858,
										683863
									],
									[
										683905,
										683910
									],
									[
										683950,
										683955
									],
									[
										683993,
										683998
									],
									[
										684237,
										684242
									],
									[
										684322,
										684327
									],
									[
										684369,
										684374
									],
									[
										684414,
										684419
									],
									[
										684454,
										684459
									],
									[
										684788,
										684793
									],
									[
										684876,
										684881
									],
									[
										684930,
										684935
									],
									[
										684973,
										684978
									],
									[
										685018,
										685023
									],
									[
										685374,
										685379
									],
									[
										685462,
										685467
									],
									[
										685518,
										685523
									],
									[
										685563,
										685568
									],
									[
										685606,
										685611
									],
									[
										685720,
										685725
									],
									[
										685777,
										685782
									],
									[
										685794,
										685799
									],
									[
										685859,
										685864
									],
									[
										686120,
										686125
									],
									[
										686325,
										686330
									],
									[
										686593,
										686598
									],
									[
										687044,
										687049
									],
									[
										687518,
										687523
									],
									[
										687990,
										687995
									],
									[
										688078,
										688083
									],
									[
										688127,
										688132
									],
									[
										688170,
										688175
									],
									[
										688215,
										688220
									],
									[
										688551,
										688556
									],
									[
										688639,
										688644
									],
									[
										688686,
										688691
									],
									[
										688731,
										688736
									],
									[
										688774,
										688779
									],
									[
										689018,
										689023
									],
									[
										689103,
										689108
									],
									[
										689150,
										689155
									],
									[
										689195,
										689200
									],
									[
										689235,
										689240
									],
									[
										689569,
										689574
									],
									[
										689657,
										689662
									],
									[
										689711,
										689716
									],
									[
										689754,
										689759
									],
									[
										689799,
										689804
									],
									[
										690155,
										690160
									],
									[
										690243,
										690248
									],
									[
										690299,
										690304
									],
									[
										690344,
										690349
									],
									[
										690387,
										690392
									],
									[
										690501,
										690506
									],
									[
										690558,
										690563
									],
									[
										690575,
										690580
									],
									[
										690640,
										690645
									],
									[
										690901,
										690906
									],
									[
										691106,
										691111
									],
									[
										691374,
										691379
									],
									[
										691825,
										691830
									],
									[
										692299,
										692304
									],
									[
										692771,
										692776
									],
									[
										692859,
										692864
									],
									[
										692908,
										692913
									],
									[
										692951,
										692956
									],
									[
										692996,
										693001
									],
									[
										693332,
										693337
									],
									[
										693420,
										693425
									],
									[
										693467,
										693472
									],
									[
										693512,
										693517
									],
									[
										693555,
										693560
									],
									[
										693799,
										693804
									],
									[
										693884,
										693889
									],
									[
										693931,
										693936
									],
									[
										693976,
										693981
									],
									[
										694016,
										694021
									],
									[
										694350,
										694355
									],
									[
										694438,
										694443
									],
									[
										694492,
										694497
									],
									[
										694535,
										694540
									],
									[
										694580,
										694585
									],
									[
										694936,
										694941
									],
									[
										695024,
										695029
									],
									[
										695080,
										695085
									],
									[
										695125,
										695130
									],
									[
										695168,
										695173
									],
									[
										695282,
										695287
									],
									[
										695339,
										695344
									],
									[
										695356,
										695361
									],
									[
										695421,
										695426
									],
									[
										695682,
										695687
									],
									[
										695887,
										695892
									],
									[
										696155,
										696160
									],
									[
										696608,
										696613
									],
									[
										697082,
										697087
									],
									[
										697555,
										697560
									],
									[
										697643,
										697648
									],
									[
										697692,
										697697
									],
									[
										697735,
										697740
									],
									[
										697780,
										697785
									],
									[
										697992,
										697997
									],
									[
										698049,
										698054
									],
									[
										698066,
										698071
									],
									[
										698131,
										698136
									],
									[
										698382,
										698387
									],
									[
										698489,
										698494
									],
									[
										698699,
										698704
									],
									[
										699152,
										699157
									],
									[
										699626,
										699631
									],
									[
										700098,
										700103
									],
									[
										700186,
										700191
									],
									[
										700235,
										700240
									],
									[
										700278,
										700283
									],
									[
										700323,
										700328
									],
									[
										700659,
										700664
									],
									[
										700747,
										700752
									],
									[
										700794,
										700799
									],
									[
										700839,
										700844
									],
									[
										700882,
										700887
									],
									[
										701126,
										701131
									],
									[
										701211,
										701216
									],
									[
										701258,
										701263
									],
									[
										701303,
										701308
									],
									[
										701343,
										701348
									],
									[
										701677,
										701682
									],
									[
										701765,
										701770
									],
									[
										701819,
										701824
									],
									[
										701862,
										701867
									],
									[
										701907,
										701912
									],
									[
										702263,
										702268
									],
									[
										702351,
										702356
									],
									[
										702407,
										702412
									],
									[
										702452,
										702457
									],
									[
										702495,
										702500
									],
									[
										702609,
										702614
									],
									[
										702666,
										702671
									],
									[
										702683,
										702688
									],
									[
										702748,
										702753
									],
									[
										703009,
										703014
									],
									[
										703214,
										703219
									],
									[
										703482,
										703487
									],
									[
										703761,
										703766
									],
									[
										703789,
										703794
									],
									[
										703928,
										703933
									],
									[
										703954,
										703959
									],
									[
										704265,
										704270
									],
									[
										704291,
										704296
									],
									[
										704326,
										704331
									],
									[
										704354,
										704359
									],
									[
										704523,
										704528
									],
									[
										704557,
										704562
									],
									[
										704593,
										704598
									],
									[
										704627,
										704632
									],
									[
										704932,
										704937
									],
									[
										704959,
										704964
									],
									[
										704995,
										705000
									],
									[
										705024,
										705029
									],
									[
										705178,
										705183
									],
									[
										705205,
										705210
									],
									[
										705241,
										705246
									],
									[
										705270,
										705275
									],
									[
										705559,
										705564
									],
									[
										705585,
										705590
									],
									[
										705620,
										705625
									],
									[
										705648,
										705653
									],
									[
										705954,
										705959
									],
									[
										705982,
										705987
									],
									[
										706018,
										706023
									],
									[
										706048,
										706053
									],
									[
										706202,
										706207
									],
									[
										706229,
										706234
									],
									[
										706265,
										706270
									],
									[
										706294,
										706299
									],
									[
										706327,
										706332
									],
									[
										706353,
										706358
									],
									[
										706388,
										706393
									],
									[
										706416,
										706421
									],
									[
										706450,
										706455
									],
									[
										706477,
										706482
									],
									[
										706513,
										706518
									],
									[
										706542,
										706547
									],
									[
										706576,
										706581
									],
									[
										706603,
										706608
									],
									[
										706639,
										706644
									],
									[
										706668,
										706673
									],
									[
										706702,
										706707
									],
									[
										706729,
										706734
									],
									[
										706765,
										706770
									],
									[
										706794,
										706799
									],
									[
										706828,
										706833
									],
									[
										706855,
										706860
									],
									[
										706891,
										706896
									],
									[
										706920,
										706925
									],
									[
										706954,
										706959
									],
									[
										706981,
										706986
									],
									[
										707017,
										707022
									],
									[
										707046,
										707051
									],
									[
										707195,
										707200
									],
									[
										707221,
										707226
									],
									[
										707256,
										707261
									],
									[
										707284,
										707289
									],
									[
										707582,
										707587
									],
									[
										707609,
										707614
									],
									[
										707645,
										707650
									],
									[
										707674,
										707679
									],
									[
										707842,
										707847
									],
									[
										707877,
										707882
									],
									[
										707912,
										707917
									],
									[
										707947,
										707952
									],
									[
										708101,
										708106
									],
									[
										708128,
										708133
									],
									[
										708164,
										708169
									],
									[
										708193,
										708198
									],
									[
										708478,
										708483
									],
									[
										708512,
										708517
									],
									[
										708548,
										708553
									],
									[
										708582,
										708587
									],
									[
										708762,
										708767
									],
									[
										708788,
										708793
									],
									[
										708823,
										708828
									],
									[
										708851,
										708856
									],
									[
										709140,
										709145
									],
									[
										709166,
										709171
									],
									[
										709201,
										709206
									],
									[
										709229,
										709234
									],
									[
										709378,
										709383
									],
									[
										709404,
										709409
									],
									[
										709439,
										709444
									],
									[
										709467,
										709472
									],
									[
										709765,
										709770
									],
									[
										709792,
										709797
									],
									[
										709828,
										709833
									],
									[
										709857,
										709862
									],
									[
										710029,
										710034
									],
									[
										710061,
										710066
									],
									[
										710099,
										710104
									],
									[
										710131,
										710136
									],
									[
										710438,
										710443
									],
									[
										710466,
										710471
									],
									[
										710503,
										710508
									],
									[
										710533,
										710538
									],
									[
										710831,
										710836
									],
									[
										710858,
										710863
									],
									[
										710894,
										710899
									],
									[
										710923,
										710928
									],
									[
										711221,
										711226
									],
									[
										711248,
										711253
									],
									[
										711284,
										711289
									],
									[
										711313,
										711318
									],
									[
										711477,
										711482
									],
									[
										711506,
										711511
									],
									[
										711544,
										711549
									],
									[
										711575,
										711580
									],
									[
										711900,
										711905
									],
									[
										711928,
										711933
									],
									[
										711965,
										711970
									],
									[
										711995,
										712000
									],
									[
										712167,
										712172
									],
									[
										712201,
										712206
									],
									[
										712238,
										712243
									],
									[
										712272,
										712277
									],
									[
										712600,
										712605
									],
									[
										712626,
										712631
									],
									[
										712661,
										712666
									],
									[
										712689,
										712694
									],
									[
										712998,
										713003
									],
									[
										713026,
										713031
									],
									[
										713063,
										713068
									],
									[
										713093,
										713098
									],
									[
										713400,
										713405
									],
									[
										713428,
										713433
									],
									[
										713465,
										713470
									],
									[
										713495,
										713500
									],
									[
										713802,
										713807
									],
									[
										713830,
										713835
									],
									[
										713867,
										713872
									],
									[
										713897,
										713902
									],
									[
										714204,
										714209
									],
									[
										714232,
										714237
									],
									[
										714269,
										714274
									],
									[
										714299,
										714304
									],
									[
										714606,
										714611
									],
									[
										714634,
										714639
									],
									[
										714671,
										714676
									],
									[
										714701,
										714706
									],
									[
										715008,
										715013
									],
									[
										715036,
										715041
									],
									[
										715073,
										715078
									],
									[
										715103,
										715108
									],
									[
										715410,
										715415
									],
									[
										715438,
										715443
									],
									[
										715475,
										715480
									],
									[
										715505,
										715510
									],
									[
										715812,
										715817
									],
									[
										715840,
										715845
									],
									[
										715877,
										715882
									],
									[
										715907,
										715912
									],
									[
										716205,
										716210
									],
									[
										716232,
										716237
									],
									[
										716268,
										716273
									],
									[
										716297,
										716302
									],
									[
										716595,
										716600
									],
									[
										716622,
										716627
									],
									[
										716658,
										716663
									],
									[
										716687,
										716692
									],
									[
										716985,
										716990
									],
									[
										717012,
										717017
									],
									[
										717048,
										717053
									],
									[
										717077,
										717082
									],
									[
										717366,
										717371
									],
									[
										717392,
										717397
									],
									[
										717427,
										717432
									],
									[
										717455,
										717460
									],
									[
										717771,
										717776
									],
									[
										717800,
										717805
									],
									[
										717838,
										717843
									],
									[
										717869,
										717874
									],
									[
										718185,
										718190
									],
									[
										718214,
										718219
									],
									[
										718252,
										718257
									],
									[
										718283,
										718288
									],
									[
										718608,
										718613
									],
									[
										718638,
										718643
									],
									[
										718677,
										718682
									],
									[
										718709,
										718714
									],
									[
										719016,
										719021
									],
									[
										719044,
										719049
									],
									[
										719081,
										719086
									],
									[
										719111,
										719116
									],
									[
										719418,
										719423
									],
									[
										719446,
										719451
									],
									[
										719483,
										719488
									],
									[
										719513,
										719518
									],
									[
										719802,
										719807
									],
									[
										719828,
										719833
									],
									[
										719863,
										719868
									],
									[
										719891,
										719896
									],
									[
										720189,
										720194
									],
									[
										720216,
										720221
									],
									[
										720252,
										720257
									],
									[
										720281,
										720286
									],
									[
										720570,
										720575
									],
									[
										720596,
										720601
									],
									[
										720631,
										720636
									],
									[
										720659,
										720664
									],
									[
										720957,
										720962
									],
									[
										720984,
										720989
									],
									[
										721020,
										721025
									],
									[
										721049,
										721054
									],
									[
										721347,
										721352
									],
									[
										721374,
										721379
									],
									[
										721410,
										721415
									],
									[
										721439,
										721444
									],
									[
										721748,
										721753
									],
									[
										721776,
										721781
									],
									[
										721813,
										721818
									],
									[
										721843,
										721848
									],
									[
										722141,
										722146
									],
									[
										722168,
										722173
									],
									[
										722204,
										722209
									],
									[
										722233,
										722238
									],
									[
										722531,
										722536
									],
									[
										722558,
										722563
									],
									[
										722594,
										722599
									],
									[
										722623,
										722628
									],
									[
										722921,
										722926
									],
									[
										722948,
										722953
									],
									[
										722984,
										722989
									],
									[
										723013,
										723018
									],
									[
										723327,
										723332
									],
									[
										723356,
										723361
									],
									[
										723394,
										723399
									],
									[
										723425,
										723430
									],
									[
										723741,
										723746
									],
									[
										723770,
										723775
									],
									[
										723808,
										723813
									],
									[
										723839,
										723844
									],
									[
										724137,
										724142
									],
									[
										724164,
										724169
									],
									[
										724200,
										724205
									],
									[
										724229,
										724234
									],
									[
										724388,
										724393
									],
									[
										724416,
										724421
									],
									[
										724453,
										724458
									],
									[
										724483,
										724488
									],
									[
										724642,
										724647
									],
									[
										724670,
										724675
									],
									[
										724707,
										724712
									],
									[
										724737,
										724742
									],
									[
										724896,
										724901
									],
									[
										724924,
										724929
									],
									[
										724961,
										724966
									],
									[
										724991,
										724996
									],
									[
										725150,
										725155
									],
									[
										725178,
										725183
									],
									[
										725215,
										725220
									],
									[
										725245,
										725250
									],
									[
										725404,
										725409
									],
									[
										725432,
										725437
									],
									[
										725469,
										725474
									],
									[
										725499,
										725504
									],
									[
										725806,
										725811
									],
									[
										725834,
										725839
									],
									[
										725871,
										725876
									],
									[
										725901,
										725906
									],
									[
										726208,
										726213
									],
									[
										726236,
										726241
									],
									[
										726273,
										726278
									],
									[
										726303,
										726308
									],
									[
										726610,
										726615
									],
									[
										726638,
										726643
									],
									[
										726675,
										726680
									],
									[
										726705,
										726710
									],
									[
										727003,
										727008
									],
									[
										727030,
										727035
									],
									[
										727066,
										727071
									],
									[
										727095,
										727100
									],
									[
										727393,
										727398
									],
									[
										727420,
										727425
									],
									[
										727456,
										727461
									],
									[
										727485,
										727490
									],
									[
										727783,
										727788
									],
									[
										727810,
										727815
									],
									[
										727846,
										727851
									],
									[
										727875,
										727880
									],
									[
										728173,
										728178
									],
									[
										728200,
										728205
									],
									[
										728236,
										728241
									],
									[
										728265,
										728270
									],
									[
										728563,
										728568
									],
									[
										728590,
										728595
									],
									[
										728626,
										728631
									],
									[
										728655,
										728660
									],
									[
										728953,
										728958
									],
									[
										728980,
										728985
									],
									[
										729016,
										729021
									],
									[
										729045,
										729050
									],
									[
										729343,
										729348
									],
									[
										729370,
										729375
									],
									[
										729406,
										729411
									],
									[
										729435,
										729440
									],
									[
										729589,
										729594
									],
									[
										729616,
										729621
									],
									[
										729652,
										729657
									],
									[
										729681,
										729686
									],
									[
										729970,
										729975
									],
									[
										729996,
										730001
									],
									[
										730031,
										730036
									],
									[
										730059,
										730064
									],
									[
										730366,
										730371
									],
									[
										730394,
										730399
									],
									[
										730431,
										730436
									],
									[
										730461,
										730466
									],
									[
										730768,
										730773
									],
									[
										730796,
										730801
									],
									[
										730833,
										730838
									],
									[
										730863,
										730868
									],
									[
										731179,
										731184
									],
									[
										731208,
										731213
									],
									[
										731246,
										731251
									],
									[
										731277,
										731282
									],
									[
										731593,
										731598
									],
									[
										731622,
										731627
									],
									[
										731660,
										731665
									],
									[
										731691,
										731696
									],
									[
										732007,
										732012
									],
									[
										732036,
										732041
									],
									[
										732074,
										732079
									],
									[
										732105,
										732110
									],
									[
										732440,
										732445
									],
									[
										732476,
										732481
									],
									[
										732514,
										732519
									],
									[
										732550,
										732555
									],
									[
										732885,
										732890
									],
									[
										732921,
										732926
									],
									[
										732959,
										732964
									],
									[
										732995,
										733000
									],
									[
										733174,
										733179
									],
									[
										733210,
										733215
									],
									[
										733248,
										733253
									],
									[
										733284,
										733289
									],
									[
										733463,
										733468
									],
									[
										733499,
										733504
									],
									[
										733537,
										733542
									],
									[
										733573,
										733578
									],
									[
										733739,
										733744
									],
									[
										733773,
										733778
									],
									[
										734097,
										734102
									],
									[
										734125,
										734130
									],
									[
										734423,
										734428
									],
									[
										734450,
										734455
									],
									[
										734486,
										734491
									],
									[
										734515,
										734520
									],
									[
										734678,
										734683
									],
									[
										734708,
										734713
									],
									[
										734745,
										734750
									],
									[
										734776,
										734781
									],
									[
										735091,
										735096
									],
									[
										735121,
										735126
									],
									[
										735158,
										735163
									],
									[
										735189,
										735194
									],
									[
										735520,
										735525
									],
									[
										735546,
										735551
									],
									[
										735581,
										735586
									],
									[
										735609,
										735614
									],
									[
										735642,
										735647
									],
									[
										735670,
										735675
									],
									[
										735709,
										735714
									],
									[
										735739,
										735744
									],
									[
										735795,
										735800
									],
									[
										735829,
										735834
									],
									[
										735871,
										735876
									],
									[
										735907,
										735912
									],
									[
										736267,
										736272
									],
									[
										736303,
										736308
									],
									[
										736339,
										736344
									],
									[
										736377,
										736382
									],
									[
										736713,
										736718
									],
									[
										736749,
										736754
									],
									[
										736785,
										736790
									],
									[
										736823,
										736828
									],
									[
										737151,
										737156
									],
									[
										737187,
										737192
									],
									[
										737223,
										737228
									],
									[
										737260,
										737265
									],
									[
										737588,
										737593
									],
									[
										737624,
										737629
									],
									[
										737660,
										737665
									],
									[
										737698,
										737703
									],
									[
										738044,
										738049
									],
									[
										738080,
										738085
									],
									[
										738118,
										738123
									],
									[
										738156,
										738161
									],
									[
										738484,
										738489
									],
									[
										738520,
										738525
									],
									[
										738556,
										738561
									],
									[
										738592,
										738597
									],
									[
										738918,
										738923
									],
									[
										738955,
										738960
									],
									[
										738992,
										738997
									],
									[
										739031,
										739036
									],
									[
										739360,
										739365
									],
									[
										739396,
										739401
									],
									[
										739433,
										739438
									],
									[
										739472,
										739477
									],
									[
										739803,
										739808
									],
									[
										739842,
										739847
									],
									[
										740172,
										740177
									],
									[
										740208,
										740213
									],
									[
										740244,
										740249
									],
									[
										740282,
										740287
									],
									[
										740610,
										740615
									],
									[
										740646,
										740651
									],
									[
										740681,
										740686
									],
									[
										740715,
										740720
									],
									[
										741044,
										741049
									],
									[
										741081,
										741086
									],
									[
										741118,
										741123
									],
									[
										741157,
										741162
									],
									[
										741504,
										741509
									],
									[
										741546,
										741551
									],
									[
										741583,
										741588
									],
									[
										741627,
										741632
									],
									[
										742046,
										742051
									],
									[
										742088,
										742093
									],
									[
										742133,
										742138
									],
									[
										742177,
										742182
									],
									[
										742627,
										742632
									],
									[
										742666,
										742671
									],
									[
										743026,
										743031
									],
									[
										743065,
										743070
									],
									[
										743101,
										743106
									],
									[
										743140,
										743145
									],
									[
										743333,
										743338
									],
									[
										743372,
										743377
									],
									[
										743408,
										743413
									],
									[
										743447,
										743452
									],
									[
										743788,
										743793
									],
									[
										743827,
										743832
									],
									[
										743864,
										743869
									],
									[
										743903,
										743908
									],
									[
										744161,
										744166
									],
									[
										744197,
										744202
									],
									[
										744242,
										744247
									],
									[
										744278,
										744283
									],
									[
										744477,
										744482
									],
									[
										744513,
										744518
									],
									[
										744550,
										744555
									],
									[
										744586,
										744591
									],
									[
										744621,
										744626
									],
									[
										744657,
										744662
									],
									[
										744694,
										744699
									],
									[
										744730,
										744735
									],
									[
										744765,
										744770
									],
									[
										744801,
										744806
									],
									[
										744838,
										744843
									],
									[
										744874,
										744879
									],
									[
										744908,
										744913
									],
									[
										744944,
										744949
									],
									[
										744980,
										744985
									],
									[
										745016,
										745021
									],
									[
										745051,
										745056
									],
									[
										745087,
										745092
									],
									[
										745124,
										745129
									],
									[
										745160,
										745165
									],
									[
										745195,
										745200
									],
									[
										745231,
										745236
									],
									[
										745268,
										745273
									],
									[
										745304,
										745309
									],
									[
										745339,
										745344
									],
									[
										745375,
										745380
									],
									[
										745412,
										745417
									],
									[
										745448,
										745453
									],
									[
										745484,
										745489
									],
									[
										745520,
										745525
									],
									[
										745558,
										745563
									],
									[
										745594,
										745599
									],
									[
										745630,
										745635
									],
									[
										745666,
										745671
									],
									[
										745702,
										745707
									],
									[
										745738,
										745743
									],
									[
										745774,
										745779
									],
									[
										745810,
										745815
									],
									[
										745848,
										745853
									],
									[
										745884,
										745889
									],
									[
										745922,
										745927
									],
									[
										745958,
										745963
									],
									[
										745996,
										746001
									],
									[
										746032,
										746037
									],
									[
										746267,
										746272
									],
									[
										746300,
										746305
									],
									[
										746346,
										746351
									],
									[
										746379,
										746384
									],
									[
										746718,
										746723
									],
									[
										746755,
										746760
									],
									[
										746799,
										746804
									],
									[
										746836,
										746841
									],
									[
										747070,
										747075
									],
									[
										747096,
										747101
									],
									[
										747133,
										747138
									],
									[
										747159,
										747164
									],
									[
										747456,
										747461
									],
									[
										747482,
										747487
									],
									[
										747626,
										747631
									],
									[
										747652,
										747657
									],
									[
										747976,
										747981
									],
									[
										748260,
										748265
									],
									[
										748335,
										748340
									],
									[
										748505,
										748510
									],
									[
										748732,
										748737
									],
									[
										748959,
										748964
									],
									[
										749263,
										749268
									],
									[
										749390,
										749395
									],
									[
										749458,
										749463
									],
									[
										749683,
										749688
									],
									[
										749848,
										749853
									],
									[
										750175,
										750180
									],
									[
										750438,
										750443
									],
									[
										750662,
										750667
									],
									[
										750844,
										750849
									],
									[
										750950,
										750955
									],
									[
										751117,
										751122
									],
									[
										751226,
										751231
									],
									[
										751351,
										751356
									],
									[
										751398,
										751403
									],
									[
										751722,
										751727
									],
									[
										751995,
										752000
									],
									[
										752366,
										752371
									],
									[
										752648,
										752653
									],
									[
										752975,
										752980
									],
									[
										753227,
										753232
									],
									[
										753306,
										753311
									],
									[
										753453,
										753458
									],
									[
										753797,
										753802
									],
									[
										754111,
										754116
									],
									[
										754428,
										754433
									],
									[
										754583,
										754588
									],
									[
										754744,
										754749
									],
									[
										754987,
										754992
									],
									[
										755514,
										755519
									],
									[
										755905,
										755910
									],
									[
										755935,
										755940
									],
									[
										755981,
										755986
									],
									[
										756011,
										756016
									],
									[
										756366,
										756371
									],
									[
										756504,
										756509
									],
									[
										756646,
										756651
									],
									[
										756789,
										756794
									],
									[
										756944,
										756949
									],
									[
										757094,
										757099
									],
									[
										757238,
										757243
									],
									[
										757484,
										757489
									],
									[
										757899,
										757904
									],
									[
										758206,
										758211
									],
									[
										758306,
										758311
									],
									[
										758406,
										758411
									],
									[
										758506,
										758511
									],
									[
										758608,
										758613
									],
									[
										758710,
										758715
									],
									[
										758808,
										758813
									],
									[
										758906,
										758911
									],
									[
										759120,
										759125
									],
									[
										759536,
										759541
									],
									[
										759845,
										759850
									],
									[
										759947,
										759952
									],
									[
										760049,
										760054
									],
									[
										760151,
										760156
									],
									[
										760253,
										760258
									],
									[
										760355,
										760360
									],
									[
										760461,
										760466
									],
									[
										760567,
										760572
									],
									[
										760669,
										760674
									],
									[
										760771,
										760776
									],
									[
										760871,
										760876
									],
									[
										760971,
										760976
									],
									[
										761071,
										761076
									],
									[
										761171,
										761176
									],
									[
										761386,
										761391
									],
									[
										761801,
										761806
									],
									[
										762110,
										762115
									],
									[
										762212,
										762217
									],
									[
										762315,
										762320
									],
									[
										762418,
										762423
									],
									[
										762521,
										762526
									],
									[
										762624,
										762629
									],
									[
										762727,
										762732
									],
									[
										762830,
										762835
									],
									[
										762933,
										762938
									],
									[
										763036,
										763041
									],
									[
										763138,
										763143
									],
									[
										763240,
										763245
									],
									[
										763342,
										763347
									],
									[
										763444,
										763449
									],
									[
										763546,
										763551
									],
									[
										763648,
										763653
									],
									[
										763754,
										763759
									],
									[
										763860,
										763865
									],
									[
										763956,
										763961
									],
									[
										763981,
										763986
									],
									[
										764039,
										764044
									],
									[
										764111,
										764116
									],
									[
										764192,
										764197
									],
									[
										764284,
										764289
									],
									[
										764376,
										764381
									],
									[
										764470,
										764475
									],
									[
										764562,
										764567
									],
									[
										764661,
										764666
									],
									[
										764752,
										764757
									],
									[
										764854,
										764859
									],
									[
										764930,
										764935
									],
									[
										765025,
										765030
									],
									[
										765120,
										765125
									],
									[
										765217,
										765222
									],
									[
										765312,
										765317
									],
									[
										765414,
										765419
									],
									[
										765508,
										765513
									],
									[
										765654,
										765659
									],
									[
										765679,
										765684
									],
									[
										765737,
										765742
									],
									[
										765809,
										765814
									],
									[
										765890,
										765895
									],
									[
										765983,
										765988
									],
									[
										766075,
										766080
									],
									[
										766167,
										766172
									],
									[
										766259,
										766264
									],
									[
										766350,
										766355
									],
									[
										766450,
										766455
									],
									[
										766542,
										766547
									],
									[
										766636,
										766641
									],
									[
										766738,
										766743
									],
									[
										766814,
										766819
									],
									[
										766910,
										766915
									],
									[
										767005,
										767010
									],
									[
										767100,
										767105
									],
									[
										767195,
										767200
									],
									[
										767289,
										767294
									],
									[
										767392,
										767397
									],
									[
										767487,
										767492
									],
									[
										767584,
										767589
									],
									[
										767870,
										767875
									],
									[
										768282,
										768287
									],
									[
										768458,
										768463
									],
									[
										768863,
										768868
									],
									[
										769040,
										769045
									],
									[
										769173,
										769178
									],
									[
										769206,
										769211
									],
									[
										769263,
										769268
									],
									[
										769518,
										769523
									],
									[
										769558,
										769563
									],
									[
										769736,
										769741
									],
									[
										769863,
										769868
									],
									[
										769913,
										769918
									],
									[
										770152,
										770157
									],
									[
										770188,
										770193
									],
									[
										770370,
										770375
									],
									[
										770681,
										770686
									],
									[
										770739,
										770744
									],
									[
										770798,
										770803
									],
									[
										770870,
										770875
									],
									[
										770937,
										770942
									],
									[
										770998,
										771003
									],
									[
										771419,
										771424
									],
									[
										771839,
										771844
									],
									[
										772243,
										772248
									],
									[
										772343,
										772348
									],
									[
										772704,
										772709
									],
									[
										772804,
										772809
									],
									[
										773052,
										773057
									],
									[
										773152,
										773157
									],
									[
										773362,
										773367
									],
									[
										773469,
										773474
									],
									[
										773651,
										773656
									],
									[
										773755,
										773760
									],
									[
										773863,
										773868
									],
									[
										773971,
										773976
									],
									[
										774079,
										774084
									],
									[
										774187,
										774192
									],
									[
										774423,
										774428
									],
									[
										774841,
										774846
									],
									[
										775290,
										775295
									],
									[
										775392,
										775397
									],
									[
										775825,
										775830
									],
									[
										775927,
										775932
									],
									[
										776029,
										776034
									],
									[
										776131,
										776136
									],
									[
										776237,
										776242
									],
									[
										776343,
										776348
									],
									[
										776445,
										776450
									],
									[
										776547,
										776552
									],
									[
										776909,
										776914
									],
									[
										777009,
										777014
									],
									[
										777379,
										777384
									],
									[
										777481,
										777486
									],
									[
										777583,
										777588
									],
									[
										777685,
										777690
									],
									[
										777787,
										777792
									],
									[
										777889,
										777894
									],
									[
										777991,
										777996
									],
									[
										778093,
										778098
									],
									[
										778197,
										778202
									],
									[
										778301,
										778306
									],
									[
										778405,
										778410
									],
									[
										778509,
										778514
									],
									[
										778609,
										778614
									],
									[
										778709,
										778714
									],
									[
										778970,
										778975
									],
									[
										779072,
										779077
									],
									[
										779174,
										779179
									],
									[
										779276,
										779281
									],
									[
										779376,
										779381
									],
									[
										779476,
										779481
									],
									[
										779576,
										779581
									],
									[
										779676,
										779681
									],
									[
										779851,
										779856
									],
									[
										779953,
										779958
									],
									[
										780057,
										780062
									],
									[
										780161,
										780166
									],
									[
										780265,
										780270
									],
									[
										780369,
										780374
									],
									[
										780473,
										780478
									],
									[
										780577,
										780582
									],
									[
										780679,
										780684
									],
									[
										780781,
										780786
									],
									[
										780885,
										780890
									],
									[
										780989,
										780994
									],
									[
										781093,
										781098
									],
									[
										781197,
										781202
									],
									[
										781299,
										781304
									],
									[
										781401,
										781406
									],
									[
										781593,
										781598
									],
									[
										781697,
										781702
									],
									[
										781904,
										781909
									],
									[
										782008,
										782013
									],
									[
										782112,
										782117
									],
									[
										782216,
										782221
									],
									[
										782468,
										782473
									],
									[
										782885,
										782890
									],
									[
										783287,
										783292
									],
									[
										783389,
										783394
									],
									[
										783671,
										783676
									],
									[
										783775,
										783780
									],
									[
										783879,
										783884
									],
									[
										783983,
										783988
									],
									[
										784087,
										784092
									],
									[
										784191,
										784196
									],
									[
										784541,
										784546
									],
									[
										784644,
										784649
									],
									[
										784961,
										784966
									],
									[
										785064,
										785069
									],
									[
										785167,
										785172
									],
									[
										785270,
										785275
									],
									[
										785504,
										785509
									],
									[
										785606,
										785611
									],
									[
										785708,
										785713
									],
									[
										785810,
										785815
									],
									[
										785992,
										785997
									],
									[
										786095,
										786100
									],
									[
										786198,
										786203
									],
									[
										786301,
										786306
									],
									[
										786491,
										786496
									],
									[
										786593,
										786598
									],
									[
										786697,
										786702
									],
									[
										786801,
										786806
									],
									[
										786905,
										786910
									],
									[
										787009,
										787014
									],
									[
										787273,
										787278
									],
									[
										787343,
										787348
									],
									[
										787429,
										787434
									],
									[
										787554,
										787559
									],
									[
										787686,
										787691
									],
									[
										787766,
										787771
									],
									[
										787892,
										787897
									],
									[
										788093,
										788098
									],
									[
										788118,
										788123
									],
									[
										788176,
										788181
									],
									[
										788414,
										788419
									],
									[
										788517,
										788522
									],
									[
										788867,
										788872
									],
									[
										788960,
										788965
									],
									[
										789055,
										789060
									],
									[
										789148,
										789153
									],
									[
										789251,
										789256
									],
									[
										789345,
										789350
									],
									[
										789441,
										789446
									],
									[
										789535,
										789540
									],
									[
										789896,
										789901
									],
									[
										789990,
										789995
									],
									[
										790358,
										790363
									],
									[
										790451,
										790456
									],
									[
										790544,
										790549
									],
									[
										790637,
										790642
									],
									[
										790731,
										790736
									],
									[
										790825,
										790830
									],
									[
										790917,
										790922
									],
									[
										791020,
										791025
									],
									[
										791114,
										791119
									],
									[
										791208,
										791213
									],
									[
										791302,
										791307
									],
									[
										791397,
										791402
									],
									[
										791492,
										791497
									],
									[
										791585,
										791590
									],
									[
										791844,
										791849
									],
									[
										791937,
										791942
									],
									[
										792029,
										792034
									],
									[
										792121,
										792126
									],
									[
										792224,
										792229
									],
									[
										792318,
										792323
									],
									[
										792411,
										792416
									],
									[
										792504,
										792509
									],
									[
										792685,
										792690
									],
									[
										792779,
										792784
									],
									[
										792873,
										792878
									],
									[
										792967,
										792972
									],
									[
										793060,
										793065
									],
									[
										793154,
										793159
									],
									[
										793248,
										793253
									],
									[
										793351,
										793356
									],
									[
										793446,
										793451
									],
									[
										793541,
										793546
									],
									[
										793636,
										793641
									],
									[
										793730,
										793735
									],
									[
										793825,
										793830
									],
									[
										793920,
										793925
									],
									[
										794108,
										794113
									],
									[
										794211,
										794216
									],
									[
										794415,
										794420
									],
									[
										794509,
										794514
									],
									[
										794603,
										794608
									],
									[
										794707,
										794712
									],
									[
										794802,
										794807
									],
									[
										794897,
										794902
									],
									[
										795080,
										795085
									],
									[
										795105,
										795110
									],
									[
										795163,
										795168
									],
									[
										795354,
										795359
									],
									[
										795457,
										795462
									],
									[
										795736,
										795741
									],
									[
										795830,
										795835
									],
									[
										795924,
										795929
									],
									[
										796028,
										796033
									],
									[
										796123,
										796128
									],
									[
										796218,
										796223
									],
									[
										796485,
										796490
									],
									[
										796588,
										796593
									],
									[
										796902,
										796907
									],
									[
										796995,
										797000
									],
									[
										797098,
										797103
									],
									[
										797192,
										797197
									],
									[
										797423,
										797428
									],
									[
										797516,
										797521
									],
									[
										797619,
										797624
									],
									[
										797713,
										797718
									],
									[
										797893,
										797898
									],
									[
										797986,
										797991
									],
									[
										798089,
										798094
									],
									[
										798183,
										798188
									],
									[
										798370,
										798375
									],
									[
										798464,
										798469
									],
									[
										798558,
										798563
									],
									[
										798661,
										798666
									],
									[
										798756,
										798761
									],
									[
										798851,
										798856
									],
									[
										799096,
										799101
									],
									[
										799499,
										799504
									],
									[
										799678,
										799683
									],
									[
										799809,
										799814
									],
									[
										799925,
										799930
									],
									[
										800191,
										800196
									],
									[
										800535,
										800540
									],
									[
										800707,
										800712
									],
									[
										800972,
										800977
									],
									[
										801370,
										801375
									],
									[
										801635,
										801640
									],
									[
										801809,
										801814
									],
									[
										802173,
										802178
									],
									[
										802346,
										802351
									],
									[
										802688,
										802693
									],
									[
										802815,
										802820
									],
									[
										802883,
										802888
									],
									[
										803083,
										803088
									],
									[
										803248,
										803253
									],
									[
										803488,
										803493
									],
									[
										803739,
										803744
									],
									[
										803912,
										803917
									],
									[
										804246,
										804251
									],
									[
										804797,
										804802
									],
									[
										805160,
										805165
									],
									[
										805642,
										805647
									],
									[
										806061,
										806066
									],
									[
										806205,
										806210
									],
									[
										806526,
										806531
									],
									[
										806662,
										806667
									],
									[
										806720,
										806725
									],
									[
										806761,
										806766
									],
									[
										806808,
										806813
									],
									[
										806849,
										806854
									],
									[
										806951,
										806956
									],
									[
										806991,
										806996
									],
									[
										807180,
										807185
									],
									[
										807730,
										807735
									],
									[
										807977,
										807982
									],
									[
										807994,
										807999
									],
									[
										808072,
										808077
									],
									[
										808112,
										808117
									],
									[
										808141,
										808146
									],
									[
										808254,
										808259
									],
									[
										808505,
										808510
									],
									[
										808645,
										808650
									],
									[
										808740,
										808745
									],
									[
										808855,
										808860
									],
									[
										808962,
										808967
									],
									[
										809141,
										809146
									],
									[
										809283,
										809288
									],
									[
										809379,
										809384
									],
									[
										809635,
										809640
									],
									[
										809711,
										809716
									],
									[
										809964,
										809969
									],
									[
										810040,
										810045
									],
									[
										810327,
										810332
									],
									[
										810403,
										810408
									],
									[
										810699,
										810704
									],
									[
										810915,
										810920
									],
									[
										811133,
										811138
									],
									[
										811347,
										811352
									],
									[
										811583,
										811588
									],
									[
										811799,
										811804
									],
									[
										812054,
										812059
									],
									[
										812234,
										812239
									],
									[
										812309,
										812314
									],
									[
										812522,
										812527
									],
									[
										812598,
										812603
									],
									[
										812842,
										812847
									],
									[
										812924,
										812929
									],
									[
										813168,
										813173
									],
									[
										813552,
										813557
									],
									[
										813869,
										813874
									],
									[
										814232,
										814237
									],
									[
										814563,
										814568
									],
									[
										814852,
										814857
									],
									[
										815025,
										815030
									],
									[
										815116,
										815121
									],
									[
										815438,
										815443
									],
									[
										815637,
										815642
									],
									[
										815998,
										816003
									],
									[
										816203,
										816208
									],
									[
										816506,
										816511
									],
									[
										816624,
										816629
									],
									[
										816875,
										816880
									],
									[
										817089,
										817094
									],
									[
										817394,
										817399
									],
									[
										817665,
										817670
									],
									[
										817901,
										817906
									],
									[
										818160,
										818165
									],
									[
										818325,
										818330
									],
									[
										818419,
										818424
									],
									[
										818659,
										818664
									],
									[
										818833,
										818838
									],
									[
										818899,
										818904
									],
									[
										818926,
										818931
									],
									[
										819192,
										819197
									],
									[
										819294,
										819299
									],
									[
										819410,
										819415
									],
									[
										819575,
										819580
									],
									[
										819855,
										819860
									],
									[
										820108,
										820113
									],
									[
										820231,
										820236
									],
									[
										820271,
										820276
									],
									[
										820501,
										820506
									],
									[
										820545,
										820550
									],
									[
										820701,
										820706
									],
									[
										820978,
										820983
									],
									[
										821229,
										821234
									],
									[
										821548,
										821553
									],
									[
										821843,
										821848
									],
									[
										822264,
										822269
									],
									[
										822498,
										822503
									],
									[
										822548,
										822553
									],
									[
										822592,
										822597
									],
									[
										822820,
										822825
									],
									[
										822951,
										822956
									],
									[
										823037,
										823042
									],
									[
										823137,
										823142
									],
									[
										823378,
										823383
									],
									[
										823659,
										823664
									],
									[
										823814,
										823819
									],
									[
										824073,
										824078
									],
									[
										824289,
										824294
									],
									[
										824524,
										824529
									],
									[
										824767,
										824772
									],
									[
										824996,
										825001
									],
									[
										825219,
										825224
									],
									[
										825435,
										825440
									],
									[
										825650,
										825655
									],
									[
										825839,
										825844
									],
									[
										825974,
										825979
									],
									[
										826225,
										826230
									],
									[
										826437,
										826442
									],
									[
										826656,
										826661
									],
									[
										826881,
										826886
									],
									[
										827105,
										827110
									],
									[
										827334,
										827339
									],
									[
										827559,
										827564
									],
									[
										827780,
										827785
									],
									[
										828006,
										828011
									],
									[
										828235,
										828240
									],
									[
										828566,
										828571
									],
									[
										828751,
										828756
									],
									[
										828936,
										828941
									],
									[
										829121,
										829126
									],
									[
										829306,
										829311
									],
									[
										829491,
										829496
									],
									[
										829830,
										829835
									],
									[
										830011,
										830016
									],
									[
										830246,
										830251
									],
									[
										830413,
										830418
									],
									[
										830643,
										830648
									],
									[
										830779,
										830784
									],
									[
										831034,
										831039
									],
									[
										831198,
										831203
									],
									[
										831236,
										831241
									],
									[
										831280,
										831285
									],
									[
										831514,
										831519
									],
									[
										831738,
										831743
									],
									[
										831954,
										831959
									],
									[
										832164,
										832169
									],
									[
										832376,
										832381
									],
									[
										832584,
										832589
									],
									[
										832788,
										832793
									],
									[
										832997,
										833002
									],
									[
										833291,
										833296
									],
									[
										833450,
										833455
									],
									[
										833623,
										833628
									],
									[
										833782,
										833787
									],
									[
										833961,
										833966
									],
									[
										834156,
										834161
									],
									[
										834350,
										834355
									],
									[
										834545,
										834550
									],
									[
										834739,
										834744
									],
									[
										834934,
										834939
									],
									[
										835122,
										835127
									],
									[
										835281,
										835286
									],
									[
										835460,
										835465
									],
									[
										835655,
										835660
									],
									[
										835849,
										835854
									],
									[
										836044,
										836049
									],
									[
										836238,
										836243
									],
									[
										836433,
										836438
									],
									[
										836621,
										836626
									],
									[
										836780,
										836785
									],
									[
										836932,
										836937
									],
									[
										837092,
										837097
									],
									[
										837250,
										837255
									],
									[
										837435,
										837440
									],
									[
										837636,
										837641
									],
									[
										837836,
										837841
									],
									[
										838037,
										838042
									],
									[
										838211,
										838216
									],
									[
										838355,
										838360
									],
									[
										838516,
										838521
									],
									[
										838667,
										838672
									],
									[
										838743,
										838748
									],
									[
										838888,
										838893
									],
									[
										838964,
										838969
									],
									[
										839145,
										839150
									],
									[
										839221,
										839226
									],
									[
										839402,
										839407
									],
									[
										839478,
										839483
									],
									[
										839655,
										839660
									],
									[
										839734,
										839739
									],
									[
										839918,
										839923
									],
									[
										839996,
										840001
									],
									[
										840187,
										840192
									],
									[
										840267,
										840272
									],
									[
										840450,
										840455
									],
									[
										840526,
										840531
									],
									[
										840669,
										840674
									],
									[
										840834,
										840839
									],
									[
										840992,
										840997
									],
									[
										841150,
										841155
									],
									[
										841341,
										841346
									],
									[
										841525,
										841530
									],
									[
										841725,
										841730
									],
									[
										841960,
										841965
									],
									[
										842195,
										842200
									],
									[
										842430,
										842435
									],
									[
										842624,
										842629
									],
									[
										842881,
										842886
									],
									[
										843102,
										843107
									],
									[
										843377,
										843382
									],
									[
										843672,
										843677
									],
									[
										843841,
										843846
									],
									[
										843969,
										843974
									],
									[
										844149,
										844154
									],
									[
										844365,
										844370
									],
									[
										844544,
										844549
									],
									[
										844720,
										844725
									],
									[
										844932,
										844937
									],
									[
										845060,
										845065
									],
									[
										845277,
										845282
									],
									[
										845493,
										845498
									],
									[
										845679,
										845684
									],
									[
										845852,
										845857
									],
									[
										846064,
										846069
									],
									[
										846192,
										846197
									],
									[
										846402,
										846407
									],
									[
										846618,
										846623
									],
									[
										846804,
										846809
									],
									[
										846980,
										846985
									],
									[
										847192,
										847197
									],
									[
										847320,
										847325
									],
									[
										847537,
										847542
									],
									[
										847752,
										847757
									],
									[
										847937,
										847942
									],
									[
										848119,
										848124
									],
									[
										848348,
										848353
									],
									[
										848548,
										848553
									],
									[
										848729,
										848734
									],
									[
										848867,
										848872
									],
									[
										849039,
										849044
									],
									[
										849213,
										849218
									],
									[
										849387,
										849392
									],
									[
										849561,
										849566
									],
									[
										849755,
										849760
									],
									[
										849931,
										849936
									],
									[
										850111,
										850116
									],
									[
										850189,
										850194
									],
									[
										850571,
										850576
									],
									[
										850843,
										850848
									],
									[
										851052,
										851057
									],
									[
										851274,
										851279
									],
									[
										851414,
										851419
									],
									[
										851611,
										851616
									],
									[
										851714,
										851719
									],
									[
										851912,
										851917
									],
									[
										852164,
										852169
									],
									[
										852444,
										852449
									],
									[
										852584,
										852589
									],
									[
										852779,
										852784
									],
									[
										852867,
										852872
									],
									[
										853029,
										853034
									],
									[
										853109,
										853114
									],
									[
										853351,
										853356
									],
									[
										853490,
										853495
									],
									[
										853553,
										853558
									],
									[
										853666,
										853671
									],
									[
										853678,
										853683
									],
									[
										853862,
										853867
									],
									[
										853914,
										853919
									],
									[
										854177,
										854182
									],
									[
										854410,
										854415
									],
									[
										854547,
										854552
									],
									[
										854744,
										854749
									],
									[
										854981,
										854986
									],
									[
										855085,
										855090
									],
									[
										855269,
										855274
									],
									[
										855444,
										855449
									],
									[
										855687,
										855692
									],
									[
										855772,
										855777
									],
									[
										856076,
										856081
									],
									[
										856133,
										856138
									],
									[
										856505,
										856510
									],
									[
										856590,
										856595
									],
									[
										856894,
										856899
									],
									[
										856951,
										856956
									],
									[
										857407,
										857412
									],
									[
										857742,
										857747
									],
									[
										857773,
										857778
									],
									[
										857900,
										857905
									],
									[
										858057,
										858062
									],
									[
										858193,
										858198
									],
									[
										858224,
										858229
									],
									[
										858530,
										858535
									],
									[
										858681,
										858686
									],
									[
										858884,
										858889
									],
									[
										859153,
										859158
									],
									[
										859511,
										859516
									],
									[
										859822,
										859827
									],
									[
										860177,
										860182
									],
									[
										860390,
										860395
									],
									[
										860418,
										860423
									],
									[
										860446,
										860451
									],
									[
										860478,
										860483
									],
									[
										860624,
										860629
									],
									[
										860641,
										860646
									],
									[
										860735,
										860740
									],
									[
										860902,
										860907
									],
									[
										861010,
										861015
									],
									[
										861187,
										861192
									],
									[
										861219,
										861224
									],
									[
										861397,
										861402
									],
									[
										861530,
										861535
									],
									[
										861679,
										861684
									],
									[
										861879,
										861884
									],
									[
										862144,
										862149
									],
									[
										862446,
										862451
									],
									[
										862649,
										862654
									],
									[
										862918,
										862923
									],
									[
										863265,
										863270
									],
									[
										863576,
										863581
									],
									[
										863931,
										863936
									],
									[
										864144,
										864149
									],
									[
										864172,
										864177
									],
									[
										864200,
										864205
									],
									[
										864232,
										864237
									],
									[
										864378,
										864383
									],
									[
										864395,
										864400
									],
									[
										864489,
										864494
									],
									[
										864645,
										864650
									],
									[
										864753,
										864758
									],
									[
										864930,
										864935
									],
									[
										864962,
										864967
									],
									[
										865087,
										865092
									],
									[
										865195,
										865200
									],
									[
										865372,
										865377
									],
									[
										865404,
										865409
									],
									[
										865745,
										865750
									],
									[
										865843,
										865848
									],
									[
										865864,
										865869
									],
									[
										866179,
										866184
									],
									[
										866426,
										866431
									],
									[
										866437,
										866442
									],
									[
										866480,
										866485
									],
									[
										866515,
										866520
									],
									[
										866837,
										866842
									],
									[
										866870,
										866875
									],
									[
										866901,
										866906
									],
									[
										867310,
										867315
									],
									[
										867529,
										867534
									],
									[
										867787,
										867792
									],
									[
										868040,
										868045
									],
									[
										868178,
										868183
									],
									[
										868458,
										868463
									],
									[
										868585,
										868590
									],
									[
										868847,
										868852
									],
									[
										868982,
										868987
									],
									[
										869235,
										869240
									],
									[
										869511,
										869516
									],
									[
										869744,
										869749
									],
									[
										870069,
										870074
									],
									[
										870511,
										870516
									],
									[
										870618,
										870623
									],
									[
										870725,
										870730
									],
									[
										870832,
										870837
									],
									[
										870939,
										870944
									],
									[
										871051,
										871056
									],
									[
										871174,
										871179
									],
									[
										871276,
										871281
									],
									[
										871379,
										871384
									],
									[
										871495,
										871500
									],
									[
										871603,
										871608
									],
									[
										871711,
										871716
									],
									[
										871825,
										871830
									],
									[
										872047,
										872052
									],
									[
										872151,
										872156
									],
									[
										872263,
										872268
									],
									[
										872367,
										872372
									],
									[
										872469,
										872474
									],
									[
										872598,
										872603
									],
									[
										872710,
										872715
									],
									[
										872821,
										872826
									],
									[
										872922,
										872927
									],
									[
										873025,
										873030
									],
									[
										873126,
										873131
									],
									[
										873254,
										873259
									],
									[
										873358,
										873363
									],
									[
										873468,
										873473
									],
									[
										873603,
										873608
									],
									[
										873939,
										873944
									],
									[
										874394,
										874399
									],
									[
										874499,
										874504
									],
									[
										874608,
										874613
									],
									[
										874718,
										874723
									],
									[
										874840,
										874845
									],
									[
										874957,
										874962
									],
									[
										875068,
										875073
									],
									[
										875314,
										875319
									],
									[
										875423,
										875428
									],
									[
										875532,
										875537
									],
									[
										875641,
										875646
									],
									[
										875750,
										875755
									],
									[
										875859,
										875864
									],
									[
										875968,
										875973
									],
									[
										876077,
										876082
									],
									[
										876186,
										876191
									],
									[
										876295,
										876300
									],
									[
										876404,
										876409
									],
									[
										876514,
										876519
									],
									[
										876624,
										876629
									],
									[
										876734,
										876739
									],
									[
										876844,
										876849
									],
									[
										876954,
										876959
									],
									[
										877160,
										877165
									],
									[
										877269,
										877274
									],
									[
										877378,
										877383
									],
									[
										877487,
										877492
									],
									[
										877596,
										877601
									],
									[
										877705,
										877710
									],
									[
										877814,
										877819
									],
									[
										877923,
										877928
									],
									[
										878032,
										878037
									],
									[
										878141,
										878146
									],
									[
										878250,
										878255
									],
									[
										878360,
										878365
									],
									[
										878470,
										878475
									],
									[
										878580,
										878585
									],
									[
										878690,
										878695
									],
									[
										878800,
										878805
									],
									[
										879138,
										879143
									],
									[
										879612,
										879617
									],
									[
										879868,
										879873
									],
									[
										880322,
										880327
									],
									[
										880880,
										880885
									],
									[
										881109,
										881114
									],
									[
										881342,
										881347
									],
									[
										881667,
										881672
									],
									[
										882109,
										882114
									],
									[
										882216,
										882221
									],
									[
										882323,
										882328
									],
									[
										882430,
										882435
									],
									[
										882537,
										882542
									],
									[
										882649,
										882654
									],
									[
										882772,
										882777
									],
									[
										882874,
										882879
									],
									[
										882977,
										882982
									],
									[
										883093,
										883098
									],
									[
										883201,
										883206
									],
									[
										883309,
										883314
									],
									[
										883423,
										883428
									],
									[
										883545,
										883550
									],
									[
										883651,
										883656
									],
									[
										883859,
										883864
									],
									[
										883963,
										883968
									],
									[
										884075,
										884080
									],
									[
										884179,
										884184
									],
									[
										884281,
										884286
									],
									[
										884410,
										884415
									],
									[
										884522,
										884527
									],
									[
										884633,
										884638
									],
									[
										884734,
										884739
									],
									[
										884837,
										884842
									],
									[
										884938,
										884943
									],
									[
										885066,
										885071
									],
									[
										885170,
										885175
									],
									[
										885280,
										885285
									],
									[
										885393,
										885398
									],
									[
										885501,
										885506
									],
									[
										885609,
										885614
									],
									[
										885717,
										885722
									],
									[
										885819,
										885824
									],
									[
										885923,
										885928
									],
									[
										886026,
										886031
									],
									[
										886153,
										886158
									],
									[
										886489,
										886494
									],
									[
										886944,
										886949
									],
									[
										887049,
										887054
									],
									[
										887158,
										887163
									],
									[
										887268,
										887273
									],
									[
										887390,
										887395
									],
									[
										887507,
										887512
									],
									[
										887618,
										887623
									],
									[
										887864,
										887869
									],
									[
										887973,
										887978
									],
									[
										888082,
										888087
									],
									[
										888191,
										888196
									],
									[
										888300,
										888305
									],
									[
										888409,
										888414
									],
									[
										888518,
										888523
									],
									[
										888627,
										888632
									],
									[
										888736,
										888741
									],
									[
										888845,
										888850
									],
									[
										888954,
										888959
									],
									[
										889064,
										889069
									],
									[
										889174,
										889179
									],
									[
										889284,
										889289
									],
									[
										889394,
										889399
									],
									[
										889504,
										889509
									],
									[
										889710,
										889715
									],
									[
										889819,
										889824
									],
									[
										889928,
										889933
									],
									[
										890037,
										890042
									],
									[
										890146,
										890151
									],
									[
										890255,
										890260
									],
									[
										890364,
										890369
									],
									[
										890473,
										890478
									],
									[
										890582,
										890587
									],
									[
										890691,
										890696
									],
									[
										890800,
										890805
									],
									[
										890910,
										890915
									],
									[
										891020,
										891025
									],
									[
										891130,
										891135
									],
									[
										891240,
										891245
									],
									[
										891350,
										891355
									],
									[
										891688,
										891693
									],
									[
										892162,
										892167
									],
									[
										892418,
										892423
									],
									[
										892872,
										892877
									],
									[
										893430,
										893435
									],
									[
										893659,
										893664
									],
									[
										893892,
										893897
									],
									[
										894217,
										894222
									],
									[
										894659,
										894664
									],
									[
										894766,
										894771
									],
									[
										894873,
										894878
									],
									[
										894980,
										894985
									],
									[
										895087,
										895092
									],
									[
										895199,
										895204
									],
									[
										895322,
										895327
									],
									[
										895424,
										895429
									],
									[
										895527,
										895532
									],
									[
										895749,
										895754
									],
									[
										895853,
										895858
									],
									[
										895965,
										895970
									],
									[
										896069,
										896074
									],
									[
										896171,
										896176
									],
									[
										896300,
										896305
									],
									[
										896412,
										896417
									],
									[
										896668,
										896673
									],
									[
										897123,
										897128
									],
									[
										897228,
										897233
									],
									[
										897337,
										897342
									],
									[
										897447,
										897452
									],
									[
										897569,
										897574
									],
									[
										897686,
										897691
									],
									[
										897797,
										897802
									],
									[
										898043,
										898048
									],
									[
										898152,
										898157
									],
									[
										898261,
										898266
									],
									[
										898370,
										898375
									],
									[
										898479,
										898484
									],
									[
										898588,
										898593
									],
									[
										898697,
										898702
									],
									[
										898806,
										898811
									],
									[
										898915,
										898920
									],
									[
										899024,
										899029
									],
									[
										899133,
										899138
									],
									[
										899243,
										899248
									],
									[
										899353,
										899358
									],
									[
										899463,
										899468
									],
									[
										899573,
										899578
									],
									[
										899683,
										899688
									],
									[
										899889,
										899894
									],
									[
										899998,
										900003
									],
									[
										900107,
										900112
									],
									[
										900216,
										900221
									],
									[
										900325,
										900330
									],
									[
										900434,
										900439
									],
									[
										900543,
										900548
									],
									[
										900652,
										900657
									],
									[
										900761,
										900766
									],
									[
										900870,
										900875
									],
									[
										900979,
										900984
									],
									[
										901089,
										901094
									],
									[
										901199,
										901204
									],
									[
										901309,
										901314
									],
									[
										901419,
										901424
									],
									[
										901529,
										901534
									],
									[
										901867,
										901872
									],
									[
										902341,
										902346
									],
									[
										902597,
										902602
									],
									[
										903051,
										903056
									],
									[
										903609,
										903614
									],
									[
										903838,
										903843
									],
									[
										904071,
										904076
									],
									[
										904396,
										904401
									],
									[
										904838,
										904843
									],
									[
										904945,
										904950
									],
									[
										905052,
										905057
									],
									[
										905159,
										905164
									],
									[
										905266,
										905271
									],
									[
										905378,
										905383
									],
									[
										905501,
										905506
									],
									[
										905603,
										905608
									],
									[
										905706,
										905711
									],
									[
										905828,
										905833
									],
									[
										906050,
										906055
									],
									[
										906154,
										906159
									],
									[
										906266,
										906271
									],
									[
										906370,
										906375
									],
									[
										906472,
										906477
									],
									[
										906601,
										906606
									],
									[
										906713,
										906718
									],
									[
										906824,
										906829
									],
									[
										906925,
										906930
									],
									[
										907028,
										907033
									],
									[
										907129,
										907134
									],
									[
										907385,
										907390
									],
									[
										907840,
										907845
									],
									[
										907945,
										907950
									],
									[
										908054,
										908059
									],
									[
										908164,
										908169
									],
									[
										908286,
										908291
									],
									[
										908403,
										908408
									],
									[
										908514,
										908519
									],
									[
										908760,
										908765
									],
									[
										908869,
										908874
									],
									[
										908978,
										908983
									],
									[
										909087,
										909092
									],
									[
										909196,
										909201
									],
									[
										909305,
										909310
									],
									[
										909414,
										909419
									],
									[
										909523,
										909528
									],
									[
										909632,
										909637
									],
									[
										909741,
										909746
									],
									[
										909850,
										909855
									],
									[
										909960,
										909965
									],
									[
										910070,
										910075
									],
									[
										910180,
										910185
									],
									[
										910290,
										910295
									],
									[
										910400,
										910405
									],
									[
										910606,
										910611
									],
									[
										910715,
										910720
									],
									[
										910824,
										910829
									],
									[
										910933,
										910938
									],
									[
										911042,
										911047
									],
									[
										911151,
										911156
									],
									[
										911260,
										911265
									],
									[
										911369,
										911374
									],
									[
										911478,
										911483
									],
									[
										911587,
										911592
									],
									[
										911696,
										911701
									],
									[
										911806,
										911811
									],
									[
										911916,
										911921
									],
									[
										912026,
										912031
									],
									[
										912136,
										912141
									],
									[
										912246,
										912251
									],
									[
										912584,
										912589
									],
									[
										913058,
										913063
									],
									[
										913314,
										913319
									],
									[
										913768,
										913773
									],
									[
										914326,
										914331
									],
									[
										914555,
										914560
									],
									[
										914788,
										914793
									],
									[
										915113,
										915118
									],
									[
										915555,
										915560
									],
									[
										915662,
										915667
									],
									[
										915769,
										915774
									],
									[
										915876,
										915881
									],
									[
										915983,
										915988
									],
									[
										916095,
										916100
									],
									[
										916218,
										916223
									],
									[
										916320,
										916325
									],
									[
										916423,
										916428
									],
									[
										916545,
										916550
									],
									[
										916659,
										916664
									],
									[
										916765,
										916770
									],
									[
										916981,
										916986
									],
									[
										917085,
										917090
									],
									[
										917197,
										917202
									],
									[
										917301,
										917306
									],
									[
										917403,
										917408
									],
									[
										917532,
										917537
									],
									[
										917644,
										917649
									],
									[
										917755,
										917760
									],
									[
										917856,
										917861
									],
									[
										917959,
										917964
									],
									[
										918060,
										918065
									],
									[
										918180,
										918185
									],
									[
										918284,
										918289
									],
									[
										918388,
										918393
									],
									[
										918490,
										918495
									],
									[
										918593,
										918598
									],
									[
										918696,
										918701
									],
									[
										918838,
										918843
									],
									[
										919174,
										919179
									],
									[
										919629,
										919634
									],
									[
										919734,
										919739
									],
									[
										919843,
										919848
									],
									[
										919953,
										919958
									],
									[
										920075,
										920080
									],
									[
										920192,
										920197
									],
									[
										920303,
										920308
									],
									[
										920549,
										920554
									],
									[
										920658,
										920663
									],
									[
										920767,
										920772
									],
									[
										920876,
										920881
									],
									[
										920985,
										920990
									],
									[
										921094,
										921099
									],
									[
										921203,
										921208
									],
									[
										921312,
										921317
									],
									[
										921421,
										921426
									],
									[
										921530,
										921535
									],
									[
										921639,
										921644
									],
									[
										921749,
										921754
									],
									[
										921859,
										921864
									],
									[
										921969,
										921974
									],
									[
										922079,
										922084
									],
									[
										922189,
										922194
									],
									[
										922395,
										922400
									],
									[
										922504,
										922509
									],
									[
										922613,
										922618
									],
									[
										922722,
										922727
									],
									[
										922831,
										922836
									],
									[
										922940,
										922945
									],
									[
										923049,
										923054
									],
									[
										923158,
										923163
									],
									[
										923267,
										923272
									],
									[
										923376,
										923381
									],
									[
										923485,
										923490
									],
									[
										923595,
										923600
									],
									[
										923705,
										923710
									],
									[
										923815,
										923820
									],
									[
										923925,
										923930
									],
									[
										924035,
										924040
									],
									[
										924373,
										924378
									],
									[
										924847,
										924852
									],
									[
										925103,
										925108
									],
									[
										925557,
										925562
									],
									[
										926115,
										926120
									],
									[
										926344,
										926349
									],
									[
										926577,
										926582
									],
									[
										926902,
										926907
									],
									[
										927344,
										927349
									],
									[
										927451,
										927456
									],
									[
										927558,
										927563
									],
									[
										927665,
										927670
									],
									[
										927772,
										927777
									],
									[
										927884,
										927889
									],
									[
										928004,
										928009
									],
									[
										928119,
										928124
									],
									[
										928221,
										928226
									],
									[
										928324,
										928329
									],
									[
										928446,
										928451
									],
									[
										928560,
										928565
									],
									[
										928666,
										928671
									],
									[
										928789,
										928794
									],
									[
										928897,
										928902
									],
									[
										929005,
										929010
									],
									[
										929205,
										929210
									],
									[
										929309,
										929314
									],
									[
										929421,
										929426
									],
									[
										929525,
										929530
									],
									[
										929627,
										929632
									],
									[
										929756,
										929761
									],
									[
										929868,
										929873
									],
									[
										929979,
										929984
									],
									[
										930080,
										930085
									],
									[
										930183,
										930188
									],
									[
										930284,
										930289
									],
									[
										930404,
										930409
									],
									[
										930508,
										930513
									],
									[
										930612,
										930617
									],
									[
										930714,
										930719
									],
									[
										930817,
										930822
									],
									[
										930920,
										930925
									],
									[
										931061,
										931066
									],
									[
										931170,
										931175
									],
									[
										931279,
										931284
									],
									[
										931389,
										931394
									],
									[
										931725,
										931730
									],
									[
										932180,
										932185
									],
									[
										932285,
										932290
									],
									[
										932394,
										932399
									],
									[
										932504,
										932509
									],
									[
										932626,
										932631
									],
									[
										932743,
										932748
									],
									[
										932854,
										932859
									],
									[
										933100,
										933105
									],
									[
										933209,
										933214
									],
									[
										933318,
										933323
									],
									[
										933427,
										933432
									],
									[
										933536,
										933541
									],
									[
										933645,
										933650
									],
									[
										933754,
										933759
									],
									[
										933863,
										933868
									],
									[
										933972,
										933977
									],
									[
										934081,
										934086
									],
									[
										934190,
										934195
									],
									[
										934300,
										934305
									],
									[
										934410,
										934415
									],
									[
										934520,
										934525
									],
									[
										934630,
										934635
									],
									[
										934740,
										934745
									],
									[
										934946,
										934951
									],
									[
										935055,
										935060
									],
									[
										935164,
										935169
									],
									[
										935273,
										935278
									],
									[
										935382,
										935387
									],
									[
										935491,
										935496
									],
									[
										935600,
										935605
									],
									[
										935709,
										935714
									],
									[
										935818,
										935823
									],
									[
										935927,
										935932
									],
									[
										936036,
										936041
									],
									[
										936146,
										936151
									],
									[
										936256,
										936261
									],
									[
										936366,
										936371
									],
									[
										936476,
										936481
									],
									[
										936586,
										936591
									],
									[
										936924,
										936929
									],
									[
										937398,
										937403
									],
									[
										937654,
										937659
									],
									[
										938108,
										938113
									],
									[
										938666,
										938671
									],
									[
										938895,
										938900
									],
									[
										939128,
										939133
									],
									[
										939453,
										939458
									],
									[
										939895,
										939900
									],
									[
										940002,
										940007
									],
									[
										940109,
										940114
									],
									[
										940216,
										940221
									],
									[
										940323,
										940328
									],
									[
										940435,
										940440
									],
									[
										940558,
										940563
									],
									[
										940660,
										940665
									],
									[
										940763,
										940768
									],
									[
										940985,
										940990
									],
									[
										941089,
										941094
									],
									[
										941201,
										941206
									],
									[
										941305,
										941310
									],
									[
										941407,
										941412
									],
									[
										941536,
										941541
									],
									[
										941648,
										941653
									],
									[
										941770,
										941775
									],
									[
										942026,
										942031
									],
									[
										942481,
										942486
									],
									[
										942586,
										942591
									],
									[
										942695,
										942700
									],
									[
										942805,
										942810
									],
									[
										942927,
										942932
									],
									[
										943044,
										943049
									],
									[
										943155,
										943160
									],
									[
										943401,
										943406
									],
									[
										943510,
										943515
									],
									[
										943619,
										943624
									],
									[
										943728,
										943733
									],
									[
										943837,
										943842
									],
									[
										943946,
										943951
									],
									[
										944055,
										944060
									],
									[
										944164,
										944169
									],
									[
										944273,
										944278
									],
									[
										944382,
										944387
									],
									[
										944491,
										944496
									],
									[
										944601,
										944606
									],
									[
										944711,
										944716
									],
									[
										944821,
										944826
									],
									[
										944931,
										944936
									],
									[
										945041,
										945046
									],
									[
										945247,
										945252
									],
									[
										945356,
										945361
									],
									[
										945465,
										945470
									],
									[
										945574,
										945579
									],
									[
										945683,
										945688
									],
									[
										945792,
										945797
									],
									[
										945901,
										945906
									],
									[
										946010,
										946015
									],
									[
										946119,
										946124
									],
									[
										946228,
										946233
									],
									[
										946337,
										946342
									],
									[
										946447,
										946452
									],
									[
										946557,
										946562
									],
									[
										946667,
										946672
									],
									[
										946777,
										946782
									],
									[
										946887,
										946892
									],
									[
										947225,
										947230
									],
									[
										947699,
										947704
									],
									[
										947955,
										947960
									],
									[
										948409,
										948414
									],
									[
										948874,
										948879
									],
									[
										949431,
										949436
									],
									[
										950001,
										950006
									],
									[
										950543,
										950548
									],
									[
										950772,
										950777
									],
									[
										951005,
										951010
									],
									[
										951330,
										951335
									],
									[
										951772,
										951777
									],
									[
										951879,
										951884
									],
									[
										951986,
										951991
									],
									[
										952093,
										952098
									],
									[
										952200,
										952205
									],
									[
										952312,
										952317
									],
									[
										952435,
										952440
									],
									[
										952537,
										952542
									],
									[
										952640,
										952645
									],
									[
										952862,
										952867
									],
									[
										952966,
										952971
									],
									[
										953078,
										953083
									],
									[
										953182,
										953187
									],
									[
										953284,
										953289
									],
									[
										953413,
										953418
									],
									[
										953525,
										953530
									],
									[
										953636,
										953641
									],
									[
										953737,
										953742
									],
									[
										953840,
										953845
									],
									[
										953941,
										953946
									],
									[
										954055,
										954060
									],
									[
										954311,
										954316
									],
									[
										954766,
										954771
									],
									[
										954871,
										954876
									],
									[
										954980,
										954985
									],
									[
										955090,
										955095
									],
									[
										955212,
										955217
									],
									[
										955329,
										955334
									],
									[
										955440,
										955445
									],
									[
										955686,
										955691
									],
									[
										955795,
										955800
									],
									[
										955904,
										955909
									],
									[
										956013,
										956018
									],
									[
										956122,
										956127
									],
									[
										956231,
										956236
									],
									[
										956340,
										956345
									],
									[
										956449,
										956454
									],
									[
										956558,
										956563
									],
									[
										956667,
										956672
									],
									[
										956776,
										956781
									],
									[
										956886,
										956891
									],
									[
										956996,
										957001
									],
									[
										957106,
										957111
									],
									[
										957216,
										957221
									],
									[
										957326,
										957331
									],
									[
										957532,
										957537
									],
									[
										957641,
										957646
									],
									[
										957750,
										957755
									],
									[
										957859,
										957864
									],
									[
										957968,
										957973
									],
									[
										958077,
										958082
									],
									[
										958186,
										958191
									],
									[
										958295,
										958300
									],
									[
										958404,
										958409
									],
									[
										958513,
										958518
									],
									[
										958622,
										958627
									],
									[
										958732,
										958737
									],
									[
										958842,
										958847
									],
									[
										958952,
										958957
									],
									[
										959062,
										959067
									],
									[
										959172,
										959177
									],
									[
										959510,
										959515
									],
									[
										959984,
										959989
									],
									[
										960240,
										960245
									],
									[
										960694,
										960699
									],
									[
										961159,
										961164
									],
									[
										961716,
										961721
									],
									[
										962286,
										962291
									],
									[
										962828,
										962833
									],
									[
										963057,
										963062
									],
									[
										963290,
										963295
									],
									[
										963615,
										963620
									],
									[
										964057,
										964062
									],
									[
										964164,
										964169
									],
									[
										964271,
										964276
									],
									[
										964378,
										964383
									],
									[
										964485,
										964490
									],
									[
										964597,
										964602
									],
									[
										964717,
										964722
									],
									[
										964832,
										964837
									],
									[
										964934,
										964939
									],
									[
										965037,
										965042
									],
									[
										965259,
										965264
									],
									[
										965363,
										965368
									],
									[
										965475,
										965480
									],
									[
										965579,
										965584
									],
									[
										965681,
										965686
									],
									[
										965790,
										965795
									],
									[
										965911,
										965916
									],
									[
										966023,
										966028
									],
									[
										966145,
										966150
									],
									[
										966401,
										966406
									],
									[
										966856,
										966861
									],
									[
										966961,
										966966
									],
									[
										967070,
										967075
									],
									[
										967180,
										967185
									],
									[
										967302,
										967307
									],
									[
										967419,
										967424
									],
									[
										967530,
										967535
									],
									[
										967776,
										967781
									],
									[
										967885,
										967890
									],
									[
										967994,
										967999
									],
									[
										968103,
										968108
									],
									[
										968212,
										968217
									],
									[
										968321,
										968326
									],
									[
										968430,
										968435
									],
									[
										968539,
										968544
									],
									[
										968648,
										968653
									],
									[
										968757,
										968762
									],
									[
										968866,
										968871
									],
									[
										968976,
										968981
									],
									[
										969086,
										969091
									],
									[
										969196,
										969201
									],
									[
										969306,
										969311
									],
									[
										969416,
										969421
									],
									[
										969622,
										969627
									],
									[
										969731,
										969736
									],
									[
										969840,
										969845
									],
									[
										969949,
										969954
									],
									[
										970058,
										970063
									],
									[
										970167,
										970172
									],
									[
										970276,
										970281
									],
									[
										970385,
										970390
									],
									[
										970494,
										970499
									],
									[
										970603,
										970608
									],
									[
										970712,
										970717
									],
									[
										970822,
										970827
									],
									[
										970932,
										970937
									],
									[
										971042,
										971047
									],
									[
										971152,
										971157
									],
									[
										971262,
										971267
									],
									[
										971600,
										971605
									],
									[
										972074,
										972079
									],
									[
										972330,
										972335
									],
									[
										972784,
										972789
									],
									[
										973249,
										973254
									],
									[
										973806,
										973811
									],
									[
										974376,
										974381
									],
									[
										974958,
										974963
									],
									[
										975398,
										975403
									],
									[
										975627,
										975632
									],
									[
										975860,
										975865
									],
									[
										976185,
										976190
									],
									[
										976627,
										976632
									],
									[
										976734,
										976739
									],
									[
										976841,
										976846
									],
									[
										976948,
										976953
									],
									[
										977055,
										977060
									],
									[
										977167,
										977172
									],
									[
										977287,
										977292
									],
									[
										977402,
										977407
									],
									[
										977504,
										977509
									],
									[
										977607,
										977612
									],
									[
										977729,
										977734
									],
									[
										977951,
										977956
									],
									[
										978055,
										978060
									],
									[
										978167,
										978172
									],
									[
										978271,
										978276
									],
									[
										978373,
										978378
									],
									[
										978482,
										978487
									],
									[
										978603,
										978608
									],
									[
										978715,
										978720
									],
									[
										978826,
										978831
									],
									[
										978927,
										978932
									],
									[
										979030,
										979035
									],
									[
										979131,
										979136
									],
									[
										979245,
										979250
									],
									[
										979501,
										979506
									],
									[
										979956,
										979961
									],
									[
										980061,
										980066
									],
									[
										980170,
										980175
									],
									[
										980280,
										980285
									],
									[
										980402,
										980407
									],
									[
										980519,
										980524
									],
									[
										980630,
										980635
									],
									[
										980876,
										980881
									],
									[
										980985,
										980990
									],
									[
										981094,
										981099
									],
									[
										981203,
										981208
									],
									[
										981312,
										981317
									],
									[
										981421,
										981426
									],
									[
										981530,
										981535
									],
									[
										981639,
										981644
									],
									[
										981748,
										981753
									],
									[
										981857,
										981862
									],
									[
										981966,
										981971
									],
									[
										982076,
										982081
									],
									[
										982186,
										982191
									],
									[
										982296,
										982301
									],
									[
										982406,
										982411
									],
									[
										982516,
										982521
									],
									[
										982722,
										982727
									],
									[
										982831,
										982836
									],
									[
										982940,
										982945
									],
									[
										983049,
										983054
									],
									[
										983158,
										983163
									],
									[
										983267,
										983272
									],
									[
										983376,
										983381
									],
									[
										983485,
										983490
									],
									[
										983594,
										983599
									],
									[
										983703,
										983708
									],
									[
										983812,
										983817
									],
									[
										983922,
										983927
									],
									[
										984032,
										984037
									],
									[
										984142,
										984147
									],
									[
										984252,
										984257
									],
									[
										984362,
										984367
									],
									[
										984700,
										984705
									],
									[
										985174,
										985179
									],
									[
										985430,
										985435
									],
									[
										985884,
										985889
									],
									[
										986349,
										986354
									],
									[
										986906,
										986911
									],
									[
										987476,
										987481
									],
									[
										988058,
										988063
									],
									[
										988498,
										988503
									],
									[
										988727,
										988732
									],
									[
										988960,
										988965
									],
									[
										989285,
										989290
									],
									[
										989727,
										989732
									],
									[
										989834,
										989839
									],
									[
										989941,
										989946
									],
									[
										990048,
										990053
									],
									[
										990155,
										990160
									],
									[
										990267,
										990272
									],
									[
										990387,
										990392
									],
									[
										990502,
										990507
									],
									[
										990604,
										990609
									],
									[
										990707,
										990712
									],
									[
										990829,
										990834
									],
									[
										990943,
										990948
									],
									[
										991049,
										991054
									],
									[
										991155,
										991160
									],
									[
										991265,
										991270
									],
									[
										991481,
										991486
									],
									[
										991585,
										991590
									],
									[
										991697,
										991702
									],
									[
										991801,
										991806
									],
									[
										991903,
										991908
									],
									[
										992012,
										992017
									],
									[
										992133,
										992138
									],
									[
										992245,
										992250
									],
									[
										992356,
										992361
									],
									[
										992457,
										992462
									],
									[
										992560,
										992565
									],
									[
										992661,
										992666
									],
									[
										992775,
										992780
									],
									[
										992887,
										992892
									],
									[
										992991,
										992996
									],
									[
										993095,
										993100
									],
									[
										993197,
										993202
									],
									[
										993300,
										993305
									],
									[
										993403,
										993408
									],
									[
										993545,
										993550
									],
									[
										993881,
										993886
									],
									[
										994336,
										994341
									],
									[
										994441,
										994446
									],
									[
										994550,
										994555
									],
									[
										994660,
										994665
									],
									[
										994782,
										994787
									],
									[
										994899,
										994904
									],
									[
										995010,
										995015
									],
									[
										995256,
										995261
									],
									[
										995365,
										995370
									],
									[
										995474,
										995479
									],
									[
										995583,
										995588
									],
									[
										995692,
										995697
									],
									[
										995801,
										995806
									],
									[
										995910,
										995915
									],
									[
										996019,
										996024
									],
									[
										996128,
										996133
									],
									[
										996237,
										996242
									],
									[
										996346,
										996351
									],
									[
										996456,
										996461
									],
									[
										996566,
										996571
									],
									[
										996676,
										996681
									],
									[
										996786,
										996791
									],
									[
										996896,
										996901
									],
									[
										997102,
										997107
									],
									[
										997211,
										997216
									],
									[
										997320,
										997325
									],
									[
										997429,
										997434
									],
									[
										997538,
										997543
									],
									[
										997647,
										997652
									],
									[
										997756,
										997761
									],
									[
										997865,
										997870
									],
									[
										997974,
										997979
									],
									[
										998083,
										998088
									],
									[
										998192,
										998197
									],
									[
										998302,
										998307
									],
									[
										998412,
										998417
									],
									[
										998522,
										998527
									],
									[
										998632,
										998637
									],
									[
										998742,
										998747
									],
									[
										999080,
										999085
									],
									[
										999554,
										999559
									],
									[
										999810,
										999815
									],
									[
										1000264,
										1000269
									],
									[
										1000729,
										1000734
									],
									[
										1001286,
										1001291
									],
									[
										1001856,
										1001861
									],
									[
										1002438,
										1002443
									],
									[
										1002878,
										1002883
									],
									[
										1003107,
										1003112
									],
									[
										1003340,
										1003345
									],
									[
										1003665,
										1003670
									],
									[
										1004107,
										1004112
									],
									[
										1004214,
										1004219
									],
									[
										1004321,
										1004326
									],
									[
										1004428,
										1004433
									],
									[
										1004535,
										1004540
									],
									[
										1004647,
										1004652
									],
									[
										1004767,
										1004772
									],
									[
										1004882,
										1004887
									],
									[
										1004984,
										1004989
									],
									[
										1005087,
										1005092
									],
									[
										1005209,
										1005214
									],
									[
										1005323,
										1005328
									],
									[
										1005429,
										1005434
									],
									[
										1005535,
										1005540
									],
									[
										1005645,
										1005650
									],
									[
										1005768,
										1005773
									],
									[
										1005876,
										1005881
									],
									[
										1005984,
										1005989
									],
									[
										1006184,
										1006189
									],
									[
										1006288,
										1006293
									],
									[
										1006400,
										1006405
									],
									[
										1006504,
										1006509
									],
									[
										1006606,
										1006611
									],
									[
										1006715,
										1006720
									],
									[
										1006836,
										1006841
									],
									[
										1006948,
										1006953
									],
									[
										1007059,
										1007064
									],
									[
										1007160,
										1007165
									],
									[
										1007263,
										1007268
									],
									[
										1007364,
										1007369
									],
									[
										1007478,
										1007483
									],
									[
										1007590,
										1007595
									],
									[
										1007694,
										1007699
									],
									[
										1007798,
										1007803
									],
									[
										1007900,
										1007905
									],
									[
										1008003,
										1008008
									],
									[
										1008106,
										1008111
									],
									[
										1008247,
										1008252
									],
									[
										1008356,
										1008361
									],
									[
										1008465,
										1008470
									],
									[
										1008575,
										1008580
									],
									[
										1008911,
										1008916
									],
									[
										1009366,
										1009371
									],
									[
										1009471,
										1009476
									],
									[
										1009580,
										1009585
									],
									[
										1009690,
										1009695
									],
									[
										1009812,
										1009817
									],
									[
										1009929,
										1009934
									],
									[
										1010040,
										1010045
									],
									[
										1010286,
										1010291
									],
									[
										1010395,
										1010400
									],
									[
										1010504,
										1010509
									],
									[
										1010613,
										1010618
									],
									[
										1010722,
										1010727
									],
									[
										1010831,
										1010836
									],
									[
										1010940,
										1010945
									],
									[
										1011049,
										1011054
									],
									[
										1011158,
										1011163
									],
									[
										1011267,
										1011272
									],
									[
										1011376,
										1011381
									],
									[
										1011486,
										1011491
									],
									[
										1011596,
										1011601
									],
									[
										1011706,
										1011711
									],
									[
										1011816,
										1011821
									],
									[
										1011926,
										1011931
									],
									[
										1012132,
										1012137
									],
									[
										1012241,
										1012246
									],
									[
										1012350,
										1012355
									],
									[
										1012459,
										1012464
									],
									[
										1012568,
										1012573
									],
									[
										1012677,
										1012682
									],
									[
										1012786,
										1012791
									],
									[
										1012895,
										1012900
									],
									[
										1013004,
										1013009
									],
									[
										1013113,
										1013118
									],
									[
										1013222,
										1013227
									],
									[
										1013332,
										1013337
									],
									[
										1013442,
										1013447
									],
									[
										1013552,
										1013557
									],
									[
										1013662,
										1013667
									],
									[
										1013772,
										1013777
									],
									[
										1014110,
										1014115
									],
									[
										1014584,
										1014589
									],
									[
										1014840,
										1014845
									],
									[
										1015294,
										1015299
									],
									[
										1015759,
										1015764
									],
									[
										1016316,
										1016321
									],
									[
										1016886,
										1016891
									],
									[
										1017468,
										1017473
									],
									[
										1017908,
										1017913
									],
									[
										1018137,
										1018142
									],
									[
										1018477,
										1018482
									],
									[
										1018961,
										1018966
									],
									[
										1019286,
										1019291
									],
									[
										1019728,
										1019733
									],
									[
										1019835,
										1019840
									],
									[
										1019942,
										1019947
									],
									[
										1020049,
										1020054
									],
									[
										1020156,
										1020161
									],
									[
										1020268,
										1020273
									],
									[
										1020388,
										1020393
									],
									[
										1020503,
										1020508
									],
									[
										1020605,
										1020610
									],
									[
										1020708,
										1020713
									],
									[
										1020830,
										1020835
									],
									[
										1021052,
										1021057
									],
									[
										1021156,
										1021161
									],
									[
										1021268,
										1021273
									],
									[
										1021372,
										1021377
									],
									[
										1021474,
										1021479
									],
									[
										1021583,
										1021588
									],
									[
										1021704,
										1021709
									],
									[
										1021816,
										1021821
									],
									[
										1021927,
										1021932
									],
									[
										1022028,
										1022033
									],
									[
										1022131,
										1022136
									],
									[
										1022232,
										1022237
									],
									[
										1022352,
										1022357
									],
									[
										1022456,
										1022461
									],
									[
										1022560,
										1022565
									],
									[
										1022662,
										1022667
									],
									[
										1022765,
										1022770
									],
									[
										1022868,
										1022873
									],
									[
										1022993,
										1022998
									],
									[
										1023111,
										1023116
									],
									[
										1023447,
										1023452
									],
									[
										1023902,
										1023907
									],
									[
										1024007,
										1024012
									],
									[
										1024116,
										1024121
									],
									[
										1024226,
										1024231
									],
									[
										1024348,
										1024353
									],
									[
										1024465,
										1024470
									],
									[
										1024576,
										1024581
									],
									[
										1024784,
										1024789
									],
									[
										1025105,
										1025110
									],
									[
										1025214,
										1025219
									],
									[
										1025323,
										1025328
									],
									[
										1025432,
										1025437
									],
									[
										1025541,
										1025546
									],
									[
										1025650,
										1025655
									],
									[
										1025759,
										1025764
									],
									[
										1025868,
										1025873
									],
									[
										1025977,
										1025982
									],
									[
										1026086,
										1026091
									],
									[
										1026195,
										1026200
									],
									[
										1026305,
										1026310
									],
									[
										1026415,
										1026420
									],
									[
										1026525,
										1026530
									],
									[
										1026635,
										1026640
									],
									[
										1026745,
										1026750
									],
									[
										1026951,
										1026956
									],
									[
										1027060,
										1027065
									],
									[
										1027169,
										1027174
									],
									[
										1027278,
										1027283
									],
									[
										1027387,
										1027392
									],
									[
										1027496,
										1027501
									],
									[
										1027605,
										1027610
									],
									[
										1027714,
										1027719
									],
									[
										1027823,
										1027828
									],
									[
										1027932,
										1027937
									],
									[
										1028041,
										1028046
									],
									[
										1028151,
										1028156
									],
									[
										1028261,
										1028266
									],
									[
										1028371,
										1028376
									],
									[
										1028481,
										1028486
									],
									[
										1028591,
										1028596
									],
									[
										1028929,
										1028934
									],
									[
										1029403,
										1029408
									],
									[
										1029659,
										1029664
									],
									[
										1030113,
										1030118
									],
									[
										1030711,
										1030716
									],
									[
										1031151,
										1031156
									],
									[
										1031460,
										1031465
									],
									[
										1031566,
										1031571
									],
									[
										1031681,
										1031686
									],
									[
										1032199,
										1032204
									],
									[
										1032759,
										1032764
									],
									[
										1033324,
										1033329
									],
									[
										1033572,
										1033577
									],
									[
										1033912,
										1033917
									],
									[
										1034396,
										1034401
									],
									[
										1034721,
										1034726
									],
									[
										1035163,
										1035168
									],
									[
										1035270,
										1035275
									],
									[
										1035377,
										1035382
									],
									[
										1035484,
										1035489
									],
									[
										1035591,
										1035596
									],
									[
										1035703,
										1035708
									],
									[
										1035823,
										1035828
									],
									[
										1035938,
										1035943
									],
									[
										1036040,
										1036045
									],
									[
										1036143,
										1036148
									],
									[
										1036265,
										1036270
									],
									[
										1036487,
										1036492
									],
									[
										1036591,
										1036596
									],
									[
										1036703,
										1036708
									],
									[
										1036807,
										1036812
									],
									[
										1036909,
										1036914
									],
									[
										1037018,
										1037023
									],
									[
										1037139,
										1037144
									],
									[
										1037251,
										1037256
									],
									[
										1037362,
										1037367
									],
									[
										1037463,
										1037468
									],
									[
										1037566,
										1037571
									],
									[
										1037667,
										1037672
									],
									[
										1037787,
										1037792
									],
									[
										1037891,
										1037896
									],
									[
										1037995,
										1038000
									],
									[
										1038097,
										1038102
									],
									[
										1038200,
										1038205
									],
									[
										1038303,
										1038308
									],
									[
										1038428,
										1038433
									],
									[
										1038546,
										1038551
									],
									[
										1038882,
										1038887
									],
									[
										1039337,
										1039342
									],
									[
										1039442,
										1039447
									],
									[
										1039551,
										1039556
									],
									[
										1039661,
										1039666
									],
									[
										1039783,
										1039788
									],
									[
										1039900,
										1039905
									],
									[
										1040011,
										1040016
									],
									[
										1040219,
										1040224
									],
									[
										1040328,
										1040333
									],
									[
										1040649,
										1040654
									],
									[
										1040758,
										1040763
									],
									[
										1040867,
										1040872
									],
									[
										1040976,
										1040981
									],
									[
										1041085,
										1041090
									],
									[
										1041194,
										1041199
									],
									[
										1041303,
										1041308
									],
									[
										1041412,
										1041417
									],
									[
										1041521,
										1041526
									],
									[
										1041630,
										1041635
									],
									[
										1041739,
										1041744
									],
									[
										1041849,
										1041854
									],
									[
										1041959,
										1041964
									],
									[
										1042069,
										1042074
									],
									[
										1042179,
										1042184
									],
									[
										1042289,
										1042294
									],
									[
										1042495,
										1042500
									],
									[
										1042604,
										1042609
									],
									[
										1042713,
										1042718
									],
									[
										1042822,
										1042827
									],
									[
										1042931,
										1042936
									],
									[
										1043040,
										1043045
									],
									[
										1043149,
										1043154
									],
									[
										1043258,
										1043263
									],
									[
										1043367,
										1043372
									],
									[
										1043476,
										1043481
									],
									[
										1043585,
										1043590
									],
									[
										1043695,
										1043700
									],
									[
										1043805,
										1043810
									],
									[
										1043915,
										1043920
									],
									[
										1044025,
										1044030
									],
									[
										1044135,
										1044140
									],
									[
										1044473,
										1044478
									],
									[
										1044947,
										1044952
									],
									[
										1045203,
										1045208
									],
									[
										1045657,
										1045662
									],
									[
										1046255,
										1046260
									],
									[
										1046695,
										1046700
									],
									[
										1046993,
										1046998
									],
									[
										1047387,
										1047392
									],
									[
										1047564,
										1047569
									],
									[
										1047909,
										1047914
									],
									[
										1048284,
										1048289
									],
									[
										1048820,
										1048825
									],
									[
										1049275,
										1049280
									],
									[
										1049381,
										1049386
									],
									[
										1049496,
										1049501
									],
									[
										1050014,
										1050019
									],
									[
										1050574,
										1050579
									],
									[
										1051139,
										1051144
									],
									[
										1051386,
										1051391
									],
									[
										1051414,
										1051419
									],
									[
										1051717,
										1051722
									],
									[
										1052072,
										1052077
									],
									[
										1052588,
										1052593
									],
									[
										1052872,
										1052877
									],
									[
										1053284,
										1053289
									],
									[
										1053396,
										1053401
									],
									[
										1053445,
										1053450
									],
									[
										1053570,
										1053575
									],
									[
										1053788,
										1053793
									],
									[
										1053887,
										1053892
									],
									[
										1053969,
										1053974
									],
									[
										1054148,
										1054153
									],
									[
										1054288,
										1054293
									],
									[
										1054462,
										1054467
									],
									[
										1054676,
										1054681
									],
									[
										1055075,
										1055080
									],
									[
										1055119,
										1055124
									],
									[
										1055222,
										1055227
									],
									[
										1055591,
										1055596
									],
									[
										1055635,
										1055640
									],
									[
										1055738,
										1055743
									],
									[
										1056088,
										1056093
									],
									[
										1056132,
										1056137
									],
									[
										1056235,
										1056240
									],
									[
										1056523,
										1056528
									],
									[
										1056579,
										1056584
									],
									[
										1057025,
										1057030
									],
									[
										1057503,
										1057508
									],
									[
										1057851,
										1057856
									],
									[
										1057908,
										1057913
									],
									[
										1057925,
										1057930
									],
									[
										1058241,
										1058246
									],
									[
										1058558,
										1058563
									],
									[
										1058799,
										1058804
									],
									[
										1059160,
										1059165
									],
									[
										1059508,
										1059513
									],
									[
										1059565,
										1059570
									],
									[
										1059582,
										1059587
									],
									[
										1059898,
										1059903
									],
									[
										1060215,
										1060220
									],
									[
										1060666,
										1060671
									],
									[
										1061027,
										1061032
									],
									[
										1061375,
										1061380
									],
									[
										1061432,
										1061437
									],
									[
										1061449,
										1061454
									],
									[
										1061775,
										1061780
									],
									[
										1062248,
										1062253
									],
									[
										1062699,
										1062704
									],
									[
										1063173,
										1063178
									],
									[
										1063521,
										1063526
									],
									[
										1063578,
										1063583
									],
									[
										1063595,
										1063600
									],
									[
										1063921,
										1063926
									],
									[
										1064394,
										1064399
									],
									[
										1064845,
										1064850
									],
									[
										1065319,
										1065324
									],
									[
										1065667,
										1065672
									],
									[
										1065724,
										1065729
									],
									[
										1065741,
										1065746
									],
									[
										1066067,
										1066072
									],
									[
										1066540,
										1066545
									],
									[
										1066993,
										1066998
									],
									[
										1067467,
										1067472
									],
									[
										1067815,
										1067820
									],
									[
										1067872,
										1067877
									],
									[
										1067889,
										1067894
									],
									[
										1068205,
										1068210
									],
									[
										1068522,
										1068527
									],
									[
										1068975,
										1068980
									],
									[
										1069449,
										1069454
									],
									[
										1069797,
										1069802
									],
									[
										1069854,
										1069859
									],
									[
										1069871,
										1069876
									],
									[
										1070197,
										1070202
									],
									[
										1070670,
										1070675
									],
									[
										1070900,
										1070905
									],
									[
										1070975,
										1070980
									],
									[
										1071145,
										1071150
									],
									[
										1071431,
										1071436
									],
									[
										1071720,
										1071725
									],
									[
										1071885,
										1071890
									],
									[
										1072212,
										1072217
									],
									[
										1072475,
										1072480
									],
									[
										1072686,
										1072691
									],
									[
										1072792,
										1072797
									],
									[
										1072959,
										1072964
									],
									[
										1073068,
										1073073
									],
									[
										1073240,
										1073245
									],
									[
										1073564,
										1073569
									],
									[
										1073837,
										1073842
									],
									[
										1074208,
										1074213
									],
									[
										1074490,
										1074495
									],
									[
										1074817,
										1074822
									],
									[
										1075069,
										1075074
									],
									[
										1075331,
										1075336
									],
									[
										1075645,
										1075650
									],
									[
										1075962,
										1075967
									],
									[
										1076374,
										1076379
									],
									[
										1076898,
										1076903
									],
									[
										1077036,
										1077041
									],
									[
										1077178,
										1077183
									],
									[
										1077321,
										1077326
									],
									[
										1077476,
										1077481
									],
									[
										1077626,
										1077631
									],
									[
										1077770,
										1077775
									],
									[
										1078016,
										1078021
									],
									[
										1078431,
										1078436
									],
									[
										1078738,
										1078743
									],
									[
										1078838,
										1078843
									],
									[
										1078938,
										1078943
									],
									[
										1079038,
										1079043
									],
									[
										1079140,
										1079145
									],
									[
										1079242,
										1079247
									],
									[
										1079340,
										1079345
									],
									[
										1079438,
										1079443
									],
									[
										1079652,
										1079657
									],
									[
										1080068,
										1080073
									],
									[
										1080377,
										1080382
									],
									[
										1080479,
										1080484
									],
									[
										1080581,
										1080586
									],
									[
										1080683,
										1080688
									],
									[
										1080785,
										1080790
									],
									[
										1080887,
										1080892
									],
									[
										1080993,
										1080998
									],
									[
										1081099,
										1081104
									],
									[
										1081201,
										1081206
									],
									[
										1081303,
										1081308
									],
									[
										1081403,
										1081408
									],
									[
										1081503,
										1081508
									],
									[
										1081603,
										1081608
									],
									[
										1081703,
										1081708
									],
									[
										1081918,
										1081923
									],
									[
										1082333,
										1082338
									],
									[
										1082642,
										1082647
									],
									[
										1082744,
										1082749
									],
									[
										1082847,
										1082852
									],
									[
										1082950,
										1082955
									],
									[
										1083053,
										1083058
									],
									[
										1083156,
										1083161
									],
									[
										1083259,
										1083264
									],
									[
										1083362,
										1083367
									],
									[
										1083465,
										1083470
									],
									[
										1083568,
										1083573
									],
									[
										1083670,
										1083675
									],
									[
										1083772,
										1083777
									],
									[
										1083874,
										1083879
									],
									[
										1083976,
										1083981
									],
									[
										1084078,
										1084083
									],
									[
										1084180,
										1084185
									],
									[
										1084286,
										1084291
									],
									[
										1084392,
										1084397
									],
									[
										1084513,
										1084518
									],
									[
										1084571,
										1084576
									],
									[
										1084702,
										1084707
									],
									[
										1084760,
										1084765
									],
									[
										1085006,
										1085011
									],
									[
										1085418,
										1085423
									],
									[
										1085594,
										1085599
									],
									[
										1085999,
										1086004
									],
									[
										1086176,
										1086181
									],
									[
										1086309,
										1086314
									],
									[
										1086399,
										1086404
									],
									[
										1086654,
										1086659
									],
									[
										1086993,
										1086998
									],
									[
										1087263,
										1087268
									],
									[
										1087299,
										1087304
									],
									[
										1087645,
										1087650
									],
									[
										1087703,
										1087708
									],
									[
										1087762,
										1087767
									],
									[
										1087834,
										1087839
									],
									[
										1087901,
										1087906
									],
									[
										1087962,
										1087967
									],
									[
										1088383,
										1088388
									],
									[
										1088803,
										1088808
									],
									[
										1089207,
										1089212
									],
									[
										1089307,
										1089312
									],
									[
										1089668,
										1089673
									],
									[
										1089768,
										1089773
									],
									[
										1090016,
										1090021
									],
									[
										1090116,
										1090121
									],
									[
										1090326,
										1090331
									],
									[
										1090433,
										1090438
									],
									[
										1090615,
										1090620
									],
									[
										1090719,
										1090724
									],
									[
										1090827,
										1090832
									],
									[
										1090935,
										1090940
									],
									[
										1091043,
										1091048
									],
									[
										1091151,
										1091156
									],
									[
										1091387,
										1091392
									],
									[
										1091805,
										1091810
									],
									[
										1092254,
										1092259
									],
									[
										1092356,
										1092361
									],
									[
										1092789,
										1092794
									],
									[
										1092891,
										1092896
									],
									[
										1092993,
										1092998
									],
									[
										1093095,
										1093100
									],
									[
										1093201,
										1093206
									],
									[
										1093307,
										1093312
									],
									[
										1093409,
										1093414
									],
									[
										1093511,
										1093516
									],
									[
										1093873,
										1093878
									],
									[
										1093973,
										1093978
									],
									[
										1094343,
										1094348
									],
									[
										1094445,
										1094450
									],
									[
										1094547,
										1094552
									],
									[
										1094649,
										1094654
									],
									[
										1094751,
										1094756
									],
									[
										1094853,
										1094858
									],
									[
										1094955,
										1094960
									],
									[
										1095057,
										1095062
									],
									[
										1095161,
										1095166
									],
									[
										1095265,
										1095270
									],
									[
										1095369,
										1095374
									],
									[
										1095473,
										1095478
									],
									[
										1095573,
										1095578
									],
									[
										1095673,
										1095678
									],
									[
										1095934,
										1095939
									],
									[
										1096036,
										1096041
									],
									[
										1096138,
										1096143
									],
									[
										1096240,
										1096245
									],
									[
										1096340,
										1096345
									],
									[
										1096440,
										1096445
									],
									[
										1096540,
										1096545
									],
									[
										1096640,
										1096645
									],
									[
										1096815,
										1096820
									],
									[
										1096917,
										1096922
									],
									[
										1097021,
										1097026
									],
									[
										1097125,
										1097130
									],
									[
										1097229,
										1097234
									],
									[
										1097333,
										1097338
									],
									[
										1097437,
										1097442
									],
									[
										1097541,
										1097546
									],
									[
										1097643,
										1097648
									],
									[
										1097745,
										1097750
									],
									[
										1097849,
										1097854
									],
									[
										1097953,
										1097958
									],
									[
										1098057,
										1098062
									],
									[
										1098161,
										1098166
									],
									[
										1098263,
										1098268
									],
									[
										1098365,
										1098370
									],
									[
										1098557,
										1098562
									],
									[
										1098661,
										1098666
									],
									[
										1098868,
										1098873
									],
									[
										1098972,
										1098977
									],
									[
										1099076,
										1099081
									],
									[
										1099180,
										1099185
									],
									[
										1099432,
										1099437
									],
									[
										1099849,
										1099854
									],
									[
										1100251,
										1100256
									],
									[
										1100353,
										1100358
									],
									[
										1100635,
										1100640
									],
									[
										1100739,
										1100744
									],
									[
										1100843,
										1100848
									],
									[
										1100947,
										1100952
									],
									[
										1101051,
										1101056
									],
									[
										1101155,
										1101160
									],
									[
										1101505,
										1101510
									],
									[
										1101608,
										1101613
									],
									[
										1101925,
										1101930
									],
									[
										1102028,
										1102033
									],
									[
										1102131,
										1102136
									],
									[
										1102234,
										1102239
									],
									[
										1102468,
										1102473
									],
									[
										1102570,
										1102575
									],
									[
										1102672,
										1102677
									],
									[
										1102774,
										1102779
									],
									[
										1102956,
										1102961
									],
									[
										1103059,
										1103064
									],
									[
										1103162,
										1103167
									],
									[
										1103265,
										1103270
									],
									[
										1103455,
										1103460
									],
									[
										1103557,
										1103562
									],
									[
										1103661,
										1103666
									],
									[
										1103765,
										1103770
									],
									[
										1103869,
										1103874
									],
									[
										1103973,
										1103978
									],
									[
										1104237,
										1104242
									],
									[
										1104404,
										1104409
									],
									[
										1104462,
										1104467
									],
									[
										1104595,
										1104600
									],
									[
										1104653,
										1104658
									],
									[
										1104861,
										1104866
									],
									[
										1105096,
										1105101
									],
									[
										1105259,
										1105264
									],
									[
										1105523,
										1105528
									],
									[
										1105688,
										1105693
									],
									[
										1105758,
										1105763
									],
									[
										1105931,
										1105936
									],
									[
										1106344,
										1106349
									],
									[
										1106763,
										1106768
									],
									[
										1106907,
										1106912
									],
									[
										1107228,
										1107233
									],
									[
										1107364,
										1107369
									],
									[
										1107628,
										1107633
									],
									[
										1108031,
										1108036
									],
									[
										1108048,
										1108053
									],
									[
										1108166,
										1108171
									],
									[
										1108300,
										1108305
									],
									[
										1108495,
										1108500
									],
									[
										1108590,
										1108595
									],
									[
										1108705,
										1108710
									],
									[
										1108812,
										1108817
									],
									[
										1108999,
										1109004
									],
									[
										1109095,
										1109100
									],
									[
										1109351,
										1109356
									],
									[
										1109427,
										1109432
									],
									[
										1109680,
										1109685
									],
									[
										1109756,
										1109761
									],
									[
										1110043,
										1110048
									],
									[
										1110119,
										1110124
									],
									[
										1110415,
										1110420
									],
									[
										1110631,
										1110636
									],
									[
										1110849,
										1110854
									],
									[
										1111063,
										1111068
									],
									[
										1111299,
										1111304
									],
									[
										1111515,
										1111520
									],
									[
										1111770,
										1111775
									],
									[
										1111950,
										1111955
									],
									[
										1112212,
										1112217
									],
									[
										1112288,
										1112293
									],
									[
										1112532,
										1112537
									],
									[
										1112614,
										1112619
									],
									[
										1112858,
										1112863
									],
									[
										1113242,
										1113247
									],
									[
										1113559,
										1113564
									],
									[
										1113922,
										1113927
									],
									[
										1114253,
										1114258
									],
									[
										1114542,
										1114547
									],
									[
										1114715,
										1114720
									],
									[
										1114806,
										1114811
									],
									[
										1115128,
										1115133
									],
									[
										1115327,
										1115332
									],
									[
										1115688,
										1115693
									],
									[
										1115893,
										1115898
									],
									[
										1116329,
										1116334
									],
									[
										1116600,
										1116605
									],
									[
										1116836,
										1116841
									],
									[
										1117032,
										1117037
									],
									[
										1117176,
										1117181
									],
									[
										1117458,
										1117463
									],
									[
										1117711,
										1117716
									],
									[
										1117967,
										1117972
									],
									[
										1118011,
										1118016
									],
									[
										1118167,
										1118172
									],
									[
										1118444,
										1118449
									],
									[
										1118695,
										1118700
									],
									[
										1119014,
										1119019
									],
									[
										1119309,
										1119314
									],
									[
										1119730,
										1119735
									],
									[
										1120014,
										1120019
									],
									[
										1120058,
										1120063
									],
									[
										1120286,
										1120291
									],
									[
										1120417,
										1120422
									],
									[
										1120503,
										1120508
									],
									[
										1120603,
										1120608
									],
									[
										1120844,
										1120849
									],
									[
										1121125,
										1121130
									],
									[
										1121280,
										1121285
									],
									[
										1121539,
										1121544
									],
									[
										1121755,
										1121760
									],
									[
										1121990,
										1121995
									],
									[
										1122233,
										1122238
									],
									[
										1122462,
										1122467
									],
									[
										1122685,
										1122690
									],
									[
										1122901,
										1122906
									],
									[
										1123116,
										1123121
									],
									[
										1123305,
										1123310
									],
									[
										1123440,
										1123445
									],
									[
										1123691,
										1123696
									],
									[
										1123903,
										1123908
									],
									[
										1124122,
										1124127
									],
									[
										1124347,
										1124352
									],
									[
										1124571,
										1124576
									],
									[
										1124800,
										1124805
									],
									[
										1125025,
										1125030
									],
									[
										1125246,
										1125251
									],
									[
										1125472,
										1125477
									],
									[
										1125701,
										1125706
									],
									[
										1126032,
										1126037
									],
									[
										1126217,
										1126222
									],
									[
										1126402,
										1126407
									],
									[
										1126587,
										1126592
									],
									[
										1126772,
										1126777
									],
									[
										1126957,
										1126962
									],
									[
										1127296,
										1127301
									],
									[
										1127477,
										1127482
									],
									[
										1127712,
										1127717
									],
									[
										1127879,
										1127884
									],
									[
										1128109,
										1128114
									],
									[
										1128245,
										1128250
									],
									[
										1128500,
										1128505
									],
									[
										1128664,
										1128669
									],
									[
										1128889,
										1128894
									],
									[
										1129113,
										1129118
									],
									[
										1129329,
										1129334
									],
									[
										1129539,
										1129544
									],
									[
										1129751,
										1129756
									],
									[
										1129959,
										1129964
									],
									[
										1130163,
										1130168
									],
									[
										1130372,
										1130377
									],
									[
										1130672,
										1130677
									],
									[
										1130867,
										1130872
									],
									[
										1131061,
										1131066
									],
									[
										1131256,
										1131261
									],
									[
										1131450,
										1131455
									],
									[
										1131645,
										1131650
									],
									[
										1131839,
										1131844
									],
									[
										1132034,
										1132039
									],
									[
										1132228,
										1132233
									],
									[
										1132423,
										1132428
									],
									[
										1132617,
										1132622
									],
									[
										1132812,
										1132817
									],
									[
										1132954,
										1132959
									],
									[
										1133171,
										1133176
									],
									[
										1133372,
										1133377
									],
									[
										1133572,
										1133577
									],
									[
										1133773,
										1133778
									],
									[
										1133899,
										1133904
									],
									[
										1134085,
										1134090
									],
									[
										1134161,
										1134166
									],
									[
										1134306,
										1134311
									],
									[
										1134382,
										1134387
									],
									[
										1134563,
										1134568
									],
									[
										1134639,
										1134644
									],
									[
										1134820,
										1134825
									],
									[
										1134896,
										1134901
									],
									[
										1135073,
										1135078
									],
									[
										1135152,
										1135157
									],
									[
										1135336,
										1135341
									],
									[
										1135414,
										1135419
									],
									[
										1135605,
										1135610
									],
									[
										1135685,
										1135690
									],
									[
										1135868,
										1135873
									],
									[
										1135944,
										1135949
									],
									[
										1136087,
										1136092
									],
									[
										1136252,
										1136257
									],
									[
										1136410,
										1136415
									],
									[
										1136568,
										1136573
									],
									[
										1136759,
										1136764
									],
									[
										1136943,
										1136948
									],
									[
										1137143,
										1137148
									],
									[
										1137378,
										1137383
									],
									[
										1137613,
										1137618
									],
									[
										1137848,
										1137853
									],
									[
										1138042,
										1138047
									],
									[
										1138299,
										1138304
									],
									[
										1138520,
										1138525
									],
									[
										1138795,
										1138800
									],
									[
										1139090,
										1139095
									],
									[
										1139259,
										1139264
									],
									[
										1139387,
										1139392
									],
									[
										1139567,
										1139572
									],
									[
										1139783,
										1139788
									],
									[
										1139962,
										1139967
									],
									[
										1140138,
										1140143
									],
									[
										1140350,
										1140355
									],
									[
										1140478,
										1140483
									],
									[
										1140695,
										1140700
									],
									[
										1140911,
										1140916
									],
									[
										1141097,
										1141102
									],
									[
										1141270,
										1141275
									],
									[
										1141482,
										1141487
									],
									[
										1141610,
										1141615
									],
									[
										1141820,
										1141825
									],
									[
										1142036,
										1142041
									],
									[
										1142222,
										1142227
									],
									[
										1142398,
										1142403
									],
									[
										1142610,
										1142615
									],
									[
										1142738,
										1142743
									],
									[
										1142955,
										1142960
									],
									[
										1143170,
										1143175
									],
									[
										1143355,
										1143360
									],
									[
										1143537,
										1143542
									],
									[
										1143766,
										1143771
									],
									[
										1143966,
										1143971
									],
									[
										1144147,
										1144152
									],
									[
										1144285,
										1144290
									],
									[
										1144457,
										1144462
									],
									[
										1144631,
										1144636
									],
									[
										1144805,
										1144810
									],
									[
										1144979,
										1144984
									],
									[
										1145173,
										1145178
									],
									[
										1145349,
										1145354
									],
									[
										1145529,
										1145534
									],
									[
										1145607,
										1145612
									],
									[
										1145989,
										1145994
									],
									[
										1146278,
										1146283
									],
									[
										1146500,
										1146505
									],
									[
										1146856,
										1146861
									],
									[
										1147136,
										1147141
									],
									[
										1147276,
										1147281
									],
									[
										1147471,
										1147476
									],
									[
										1147559,
										1147564
									],
									[
										1147721,
										1147726
									],
									[
										1147801,
										1147806
									],
									[
										1148049,
										1148054
									],
									[
										1148197,
										1148202
									],
									[
										1148381,
										1148386
									],
									[
										1148555,
										1148560
									],
									[
										1148752,
										1148757
									],
									[
										1148989,
										1148994
									],
									[
										1149093,
										1149098
									],
									[
										1149327,
										1149332
									],
									[
										1149570,
										1149575
									],
									[
										1149946,
										1149951
									],
									[
										1150318,
										1150323
									],
									[
										1150694,
										1150699
									],
									[
										1151070,
										1151075
									],
									[
										1151232,
										1151237
									],
									[
										1151391,
										1151396
									],
									[
										1151628,
										1151633
									],
									[
										1151954,
										1151959
									],
									[
										1152309,
										1152314
									],
									[
										1152567,
										1152572
									],
									[
										1152719,
										1152724
									],
									[
										1152929,
										1152934
									],
									[
										1153190,
										1153195
									],
									[
										1153505,
										1153510
									],
									[
										1153860,
										1153865
									],
									[
										1154107,
										1154112
									],
									[
										1154259,
										1154264
									],
									[
										1154408,
										1154413
									],
									[
										1154560,
										1154565
									],
									[
										1154823,
										1154828
									],
									[
										1155142,
										1155147
									],
									[
										1155727,
										1155750
									],
									[
										1156179,
										1156202
									],
									[
										1156609,
										1156632
									],
									[
										1157041,
										1157064
									],
									[
										1157110,
										1157133
									],
									[
										1157179,
										1157202
									],
									[
										1157592,
										1157615
									],
									[
										1157661,
										1157684
									],
									[
										1157730,
										1157753
									],
									[
										1158143,
										1158166
									],
									[
										1158212,
										1158235
									],
									[
										1158281,
										1158304
									],
									[
										1158679,
										1158702
									],
									[
										1159145,
										1159168
									],
									[
										1159214,
										1159237
									],
									[
										1159283,
										1159306
									],
									[
										1159696,
										1159719
									],
									[
										1159765,
										1159788
									],
									[
										1159834,
										1159857
									],
									[
										1160177,
										1160200
									],
									[
										1160350,
										1160373
									],
									[
										1160394,
										1160417
									],
									[
										1160629,
										1160652
									],
									[
										1160836,
										1160859
									],
									[
										1161050,
										1161073
									],
									[
										1161219,
										1161242
									],
									[
										1161262,
										1161285
									],
									[
										1161504,
										1161527
									],
									[
										1161732,
										1161755
									],
									[
										1161901,
										1161924
									],
									[
										1161944,
										1161967
									],
									[
										1162175,
										1162198
									],
									[
										1162583,
										1162606
									],
									[
										1162723,
										1162746
									],
									[
										1163201,
										1163224
									],
									[
										1163653,
										1163676
									],
									[
										1164083,
										1164106
									],
									[
										1164515,
										1164538
									],
									[
										1164584,
										1164607
									],
									[
										1164653,
										1164676
									],
									[
										1165066,
										1165089
									],
									[
										1165135,
										1165158
									],
									[
										1165204,
										1165227
									],
									[
										1165617,
										1165640
									],
									[
										1165686,
										1165709
									],
									[
										1165755,
										1165778
									],
									[
										1166153,
										1166176
									],
									[
										1166619,
										1166642
									],
									[
										1166688,
										1166711
									],
									[
										1166757,
										1166780
									],
									[
										1167170,
										1167193
									],
									[
										1167239,
										1167262
									],
									[
										1167308,
										1167331
									],
									[
										1167651,
										1167674
									],
									[
										1167824,
										1167847
									],
									[
										1167868,
										1167891
									],
									[
										1168103,
										1168126
									],
									[
										1168310,
										1168333
									],
									[
										1168524,
										1168547
									],
									[
										1168693,
										1168716
									],
									[
										1168736,
										1168759
									],
									[
										1168978,
										1169001
									],
									[
										1169206,
										1169229
									],
									[
										1169375,
										1169398
									],
									[
										1169418,
										1169441
									],
									[
										1169649,
										1169672
									],
									[
										1170057,
										1170080
									],
									[
										1170197,
										1170220
									],
									[
										1170615,
										1170623
									],
									[
										1171011,
										1171019
									],
									[
										1171274,
										1171282
									],
									[
										1171503,
										1171511
									],
									[
										1171913,
										1171921
									],
									[
										1172121,
										1172129
									],
									[
										1172334,
										1172342
									],
									[
										1172721,
										1172729
									],
									[
										1172847,
										1172855
									],
									[
										1173219,
										1173230
									],
									[
										1173486,
										1173497
									],
									[
										1173608,
										1173619
									],
									[
										1173744,
										1173755
									],
									[
										1173944,
										1173955
									],
									[
										1174129,
										1174140
									],
									[
										1174465,
										1174476
									],
									[
										1174735,
										1174746
									],
									[
										1174868,
										1174879
									],
									[
										1175311,
										1175331
									],
									[
										1175715,
										1175735
									],
									[
										1175953,
										1175973
									],
									[
										1176061,
										1176081
									],
									[
										1176225,
										1176245
									],
									[
										1176400,
										1176420
									],
									[
										1176551,
										1176571
									],
									[
										1176900,
										1176920
									],
									[
										1177183,
										1177203
									],
									[
										1177325,
										1177345
									],
									[
										1177743,
										1177760
									],
									[
										1178157,
										1178174
									],
									[
										1178437,
										1178454
									],
									[
										1178700,
										1178717
									],
									[
										1178953,
										1178970
									],
									[
										1179212,
										1179229
									],
									[
										1179632,
										1179649
									],
									[
										1179771,
										1179788
									],
									[
										1180177,
										1180197
									],
									[
										1180463,
										1180483
									],
									[
										1180863,
										1180883
									],
									[
										1181341,
										1181361
									],
									[
										1181401,
										1181421
									],
									[
										1181749,
										1181769
									],
									[
										1182227,
										1182247
									],
									[
										1182287,
										1182307
									],
									[
										1182635,
										1182655
									],
									[
										1183113,
										1183133
									],
									[
										1183173,
										1183193
									],
									[
										1183521,
										1183541
									],
									[
										1183999,
										1184019
									],
									[
										1184059,
										1184079
									],
									[
										1184301,
										1184321
									],
									[
										1184648,
										1184668
									],
									[
										1184932,
										1184952
									],
									[
										1184992,
										1185012
									],
									[
										1185089,
										1185109
									],
									[
										1185149,
										1185169
									],
									[
										1185331,
										1185351
									],
									[
										1185390,
										1185410
									],
									[
										1185555,
										1185575
									],
									[
										1185764,
										1185784
									],
									[
										1185824,
										1185844
									],
									[
										1185921,
										1185941
									],
									[
										1185981,
										1186001
									],
									[
										1186161,
										1186181
									],
									[
										1186221,
										1186241
									],
									[
										1186318,
										1186338
									],
									[
										1186378,
										1186398
									],
									[
										1186549,
										1186569
									],
									[
										1186608,
										1186628
									],
									[
										1186825,
										1186845
									],
									[
										1187035,
										1187055
									],
									[
										1187094,
										1187114
									],
									[
										1187259,
										1187279
									],
									[
										1187489,
										1187509
									],
									[
										1188023,
										1188043
									],
									[
										1188309,
										1188329
									],
									[
										1188709,
										1188729
									],
									[
										1189187,
										1189207
									],
									[
										1189247,
										1189267
									],
									[
										1189595,
										1189615
									],
									[
										1190073,
										1190093
									],
									[
										1190133,
										1190153
									],
									[
										1190481,
										1190501
									],
									[
										1190959,
										1190979
									],
									[
										1191019,
										1191039
									],
									[
										1191367,
										1191387
									],
									[
										1191845,
										1191865
									],
									[
										1191905,
										1191925
									],
									[
										1192147,
										1192167
									],
									[
										1192494,
										1192514
									],
									[
										1192778,
										1192798
									],
									[
										1192838,
										1192858
									],
									[
										1192935,
										1192955
									],
									[
										1192995,
										1193015
									],
									[
										1193177,
										1193197
									],
									[
										1193236,
										1193256
									],
									[
										1193401,
										1193421
									],
									[
										1193610,
										1193630
									],
									[
										1193670,
										1193690
									],
									[
										1193767,
										1193787
									],
									[
										1193827,
										1193847
									],
									[
										1194007,
										1194027
									],
									[
										1194067,
										1194087
									],
									[
										1194164,
										1194184
									],
									[
										1194224,
										1194244
									],
									[
										1194395,
										1194415
									],
									[
										1194454,
										1194474
									],
									[
										1194671,
										1194691
									],
									[
										1194881,
										1194901
									],
									[
										1194940,
										1194960
									],
									[
										1195105,
										1195125
									],
									[
										1195335,
										1195355
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								1187766,
								1187766
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 31,
							"result_base_dir": "",
							"result_file_regex": "^([A-Za-z\\\\/<].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 349866.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "Src/stm32f1xx_it.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4083,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 437.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "Src/usbd_desc.c",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 9210,
						"regions":
						{
						},
						"selection":
						[
							[
								1651,
								1651
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 486.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "Src/stm32f1xx_hal_msp.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3995,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 645.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "Drivers/CMSIS/Device/ST/STM32F1xx/Source/Templates/gcc/startup_stm32f103xb.s",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11156,
						"regions":
						{
						},
						"selection":
						[
							[
								9859,
								9859
							]
						],
						"settings":
						{
							"syntax": "Packages/R/R.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5507.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "Src/startup_stm32f10x_md.s",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9909,
						"regions":
						{
						},
						"selection":
						[
							[
								5004,
								5004
							]
						],
						"settings":
						{
							"syntax": "Packages/R/R.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 5509.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 80504,
						"regions":
						{
						},
						"selection":
						[
							[
								59850,
								59850
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 23222.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103x6.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 440378,
						"regions":
						{
						},
						"selection":
						[
							[
								420758,
								420758
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 96430.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_cortex.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 21322,
						"regions":
						{
						},
						"selection":
						[
							[
								12090,
								12099
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3762.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 19312,
						"regions":
						{
						},
						"selection":
						[
							[
								7784,
								7795
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2625.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_tim.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 162453,
						"regions":
						{
						},
						"selection":
						[
							[
								10236,
								10253
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3587.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 292.0
	},
	"output.find_results":
	{
		"height": 118.0
	},
	"pinned_build_system": "",
	"project": "stm32_PPM_F103.sublime-project",
	"replace":
	{
		"height": 62.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"versionretri",
				"src\\server\\helpers\\VersionDataRetriever.js"
			],
			[
				"exporthel",
				"src\\server\\helpers\\ExportHelper.js"
			],
			[
				"fieldtypes",
				"src\\sd\\constants\\FieldTypes.js"
			],
			[
				"typtt",
				"src\\utils\\TypeToNameConverter.js"
			],
			[
				"exporthl",
				"src\\server\\helpers\\ExportHelper.js"
			],
			[
				"typesvers",
				"src\\server\\graphql\\types\\version.js"
			],
			[
				"screen-sc",
				"src\\server\\schemas\\screen-schema.js"
			],
			[
				"modelscre",
				"src\\server\\models\\screen.js"
			],
			[
				"modelvers",
				"src\\server\\models\\version.js"
			],
			[
				"dataprovider",
				"config\\dataProviders\\igo.js"
			],
			[
				"expor",
				"src\\server\\helpers\\ExportHelper.js"
			],
			[
				"screenclass",
				"src\\utils\\ScreenClass.js"
			],
			[
				"gqlclient",
				"src\\utils\\GQLClient.js"
			],
			[
				"queriesconfig",
				"src\\sd\\constants\\QueriesConfig\\Compound\\ListValidationExpressionList.js"
			],
			[
				"query",
				"src\\server\\graphql\\query\\generic.js"
			],
			[
				"versioret",
				"src\\server\\helpers\\VersionDataRetriever.js"
			],
			[
				"export",
				"src\\server\\controllers\\export.js"
			],
			[
				"edittemp",
				"src\\server\\graphql\\query\\templateEditor\\templateEditor--servertest.js"
			],
			[
				"releasecont",
				"src\\sd\\components\\layout\\product\\ReleaseContainer.react.js"
			],
			[
				"exporthelp",
				"src\\server\\helpers\\ExportHelper.js"
			],
			[
				"p",
				"package.json"
			],
			[
				"version.js",
				"src\\server\\controllers\\version.js"
			],
			[
				"productactio",
				"src\\sd\\actions\\ProductActionCreators.js"
			],
			[
				"rulestest",
				"src\\server\\rulesHelper\\_tests_\\RulesConnectionParser--servertest.js"
			],
			[
				"queries",
				"src\\sd\\constants\\QueriesConfig\\Compound\\ControlPanelData.js"
			],
			[
				"conrule",
				"src\\server\\controllers\\rule.js"
			],
			[
				"api",
				"src\\server\\routes\\api.js"
			],
			[
				"runtimestore",
				"src\\runtime\\stores\\RuntimeStore\\RuntimeStore.js"
			],
			[
				"templatehel",
				"src\\server\\helpers\\TemplateCommonHelper.js"
			],
			[
				"elemlists",
				"src\\sd\\constants\\QueriesConfig\\Elementary\\Lists.js"
			],
			[
				"gql",
				"src\\server\\graphql\\customTypeBuilder\\utils\\findQueryFunctions.js"
			],
			[
				"quer",
				"src\\sd\\constants\\QueriesConfig\\Compound\\index.js"
			],
			[
				"screencla",
				"src\\utils\\ScreenClass.js"
			],
			[
				"rulejs",
				"src\\server\\controllers\\rule.js"
			],
			[
				"rulesf",
				"src\\server\\rulesHelper\\RulesFindHelpers.js"
			],
			[
				"consttype",
				"src\\sd\\constants\\FieldTypes.js"
			],
			[
				"pac",
				"package.json"
			],
			[
				"screendata",
				"src\\runtime\\stores\\__tests__\\RuntimeStore_data.js"
			],
			[
				"graph",
				"src\\server\\graphql\\schema.js"
			],
			[
				"graphql",
				"src\\server\\graphql\\genericType.js"
			],
			[
				"page",
				"src\\sd\\stores\\PageStore.js"
			],
			[
				"logger",
				"logger\\index.js"
			],
			[
				"version",
				"src\\server\\controllers\\version.js"
			],
			[
				"productstore",
				"src\\sd\\stores\\ProductStore.js"
			],
			[
				"contextmen",
				"src\\controls\\ContextMenuButton.react.js"
			],
			[
				"collapsibleitem",
				"src\\controls\\Collapsible\\CollapsibleItem.react.js"
			],
			[
				"collapc",
				"src\\controls\\Collapsible\\Collapsible.react.js"
			],
			[
				"package",
				"package.json"
			],
			[
				"screenstore",
				"src\\sd\\stores\\ScreenStore.js"
			],
			[
				"fieldnames",
				"src\\sd\\components\\layout\\designer\\engine\\shared\\components\\FieldNames.react.js"
			],
			[
				"fieldishid",
				"src\\sd\\components\\layout\\designer\\engine\\shared\\expressions\\field_is_hidden.react.js"
			],
			[
				"fieldishi",
				"src\\runtime\\engine\\shared\\expressionComponents\\field_is_hidden.js"
			],
			[
				"eventedi",
				"src\\sd\\constants\\EventConstants\\EventsForField.js"
			],
			[
				"ruleedi",
				"src\\sd\\components\\layout\\designer\\engine\\rules\\RuleEditor.react.js"
			],
			[
				"",
				"src\\controls\\NumberControl.react.js"
			],
			[
				"number",
				"src\\controls\\NumberControl.react.js"
			],
			[
				"actionexpre",
				"src\\sd\\components\\layout\\designer\\engine\\shared\\utils\\ActionExpressionBase.react.js"
			],
			[
				"requiredbase",
				"src\\sd\\components\\layout\\designer\\engine\\rules\\actions\\field_required_base.react.js"
			],
			[
				"set_required",
				"src\\runtime\\engine\\rules\\actionComponents\\set_required.js"
			],
			[
				".css",
				"src\\styles\\text.scss"
			],
			[
				"ruleeditor",
				"src\\sd\\components\\layout\\designer\\engine\\rules\\RuleEditor.react.js"
			],
			[
				"templateitem",
				"src\\sd\\components\\layout\\admin\\templates\\TemplateItem.react.js"
			],
			[
				"template",
				"src\\sd\\components\\layout\\admin\\templates\\TemplatesContainer.react.js"
			],
			[
				"rulehelp",
				"src\\server\\rulesHelper\\RuleWalkerHelper.js"
			],
			[
				"deletetemp",
				"src\\server\\helpers\\DeleteTemplateHelper.js"
			],
			[
				"mutations",
				"src\\server\\graphql\\mutations.js"
			],
			[
				"templatescon",
				"src\\sd\\components\\layout\\admin\\templates\\TemplatesContainer.react.js"
			],
			[
				"ruleactionct",
				"src\\runtime\\actions\\RuleActionCreators.js"
			],
			[
				"condition",
				"src\\runtime\\engine\\rules\\RuleConditionals.js"
			],
			[
				"templaterule",
				"src\\server\\rulesHelper\\RuleParser\\TemplateRuleParser.js"
			],
			[
				"templatehelper",
				"src\\server\\helpers\\TemplateFromGroupHelper.js"
			],
			[
				"message",
				"src\\controls\\MessageBox.react.js"
			],
			[
				"packa",
				"package.json"
			],
			[
				"templatetes",
				"src\\server\\__tests__\\template--servertest.js"
			],
			[
				"messagebox",
				"src\\controls\\MessageBox.react.js"
			],
			[
				"modeltemplate",
				"src\\server\\models\\template.js"
			],
			[
				"mutat",
				"src\\server\\graphql\\mutations.js"
			],
			[
				"mutationtemp",
				"src\\sd\\constants\\QueriesConfig\\Mutation\\Templates.js"
			],
			[
				"rulesdeco",
				"src\\runtime\\stores\\RuntimeStore\\rulesDecorator.js"
			],
			[
				"runtimestor",
				"src\\runtime\\stores\\RuntimeStore\\RuntimeStore.js"
			],
			[
				"actiontempla",
				"src\\sd\\actions\\TemplateActionCreators.js"
			],
			[
				"templatesonc",
				"src\\sd\\components\\layout\\admin\\templates\\TemplatesContainer.react.js"
			],
			[
				"managetemp",
				"src\\sd\\pages\\admin\\ManageTemplates.react.js"
			],
			[
				"express",
				"src\\server\\middleware\\express.js"
			],
			[
				"request",
				"src\\utils\\requestGQL.js"
			],
			[
				"mutatio",
				"src\\server\\graphql\\mutations.js"
			],
			[
				"modelsevent",
				"src\\server\\models\\event.js"
			],
			[
				"templatehelp",
				"src\\server\\helpers\\GroupFromTemplateHelper.js"
			],
			[
				"modelrule",
				"src\\server\\models\\rule.js"
			],
			[
				"avatarpanelite",
				"src\\sd\\components\\layout\\avatar\\AvatarPanelItem.react.js"
			],
			[
				"express.js",
				"src\\server\\middleware\\express.js"
			],
			[
				"api.js",
				"src\\server\\routes\\api.js"
			],
			[
				"requestql",
				"src\\utils\\requestGQL.js"
			],
			[
				"templateaction",
				"src\\sd\\actions\\TemplateActionCreators.js"
			],
			[
				"editorgroup",
				"src\\sd\\components\\layout\\designer\\EditorItems\\EditorGroupItem.react.js"
			],
			[
				"baseedir",
				"src\\sd\\components\\layout\\designer\\EditorItems\\BaseEditorItem.react.js"
			],
			[
				"--serverest",
				"src\\server\\rulesHelper\\_tests_\\ServiceParser--servertest.js"
			],
			[
				"middlewa",
				"node_modules\\webpack-dev-middleware\\middleware.js"
			],
			[
				"templatetest",
				"src\\server\\__tests__\\template--servertest.js"
			],
			[
				"templatest",
				"src\\sd\\components\\utils\\__tests__\\TemplateEngine-test.js"
			],
			[
				"runtimeapp",
				"src\\runtime\\components\\main\\RuntimeApp.react.js"
			],
			[
				"dictionarystore",
				"src\\sd\\stores\\DictionaryStore.js"
			],
			[
				"loggindex",
				"logger\\index.js"
			],
			[
				"templateactio",
				"src\\sd\\actions\\TemplateActionCreators.js"
			],
			[
				"messageboxtype",
				"src\\sd\\constants\\MessageBoxType.js"
			],
			[
				"baseitem",
				"src\\sd\\components\\layout\\designer\\EditorItems\\BaseEditorItem.react.js"
			],
			[
				"contextmenubu",
				"src\\controls\\ContextMenuButton.react.js"
			],
			[
				"pack",
				"package.json"
			],
			[
				"includeex",
				"src\\sd\\components\\layout\\designer\\engine\\shared\\utils\\IncludeExcludeActionBase.react.js"
			],
			[
				"include_valu",
				"src\\sd\\components\\layout\\designer\\engine\\rules\\actions\\include_values.react.js"
			],
			[
				"include_values",
				"src\\runtime\\engine\\rules\\actionComponents\\include_values.js"
			],
			[
				"colvisba",
				"src\\sd\\components\\layout\\designer\\engine\\rules\\actions\\column_visibility_base.react.js"
			],
			[
				"hide_co",
				"src\\sd\\components\\layout\\designer\\engine\\rules\\actions\\hide_column.react.js"
			],
			[
				"expressionargu",
				"src\\sd\\components\\layout\\designer\\engine\\shared\\utils\\ExpressionArguments.js"
			],
			[
				"numberbe",
				"src\\sd\\components\\layout\\designer\\engine\\shared\\expressions\\arguments\\field-compare-value\\number_between.react.js"
			],
			[
				"numberbet",
				"src\\sd\\components\\layout\\designer\\engine\\shared\\expressions\\arguments\\field-compare-value\\number_between.react.js"
			],
			[
				"fieldcompare",
				"src\\sd\\components\\layout\\designer\\engine\\shared\\expressions\\field_compare_field.react.js"
			],
			[
				"actionsdropdown",
				"src\\sd\\components\\layout\\designer\\engine\\shared\\components\\ActionsDropdown.react.js"
			],
			[
				"actionsdrop",
				"src\\sd\\components\\layout\\designer\\engine\\shared\\components\\ActionsDropdown.react.js"
			],
			[
				"rulecompo",
				"src\\sd\\components\\layout\\designer\\engine\\shared\\utils\\RuleComponentBase.react.js"
			],
			[
				"conditionope",
				"src\\sd\\components\\layout\\designer\\engine\\shared\\components\\ConditionOperator.react.js"
			],
			[
				"rulecondito",
				"src\\sd\\components\\layout\\designer\\engine\\rules\\RuleCondition.react.js"
			],
			[
				"sumreact",
				"src\\sd\\components\\layout\\designer\\engine\\rules\\actions\\calculate_sum.react.js"
			],
			[
				"calculatesum",
				"src\\runtime\\engine\\rules\\actionComponents\\calculate_sum.js"
			],
			[
				"supplier",
				"src\\sd\\pages\\SuppliersView.react.js"
			],
			[
				"templateg",
				"src\\server\\helpers\\TemplateFromGroupHelper.js"
			],
			[
				"extdatapr",
				"src\\runtime\\utils\\externalDataProcessor.js"
			],
			[
				"servictyp",
				"src\\sd\\constants\\EventConstants\\ServiceTypes.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 339.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
